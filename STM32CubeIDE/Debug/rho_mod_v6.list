
rho_mod_v6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae94  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be8  0800b078  0800b078  0001b078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc60  0800bc60  00022010  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc60  0800bc60  0001bc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc68  0800bc68  00022010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc68  0800bc68  0001bc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc6c  0800bc6c  0001bc6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002010  20000000  0800bc70  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa8  20002010  0800dc80  00022010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002ab8  0800dc80  00022ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00047942  00000000  00000000  00022040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a4c  00000000  00000000  00069982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001443f  00000000  00000000  0006f3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f8  00000000  00000000  00083810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001890  00000000  00000000  00084f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c92  00000000  00000000  00086798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002964e  00000000  00000000  000ab42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d14db  00000000  00000000  000d4a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001a5f53  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054c8  00000000  00000000  001a5fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20002010 	.word	0x20002010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b05c 	.word	0x0800b05c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20002014 	.word	0x20002014
 800021c:	0800b05c 	.word	0x0800b05c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <OV9712_Write>:
    if( reg.Address == ENDR ) break;
    OV9712_Functions.Write( ov9712, reg.Address, reg.Value );
  }
}
void OV9712_Write( OV9712_t * ov9712, uint8_t r, uint8_t v )
{
 8000f30:	b500      	push	{lr}
 8000f32:	b085      	sub	sp, #20
  uint8_t data[2] = { r, v };
 8000f34:	f88d 100c 	strb.w	r1, [sp, #12]
 8000f38:	f88d 200d 	strb.w	r2, [sp, #13]
  PlatformFunctions.I2C.Transmit( ov9712->CAM_I2C_PORT, ov9712->ADDR, data, 2, 100);
 8000f3c:	2364      	movs	r3, #100	; 0x64
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2302      	movs	r3, #2
 8000f42:	aa03      	add	r2, sp, #12
 8000f44:	7801      	ldrb	r1, [r0, #0]
 8000f46:	6840      	ldr	r0, [r0, #4]
 8000f48:	f000 f9c4 	bl	80012d4 <STM_I2CMasterTx>
}
 8000f4c:	b005      	add	sp, #20
 8000f4e:	f85d fb04 	ldr.w	pc, [sp], #4

08000f52 <OV9712_Enable>:

void OV9712_Enable( OV9712_t * ov9712 )
{
 8000f52:	b510      	push	{r4, lr}
 8000f54:	4604      	mov	r4, r0
  if( ov9712->Pins == NULL) return;
 8000f56:	6880      	ldr	r0, [r0, #8]
 8000f58:	b188      	cbz	r0, 8000f7e <OV9712_Enable+0x2c>
  PlatformFunctions.GPIO.Write( &ov9712->Pins->ENABLE, GPIO_PIN_SET);
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	f003 fe80 	bl	8004c60 <WritePin>
  PlatformFunctions.GPIO.Write( &ov9712->Pins->LOW_VOLTAGE, GPIO_PIN_SET);
 8000f60:	68a0      	ldr	r0, [r4, #8]
 8000f62:	2101      	movs	r1, #1
 8000f64:	3008      	adds	r0, #8
 8000f66:	f003 fe7b 	bl	8004c60 <WritePin>
  PlatformFunctions.GPIO.Write( &ov9712->Pins->POWER_DOWN, GPIO_PIN_RESET);
 8000f6a:	68a0      	ldr	r0, [r4, #8]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	3010      	adds	r0, #16
 8000f70:	f003 fe76 	bl	8004c60 <WritePin>
  PlatformFunctions.GPIO.SetPortMode( &ov9712->Pins->MASTER_CLOCK, GPIO_MODE_AF_PP);
 8000f74:	68a0      	ldr	r0, [r4, #8]
 8000f76:	2102      	movs	r1, #2
 8000f78:	3018      	adds	r0, #24
 8000f7a:	f003 fe7e 	bl	8004c7a <SetPortMode>
}
 8000f7e:	bd10      	pop	{r4, pc}

08000f80 <OV9712_Disable>:

void OV9712_Disable( OV9712_t * ov9712 )
{
 8000f80:	b510      	push	{r4, lr}
 8000f82:	4604      	mov	r4, r0
  if( ov9712->Pins == NULL) return;
 8000f84:	6880      	ldr	r0, [r0, #8]
 8000f86:	b188      	cbz	r0, 8000fac <OV9712_Disable+0x2c>
  PlatformFunctions.GPIO.Write( &ov9712->Pins->ENABLE, GPIO_PIN_RESET);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	f003 fe69 	bl	8004c60 <WritePin>
  PlatformFunctions.GPIO.Write( &ov9712->Pins->LOW_VOLTAGE, GPIO_PIN_RESET);
 8000f8e:	68a0      	ldr	r0, [r4, #8]
 8000f90:	2100      	movs	r1, #0
 8000f92:	3008      	adds	r0, #8
 8000f94:	f003 fe64 	bl	8004c60 <WritePin>
  PlatformFunctions.GPIO.Write( &ov9712->Pins->POWER_DOWN, GPIO_PIN_SET);
 8000f98:	68a0      	ldr	r0, [r4, #8]
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	3010      	adds	r0, #16
 8000f9e:	f003 fe5f 	bl	8004c60 <WritePin>
  PlatformFunctions.GPIO.SetPortMode( &ov9712->Pins->MASTER_CLOCK, GPIO_MODE_INPUT);
 8000fa2:	68a0      	ldr	r0, [r4, #8]
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	3018      	adds	r0, #24
 8000fa8:	f003 fe67 	bl	8004c7a <SetPortMode>
}
 8000fac:	bd10      	pop	{r4, pc}
	...

08000fb0 <OV9712_Init>:
  ov9712->CAM_I2C_PORT = i2c_port;
 8000fb0:	6041      	str	r1, [r0, #4]
  if( pins == NULL) return;
 8000fb2:	b1f2      	cbz	r2, 8000ff2 <OV9712_Init+0x42>
{
 8000fb4:	b530      	push	{r4, r5, lr}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	4605      	mov	r5, r0
  ov9712->Pins = pins;
 8000fba:	6082      	str	r2, [r0, #8]
  OV9712_Functions.Enable(ov9712);
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <OV9712_Init+0x44>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4798      	blx	r3
  HAL_Delay(30);
 8000fc2:	201e      	movs	r0, #30
 8000fc4:	f003 ff12 	bl	8004dec <HAL_Delay>
  for( int i = 0; i < sizeof(OV9712_regs) / sizeof(OV9712_regs[0]); i++ )
 8000fc8:	2400      	movs	r4, #0
 8000fca:	2c0d      	cmp	r4, #13
 8000fcc:	d80f      	bhi.n	8000fee <OV9712_Init+0x3e>
    reg = OV9712_regs[i];
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <OV9712_Init+0x48>)
 8000fd0:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 8000fd4:	f8ad 1004 	strh.w	r1, [sp, #4]
    if( reg.Address == ENDR ) break;
 8000fd8:	b2c9      	uxtb	r1, r1
 8000fda:	29ff      	cmp	r1, #255	; 0xff
 8000fdc:	d007      	beq.n	8000fee <OV9712_Init+0x3e>
    OV9712_Functions.Write( ov9712, reg.Address, reg.Value );
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <OV9712_Init+0x44>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000fe6:	4628      	mov	r0, r5
 8000fe8:	4798      	blx	r3
  for( int i = 0; i < sizeof(OV9712_regs) / sizeof(OV9712_regs[0]); i++ )
 8000fea:	3401      	adds	r4, #1
 8000fec:	e7ed      	b.n	8000fca <OV9712_Init+0x1a>
}
 8000fee:	b003      	add	sp, #12
 8000ff0:	bd30      	pop	{r4, r5, pc}
 8000ff2:	4770      	bx	lr
 8000ff4:	2000002c 	.word	0x2000002c
 8000ff8:	0800b158 	.word	0x0800b158

08000ffc <ConnectToHost>:
  while( PlatformFunctions.Host.Command( PING_HOST, NEEDED ) != OK )
  {
    PlatformFunctions.Wait( HOST_COMMAND_WAIT_TIME );
  }
#endif
}
 8000ffc:	4770      	bx	lr
	...

08001000 <ConfigureApplication>:

/* CONFIGURING State Routine */
void ConfigureApplication( void )
{
 8001000:	b510      	push	{r4, lr}
#ifdef __OV9712__
  OV9712_Functions.Init( &OV9712, Master.IOs.CAMERA_COMMUNICATION_CHANNEL, &Default_OV9712_Pins );
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <ConfigureApplication+0x34>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <ConfigureApplication+0x38>)
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <ConfigureApplication+0x3c>)
 800100a:	6809      	ldr	r1, [r1, #0]
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <ConfigureApplication+0x40>)
 800100e:	4798      	blx	r3
#endif
#ifdef __RHO__
  RhoSystem.Functions.Perform.ConnectToInterface( &PlatformFunctions, &CameraFlags, &CameraDMA );
 8001010:	4c0c      	ldr	r4, [pc, #48]	; (8001044 <ConfigureApplication+0x44>)
 8001012:	f504 53e5 	add.w	r3, r4, #7328	; 0x1ca0
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <ConfigureApplication+0x48>)
 800101a:	490c      	ldr	r1, [pc, #48]	; (800104c <ConfigureApplication+0x4c>)
 800101c:	480c      	ldr	r0, [pc, #48]	; (8001050 <ConfigureApplication+0x50>)
 800101e:	4798      	blx	r3
  RhoSystem.Functions.Perform.Initialize( CAMERA_PORT, UART_TX_PORT );
 8001020:	f641 4390 	movw	r3, #7312	; 0x1c90
 8001024:	58e3      	ldr	r3, [r4, r3]
 8001026:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800102a:	6910      	ldr	r0, [r2, #16]
 800102c:	4a09      	ldr	r2, [pc, #36]	; (8001054 <ConfigureApplication+0x54>)
 800102e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001030:	4798      	blx	r3
#endif
}
 8001032:	bd10      	pop	{r4, pc}
 8001034:	2000002c 	.word	0x2000002c
 8001038:	20000000 	.word	0x20000000
 800103c:	200024d0 	.word	0x200024d0
 8001040:	20000020 	.word	0x20000020
 8001044:	20000110 	.word	0x20000110
 8001048:	2000003c 	.word	0x2000003c
 800104c:	2000202c 	.word	0x2000202c
 8001050:	2000005c 	.word	0x2000005c
 8001054:	40013800 	.word	0x40013800

08001058 <ExitInitialization>:

/* READY State Routine */
void ExitInitialization( void )
{
 8001058:	b508      	push	{r3, lr}
#ifdef __RHO__
  RhoSystem.Functions.Perform.Activate();
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <ExitInitialization+0x24>)
 800105c:	f641 43a8 	movw	r3, #7336	; 0x1ca8
 8001060:	58d3      	ldr	r3, [r2, r3]
 8001062:	4798      	blx	r3
#endif
  if( SystemFunctions.State.IsIn( &System, READY ) )
 8001064:	2103      	movs	r1, #3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <ExitInitialization+0x28>)
 8001068:	f003 fe31 	bl	8004cce <IsInStateSystem>
 800106c:	b108      	cbz	r0, 8001072 <ExitInitialization+0x1a>
    MasterFunctions.Run();
 800106e:	f000 f831 	bl	80010d4 <Master_Run>
  else
    PlatformFunctions.Wait(250);
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <ExitInitialization+0x2c>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	20fa      	movs	r0, #250	; 0xfa
 8001078:	4798      	blx	r3
}
 800107a:	bd08      	pop	{r3, pc}
 800107c:	20000110 	.word	0x20000110
 8001080:	200000bc 	.word	0x200000bc
 8001084:	2000005c 	.word	0x2000005c

08001088 <ApplicationCore>:

/* ACTIVE State Routine */
void ApplicationCore( void )
{
 8001088:	b508      	push	{r3, lr}
#ifdef __RHO__
    RhoSystem.Functions.Perform.CoreProcess();
 800108a:	4a03      	ldr	r2, [pc, #12]	; (8001098 <ApplicationCore+0x10>)
 800108c:	f641 439c 	movw	r3, #7324	; 0x1c9c
 8001090:	58d3      	ldr	r3, [r2, r3]
 8001092:	4798      	blx	r3
#else
#warning "No application core."
#endif
}
 8001094:	bd08      	pop	{r3, pc}
 8001096:	bf00      	nop
 8001098:	20000110 	.word	0x20000110

0800109c <Master_Init>:
  PlatformFunctions.GPIO.Write( &LED_GPIO, GPIO_PIN_SET);
  MasterFunctions.Init();
}

void Master_Init( void )
{
 800109c:	b510      	push	{r4, lr}
  /* Initialize state manager */
  SystemFunctions.Init( &System, &global_states_list );
 800109e:	4c0b      	ldr	r4, [pc, #44]	; (80010cc <Master_Init+0x30>)
 80010a0:	490b      	ldr	r1, [pc, #44]	; (80010d0 <Master_Init+0x34>)
 80010a2:	4620      	mov	r0, r4
 80010a4:	f003 fdf0 	bl	8004c88 <InitSystem>

  /* Initialize core platform */
  SystemFunctions.State.Enter( &System, INITIALIZING );
 80010a8:	2100      	movs	r1, #0
 80010aa:	4620      	mov	r0, r4
 80010ac:	f003 fe07 	bl	8004cbe <EnterStateSystem>

  /* Connect to host, this is critical for finishing initialization hence endless loop */
  SystemFunctions.State.Enter( &System, CONNECTING_TO_HOST );
 80010b0:	2101      	movs	r1, #1
 80010b2:	4620      	mov	r0, r4
 80010b4:	f003 fe03 	bl	8004cbe <EnterStateSystem>

  /* Configure application items */
  SystemFunctions.State.Enter( &System, CONFIGURING );
 80010b8:	2102      	movs	r1, #2
 80010ba:	4620      	mov	r0, r4
 80010bc:	f003 fdff 	bl	8004cbe <EnterStateSystem>

  /* Exit initialization, enter run */
  SystemFunctions.State.Enter( &System, READY );
 80010c0:	2103      	movs	r1, #3
 80010c2:	4620      	mov	r0, r4
 80010c4:	f003 fdfb 	bl	8004cbe <EnterStateSystem>
}
 80010c8:	bd10      	pop	{r4, pc}
 80010ca:	bf00      	nop
 80010cc:	200000bc 	.word	0x200000bc
 80010d0:	200000c4 	.word	0x200000c4

080010d4 <Master_Run>:

/***************************************************************************************/
/*                                   Master Run                                        */
/***************************************************************************************/
void Master_Run( void )
{
 80010d4:	b508      	push	{r3, lr}
	SystemFunctions.State.Next( &System );
 80010d6:	4803      	ldr	r0, [pc, #12]	; (80010e4 <Master_Run+0x10>)
 80010d8:	f003 fddc 	bl	8004c94 <NextStateSystem>
//	SystemFunctions.State.Set( &System, ACTIVE );

	while(1)
	{
		SystemFunctions.State.Perform( &System );
 80010dc:	4801      	ldr	r0, [pc, #4]	; (80010e4 <Master_Run+0x10>)
 80010de:	f003 fde7 	bl	8004cb0 <PerformStateSystem>
	while(1)
 80010e2:	e7fb      	b.n	80010dc <Master_Run+0x8>
 80010e4:	200000bc 	.word	0x200000bc

080010e8 <InitializePlatform>:
{
 80010e8:	b510      	push	{r4, lr}
	LOG(DEBUG_2, "Initializing platform"ENDL);
 80010ea:	2403      	movs	r4, #3
 80010ec:	2c03      	cmp	r4, #3
 80010ee:	d90a      	bls.n	8001106 <InitializePlatform+0x1e>
 80010f0:	4808      	ldr	r0, [pc, #32]	; (8001114 <InitializePlatform+0x2c>)
 80010f2:	f006 ffd5 	bl	80080a0 <puts>
    PlatformFunctions.Init( &Platform, HOST_COMMUNICATION_PROTOCOL, (generic_handle_t)Master.IOs.HOST_DEFAULT_CHANNEL );
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <InitializePlatform+0x30>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <InitializePlatform+0x34>)
 80010fc:	6852      	ldr	r2, [r2, #4]
 80010fe:	2102      	movs	r1, #2
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <InitializePlatform+0x38>)
 8001102:	4798      	blx	r3
}
 8001104:	bd10      	pop	{r4, pc}
	LOG(DEBUG_2, "Initializing platform"ENDL);
 8001106:	2009      	movs	r0, #9
 8001108:	f006 ff46 	bl	8007f98 <putchar>
 800110c:	3401      	adds	r4, #1
 800110e:	b2e4      	uxtb	r4, r4
 8001110:	e7ec      	b.n	80010ec <InitializePlatform+0x4>
 8001112:	bf00      	nop
 8001114:	0800b174 	.word	0x0800b174
 8001118:	2000005c 	.word	0x2000005c
 800111c:	200024d0 	.word	0x200024d0
 8001120:	20002a9c 	.word	0x20002a9c

08001124 <Master_Connect>:
{
 8001124:	b570      	push	{r4, r5, r6, lr}
 8001126:	4606      	mov	r6, r0
 8001128:	460c      	mov	r4, r1
 800112a:	4615      	mov	r5, r2
  printf("Connecting master..."ENDL);
 800112c:	4807      	ldr	r0, [pc, #28]	; (800114c <Master_Connect+0x28>)
 800112e:	f006 ffb7 	bl	80080a0 <puts>
  Master.IOs.I2C_Primary = i2c;
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <Master_Connect+0x2c>)
 8001134:	601e      	str	r6, [r3, #0]
  Master.IOs.UART_Primary = usart;
 8001136:	605d      	str	r5, [r3, #4]
  Master.Utilities.Timer_Primary = timer;
 8001138:	609c      	str	r4, [r3, #8]
  PlatformFunctions.GPIO.Write( &LED_GPIO, GPIO_PIN_SET);
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <Master_Connect+0x30>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	2101      	movs	r1, #1
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <Master_Connect+0x34>)
 8001142:	4798      	blx	r3
  MasterFunctions.Init();
 8001144:	f7ff ffaa 	bl	800109c <Master_Init>
}
 8001148:	bd70      	pop	{r4, r5, r6, pc}
 800114a:	bf00      	nop
 800114c:	0800b18c 	.word	0x0800b18c
 8001150:	200024d0 	.word	0x200024d0
 8001154:	2000005c 	.word	0x2000005c
 8001158:	20000054 	.word	0x20000054

0800115c <SystemError>:
{
 800115c:	b510      	push	{r4, lr}
    LOG( ALWAYS, "System error! Resetting in" );
 800115e:	480b      	ldr	r0, [pc, #44]	; (800118c <SystemError+0x30>)
 8001160:	f006 ff02 	bl	8007f68 <iprintf>
    for( uint8_t i = 3 ; i > 0; i-- )
 8001164:	2403      	movs	r4, #3
 8001166:	e00a      	b.n	800117e <SystemError+0x22>
        LOG_BARE( ALWAYS, " %d", i );
 8001168:	4621      	mov	r1, r4
 800116a:	4809      	ldr	r0, [pc, #36]	; (8001190 <SystemError+0x34>)
 800116c:	f006 fefc 	bl	8007f68 <iprintf>
        PlatformFunctions.Wait(1000);
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <SystemError+0x38>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001178:	4798      	blx	r3
    for( uint8_t i = 3 ; i > 0; i-- )
 800117a:	3c01      	subs	r4, #1
 800117c:	b2e4      	uxtb	r4, r4
 800117e:	2c00      	cmp	r4, #0
 8001180:	d1f2      	bne.n	8001168 <SystemError+0xc>
    PlatformFunctions.Reset();
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <SystemError+0x38>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	4798      	blx	r3
}
 8001188:	bd10      	pop	{r4, pc}
 800118a:	bf00      	nop
 800118c:	0800b1a4 	.word	0x0800b1a4
 8001190:	0800b1c0 	.word	0x0800b1c0
 8001194:	2000005c 	.word	0x2000005c

08001198 <HAL_GPIO_EXTI_Callback>:
 *                           Interrupt Handlers                         *
 ***********************************************************************/
inline void STM_InterruptHandler( uint16_t GPIO_Pin )
{
#ifdef __RHO__
	if(!CameraFlags.IRQ) return;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_GPIO_EXTI_Callback+0x34>)
 800119a:	785b      	ldrb	r3, [r3, #1]
 800119c:	b11b      	cbz	r3, 80011a6 <HAL_GPIO_EXTI_Callback+0xe>
	if(GPIO_Pin == VSYNC_Pin)
 800119e:	2801      	cmp	r0, #1
 80011a0:	d002      	beq.n	80011a8 <HAL_GPIO_EXTI_Callback+0x10>
		CameraFlags.Frame = !(flag_t)( VSYNC_GPIO_Port->IDR & VSYNC_Pin );
	else if( GPIO_Pin == HREF_Pin)
 80011a2:	2808      	cmp	r0, #8
 80011a4:	d00a      	beq.n	80011bc <HAL_GPIO_EXTI_Callback+0x24>
//    STM_InitDMA( (uint32_t)&CAMERA_PORT, _dma_destination, _dma_size, true );
//    LOG(ALWAYS, "0x%08x", Master.Utilities.Timer_Primary->hdma[RHO_TIM_DMA_ID]->Instance->CNDTR );
//    LOG(ALWAYS, ENDL);
//  }
#endif/* EXTI line interrupt detected */
}
 80011a6:	4770      	bx	lr
		CameraFlags.Frame = !(flag_t)( VSYNC_GPIO_Port->IDR & VSYNC_Pin );
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x38>)
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	f013 0f01 	tst.w	r3, #1
 80011b0:	bf0c      	ite	eq
 80011b2:	2201      	moveq	r2, #1
 80011b4:	2200      	movne	r2, #0
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_GPIO_EXTI_Callback+0x34>)
 80011b8:	709a      	strb	r2, [r3, #2]
 80011ba:	4770      	bx	lr
		CameraFlags.Row = (flag_t)( HREF_GPIO_Port->IDR & HREF_Pin );
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x38>)
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80011c4:	4a01      	ldr	r2, [pc, #4]	; (80011cc <HAL_GPIO_EXTI_Callback+0x34>)
 80011c6:	70d3      	strb	r3, [r2, #3]
 80011c8:	e7ed      	b.n	80011a6 <HAL_GPIO_EXTI_Callback+0xe>
 80011ca:	bf00      	nop
 80011cc:	2000202c 	.word	0x2000202c
 80011d0:	48000400 	.word	0x48000400

080011d4 <STM_InterruptEnable>:
void STM_InterruptEnable( void )
{
 80011d4:	b508      	push	{r3, lr}
//  STM_ResumeDMA(RHO_TIM_IT_CC, RHO_TIM_CHANNEL);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011d6:	2006      	movs	r0, #6
 80011d8:	f003 fe62 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011dc:	2009      	movs	r0, #9
 80011de:	f003 fe5f 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
}
 80011e2:	bd08      	pop	{r3, pc}

080011e4 <STM_InterruptDisable>:
void STM_InterruptDisable( void )
{
 80011e4:	b508      	push	{r3, lr}
//  STM_PauseDMA(RHO_TIM_IT_CC, RHO_TIM_CHANNEL);
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80011e6:	2006      	movs	r0, #6
 80011e8:	f003 fe68 	bl	8004ebc <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 80011ec:	2009      	movs	r0, #9
 80011ee:	f003 fe65 	bl	8004ebc <HAL_NVIC_DisableIRQ>
}
 80011f2:	bd08      	pop	{r3, pc}

080011f4 <STM_PauseDMA>:

/************************************************************************
 *                              DMA Handlers                            *
 ***********************************************************************/
inline void STM_PauseDMA( dma_info_t * info )
{
 80011f4:	b510      	push	{r4, lr}
  __HAL_TIM_DISABLE_IT(Master.Utilities.Timer_Primary, info->it_cc);
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <STM_PauseDMA+0x20>)
 80011f8:	689c      	ldr	r4, [r3, #8]
 80011fa:	6822      	ldr	r2, [r4, #0]
 80011fc:	68d3      	ldr	r3, [r2, #12]
 80011fe:	6801      	ldr	r1, [r0, #0]
 8001200:	ea23 0301 	bic.w	r3, r3, r1
 8001204:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(Master.Utilities.Timer_Primary->Instance, info->tim_ch, TIM_CCx_DISABLE);
 8001206:	2200      	movs	r2, #0
 8001208:	6841      	ldr	r1, [r0, #4]
 800120a:	6820      	ldr	r0, [r4, #0]
 800120c:	f005 fb84 	bl	8006918 <TIM_CCxChannelCmd>
}
 8001210:	bd10      	pop	{r4, pc}
 8001212:	bf00      	nop
 8001214:	200024d0 	.word	0x200024d0

08001218 <STM_ResumeDMA>:
inline void STM_ResumeDMA( dma_info_t * info )
{
 8001218:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE_IT(Master.Utilities.Timer_Primary, info->it_cc );
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <STM_ResumeDMA+0x1c>)
 800121c:	689c      	ldr	r4, [r3, #8]
 800121e:	6822      	ldr	r2, [r4, #0]
 8001220:	68d3      	ldr	r3, [r2, #12]
 8001222:	6801      	ldr	r1, [r0, #0]
 8001224:	430b      	orrs	r3, r1
 8001226:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(Master.Utilities.Timer_Primary->Instance, info->tim_ch, TIM_CCx_ENABLE);
 8001228:	2201      	movs	r2, #1
 800122a:	6841      	ldr	r1, [r0, #4]
 800122c:	6820      	ldr	r0, [r4, #0]
 800122e:	f005 fb73 	bl	8006918 <TIM_CCxChannelCmd>
}
 8001232:	bd10      	pop	{r4, pc}
 8001234:	200024d0 	.word	0x200024d0

08001238 <STM_ResetDMA>:
inline void STM_ResetDMA( dma_info_t * info )
{
    if(info->dst != (uint32_t)NULL)
 8001238:	6903      	ldr	r3, [r0, #16]
 800123a:	b13b      	cbz	r3, 800124c <STM_ResetDMA+0x14>
        Master.Utilities.Timer_Primary->hdma[info->id]->Instance->CMAR = info->dst;
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <STM_ResetDMA+0x18>)
 800123e:	6891      	ldr	r1, [r2, #8]
 8001240:	7d82      	ldrb	r2, [r0, #22]
 8001242:	3208      	adds	r2, #8
 8001244:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	200024d0 	.word	0x200024d0

08001254 <STM_InitDMA>:
void STM_InitDMA( dma_info_t * info )
{
 8001254:	b538      	push	{r3, r4, r5, lr}
 8001256:	4604      	mov	r4, r0
  if(HAL_DMA_Start_IT(Master.Utilities.Timer_Primary->hdma[info->id], info->src, info->dst, info->size) != HAL_OK)
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <STM_InitDMA+0x50>)
 800125a:	689d      	ldr	r5, [r3, #8]
 800125c:	7d80      	ldrb	r0, [r0, #22]
 800125e:	3008      	adds	r0, #8
 8001260:	8aa3      	ldrh	r3, [r4, #20]
 8001262:	6922      	ldr	r2, [r4, #16]
 8001264:	68e1      	ldr	r1, [r4, #12]
 8001266:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800126a:	f003 ff13 	bl	8005094 <HAL_DMA_Start_IT>
 800126e:	b948      	cbnz	r0, 8001284 <STM_InitDMA+0x30>
    Error_Handler();
  __HAL_TIM_ENABLE_DMA(Master.Utilities.Timer_Primary, info->cc);
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <STM_InitDMA+0x50>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	68d3      	ldr	r3, [r2, #12]
 8001278:	68a1      	ldr	r1, [r4, #8]
 800127a:	430b      	orrs	r3, r1
 800127c:	60d3      	str	r3, [r2, #12]
  if(info->state)
 800127e:	7de3      	ldrb	r3, [r4, #23]
 8001280:	b91b      	cbnz	r3, 800128a <STM_InitDMA+0x36>
	  STM_ResumeDMA(info);
}
 8001282:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler();
 8001284:	f000 f94c 	bl	8001520 <Error_Handler>
 8001288:	e7f2      	b.n	8001270 <STM_InitDMA+0x1c>
  __HAL_TIM_ENABLE_IT(Master.Utilities.Timer_Primary, info->it_cc );
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <STM_InitDMA+0x50>)
 800128c:	6898      	ldr	r0, [r3, #8]
 800128e:	6802      	ldr	r2, [r0, #0]
 8001290:	68d3      	ldr	r3, [r2, #12]
 8001292:	6821      	ldr	r1, [r4, #0]
 8001294:	430b      	orrs	r3, r1
 8001296:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(Master.Utilities.Timer_Primary->Instance, info->tim_ch, TIM_CCx_ENABLE);
 8001298:	2201      	movs	r2, #1
 800129a:	6861      	ldr	r1, [r4, #4]
 800129c:	6800      	ldr	r0, [r0, #0]
 800129e:	f005 fb3b 	bl	8006918 <TIM_CCxChannelCmd>
}
 80012a2:	e7ee      	b.n	8001282 <STM_InitDMA+0x2e>
 80012a4:	200024d0 	.word	0x200024d0

080012a8 <STM_GetDMAFillAddress>:
uint32_t STM_GetDMAFillAddress( dma_info_t * info )
{
 80012a8:	b410      	push	{r4}
  return info->dst + ( (int32_t)info->size - (int32_t)Master.Utilities.Timer_Primary->hdma[info->id]->Instance->CNDTR );
 80012aa:	6901      	ldr	r1, [r0, #16]
 80012ac:	8a83      	ldrh	r3, [r0, #20]
 80012ae:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <STM_GetDMAFillAddress+0x20>)
 80012b0:	6894      	ldr	r4, [r2, #8]
 80012b2:	7d82      	ldrb	r2, [r0, #22]
 80012b4:	3208      	adds	r2, #8
 80012b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	6850      	ldr	r0, [r2, #4]
 80012be:	1a18      	subs	r0, r3, r0
}
 80012c0:	4408      	add	r0, r1
 80012c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	200024d0 	.word	0x200024d0

080012cc <STM_UartTxDMA>:
 *                             UART Handlers                            *
 ***********************************************************************/
inline uint8_t STM_UartTxDMA( UART_Handle_t * huart, uint8_t * buffer, uint16_t length )
{
  return 0;//HAL_UART_Transmit( Master.IOs.UART_Primary, buffer, length, UART_TIMEOUT ); //HAL_UART_Transmit_DMA
}
 80012cc:	2000      	movs	r0, #0
 80012ce:	4770      	bx	lr

080012d0 <STM_UartRxDMA>:

inline uint16_t STM_UartRxDMA( UART_Handle_t * huart, uint8_t * buffer )
{
  ///TODO: Actually implement
  return 1;
}
 80012d0:	2001      	movs	r0, #1
 80012d2:	4770      	bx	lr

080012d4 <STM_I2CMasterTx>:

/************************************************************************
 *                              I2C Handlers                            *
 ***********************************************************************/
inline void STM_I2CMasterTx( I2C_Handle_t * hi2c, uint16_t addr, uint8_t * buffer, uint16_t length, uint32_t timeout )
{
 80012d4:	b510      	push	{r4, lr}
 80012d6:	b082      	sub	sp, #8
  HAL_I2C_Master_Transmit( hi2c, addr, buffer, length, timeout);
 80012d8:	9c04      	ldr	r4, [sp, #16]
 80012da:	9400      	str	r4, [sp, #0]
 80012dc:	f004 fa3a 	bl	8005754 <HAL_I2C_Master_Transmit>
}
 80012e0:	b002      	add	sp, #8
 80012e2:	bd10      	pop	{r4, pc}

080012e4 <STM_SetPortMode>:

/************************************************************************
 *                             GPIO Handlers                            *
 ***********************************************************************/
inline void STM_SetPortMode( GPIO_TypeDef * port, uint16_t pin, uint8_t mode )
{
 80012e4:	b500      	push	{lr}
 80012e6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	2300      	movs	r3, #0
 80012ea:	9303      	str	r3, [sp, #12]
 80012ec:	9304      	str	r3, [sp, #16]
 80012ee:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = pin;
 80012f0:	9101      	str	r1, [sp, #4]
  GPIO_InitStruct.Mode = mode;
 80012f2:	9202      	str	r2, [sp, #8]
  HAL_GPIO_Init( (GPIO_TypeDef *)port, &GPIO_InitStruct );
 80012f4:	a901      	add	r1, sp, #4
 80012f6:	f003 ffef 	bl	80052d8 <HAL_GPIO_Init>
}
 80012fa:	b007      	add	sp, #28
 80012fc:	f85d fb04 	ldr.w	pc, [sp], #4

08001300 <STM_ReadPort>:
inline uint8_t STM_ReadPort( GPIO_TypeDef * port )
{
    return port->IDR;
 8001300:	6900      	ldr	r0, [r0, #16]
}
 8001302:	b2c0      	uxtb	r0, r0
 8001304:	4770      	bx	lr

08001306 <STM_WritePin>:
inline void STM_WritePin( GPIO_TypeDef * port, uint16_t pin, uint8_t state )
{
 8001306:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin( port, pin, (GPIO_PinState)state);
 8001308:	f004 f8b8 	bl	800547c <HAL_GPIO_WritePin>
}
 800130c:	bd08      	pop	{r3, pc}

0800130e <STM_TogglePin>:
inline void STM_TogglePin( GPIO_TypeDef * port, uint16_t pin )
{
 800130e:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin( port, pin );
 8001310:	f004 f8b9 	bl	8005486 <HAL_GPIO_TogglePin>
}
 8001314:	bd08      	pop	{r3, pc}

08001316 <STM_Timestamp>:

/************************************************************************
 *                             Time Handlers                            *
 ***********************************************************************/
inline uint32_t STM_Timestamp(void)
{
 8001316:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8001318:	f003 fd62 	bl	8004de0 <HAL_GetTick>
}
 800131c:	bd08      	pop	{r3, pc}

0800131e <STM_Wait>:
inline void STM_Wait( uint32_t nTime )
{
 800131e:	b508      	push	{r3, lr}
  HAL_Delay( nTime );
 8001320:	f003 fd64 	bl	8004dec <HAL_Delay>
}
 8001324:	bd08      	pop	{r3, pc}

08001326 <STM_SysClockFreq>:
inline uint32_t STM_SysClockFreq(void)
{
 8001326:	b508      	push	{r3, lr}
  return HAL_RCC_GetSysClockFreq();
 8001328:	f004 fe82 	bl	8006030 <HAL_RCC_GetSysClockFreq>
}
 800132c:	bd08      	pop	{r3, pc}
	...

08001330 <STM_Reset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001330:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001334:	4905      	ldr	r1, [pc, #20]	; (800134c <STM_Reset+0x1c>)
 8001336:	68ca      	ldr	r2, [r1, #12]
 8001338:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <STM_Reset+0x20>)
 800133e:	4313      	orrs	r3, r2
 8001340:	60cb      	str	r3, [r1, #12]
 8001342:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001346:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8001348:	e7fd      	b.n	8001346 <STM_Reset+0x16>
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00
 8001350:	05fa0004 	.word	0x05fa0004

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	2400      	movs	r4, #0
 800135a:	9403      	str	r4, [sp, #12]
 800135c:	9404      	str	r4, [sp, #16]
 800135e:	9405      	str	r4, [sp, #20]
 8001360:	9406      	str	r4, [sp, #24]
 8001362:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001364:	4b49      	ldr	r3, [pc, #292]	; (800148c <MX_GPIO_Init+0x138>)
 8001366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001368:	f042 0220 	orr.w	r2, r2, #32
 800136c:	64da      	str	r2, [r3, #76]	; 0x4c
 800136e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001370:	f002 0220 	and.w	r2, r2, #32
 8001374:	9200      	str	r2, [sp, #0]
 8001376:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800137a:	f042 0201 	orr.w	r2, r2, #1
 800137e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001380:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001382:	f002 0201 	and.w	r2, r2, #1
 8001386:	9201      	str	r2, [sp, #4]
 8001388:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800138c:	f042 0202 	orr.w	r2, r2, #2
 8001390:	64da      	str	r2, [r3, #76]	; 0x4c
 8001392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWDN_Pin|EN_1V5_Pin|CAM_EN_Pin, GPIO_PIN_RESET);
 800139c:	4622      	mov	r2, r4
 800139e:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80013a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a6:	f004 f869 	bl	800547c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013aa:	4e39      	ldr	r6, [pc, #228]	; (8001490 <MX_GPIO_Init+0x13c>)
 80013ac:	4622      	mov	r2, r4
 80013ae:	2140      	movs	r1, #64	; 0x40
 80013b0:	4630      	mov	r0, r6
 80013b2:	f004 f863 	bl	800547c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CPI0_Pin CPI2_Pin CPI4_Pin CPI6_Pin */
  GPIO_InitStruct.Pin = CPI0_Pin|CPI2_Pin|CPI4_Pin|CPI6_Pin;
 80013b6:	2355      	movs	r3, #85	; 0x55
 80013b8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ba:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013bc:	2501      	movs	r5, #1
 80013be:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	a903      	add	r1, sp, #12
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c6:	f003 ff87 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CPI1_Pin CPI3_Pin CPI5_Pin CPI7_Pin */
  GPIO_InitStruct.Pin = CPI1_Pin|CPI3_Pin|CPI5_Pin|CPI7_Pin;
 80013ca:	23aa      	movs	r3, #170	; 0xaa
 80013cc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013d0:	2702      	movs	r7, #2
 80013d2:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	a903      	add	r1, sp, #12
 80013d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013da:	f003 ff7d 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VSYNC_Pin */
  GPIO_InitStruct.Pin = VSYNC_Pin;
 80013de:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e0:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <MX_GPIO_Init+0x140>)
 80013e2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(VSYNC_GPIO_Port, &GPIO_InitStruct);
 80013e6:	a903      	add	r1, sp, #12
 80013e8:	4630      	mov	r0, r6
 80013ea:	f003 ff75 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCLK_Pin */
  GPIO_InitStruct.Pin = MCLK_Pin;
 80013ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80013fa:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(MCLK_GPIO_Port, &GPIO_InitStruct);
 80013fc:	a903      	add	r1, sp, #12
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001402:	f003 ff69 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWDN_Pin EN_1V5_Pin */
  GPIO_InitStruct.Pin = PWDN_Pin|EN_1V5_Pin;
 8001406:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800140a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	a903      	add	r1, sp, #12
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f003 ff5e 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_EN_Pin */
  GPIO_InitStruct.Pin = CAM_EN_Pin;
 800141c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001420:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001424:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(CAM_EN_GPIO_Port, &GPIO_InitStruct);
 8001428:	a903      	add	r1, sp, #12
 800142a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142e:	f003 ff53 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HREF_Pin */
  GPIO_InitStruct.Pin = HREF_Pin;
 8001432:	2308      	movs	r3, #8
 8001434:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <MX_GPIO_Init+0x144>)
 8001438:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(HREF_GPIO_Port, &GPIO_InitStruct);
 800143c:	a903      	add	r1, sp, #12
 800143e:	4630      	mov	r0, r6
 8001440:	f003 ff4a 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM__CS_Pin */
  GPIO_InitStruct.Pin = CAM__CS_Pin;
 8001444:	2320      	movs	r3, #32
 8001446:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001448:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(CAM__CS_GPIO_Port, &GPIO_InitStruct);
 800144c:	a903      	add	r1, sp, #12
 800144e:	4630      	mov	r0, r6
 8001450:	f003 ff42 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001454:	2340      	movs	r3, #64	; 0x40
 8001456:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800145e:	a903      	add	r1, sp, #12
 8001460:	4630      	mov	r0, r6
 8001462:	f003 ff39 	bl	80052d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 1);
 8001466:	462a      	mov	r2, r5
 8001468:	4629      	mov	r1, r5
 800146a:	2006      	movs	r0, #6
 800146c:	f003 fce4 	bl	8004e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001470:	2006      	movs	r0, #6
 8001472:	f003 fd15 	bl	8004ea0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001476:	4622      	mov	r2, r4
 8001478:	4629      	mov	r1, r5
 800147a:	2009      	movs	r0, #9
 800147c:	f003 fcdc 	bl	8004e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001480:	2009      	movs	r0, #9
 8001482:	f003 fd0d 	bl	8004ea0 <HAL_NVIC_EnableIRQ>

}
 8001486:	b009      	add	sp, #36	; 0x24
 8001488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	48000400 	.word	0x48000400
 8001494:	10110000 	.word	0x10110000
 8001498:	10310000 	.word	0x10310000

0800149c <MX_DMA_Init>:
{
 800149c:	b500      	push	{lr}
 800149e:	b085      	sub	sp, #20
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_DMA_Init+0x64>)
 80014a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014a4:	f042 0204 	orr.w	r2, r2, #4
 80014a8:	649a      	str	r2, [r3, #72]	; 0x48
 80014aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014ac:	f002 0204 	and.w	r2, r2, #4
 80014b0:	9201      	str	r2, [sp, #4]
 80014b2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014b6:	f042 0201 	orr.w	r2, r2, #1
 80014ba:	649a      	str	r2, [r3, #72]	; 0x48
 80014bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014be:	f002 0201 	and.w	r2, r2, #1
 80014c2:	9202      	str	r2, [sp, #8]
 80014c4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014c8:	f042 0202 	orr.w	r2, r2, #2
 80014cc:	649a      	str	r2, [r3, #72]	; 0x48
 80014ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	9303      	str	r3, [sp, #12]
 80014d6:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014d8:	2200      	movs	r2, #0
 80014da:	4611      	mov	r1, r2
 80014dc:	200b      	movs	r0, #11
 80014de:	f003 fcab 	bl	8004e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014e2:	200b      	movs	r0, #11
 80014e4:	f003 fcdc 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	4611      	mov	r1, r2
 80014ec:	2039      	movs	r0, #57	; 0x39
 80014ee:	f003 fca3 	bl	8004e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80014f2:	2039      	movs	r0, #57	; 0x39
 80014f4:	f003 fcd4 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
}
 80014f8:	b005      	add	sp, #20
 80014fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <_write>:
{
 8001504:	b508      	push	{r3, lr}
	while(huart1.gState == HAL_UART_STATE_BUSY_TX);
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <_write+0x18>)
 8001508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800150c:	2b21      	cmp	r3, #33	; 0x21
 800150e:	d0fa      	beq.n	8001506 <_write+0x2>
	HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(&huart1, (uint8_t*)ptr, len);
 8001510:	b292      	uxth	r2, r2
 8001512:	4802      	ldr	r0, [pc, #8]	; (800151c <_write+0x18>)
 8001514:	f005 fa3c 	bl	8006990 <HAL_UART_Transmit_DMA>
}
 8001518:	bd08      	pop	{r3, pc}
 800151a:	bf00      	nop
 800151c:	20002588 	.word	0x20002588

08001520 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001522:	e7fe      	b.n	8001522 <Error_Handler+0x2>

08001524 <MX_I2C1_Init>:
{
 8001524:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8001526:	4811      	ldr	r0, [pc, #68]	; (800156c <MX_I2C1_Init+0x48>)
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_I2C1_Init+0x4c>)
 800152a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00202538;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_I2C1_Init+0x50>)
 800152e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001534:	2201      	movs	r2, #1
 8001536:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001538:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800153a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800153c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001540:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001542:	f004 f8a9 	bl	8005698 <HAL_I2C_Init>
 8001546:	b950      	cbnz	r0, 800155e <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001548:	2100      	movs	r1, #0
 800154a:	4808      	ldr	r0, [pc, #32]	; (800156c <MX_I2C1_Init+0x48>)
 800154c:	f004 f9c0 	bl	80058d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001550:	b938      	cbnz	r0, 8001562 <MX_I2C1_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001552:	2100      	movs	r1, #0
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_I2C1_Init+0x48>)
 8001556:	f004 f9e9 	bl	800592c <HAL_I2CEx_ConfigDigitalFilter>
 800155a:	b920      	cbnz	r0, 8001566 <MX_I2C1_Init+0x42>
}
 800155c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800155e:	f7ff ffdf 	bl	8001520 <Error_Handler>
    Error_Handler();
 8001562:	f7ff ffdd 	bl	8001520 <Error_Handler>
    Error_Handler();
 8001566:	f7ff ffdb 	bl	8001520 <Error_Handler>
 800156a:	bf00      	nop
 800156c:	200024dc 	.word	0x200024dc
 8001570:	40005400 	.word	0x40005400
 8001574:	00202538 	.word	0x00202538

08001578 <MX_USART1_UART_Init>:
{
 8001578:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800157a:	4816      	ldr	r0, [pc, #88]	; (80015d4 <MX_USART1_UART_Init+0x5c>)
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_USART1_UART_Init+0x60>)
 800157e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8001580:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001584:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	2300      	movs	r3, #0
 8001588:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800158a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800158c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800158e:	2208      	movs	r2, #8
 8001590:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001594:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001598:	61c2      	str	r2, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159a:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800159c:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800159e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80015a0:	f005 febb 	bl	800731a <HAL_HalfDuplex_Init>
 80015a4:	b970      	cbnz	r0, 80015c4 <MX_USART1_UART_Init+0x4c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a6:	2100      	movs	r1, #0
 80015a8:	480a      	ldr	r0, [pc, #40]	; (80015d4 <MX_USART1_UART_Init+0x5c>)
 80015aa:	f005 ff37 	bl	800741c <HAL_UARTEx_SetTxFifoThreshold>
 80015ae:	b958      	cbnz	r0, 80015c8 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b0:	2100      	movs	r1, #0
 80015b2:	4808      	ldr	r0, [pc, #32]	; (80015d4 <MX_USART1_UART_Init+0x5c>)
 80015b4:	f005 ff57 	bl	8007466 <HAL_UARTEx_SetRxFifoThreshold>
 80015b8:	b940      	cbnz	r0, 80015cc <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <MX_USART1_UART_Init+0x5c>)
 80015bc:	f005 ff0f 	bl	80073de <HAL_UARTEx_DisableFifoMode>
 80015c0:	b930      	cbnz	r0, 80015d0 <MX_USART1_UART_Init+0x58>
}
 80015c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015c4:	f7ff ffac 	bl	8001520 <Error_Handler>
    Error_Handler();
 80015c8:	f7ff ffaa 	bl	8001520 <Error_Handler>
    Error_Handler();
 80015cc:	f7ff ffa8 	bl	8001520 <Error_Handler>
    Error_Handler();
 80015d0:	f7ff ffa6 	bl	8001520 <Error_Handler>
 80015d4:	20002588 	.word	0x20002588
 80015d8:	40013800 	.word	0x40013800

080015dc <MX_TIM16_Init>:
{
 80015dc:	b500      	push	{lr}
 80015de:	b085      	sub	sp, #20
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015e0:	2300      	movs	r3, #0
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	9302      	str	r3, [sp, #8]
 80015e8:	9303      	str	r3, [sp, #12]
  htim16.Instance = TIM16;
 80015ea:	4812      	ldr	r0, [pc, #72]	; (8001634 <MX_TIM16_Init+0x58>)
 80015ec:	4a12      	ldr	r2, [pc, #72]	; (8001638 <MX_TIM16_Init+0x5c>)
 80015ee:	6002      	str	r2, [r0, #0]
  htim16.Init.Prescaler = 0;
 80015f0:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f2:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 0;
 80015f4:	60c3      	str	r3, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f6:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 80015f8:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80015fe:	f005 f89d 	bl	800673c <HAL_TIM_Base_Init>
 8001602:	b988      	cbnz	r0, 8001628 <MX_TIM16_Init+0x4c>
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8001604:	480b      	ldr	r0, [pc, #44]	; (8001634 <MX_TIM16_Init+0x58>)
 8001606:	f005 f8c9 	bl	800679c <HAL_TIM_IC_Init>
 800160a:	b978      	cbnz	r0, 800162c <MX_TIM16_Init+0x50>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800160c:	2200      	movs	r2, #0
 800160e:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001610:	2301      	movs	r3, #1
 8001612:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001614:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 8001616:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001618:	4669      	mov	r1, sp
 800161a:	4806      	ldr	r0, [pc, #24]	; (8001634 <MX_TIM16_Init+0x58>)
 800161c:	f005 f922 	bl	8006864 <HAL_TIM_IC_ConfigChannel>
 8001620:	b930      	cbnz	r0, 8001630 <MX_TIM16_Init+0x54>
}
 8001622:	b005      	add	sp, #20
 8001624:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001628:	f7ff ff7a 	bl	8001520 <Error_Handler>
    Error_Handler();
 800162c:	f7ff ff78 	bl	8001520 <Error_Handler>
    Error_Handler();
 8001630:	f7ff ff76 	bl	8001520 <Error_Handler>
 8001634:	20002678 	.word	0x20002678
 8001638:	40014400 	.word	0x40014400

0800163c <SystemClock_Config>:
{
 800163c:	b510      	push	{r4, lr}
 800163e:	b0a4      	sub	sp, #144	; 0x90
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001640:	2238      	movs	r2, #56	; 0x38
 8001642:	2100      	movs	r1, #0
 8001644:	a816      	add	r0, sp, #88	; 0x58
 8001646:	f005 ff73 	bl	8007530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800164a:	2400      	movs	r4, #0
 800164c:	9411      	str	r4, [sp, #68]	; 0x44
 800164e:	9412      	str	r4, [sp, #72]	; 0x48
 8001650:	9413      	str	r4, [sp, #76]	; 0x4c
 8001652:	9414      	str	r4, [sp, #80]	; 0x50
 8001654:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001656:	2244      	movs	r2, #68	; 0x44
 8001658:	4621      	mov	r1, r4
 800165a:	4668      	mov	r0, sp
 800165c:	f005 ff68 	bl	8007530 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001660:	4620      	mov	r0, r4
 8001662:	f004 f98f 	bl	8005984 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001666:	2322      	movs	r3, #34	; 0x22
 8001668:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800166a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166e:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001670:	2340      	movs	r3, #64	; 0x40
 8001672:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001674:	2301      	movs	r3, #1
 8001676:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001678:	2302      	movs	r3, #2
 800167a:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800167c:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800167e:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001680:	2228      	movs	r2, #40	; 0x28
 8001682:	9220      	str	r2, [sp, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001684:	9321      	str	r3, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001686:	9322      	str	r3, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001688:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168a:	a816      	add	r0, sp, #88	; 0x58
 800168c:	f004 fa34 	bl	8005af8 <HAL_RCC_OscConfig>
 8001690:	bb00      	cbnz	r0, 80016d4 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001692:	230f      	movs	r3, #15
 8001694:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001696:	2303      	movs	r3, #3
 8001698:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800169e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016a2:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a4:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016a6:	2104      	movs	r1, #4
 80016a8:	a811      	add	r0, sp, #68	; 0x44
 80016aa:	f004 fd05 	bl	80060b8 <HAL_RCC_ClockConfig>
 80016ae:	b998      	cbnz	r0, 80016d8 <SystemClock_Config+0x9c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80016b0:	2341      	movs	r3, #65	; 0x41
 80016b2:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016b4:	2300      	movs	r3, #0
 80016b6:	9301      	str	r3, [sp, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016b8:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ba:	4668      	mov	r0, sp
 80016bc:	f004 fe22 	bl	8006304 <HAL_RCCEx_PeriphCLKConfig>
 80016c0:	b960      	cbnz	r0, 80016dc <SystemClock_Config+0xa0>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_8);
 80016c2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80016c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80016ca:	2000      	movs	r0, #0
 80016cc:	f004 fc88 	bl	8005fe0 <HAL_RCC_MCOConfig>
}
 80016d0:	b024      	add	sp, #144	; 0x90
 80016d2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80016d4:	f7ff ff24 	bl	8001520 <Error_Handler>
    Error_Handler();
 80016d8:	f7ff ff22 	bl	8001520 <Error_Handler>
    Error_Handler();
 80016dc:	f7ff ff20 	bl	8001520 <Error_Handler>

080016e0 <main>:
{
 80016e0:	b508      	push	{r3, lr}
  HAL_Init();
 80016e2:	f003 fb61 	bl	8004da8 <HAL_Init>
  SystemClock_Config();
 80016e6:	f7ff ffa9 	bl	800163c <SystemClock_Config>
  MX_GPIO_Init();
 80016ea:	f7ff fe33 	bl	8001354 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016ee:	f7ff ff19 	bl	8001524 <MX_I2C1_Init>
  MX_DMA_Init();
 80016f2:	f7ff fed3 	bl	800149c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80016f6:	f7ff ff3f 	bl	8001578 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80016fa:	f7ff ff6f 	bl	80015dc <MX_TIM16_Init>
  printf("Starting...\r\n");
 80016fe:	4804      	ldr	r0, [pc, #16]	; (8001710 <main+0x30>)
 8001700:	f006 fcce 	bl	80080a0 <puts>
  MasterFunctions.Connect( &hi2c1, &htim16, &huart1 );
 8001704:	4a03      	ldr	r2, [pc, #12]	; (8001714 <main+0x34>)
 8001706:	4904      	ldr	r1, [pc, #16]	; (8001718 <main+0x38>)
 8001708:	4804      	ldr	r0, [pc, #16]	; (800171c <main+0x3c>)
 800170a:	f7ff fd0b 	bl	8001124 <Master_Connect>
  while (1)
 800170e:	e7fe      	b.n	800170e <main+0x2e>
 8001710:	0800b1c4 	.word	0x0800b1c4
 8001714:	20002588 	.word	0x20002588
 8001718:	20002678 	.word	0x20002678
 800171c:	200024dc 	.word	0x200024dc

08001720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001720:	b500      	push	{lr}
 8001722:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_MspInit+0x3c>)
 8001726:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001728:	f042 0201 	orr.w	r2, r2, #1
 800172c:	661a      	str	r2, [r3, #96]	; 0x60
 800172e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001730:	f002 0201 	and.w	r2, r2, #1
 8001734:	9200      	str	r2, [sp, #0]
 8001736:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001738:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800173a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800173e:	659a      	str	r2, [r3, #88]	; 0x58
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800174a:	2005      	movs	r0, #5
 800174c:	f003 fb62 	bl	8004e14 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001750:	f004 f99e 	bl	8005a90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001754:	b003      	add	sp, #12
 8001756:	f85d fb04 	ldr.w	pc, [sp], #4
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001760:	b510      	push	{r4, lr}
 8001762:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	2300      	movs	r3, #0
 8001766:	9303      	str	r3, [sp, #12]
 8001768:	9304      	str	r3, [sp, #16]
 800176a:	9305      	str	r3, [sp, #20]
 800176c:	9306      	str	r3, [sp, #24]
 800176e:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8001770:	6802      	ldr	r2, [r0, #0]
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <HAL_I2C_MspInit+0x64>)
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001778:	b008      	add	sp, #32
 800177a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	4c12      	ldr	r4, [pc, #72]	; (80017c8 <HAL_I2C_MspInit+0x68>)
 800177e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001786:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SIOD_Pin|SIOC_Pin;
 8001790:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001794:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001796:	2312      	movs	r3, #18
 8001798:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179a:	2301      	movs	r3, #1
 800179c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800179e:	2302      	movs	r3, #2
 80017a0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a2:	2304      	movs	r3, #4
 80017a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	a903      	add	r1, sp, #12
 80017a8:	4808      	ldr	r0, [pc, #32]	; (80017cc <HAL_I2C_MspInit+0x6c>)
 80017aa:	f003 fd95 	bl	80052d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b4:	65a3      	str	r3, [r4, #88]	; 0x58
 80017b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017bc:	9302      	str	r3, [sp, #8]
 80017be:	9b02      	ldr	r3, [sp, #8]
}
 80017c0:	e7da      	b.n	8001778 <HAL_I2C_MspInit+0x18>
 80017c2:	bf00      	nop
 80017c4:	40005400 	.word	0x40005400
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48000400 	.word	0x48000400

080017d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017d0:	b530      	push	{r4, r5, lr}
 80017d2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	2300      	movs	r3, #0
 80017d6:	9303      	str	r3, [sp, #12]
 80017d8:	9304      	str	r3, [sp, #16]
 80017da:	9305      	str	r3, [sp, #20]
 80017dc:	9306      	str	r3, [sp, #24]
 80017de:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM16)
 80017e0:	6802      	ldr	r2, [r0, #0]
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <HAL_TIM_Base_MspInit+0x94>)
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80017e8:	b009      	add	sp, #36	; 0x24
 80017ea:	bd30      	pop	{r4, r5, pc}
 80017ec:	4604      	mov	r4, r0
    __HAL_RCC_TIM16_CLK_ENABLE();
 80017ee:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 80017f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017f8:	661a      	str	r2, [r3, #96]	; 0x60
 80017fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017fc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001800:	9201      	str	r2, [sp, #4]
 8001802:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001804:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001806:	f042 0202 	orr.w	r2, r2, #2
 800180a:	64da      	str	r2, [r3, #76]	; 0x4c
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	9302      	str	r3, [sp, #8]
 8001814:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PCLK_Pin;
 8001816:	2310      	movs	r3, #16
 8001818:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2500      	movs	r5, #0
 8001820:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001824:	2301      	movs	r3, #1
 8001826:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(PCLK_GPIO_Port, &GPIO_InitStruct);
 8001828:	a903      	add	r1, sp, #12
 800182a:	480f      	ldr	r0, [pc, #60]	; (8001868 <HAL_TIM_Base_MspInit+0x98>)
 800182c:	f003 fd54 	bl	80052d8 <HAL_GPIO_Init>
    hdma_tim16_ch1.Instance = DMA1_Channel1;
 8001830:	480e      	ldr	r0, [pc, #56]	; (800186c <HAL_TIM_Base_MspInit+0x9c>)
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_TIM_Base_MspInit+0xa0>)
 8001834:	6003      	str	r3, [r0, #0]
    hdma_tim16_ch1.Init.Request = DMA_REQUEST_TIM16_CH1;
 8001836:	2352      	movs	r3, #82	; 0x52
 8001838:	6043      	str	r3, [r0, #4]
    hdma_tim16_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183a:	6085      	str	r5, [r0, #8]
    hdma_tim16_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800183c:	60c5      	str	r5, [r0, #12]
    hdma_tim16_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	6103      	str	r3, [r0, #16]
    hdma_tim16_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001842:	6145      	str	r5, [r0, #20]
    hdma_tim16_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001844:	6185      	str	r5, [r0, #24]
    hdma_tim16_ch1.Init.Mode = DMA_CIRCULAR;
 8001846:	2320      	movs	r3, #32
 8001848:	61c3      	str	r3, [r0, #28]
    hdma_tim16_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800184a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800184e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1) != HAL_OK)
 8001850:	f003 fbb4 	bl	8004fbc <HAL_DMA_Init>
 8001854:	b918      	cbnz	r0, 800185e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1);
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_TIM_Base_MspInit+0x9c>)
 8001858:	6263      	str	r3, [r4, #36]	; 0x24
 800185a:	629c      	str	r4, [r3, #40]	; 0x28
}
 800185c:	e7c4      	b.n	80017e8 <HAL_TIM_Base_MspInit+0x18>
      Error_Handler();
 800185e:	f7ff fe5f 	bl	8001520 <Error_Handler>
 8001862:	e7f8      	b.n	8001856 <HAL_TIM_Base_MspInit+0x86>
 8001864:	40014400 	.word	0x40014400
 8001868:	48000400 	.word	0x48000400
 800186c:	20002618 	.word	0x20002618
 8001870:	40020008 	.word	0x40020008

08001874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001874:	b570      	push	{r4, r5, r6, lr}
 8001876:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	2300      	movs	r3, #0
 800187a:	9303      	str	r3, [sp, #12]
 800187c:	9304      	str	r3, [sp, #16]
 800187e:	9305      	str	r3, [sp, #20]
 8001880:	9306      	str	r3, [sp, #24]
 8001882:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8001884:	6802      	ldr	r2, [r0, #0]
 8001886:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <HAL_UART_MspInit+0xc4>)
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800188c:	b008      	add	sp, #32
 800188e:	bd70      	pop	{r4, r5, r6, pc}
 8001890:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001892:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001896:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001898:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800189c:	661a      	str	r2, [r3, #96]	; 0x60
 800189e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018a0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80018a4:	9201      	str	r2, [sp, #4]
 80018a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	9302      	str	r3, [sp, #8]
 80018b8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = CAM_TX_Pin;
 80018ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c0:	2312      	movs	r3, #18
 80018c2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2500      	movs	r5, #0
 80018c6:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018cc:	2607      	movs	r6, #7
 80018ce:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(CAM_TX_GPIO_Port, &GPIO_InitStruct);
 80018d0:	a903      	add	r1, sp, #12
 80018d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d6:	f003 fcff 	bl	80052d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAM_RX_Pin;
 80018da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018e8:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(CAM_RX_GPIO_Port, &GPIO_InitStruct);
 80018ea:	a903      	add	r1, sp, #12
 80018ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f0:	f003 fcf2 	bl	80052d8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel2;
 80018f4:	4811      	ldr	r0, [pc, #68]	; (800193c <HAL_UART_MspInit+0xc8>)
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_UART_MspInit+0xcc>)
 80018f8:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80018fa:	2319      	movs	r3, #25
 80018fc:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018fe:	2310      	movs	r3, #16
 8001900:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001902:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001908:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800190a:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800190c:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800190e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001912:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001914:	f003 fb52 	bl	8004fbc <HAL_DMA_Init>
 8001918:	b958      	cbnz	r0, 8001932 <HAL_UART_MspInit+0xbe>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <HAL_UART_MspInit+0xc8>)
 800191c:	67a3      	str	r3, [r4, #120]	; 0x78
 800191e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	4611      	mov	r1, r2
 8001924:	2025      	movs	r0, #37	; 0x25
 8001926:	f003 fa87 	bl	8004e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800192a:	2025      	movs	r0, #37	; 0x25
 800192c:	f003 fab8 	bl	8004ea0 <HAL_NVIC_EnableIRQ>
}
 8001930:	e7ac      	b.n	800188c <HAL_UART_MspInit+0x18>
      Error_Handler();
 8001932:	f7ff fdf5 	bl	8001520 <Error_Handler>
 8001936:	e7f0      	b.n	800191a <HAL_UART_MspInit+0xa6>
 8001938:	40013800 	.word	0x40013800
 800193c:	20002528 	.word	0x20002528
 8001940:	4002041c 	.word	0x4002041c

08001944 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <NMI_Handler>

08001946 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler>

08001948 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <MemManage_Handler>

0800194a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler>

0800194c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <UsageFault_Handler>

0800194e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194e:	4770      	bx	lr

08001950 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001950:	4770      	bx	lr

08001952 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001952:	4770      	bx	lr

08001954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001954:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001956:	f003 fa37 	bl	8004dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195a:	bd08      	pop	{r3, pc}

0800195c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800195c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800195e:	2001      	movs	r0, #1
 8001960:	f003 fd9a 	bl	8005498 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001964:	bd08      	pop	{r3, pc}

08001966 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001966:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001968:	2008      	movs	r0, #8
 800196a:	f003 fd95 	bl	8005498 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800196e:	bd08      	pop	{r3, pc}

08001970 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001970:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
//////////////
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim16_ch1);
 8001972:	4802      	ldr	r0, [pc, #8]	; (800197c <DMA1_Channel1_IRQHandler+0xc>)
 8001974:	f003 fc4d 	bl	8005212 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
//////////////
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001978:	bd08      	pop	{r3, pc}
 800197a:	bf00      	nop
 800197c:	20002618 	.word	0x20002618

08001980 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001980:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001982:	4802      	ldr	r0, [pc, #8]	; (800198c <USART1_IRQHandler+0xc>)
 8001984:	f005 f8c2 	bl	8006b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001988:	bd08      	pop	{r3, pc}
 800198a:	bf00      	nop
 800198c:	20002588 	.word	0x20002588

08001990 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001990:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001992:	4802      	ldr	r0, [pc, #8]	; (800199c <DMA2_Channel2_IRQHandler+0xc>)
 8001994:	f003 fc3d 	bl	8005212 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001998:	bd08      	pop	{r3, pc}
 800199a:	bf00      	nop
 800199c:	20002528 	.word	0x20002528

080019a0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80019a0:	2001      	movs	r0, #1
 80019a2:	4770      	bx	lr

080019a4 <_kill>:

int _kill(int pid, int sig)
{
 80019a4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80019a6:	f005 fd83 	bl	80074b0 <__errno>
 80019aa:	2316      	movs	r3, #22
 80019ac:	6003      	str	r3, [r0, #0]
	return -1;
}
 80019ae:	f04f 30ff 	mov.w	r0, #4294967295
 80019b2:	bd08      	pop	{r3, pc}

080019b4 <_exit>:

void _exit (int status)
{
 80019b4:	b508      	push	{r3, lr}
	_kill(status, -1);
 80019b6:	f04f 31ff 	mov.w	r1, #4294967295
 80019ba:	f7ff fff3 	bl	80019a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019be:	e7fe      	b.n	80019be <_exit+0xa>

080019c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c0:	b570      	push	{r4, r5, r6, lr}
 80019c2:	460c      	mov	r4, r1
 80019c4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c6:	2500      	movs	r5, #0
 80019c8:	42b5      	cmp	r5, r6
 80019ca:	da07      	bge.n	80019dc <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 80019cc:	f3af 8000 	nop.w
 80019d0:	4621      	mov	r1, r4
 80019d2:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d6:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80019d8:	460c      	mov	r4, r1
 80019da:	e7f5      	b.n	80019c8 <_read+0x8>
	}

return len;
}
 80019dc:	4630      	mov	r0, r6
 80019de:	bd70      	pop	{r4, r5, r6, pc}

080019e0 <_close>:
}

int _close(int file)
{
	return -1;
}
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	4770      	bx	lr

080019e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80019e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ea:	604b      	str	r3, [r1, #4]
	return 0;
}
 80019ec:	2000      	movs	r0, #0
 80019ee:	4770      	bx	lr

080019f0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80019f0:	2001      	movs	r0, #1
 80019f2:	4770      	bx	lr

080019f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80019f4:	2000      	movs	r0, #0
 80019f6:	4770      	bx	lr

080019f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f8:	b510      	push	{r4, lr}
 80019fa:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019fc:	4a0c      	ldr	r2, [pc, #48]	; (8001a30 <_sbrk+0x38>)
 80019fe:	490d      	ldr	r1, [pc, #52]	; (8001a34 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a00:	480d      	ldr	r0, [pc, #52]	; (8001a38 <_sbrk+0x40>)
 8001a02:	6800      	ldr	r0, [r0, #0]
 8001a04:	b140      	cbz	r0, 8001a18 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a06:	480c      	ldr	r0, [pc, #48]	; (8001a38 <_sbrk+0x40>)
 8001a08:	6800      	ldr	r0, [r0, #0]
 8001a0a:	4403      	add	r3, r0
 8001a0c:	1a52      	subs	r2, r2, r1
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d806      	bhi.n	8001a20 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001a12:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <_sbrk+0x40>)
 8001a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001a16:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001a18:	4807      	ldr	r0, [pc, #28]	; (8001a38 <_sbrk+0x40>)
 8001a1a:	4c08      	ldr	r4, [pc, #32]	; (8001a3c <_sbrk+0x44>)
 8001a1c:	6004      	str	r4, [r0, #0]
 8001a1e:	e7f2      	b.n	8001a06 <_sbrk+0xe>
    errno = ENOMEM;
 8001a20:	f005 fd46 	bl	80074b0 <__errno>
 8001a24:	230c      	movs	r3, #12
 8001a26:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	e7f3      	b.n	8001a16 <_sbrk+0x1e>
 8001a2e:	bf00      	nop
 8001a30:	20008000 	.word	0x20008000
 8001a34:	00000400 	.word	0x00000400
 8001a38:	2000203c 	.word	0x2000203c
 8001a3c:	20002ab8 	.word	0x20002ab8

08001a40 <RhoCapture_CaptureRow>:
                 register index_t * thresh_address
//#ifdef __CHECK_FRAME_FLAG__
//                 , const register byte_t * flag_address
//#endif
				 )
{
 8001a40:	b410      	push	{r4}
        	break;
        if( working_register >= thresh_value )
            *(thresh_address++) = capture_offset;
    }
#else
    __asm volatile
 8001a42:	2400      	movs	r4, #0

08001a44 <capture_start>:
 8001a44:	5d0c      	ldrb	r4, [r1, r4]
 8001a46:	4404      	add	r4, r0
 8001a48:	2c50      	cmp	r4, #80	; 0x50
 8001a4a:	da04      	bge.n	8001a56 <capture_end>
 8001a4c:	4294      	cmp	r4, r2
 8001a4e:	dbf9      	blt.n	8001a44 <capture_start>
 8001a50:	f823 4b02 	strh.w	r4, [r3], #2
 8001a54:	e7f6      	b.n	8001a44 <capture_start>

08001a56 <capture_end>:
		[cap_s] "I"(CAPTURE_BUFFER_SIZE),
		[thr_w] "I"(sizeof(index_t))
	);
#endif
    return thresh_address;
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <RhoCapture_ProcessFrameSection>:
				register index_t * thresh_address,
				const register index_t * thresh_end,
				const register density_t Cx,
				register sdensity_t * Dy,
				register sdensity_t * Dx_i )
{
 8001a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a62:	9d08      	ldr	r5, [sp, #32]
    register uint32_t value_register 	= 0;
    const register sdensity_t * Dx_end  = Dx_i + rows;
 8001a64:	eb05 0141 	add.w	r1, r5, r1, lsl #1
            }
        }
    }
#else
    register uint32_t working_register		= 0;
    __asm volatile
 8001a68:	f04f 0e00 	mov.w	lr, #0
 8001a6c:	4674      	mov	r4, lr
 8001a6e:	f8bd c018 	ldrh.w	ip, [sp, #24]
 8001a72:	9f07      	ldr	r7, [sp, #28]
 8001a74:	46f0      	mov	r8, lr

08001a76 <sec_proc_loop>:
 8001a76:	f832 eb02 	ldrh.w	lr, [r2], #2
 8001a7a:	f1be 0f50 	cmp.w	lr, #80	; 0x50
 8001a7e:	da0f      	bge.n	8001aa0 <row_end>

08001a80 <left_value>:
 8001a80:	45e6      	cmp	lr, ip
 8001a82:	dc02      	bgt.n	8001a8a <right_value>
 8001a84:	f104 0401 	add.w	r4, r4, #1
 8001a88:	e001      	b.n	8001a8e <row_update>

08001a8a <right_value>:
 8001a8a:	f108 0801 	add.w	r8, r8, #1

08001a8e <row_update>:
 8001a8e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8001a92:	f837 e00e 	ldrh.w	lr, [r7, lr]
 8001a96:	f10e 0e01 	add.w	lr, lr, #1
 8001a9a:	f827 e00e 	strh.w	lr, [r7, lr]
 8001a9e:	e7ea      	b.n	8001a76 <sec_proc_loop>

08001aa0 <row_end>:
 8001aa0:	eb04 0e08 	add.w	lr, r4, r8
 8001aa4:	fade fe5e 	uqsub16	lr, lr, lr
 8001aa8:	f825 eb02 	strh.w	lr, [r5], #2
 8001aac:	428d      	cmp	r5, r1
 8001aae:	da03      	bge.n	8001ab8 <sec_proc_end>
 8001ab0:	46f6      	mov	lr, lr
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	da00      	bge.n	8001ab8 <sec_proc_end>
 8001ab6:	dbde      	blt.n	8001a76 <sec_proc_loop>

08001ab8 <sec_proc_end>:
		[thr_w] "I"(sizeof(index_t)),
		[d_w] "I"(sizeof(sdensity_t)),
		[cap_s] "I" (CAPTURE_BUFFER_SIZE)
    );
#endif
    return (section_process_t){ Q_left, Q_right, complete };
 8001ab8:	6004      	str	r4, [r0, #0]
 8001aba:	f8c0 8004 	str.w	r8, [r0, #4]
 8001abe:	f880 e008 	strb.w	lr, [r0, #8]
}
 8001ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001ac8 <RhoSystem_PerformProcess>:
/************************************************************************
 *                      Functions Declarations                          *
 ***********************************************************************/
/* Main application process */
void RhoSystem_PerformProcess( void )
{
 8001ac8:	b508      	push	{r3, lr}
    if( RhoSystem.Variables.Flags->Active == false ) return;
 8001aca:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <RhoSystem_PerformProcess+0x18>)
 8001acc:	f641 438c 	movw	r3, #7308	; 0x1c8c
 8001ad0:	58d3      	ldr	r3, [r2, r3]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	b11b      	cbz	r3, 8001ade <RhoSystem_PerformProcess+0x16>
//    while(!RhoSystem.Variables.Flags->Frame);
    RhoSystem.Functions.Perform.FrameCapture();
 8001ad6:	f641 4398 	movw	r3, #7320	; 0x1c98
 8001ada:	58d3      	ldr	r3, [r2, r3]
 8001adc:	4798      	blx	r3
//    RhoCore.Perform( &RhoSystem.Variables.Utility, RhoSystem.Variables.Flags->Backgrounding );
//    RhoSystem.Functions.Perform.TransmitPacket();
}
 8001ade:	bd08      	pop	{r3, pc}
 8001ae0:	20000110 	.word	0x20000110

08001ae4 <RhoSystem_Activate>:
    FilterPixelCount( PixelCount, NewCount );
    return ( *PixelCount < FactoredOldCount );
}

void RhoSystem_Activate( void  )
{
 8001ae4:	b510      	push	{r4, lr}
    RhoSystem.Variables.Flags->Active = true;
 8001ae6:	4c0a      	ldr	r4, [pc, #40]	; (8001b10 <RhoSystem_Activate+0x2c>)
 8001ae8:	f641 428c 	movw	r2, #7308	; 0x1c8c
 8001aec:	58a1      	ldr	r1, [r4, r2]
 8001aee:	2301      	movs	r3, #1
 8001af0:	700b      	strb	r3, [r1, #0]
    RhoSystem.Variables.Flags->IRQ = true;
 8001af2:	58a2      	ldr	r2, [r4, r2]
 8001af4:	7053      	strb	r3, [r2, #1]
    RhoSystem.Functions.Platform.DMA.Resume( RhoSystem.Variables.Addresses.CameraDMA );
 8001af6:	f641 43d8 	movw	r3, #7384	; 0x1cd8
 8001afa:	58e3      	ldr	r3, [r4, r3]
 8001afc:	f641 4270 	movw	r2, #7280	; 0x1c70
 8001b00:	58a0      	ldr	r0, [r4, r2]
 8001b02:	4798      	blx	r3
    RhoSystem.Functions.Perform.TransmitPacket();
 8001b04:	f641 43a4 	movw	r3, #7332	; 0x1ca4
 8001b08:	58e3      	ldr	r3, [r4, r3]
 8001b0a:	4798      	blx	r3
}
 8001b0c:	bd10      	pop	{r4, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000110 	.word	0x20000110

08001b14 <DeactivateRhoSystem>:

void DeactivateRhoSystem( void )
{
 8001b14:	b510      	push	{r4, lr}
    // TODO: zero period
    RhoSystem.Variables.Flags->Active = false;
 8001b16:	4c0a      	ldr	r4, [pc, #40]	; (8001b40 <DeactivateRhoSystem+0x2c>)
 8001b18:	f641 428c 	movw	r2, #7308	; 0x1c8c
 8001b1c:	58a1      	ldr	r1, [r4, r2]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	700b      	strb	r3, [r1, #0]
    RhoSystem.Variables.Flags->IRQ = false;
 8001b22:	58a2      	ldr	r2, [r4, r2]
 8001b24:	7053      	strb	r3, [r2, #1]
    RhoSystem.Functions.Platform.DMA.Pause( RhoSystem.Variables.Addresses.CameraDMA );
 8001b26:	f641 43d4 	movw	r3, #7380	; 0x1cd4
 8001b2a:	58e3      	ldr	r3, [r4, r3]
 8001b2c:	f641 4270 	movw	r2, #7280	; 0x1c70
 8001b30:	58a0      	ldr	r0, [r4, r2]
 8001b32:	4798      	blx	r3
    RhoSystem.Functions.Perform.TransmitPacket();
 8001b34:	f641 43a4 	movw	r3, #7332	; 0x1ca4
 8001b38:	58e3      	ldr	r3, [r4, r3]
 8001b3a:	4798      	blx	r3
}
 8001b3c:	bd10      	pop	{r4, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000110 	.word	0x20000110

08001b44 <RhoSystem_TransmitPacket>:

inline void RhoSystem_TransmitPacket( void )
{
    //RhoSystem.Functions.Platform.Host.Transmit( (byte_t *)&RhoSystem.Variables.Utility.Packet, sizeof(packet_t) );
}
 8001b44:	4770      	bx	lr
	...

08001b48 <CaptureRowCallback>:
{
 8001b48:	b570      	push	{r4, r5, r6, lr}
} rho_system_t;

extern rho_system_t RhoSystem;

static inline void EnableCaptureCallback(  void ) { RhoSystem.Variables.Flags->IRQ  = 1; } //RhoSystem.Variables.Flags->Capture.Flag
static inline void DisableCaptureCallback( void ) { RhoSystem.Variables.Flags->IRQ  = 0; }
 8001b4a:	4c1d      	ldr	r4, [pc, #116]	; (8001bc0 <CaptureRowCallback+0x78>)
 8001b4c:	f641 468c 	movw	r6, #7308	; 0x1c8c
 8001b50:	59a3      	ldr	r3, [r4, r6]
 8001b52:	2200      	movs	r2, #0
 8001b54:	705a      	strb	r2, [r3, #1]
    RhoSystem.Variables.Addresses.Capture = RhoSystem.Variables.Buffers.Capture + RhoSystem.Variables.Flags->EvenRowToggle;
 8001b56:	f641 4374 	movw	r3, #7284	; 0x1c74
 8001b5a:	58e1      	ldr	r1, [r4, r3]
 8001b5c:	59a3      	ldr	r3, [r4, r6]
 8001b5e:	799b      	ldrb	r3, [r3, #6]
 8001b60:	4419      	add	r1, r3
 8001b62:	f641 4368 	movw	r3, #7272	; 0x1c68
 8001b66:	50e1      	str	r1, [r4, r3]
    RhoSystem.Variables.Addresses.Thresh = RhoCapture_CaptureRow(
 8001b68:	f641 456c 	movw	r5, #7276	; 0x1c6c
 8001b6c:	5963      	ldr	r3, [r4, r5]
 8001b6e:	f894 2357 	ldrb.w	r2, [r4, #855]	; 0x357
 8001b72:	f894 0356 	ldrb.w	r0, [r4, #854]	; 0x356
 8001b76:	f7ff ff63 	bl	8001a40 <RhoCapture_CaptureRow>
	*(RhoSystem.Variables.Addresses.Thresh++) = CAPTURE_ROW_END;
 8001b7a:	1c83      	adds	r3, r0, #2
 8001b7c:	5163      	str	r3, [r4, r5]
 8001b7e:	2350      	movs	r3, #80	; 0x50
 8001b80:	8003      	strh	r3, [r0, #0]
    RhoSystem.Variables.Flags->EvenRowToggle = !RhoSystem.Variables.Flags->EvenRowToggle;
 8001b82:	59a2      	ldr	r2, [r4, r6]
 8001b84:	7993      	ldrb	r3, [r2, #6]
 8001b86:	f083 0301 	eor.w	r3, r3, #1
 8001b8a:	7193      	strb	r3, [r2, #6]
    RhoSystem.Functions.Platform.DMA.Reset( RhoSystem.Variables.Addresses.CameraDMA );
 8001b8c:	f641 43dc 	movw	r3, #7388	; 0x1cdc
 8001b90:	58e3      	ldr	r3, [r4, r3]
 8001b92:	f641 4270 	movw	r2, #7280	; 0x1c70
 8001b96:	58a0      	ldr	r0, [r4, r2]
 8001b98:	4798      	blx	r3
    if( ( (uint32_t)( RhoSystem.Variables.Addresses.Thresh + CAPTURE_BUFFER_SIZE ) < (uint32_t)RhoSystem.Variables.Addresses.ThreshMax )
 8001b9a:	5963      	ldr	r3, [r4, r5]
 8001b9c:	33a0      	adds	r3, #160	; 0xa0
 8001b9e:	f641 425c 	movw	r2, #7260	; 0x1c5c
 8001ba2:	58a2      	ldr	r2, [r4, r2]
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d209      	bcs.n	8001bbc <CaptureRowCallback+0x74>
        && ( --RhoSystem.Variables.Utility.rows_left > 0 ))
 8001ba8:	f8b4 3344 	ldrh.w	r3, [r4, #836]	; 0x344
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f8a4 3344 	strh.w	r3, [r4, #836]	; 0x344
 8001bb4:	b113      	cbz	r3, 8001bbc <CaptureRowCallback+0x74>
static inline void EnableCaptureCallback(  void ) { RhoSystem.Variables.Flags->IRQ  = 1; } //RhoSystem.Variables.Flags->Capture.Flag
 8001bb6:	59a3      	ldr	r3, [r4, r6]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	705a      	strb	r2, [r3, #1]
}
 8001bbc:	bd70      	pop	{r4, r5, r6, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000110 	.word	0x20000110

08001bc4 <RhoSystem_ConnectToInterface>:
    /* Start with backgrounding disabled */
    DeactivateBackgrounding();
}

void RhoSystem_ConnectToInterface( platform_interface_functions * platform_interface, camera_application_flags * flags, dma_info_t * camera_dma )
{
 8001bc4:	b538      	push	{r3, r4, r5, lr}
 8001bc6:	460d      	mov	r5, r1
 8001bc8:	4614      	mov	r4, r2
  memcpy( (void *)&RhoSystem.Functions.Platform, platform_interface, sizeof(platform_interface_functions) );
 8001bca:	2260      	movs	r2, #96	; 0x60
 8001bcc:	4601      	mov	r1, r0
 8001bce:	4805      	ldr	r0, [pc, #20]	; (8001be4 <RhoSystem_ConnectToInterface+0x20>)
 8001bd0:	f005 fca0 	bl	8007514 <memcpy>
  RhoSystem.Variables.Flags = flags;
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <RhoSystem_ConnectToInterface+0x24>)
 8001bd6:	f641 428c 	movw	r2, #7308	; 0x1c8c
 8001bda:	509d      	str	r5, [r3, r2]
  RhoSystem.Variables.Addresses.CameraDMA = camera_dma;
 8001bdc:	f641 4270 	movw	r2, #7280	; 0x1c70
 8001be0:	509c      	str	r4, [r3, r2]
}
 8001be2:	bd38      	pop	{r3, r4, r5, pc}
 8001be4:	20001dc8 	.word	0x20001dc8
 8001be8:	20000110 	.word	0x20000110

08001bec <ZeroRhoSystemMemory>:

void ZeroRhoSystemMemory( void )
{
 8001bec:	b510      	push	{r4, lr}
    memset( RhoSystem.Variables.Buffers.Thresh,   0, sizeof(uint16_t)   * THRESH_BUFFER_SIZE );
 8001bee:	4c08      	ldr	r4, [pc, #32]	; (8001c10 <ZeroRhoSystemMemory+0x24>)
 8001bf0:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	f641 4378 	movw	r3, #7288	; 0x1c78
 8001bfa:	58e0      	ldr	r0, [r4, r3]
 8001bfc:	f005 fc98 	bl	8007530 <memset>
    memset( RhoSystem.Variables.Buffers.Quadrant, 0, sizeof(density_t) * 4                  );
 8001c00:	f641 4384 	movw	r3, #7300	; 0x1c84
 8001c04:	58e3      	ldr	r3, [r4, r3]
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
}
 8001c0c:	bd10      	pop	{r4, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000110 	.word	0x20000110

08001c14 <CaptureAndProcessFrame>:
{
 8001c14:	b510      	push	{r4, lr}
    RhoSystem.Variables.Addresses.Thresh = RhoSystem.Variables.Buffers.Thresh;
 8001c16:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <CaptureAndProcessFrame+0x7c>)
 8001c18:	f641 4278 	movw	r2, #7288	; 0x1c78
 8001c1c:	589a      	ldr	r2, [r3, r2]
 8001c1e:	f641 416c 	movw	r1, #7276	; 0x1c6c
 8001c22:	505a      	str	r2, [r3, r1]
    RhoSystem.Variables.Utility.rows_left = (uint16_t)RhoSystem.Variables.Utility.height;
 8001c24:	f8b3 1342 	ldrh.w	r1, [r3, #834]	; 0x342
 8001c28:	f8a3 1344 	strh.w	r1, [r3, #836]	; 0x344
    RhoSystem.Variables.Addresses.Capture = (byte_t *)RhoSystem.Variables.Addresses.Thresh;
 8001c2c:	f641 4168 	movw	r1, #7272	; 0x1c68
 8001c30:	505a      	str	r2, [r3, r1]
    RhoSystem.Variables.Flags->EvenRowToggle = false;
 8001c32:	f641 428c 	movw	r2, #7308	; 0x1c8c
 8001c36:	5899      	ldr	r1, [r3, r2]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	718a      	strb	r2, [r1, #6]
    capture_buffer = (uint32_t)RhoSystem.Variables.Buffers.Capture;
 8001c3c:	f641 4174 	movw	r1, #7284	; 0x1c74
 8001c40:	5859      	ldr	r1, [r3, r1]
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <CaptureAndProcessFrame+0x80>)
 8001c44:	6019      	str	r1, [r3, #0]
	HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, 0 );
 8001c46:	2140      	movs	r1, #64	; 0x40
 8001c48:	4813      	ldr	r0, [pc, #76]	; (8001c98 <CaptureAndProcessFrame+0x84>)
 8001c4a:	f003 fc17 	bl	800547c <HAL_GPIO_WritePin>
    while(!RhoSystem.Variables.Flags->Row);
 8001c4e:	4a10      	ldr	r2, [pc, #64]	; (8001c90 <CaptureAndProcessFrame+0x7c>)
 8001c50:	f641 438c 	movw	r3, #7308	; 0x1c8c
 8001c54:	58d3      	ldr	r3, [r2, r3]
 8001c56:	78db      	ldrb	r3, [r3, #3]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f8      	beq.n	8001c4e <CaptureAndProcessFrame+0x3a>
	HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, 1 );
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2140      	movs	r1, #64	; 0x40
 8001c60:	480d      	ldr	r0, [pc, #52]	; (8001c98 <CaptureAndProcessFrame+0x84>)
 8001c62:	f003 fc0b 	bl	800547c <HAL_GPIO_WritePin>
    while(RhoSystem.Variables.Flags->Row);
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <CaptureAndProcessFrame+0x7c>)
 8001c68:	f641 438c 	movw	r3, #7308	; 0x1c8c
 8001c6c:	58d3      	ldr	r3, [r2, r3]
 8001c6e:	78db      	ldrb	r3, [r3, #3]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f8      	bne.n	8001c66 <CaptureAndProcessFrame+0x52>
	HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, 0 );
 8001c74:	4c08      	ldr	r4, [pc, #32]	; (8001c98 <CaptureAndProcessFrame+0x84>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	2140      	movs	r1, #64	; 0x40
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f003 fbfe 	bl	800547c <HAL_GPIO_WritePin>
    CaptureRowCallback();
 8001c80:	f7ff ff62 	bl	8001b48 <CaptureRowCallback>
	HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, 1 );
 8001c84:	2201      	movs	r2, #1
 8001c86:	2140      	movs	r1, #64	; 0x40
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f003 fbf7 	bl	800547c <HAL_GPIO_WritePin>
}
 8001c8e:	bd10      	pop	{r4, pc}
 8001c90:	20000110 	.word	0x20000110
 8001c94:	20002a98 	.word	0x20002a98
 8001c98:	48000400 	.word	0x48000400

08001c9c <RhoSystem_ProcessFrameCapture>:
{
 8001c9c:	b510      	push	{r4, lr}
    RhoSystem.Functions.Memory.Zero();
 8001c9e:	4c08      	ldr	r4, [pc, #32]	; (8001cc0 <RhoSystem_ProcessFrameCapture+0x24>)
 8001ca0:	f641 5318 	movw	r3, #7448	; 0x1d18
 8001ca4:	58e3      	ldr	r3, [r4, r3]
 8001ca6:	4798      	blx	r3
    RhoSystem.Functions.Platform.Interrupt.Enable();
 8001ca8:	f641 43c8 	movw	r3, #7368	; 0x1cc8
 8001cac:	58e3      	ldr	r3, [r4, r3]
 8001cae:	4798      	blx	r3
    CaptureAndProcessFrame();
 8001cb0:	f7ff ffb0 	bl	8001c14 <CaptureAndProcessFrame>
    RhoSystem.Functions.Platform.Interrupt.Disable();
 8001cb4:	f641 43cc 	movw	r3, #7372	; 0x1ccc
 8001cb8:	58e3      	ldr	r3, [r4, r3]
 8001cba:	4798      	blx	r3
}
 8001cbc:	bd10      	pop	{r4, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000110 	.word	0x20000110

08001cc4 <DeactivateBackgrounding>:
    RhoSystem.Variables.Flags->Backgrounding = false;
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <DeactivateBackgrounding+0x2c>)
 8001cc6:	f641 428c 	movw	r2, #7308	; 0x1c8c
 8001cca:	589a      	ldr	r2, [r3, r2]
 8001ccc:	2100      	movs	r1, #0
 8001cce:	7111      	strb	r1, [r2, #4]
    RhoSystem.Variables.Buffers.DensityX = RhoSystem.Variables.Utility.density_map_pair.x.map;
 8001cd0:	6819      	ldr	r1, [r3, #0]
 8001cd2:	f503 52e4 	add.w	r2, r3, #7296	; 0x1c80
 8001cd6:	6011      	str	r1, [r2, #0]
    RhoSystem.Variables.Buffers.DensityY = RhoSystem.Variables.Utility.density_map_pair.y.map;
 8001cd8:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8001cdc:	f641 427c 	movw	r2, #7292	; 0x1c7c
 8001ce0:	5099      	str	r1, [r3, r2]
    RhoSystem.Variables.Buffers.Quadrant = RhoSystem.Variables.Utility.quadrant;
 8001ce2:	f503 7157 	add.w	r1, r3, #860	; 0x35c
 8001ce6:	f641 4284 	movw	r2, #7300	; 0x1c84
 8001cea:	5099      	str	r1, [r3, r2]
}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000110 	.word	0x20000110

08001cf4 <RhoSystem_Initialize>:
{
 8001cf4:	b538      	push	{r3, r4, r5, lr}
    RhoSystem.Variables.Addresses.CameraPort  = CameraPort;
 8001cf6:	4c22      	ldr	r4, [pc, #136]	; (8001d80 <RhoSystem_Initialize+0x8c>)
 8001cf8:	f641 4348 	movw	r3, #7240	; 0x1c48
 8001cfc:	50e0      	str	r0, [r4, r3]
    RhoSystem.Variables.Addresses.HostTxPort  = HostTxPort;
 8001cfe:	f641 434c 	movw	r3, #7244	; 0x1c4c
 8001d02:	50e1      	str	r1, [r4, r3]
    RhoSystem.Variables.Addresses.CameraDMA->dst = (uint32_t)RhoSystem.Variables.Buffers.Capture;
 8001d04:	f641 4574 	movw	r5, #7284	; 0x1c74
 8001d08:	5961      	ldr	r1, [r4, r5]
 8001d0a:	f641 4370 	movw	r3, #7280	; 0x1c70
 8001d0e:	58e2      	ldr	r2, [r4, r3]
 8001d10:	6111      	str	r1, [r2, #16]
    RhoSystem.Functions.Platform.DMA.Init( RhoSystem.Variables.Addresses.CameraDMA );
 8001d12:	f641 42d0 	movw	r2, #7376	; 0x1cd0
 8001d16:	58a2      	ldr	r2, [r4, r2]
 8001d18:	58e0      	ldr	r0, [r4, r3]
 8001d1a:	4790      	blx	r2
    RhoSystem.Variables.Addresses.CaptureEnd  = (address_t)RhoSystem.Variables.Buffers.Capture;
 8001d1c:	5963      	ldr	r3, [r4, r5]
 8001d1e:	f641 4250 	movw	r2, #7248	; 0x1c50
 8001d22:	50a3      	str	r3, [r4, r2]
    RhoSystem.Variables.Addresses.CaptureMax  = (address_t)RhoSystem.Variables.Buffers.Capture[THRESH_BUFFER_SIZE];
 8001d24:	f893 21c2 	ldrb.w	r2, [r3, #450]	; 0x1c2
 8001d28:	f641 4354 	movw	r3, #7252	; 0x1c54
 8001d2c:	50e2      	str	r2, [r4, r3]
    RhoSystem.Variables.Addresses.ThreshMax   = (address_t)RhoSystem.Variables.Buffers.Thresh[THRESH_BUFFER_MAX];
 8001d2e:	f641 4378 	movw	r3, #7288	; 0x1c78
 8001d32:	58e3      	ldr	r3, [r4, r3]
 8001d34:	f8b3 1384 	ldrh.w	r1, [r3, #900]	; 0x384
 8001d38:	f641 425c 	movw	r2, #7260	; 0x1c5c
 8001d3c:	50a1      	str	r1, [r4, r2]
    RhoSystem.Variables.Addresses.ThreshEnd   = (address_t)RhoSystem.Variables.Buffers.Thresh;
 8001d3e:	f641 4258 	movw	r2, #7256	; 0x1c58
 8001d42:	50a3      	str	r3, [r4, r2]
    RhoSystem.Variables.Buffers.BeaconPacket  = malloc( sizeof( packet_t ) );
 8001d44:	2048      	movs	r0, #72	; 0x48
 8001d46:	f005 fbdd 	bl	8007504 <malloc>
 8001d4a:	f641 4388 	movw	r3, #7304	; 0x1c88
 8001d4e:	50e0      	str	r0, [r4, r3]
    RhoSystem.Variables.Buffers.BeaconPacket->header.id = BEACON_PACKET_ID;
 8001d50:	2311      	movs	r3, #17
 8001d52:	7003      	strb	r3, [r0, #0]
    RhoSystem.Variables.Buffers.BeaconPacket->header.includes = BEACON_DEFAULT_PERIOD;
 8001d54:	2314      	movs	r3, #20
 8001d56:	7043      	strb	r3, [r0, #1]
    RhoSystem.Functions.Memory.Zero();
 8001d58:	f641 5318 	movw	r3, #7448	; 0x1d18
 8001d5c:	58e3      	ldr	r3, [r4, r3]
 8001d5e:	4798      	blx	r3
    RhoCore.Initialize( &RhoSystem.Variables.Utility, CAPTURE_WIDTH, CAPTURE_HEIGHT );
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <RhoSystem_Initialize+0x90>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2232      	movs	r2, #50	; 0x32
 8001d66:	2150      	movs	r1, #80	; 0x50
 8001d68:	4620      	mov	r0, r4
 8001d6a:	4798      	blx	r3
    RhoSystem.Variables.Flags->Capture.Callback = RhoSystem.Functions.Perform.CaptureRowCallback;
 8001d6c:	f641 438c 	movw	r3, #7308	; 0x1c8c
 8001d70:	58e3      	ldr	r3, [r4, r3]
 8001d72:	f641 4294 	movw	r2, #7316	; 0x1c94
 8001d76:	58a2      	ldr	r2, [r4, r2]
 8001d78:	60da      	str	r2, [r3, #12]
    DeactivateBackgrounding();
 8001d7a:	f7ff ffa3 	bl	8001cc4 <DeactivateBackgrounding>
}
 8001d7e:	bd38      	pop	{r3, r4, r5, pc}
 8001d80:	20000110 	.word	0x20000110
 8001d84:	0800b2c8 	.word	0x0800b2c8

08001d88 <InitializeRhoCore>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *                      Functions Declarations                          *
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void InitializeRhoCore( rho_core_t * core, index_t width, index_t height )
{
 8001d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	460d      	mov	r5, r1
 8001d8e:	4616      	mov	r6, r2
    /* Generic Data */
    RhoUtility.Initialize.Data( core, width, height );
 8001d90:	f000 f9e2 	bl	8002158 <RhoUtility_InitializeData>

    /* Filters */
    RhoUtility.Initialize.Filters( core );
 8001d94:	4620      	mov	r0, r4
 8001d96:	f000 fa7b 	bl	8002290 <RhoUtility_InitializeFilters>
    
    /* Density Data */
    RhoUtility.Initialize.DensityMap( &core->density_map_pair.x, X_INSTANCE_NAME, height, core->centroid.y );
 8001d9a:	4f10      	ldr	r7, [pc, #64]	; (8001ddc <InitializeRhoCore+0x54>)
 8001d9c:	f8b4 3350 	ldrh.w	r3, [r4, #848]	; 0x350
 8001da0:	4632      	mov	r2, r6
 8001da2:	4639      	mov	r1, r7
 8001da4:	4620      	mov	r0, r4
 8001da6:	f000 fb1f 	bl	80023e8 <RhoUtility_InitializeDensityMap>
    RhoUtility.Initialize.DensityMap( &core->density_map_pair.y, Y_INSTANCE_NAME, width, core->centroid.x  );
 8001daa:	4e0d      	ldr	r6, [pc, #52]	; (8001de0 <InitializeRhoCore+0x58>)
 8001dac:	f8b4 334e 	ldrh.w	r3, [r4, #846]	; 0x34e
 8001db0:	462a      	mov	r2, r5
 8001db2:	4631      	mov	r1, r6
 8001db4:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
 8001db8:	f000 fb16 	bl	80023e8 <RhoUtility_InitializeDensityMap>

    /* Prediction Structures */
    RhoUtility.Initialize.Prediction( &core->prediction_pair.x, X_INSTANCE_NAME, core->height );
 8001dbc:	f8b4 2342 	ldrh.w	r2, [r4, #834]	; 0x342
 8001dc0:	4639      	mov	r1, r7
 8001dc2:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 8001dc6:	f000 fab3 	bl	8002330 <RhoUtility_InitializePrediction>
    RhoUtility.Initialize.Prediction( &core->prediction_pair.y, Y_INSTANCE_NAME, core->width  );
 8001dca:	f8b4 2340 	ldrh.w	r2, [r4, #832]	; 0x340
 8001dce:	4631      	mov	r1, r6
 8001dd0:	f604 0018 	addw	r0, r4, #2072	; 0x818
 8001dd4:	f000 faac 	bl	8002330 <RhoUtility_InitializePrediction>
#endif
#ifdef __PSM__
    PSMFunctions.Initialize( &core->PredictiveStateModelPair.x, X_INSTANCE_NAME );
    PSMFunctions.Initialize( &core->PredictiveStateModelPair.y, Y_INSTANCE_NAME );
#endif
}
 8001dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	0800b1d4 	.word	0x0800b1d4
 8001de0:	0800b78c 	.word	0x0800b78c

08001de4 <DetectRhoCore>:
    }
}

/* Calculate and process data in variance band from density filter to generate predictions */
void DetectRhoCore( rho_core_t * core, density_map_t * density_map, prediction_t * prediction )
{
 8001de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001de6:	4605      	mov	r5, r0
 8001de8:	460f      	mov	r7, r1
 8001dea:	4616      	mov	r6, r2
    LOG_RHO(RHO_DEBUG_2, "Detecting %s Map:\n", density_map->name );   
 8001dec:	2402      	movs	r4, #2
 8001dee:	e004      	b.n	8001dfa <DetectRhoCore+0x16>
 8001df0:	2009      	movs	r0, #9
 8001df2:	f006 f8d1 	bl	8007f98 <putchar>
 8001df6:	3401      	adds	r4, #1
 8001df8:	b2e4      	uxtb	r4, r4
 8001dfa:	2c03      	cmp	r4, #3
 8001dfc:	d9f8      	bls.n	8001df0 <DetectRhoCore+0xc>
 8001dfe:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 8001e02:	4823      	ldr	r0, [pc, #140]	; (8001e90 <DetectRhoCore+0xac>)
 8001e04:	f006 f8b0 	bl	8007f68 <iprintf>
    static rho_detection_variables _;
    RhoUtility.Reset.Detect( &_, density_map, prediction );
 8001e08:	4c22      	ldr	r4, [pc, #136]	; (8001e94 <DetectRhoCore+0xb0>)
 8001e0a:	4632      	mov	r2, r6
 8001e0c:	4639      	mov	r1, r7
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f000 fb58 	bl	80024c4 <RhoUtility_ResetForDetect>
    core->total_coverage = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c5 3390 	str.w	r3, [r5, #912]	; 0x390
    core->filtered_coverage = 0;
 8001e1a:	f8c5 3394 	str.w	r3, [r5, #916]	; 0x394
    _.target_density = core->target_filter.value * (floating_t)TOTAL_RHO_PIXELS;
 8001e1e:	f605 5148 	addw	r1, r5, #3400	; 0xd48
 8001e22:	2200      	movs	r2, #0
 8001e24:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <DetectRhoCore+0xb4>)
 8001e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e2a:	f7fe fc0d 	bl	8000648 <__aeabi_dmul>
 8001e2e:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68

    /* Perform detect */
    LOG_RHO(RHO_DEBUG_2, "Performing detect:\n");
 8001e32:	2402      	movs	r4, #2
 8001e34:	e004      	b.n	8001e40 <DetectRhoCore+0x5c>
 8001e36:	2009      	movs	r0, #9
 8001e38:	f006 f8ae 	bl	8007f98 <putchar>
 8001e3c:	3401      	adds	r4, #1
 8001e3e:	b2e4      	uxtb	r4, r4
 8001e40:	2c03      	cmp	r4, #3
 8001e42:	d9f8      	bls.n	8001e36 <DetectRhoCore+0x52>
 8001e44:	4815      	ldr	r0, [pc, #84]	; (8001e9c <DetectRhoCore+0xb8>)
 8001e46:	f006 f92b 	bl	80080a0 <puts>
    RhoUtility.Detect.Perform( &_, density_map, prediction );
 8001e4a:	4632      	mov	r2, r6
 8001e4c:	4639      	mov	r1, r7
 8001e4e:	4811      	ldr	r0, [pc, #68]	; (8001e94 <DetectRhoCore+0xb0>)
 8001e50:	f001 fe8e 	bl	8003b70 <RhoUtility_PerformDetect>
    
    /* Update frame statistics */
    LOG_RHO(RHO_DEBUG_2, "Calculating frame statistics:\n");
 8001e54:	2402      	movs	r4, #2
 8001e56:	e004      	b.n	8001e62 <DetectRhoCore+0x7e>
 8001e58:	2009      	movs	r0, #9
 8001e5a:	f006 f89d 	bl	8007f98 <putchar>
 8001e5e:	3401      	adds	r4, #1
 8001e60:	b2e4      	uxtb	r4, r4
 8001e62:	2c03      	cmp	r4, #3
 8001e64:	d9f8      	bls.n	8001e58 <DetectRhoCore+0x74>
 8001e66:	480e      	ldr	r0, [pc, #56]	; (8001ea0 <DetectRhoCore+0xbc>)
 8001e68:	f006 f91a 	bl	80080a0 <puts>
    RhoUtility.Detect.CalculateFrameStatistics( &_, prediction );
 8001e6c:	4c09      	ldr	r4, [pc, #36]	; (8001e94 <DetectRhoCore+0xb0>)
 8001e6e:	4631      	mov	r1, r6
 8001e70:	4620      	mov	r0, r4
 8001e72:	f000 fd1d 	bl	80028b0 <RhoUtility_CalculatedFrameStatistics>

    /* Update core */
    core->total_coverage     += _.total_density;// target_density;
 8001e76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e78:	f8d5 3390 	ldr.w	r3, [r5, #912]	; 0x390
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f8c5 3390 	str.w	r3, [r5, #912]	; 0x390
    core->filtered_coverage  += _.filtered_density;
 8001e82:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e84:	f8d5 3394 	ldr.w	r3, [r5, #916]	; 0x394
 8001e88:	4413      	add	r3, r2
 8001e8a:	f8c5 3394 	str.w	r3, [r5, #916]	; 0x394
}
 8001e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e90:	0800b1d8 	.word	0x0800b1d8
 8001e94:	20002040 	.word	0x20002040
 8001e98:	40af4000 	.word	0x40af4000
 8001e9c:	0800b1f4 	.word	0x0800b1f4
 8001ea0:	0800b210 	.word	0x0800b210

08001ea4 <DetectRhoCorePairs>:

void DetectRhoCorePairs( rho_core_t * core )
{
 8001ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ea8:	4604      	mov	r4, r0
    LOG_RHO(RHO_DEBUG_2,"Filtering and selecting pairs.\n");
 8001eaa:	2502      	movs	r5, #2
 8001eac:	e004      	b.n	8001eb8 <DetectRhoCorePairs+0x14>
 8001eae:	2009      	movs	r0, #9
 8001eb0:	f006 f872 	bl	8007f98 <putchar>
 8001eb4:	3501      	adds	r5, #1
 8001eb6:	b2ed      	uxtb	r5, r5
 8001eb8:	2d03      	cmp	r5, #3
 8001eba:	d9f8      	bls.n	8001eae <DetectRhoCorePairs+0xa>
 8001ebc:	4823      	ldr	r0, [pc, #140]	; (8001f4c <DetectRhoCorePairs+0xa8>)
 8001ebe:	f006 f8ef 	bl	80080a0 <puts>
    RhoCore.Detect( core, &core->density_map_pair.x, &core->prediction_pair.x );
 8001ec2:	f504 727e 	add.w	r2, r4, #1016	; 0x3f8
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7ff ff8b 	bl	8001de4 <DetectRhoCore>
    RhoCore.Detect( core, &core->density_map_pair.y, &core->prediction_pair.y );
 8001ece:	f604 0218 	addw	r2, r4, #2072	; 0x818
 8001ed2:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f7ff ff84 	bl	8001de4 <DetectRhoCore>

    /* Calculate accumulated filtered percentage from both axes */
    core->filtered_percentage        = ZDIV( (floating_t)core->filtered_coverage, (floating_t)TOTAL_RHO_PIXELS );
 8001edc:	f8d4 0394 	ldr.w	r0, [r4, #916]	; 0x394
 8001ee0:	f7fe fb38 	bl	8000554 <__aeabi_ui2d>
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <DetectRhoCorePairs+0xac>)
 8001ee8:	f7fe fcd8 	bl	800089c <__aeabi_ddiv>
 8001eec:	e9c4 01ea 	strd	r0, r1, [r4, #936]	; 0x3a8
    core->total_percentage           = ZDIV( (floating_t)core->total_coverage, (floating_t)TOTAL_RHO_PIXELS );
 8001ef0:	f8d4 0390 	ldr.w	r0, [r4, #912]	; 0x390
 8001ef4:	f7fe fb2e 	bl	8000554 <__aeabi_ui2d>
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <DetectRhoCorePairs+0xac>)
 8001efc:	f7fe fcce 	bl	800089c <__aeabi_ddiv>
 8001f00:	e9c4 01e8 	strd	r0, r1, [r4, #928]	; 0x3a0
    core->prediction_pair.num_regions = MAX( core->prediction_pair.x.num_regions, core->prediction_pair.y.num_regions );
 8001f04:	f894 0b90 	ldrb.w	r0, [r4, #2960]	; 0xb90
 8001f08:	f894 3770 	ldrb.w	r3, [r4, #1904]	; 0x770
 8001f0c:	f604 4568 	addw	r5, r4, #3176	; 0xc68
 8001f10:	4298      	cmp	r0, r3
 8001f12:	bf38      	it	cc
 8001f14:	4618      	movcc	r0, r3
 8001f16:	f7fe fb2d 	bl	8000574 <__aeabi_i2d>
 8001f1a:	e9c5 0100 	strd	r0, r1, [r5]
    core->prediction_pair.nu_regions  = MAX( core->prediction_pair.x.nu_regions, core->prediction_pair.y.nu_regions );
 8001f1e:	f504 63f1 	add.w	r3, r4, #1928	; 0x788
 8001f22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001f26:	f604 33a8 	addw	r3, r4, #2984	; 0xba8
 8001f2a:	e9d3 6700 	ldrd	r6, r7, [r3]
 8001f2e:	4632      	mov	r2, r6
 8001f30:	463b      	mov	r3, r7
 8001f32:	4640      	mov	r0, r8
 8001f34:	4649      	mov	r1, r9
 8001f36:	f7fe fe17 	bl	8000b68 <__aeabi_dcmpgt>
 8001f3a:	b108      	cbz	r0, 8001f40 <DetectRhoCorePairs+0x9c>
 8001f3c:	4646      	mov	r6, r8
 8001f3e:	464f      	mov	r7, r9
 8001f40:	f504 6446 	add.w	r4, r4, #3168	; 0xc60
 8001f44:	e9c4 6700 	strd	r6, r7, [r4]
}
 8001f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f4c:	0800b234 	.word	0x0800b234
 8001f50:	40af4000 	.word	0x40af4000

08001f54 <UpdateRhoCorePrediction>:

/* Correct and factor predictions from variance band filtering into global model */
void UpdateRhoCorePrediction( prediction_t * prediction )
{
 8001f54:	b538      	push	{r3, r4, r5, lr}
 8001f56:	4605      	mov	r5, r0
    LOG_RHO(RHO_DEBUG_PREDICT,"Updating %s Map:\n", prediction->name);
 8001f58:	2402      	movs	r4, #2
 8001f5a:	e004      	b.n	8001f66 <UpdateRhoCorePrediction+0x12>
 8001f5c:	2009      	movs	r0, #9
 8001f5e:	f006 f81b 	bl	8007f98 <putchar>
 8001f62:	3401      	adds	r4, #1
 8001f64:	b2e4      	uxtb	r4, r4
 8001f66:	2c03      	cmp	r4, #3
 8001f68:	d9f8      	bls.n	8001f5c <UpdateRhoCorePrediction+0x8>
 8001f6a:	6829      	ldr	r1, [r5, #0]
 8001f6c:	4804      	ldr	r0, [pc, #16]	; (8001f80 <UpdateRhoCorePrediction+0x2c>)
 8001f6e:	f005 fffb 	bl	8007f68 <iprintf>
    
    /* Step predictions of all Kalmans */
    RhoUtility.Predict.TrackingFilters( prediction );
 8001f72:	4628      	mov	r0, r5
 8001f74:	f000 fe20 	bl	8002bb8 <RhoUtility_PredictTrackingFilters>
    RhoUtility.Predict.TrackingProbabilities( prediction );
 8001f78:	4628      	mov	r0, r5
 8001f7a:	f001 f8f1 	bl	8003160 <RhoUtility_PredictTrackingProbabilities>
}
 8001f7e:	bd38      	pop	{r3, r4, r5, pc}
 8001f80:	0800b25c 	.word	0x0800b25c

08001f84 <Kumaraswamy_GetVector>:
{
    return KUMARASWAMY_CDF( x, k->alpha, k->beta );
}

static void Kumaraswamy_GetVector( kumaraswamy_t * k, double alpha, double * interval )
{
 8001f84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f88:	ed2d 8b02 	vpush	{d8}
 8001f8c:	4605      	mov	r5, r0
 8001f8e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    k->alpha = alpha;
 8001f92:	e9c0 2300 	strd	r2, r3, [r0]
    double curr_CDF, prev_CDF = 0.;
    for( uint8_t i = 0; i < KUMARASWAMY_NUM_BANDS; i++ )
 8001f96:	2400      	movs	r4, #0
    double curr_CDF, prev_CDF = 0.;
 8001f98:	f04f 0800 	mov.w	r8, #0
 8001f9c:	f04f 0900 	mov.w	r9, #0
    for( uint8_t i = 0; i < KUMARASWAMY_NUM_BANDS; i++ )
 8001fa0:	e00d      	b.n	8001fbe <Kumaraswamy_GetVector+0x3a>
        curr_CDF = Kumaraswamy_PerformCDF( k, k->bands[i] );
        if( curr_CDF < prev_CDF )
            interval[i] = 0.;
        else
        {
            interval[i] = curr_CDF - prev_CDF;
 8001fa2:	eb0a 0bc4 	add.w	fp, sl, r4, lsl #3
 8001fa6:	4642      	mov	r2, r8
 8001fa8:	464b      	mov	r3, r9
 8001faa:	4630      	mov	r0, r6
 8001fac:	4639      	mov	r1, r7
 8001fae:	f7fe f993 	bl	80002d8 <__aeabi_dsub>
 8001fb2:	e9cb 0100 	strd	r0, r1, [fp]
            prev_CDF = curr_CDF;
 8001fb6:	46b0      	mov	r8, r6
 8001fb8:	46b9      	mov	r9, r7
    for( uint8_t i = 0; i < KUMARASWAMY_NUM_BANDS; i++ )
 8001fba:	3401      	adds	r4, #1
 8001fbc:	b2e4      	uxtb	r4, r4
 8001fbe:	2c03      	cmp	r4, #3
 8001fc0:	d82f      	bhi.n	8002022 <Kumaraswamy_GetVector+0x9e>
        curr_CDF = Kumaraswamy_PerformCDF( k, k->bands[i] );
 8001fc2:	1ca3      	adds	r3, r4, #2
 8001fc4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    return KUMARASWAMY_CDF( x, k->alpha, k->beta );
 8001fc8:	ed95 1b00 	vldr	d1, [r5]
 8001fcc:	ed93 0b00 	vldr	d0, [r3]
 8001fd0:	f008 f85a 	bl	800a088 <pow>
 8001fd4:	ec53 2b10 	vmov	r2, r3, d0
 8001fd8:	ed95 8b02 	vldr	d8, [r5, #8]
 8001fdc:	2000      	movs	r0, #0
 8001fde:	4913      	ldr	r1, [pc, #76]	; (800202c <Kumaraswamy_GetVector+0xa8>)
 8001fe0:	f7fe f97a 	bl	80002d8 <__aeabi_dsub>
 8001fe4:	eeb0 1a48 	vmov.f32	s2, s16
 8001fe8:	eef0 1a68 	vmov.f32	s3, s17
 8001fec:	ec41 0b10 	vmov	d0, r0, r1
 8001ff0:	f008 f84a 	bl	800a088 <pow>
 8001ff4:	ec53 2b10 	vmov	r2, r3, d0
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	490c      	ldr	r1, [pc, #48]	; (800202c <Kumaraswamy_GetVector+0xa8>)
 8001ffc:	f7fe f96c 	bl	80002d8 <__aeabi_dsub>
 8002000:	4606      	mov	r6, r0
 8002002:	460f      	mov	r7, r1
        if( curr_CDF < prev_CDF )
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4640      	mov	r0, r8
 800200a:	4649      	mov	r1, r9
 800200c:	f7fe fdac 	bl	8000b68 <__aeabi_dcmpgt>
 8002010:	2800      	cmp	r0, #0
 8002012:	d0c6      	beq.n	8001fa2 <Kumaraswamy_GetVector+0x1e>
            interval[i] = 0.;
 8002014:	eb0a 03c4 	add.w	r3, sl, r4, lsl #3
 8002018:	2000      	movs	r0, #0
 800201a:	2100      	movs	r1, #0
 800201c:	e9c3 0100 	strd	r0, r1, [r3]
 8002020:	e7cb      	b.n	8001fba <Kumaraswamy_GetVector+0x36>
        }
    }
}
 8002022:	ecbd 8b02 	vpop	{d8}
 8002026:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800202a:	bf00      	nop
 800202c:	3ff00000 	.word	0x3ff00000

08002030 <UpdateRhoCorePredictions>:

void UpdateRhoCorePredictions( rho_core_t * core )
{
 8002030:	b570      	push	{r4, r5, r6, lr}
 8002032:	b08e      	sub	sp, #56	; 0x38
 8002034:	4605      	mov	r5, r0
    LOG_RHO(RHO_DEBUG_2,"Updating predictions.\n");
 8002036:	2402      	movs	r4, #2
 8002038:	e004      	b.n	8002044 <UpdateRhoCorePredictions+0x14>
 800203a:	2009      	movs	r0, #9
 800203c:	f005 ffac 	bl	8007f98 <putchar>
 8002040:	3401      	adds	r4, #1
 8002042:	b2e4      	uxtb	r4, r4
 8002044:	2c03      	cmp	r4, #3
 8002046:	d9f8      	bls.n	800203a <UpdateRhoCorePredictions+0xa>
 8002048:	4817      	ldr	r0, [pc, #92]	; (80020a8 <UpdateRhoCorePredictions+0x78>)
 800204a:	f006 f829 	bl	80080a0 <puts>
    RhoCore.UpdatePrediction( &core->prediction_pair.x );
 800204e:	f505 747e 	add.w	r4, r5, #1016	; 0x3f8
 8002052:	4620      	mov	r0, r4
 8002054:	f7ff ff7e 	bl	8001f54 <UpdateRhoCorePrediction>
    RhoCore.UpdatePrediction( &core->prediction_pair.y );
 8002058:	f605 0018 	addw	r0, r5, #2072	; 0x818
 800205c:	f7ff ff7a 	bl	8001f54 <UpdateRhoCorePrediction>
        core->timestamp = TIMESTAMP();
    }
#endif
    
    double state_intervals[NUM_STATE_GROUPS];
    KumaraswamyFunctions.GetVector( &core->kumaraswamy, core->prediction_pair.nu_regions, state_intervals );
 8002060:	f505 6346 	add.w	r3, r5, #3168	; 0xc60
 8002064:	ae06      	add	r6, sp, #24
 8002066:	9600      	str	r6, [sp, #0]
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	f505 50d2 	add.w	r0, r5, #6720	; 0x1a40
 8002070:	3008      	adds	r0, #8
 8002072:	f7ff ff87 	bl	8001f84 <Kumaraswamy_GetVector>
    FSMFunctions.Sys.Update( &core->state_machine, state_intervals );
 8002076:	4631      	mov	r1, r6
 8002078:	f505 50d3 	add.w	r0, r5, #6752	; 0x1a60
 800207c:	3018      	adds	r0, #24
 800207e:	f002 f9e7 	bl	8004450 <FiniteStateMachine_UpdateSystem>

    prediction_predict_variables _;
    RhoUtility.Reset.Prediction( &_, &core->prediction_pair, core->centroid );
 8002082:	f8d5 234e 	ldr.w	r2, [r5, #846]	; 0x34e
 8002086:	4621      	mov	r1, r4
 8002088:	a802      	add	r0, sp, #8
 800208a:	f001 f8c9 	bl	8003220 <RhoUtility_ResetForPrediction>
    RhoUtility.Predict.CorrectAmbiguity( &_, core );
 800208e:	4629      	mov	r1, r5
 8002090:	a802      	add	r0, sp, #8
 8002092:	f001 fc09 	bl	80038a8 <RhoUtility_CorrectPredictionAmbiguity>
    RhoUtility.Predict.CombineProbabilities( &core->prediction_pair );
 8002096:	4620      	mov	r0, r4
 8002098:	f001 f8f0 	bl	800327c <RhoUtility_CombineAxisProbabilites>
    RhoUtility.Predict.UpdateCorePredictionData( &_, core );
 800209c:	4629      	mov	r1, r5
 800209e:	a802      	add	r0, sp, #8
 80020a0:	f001 f934 	bl	800330c <RhoUtility_UpdateCorePredictionData>
}
 80020a4:	b00e      	add	sp, #56	; 0x38
 80020a6:	bd70      	pop	{r4, r5, r6, pc}
 80020a8:	0800b274 	.word	0x0800b274

080020ac <UpdateRhoCoreThreshold>:

/* Use background and state information to update image threshold */
void UpdateRhoCoreThreshold( rho_core_t * core )
{
 80020ac:	b538      	push	{r3, r4, r5, lr}
 80020ae:	4605      	mov	r5, r0
    LOG_RHO(RHO_DEBUG_2,"Updating threshold.\n");
 80020b0:	2402      	movs	r4, #2
 80020b2:	e004      	b.n	80020be <UpdateRhoCoreThreshold+0x12>
 80020b4:	2009      	movs	r0, #9
 80020b6:	f005 ff6f 	bl	8007f98 <putchar>
 80020ba:	3401      	adds	r4, #1
 80020bc:	b2e4      	uxtb	r4, r4
 80020be:	2c03      	cmp	r4, #3
 80020c0:	d9f8      	bls.n	80020b4 <UpdateRhoCoreThreshold+0x8>
 80020c2:	4803      	ldr	r0, [pc, #12]	; (80020d0 <UpdateRhoCoreThreshold+0x24>)
 80020c4:	f005 ffec 	bl	80080a0 <puts>
    RhoUtility.Calculate.Tune( core );
 80020c8:	4628      	mov	r0, r5
 80020ca:	f001 faaf 	bl	800362c <RhoUtility_CalculateTune>
}
 80020ce:	bd38      	pop	{r3, r4, r5, pc}
 80020d0:	0800b290 	.word	0x0800b290

080020d4 <PerformRhoCore>:
{
 80020d4:	b510      	push	{r4, lr}
 80020d6:	4604      	mov	r4, r0
    if(background_event)
 80020d8:	b111      	cbz	r1, 80020e0 <PerformRhoCore+0xc>
        RhoUtility.Generate.Background( core );
 80020da:	f001 ff7b 	bl	8003fd4 <RhoUtility_GenerateBackground>
}
 80020de:	bd10      	pop	{r4, pc}
        RhoCore.DetectPairs( core );
 80020e0:	f7ff fee0 	bl	8001ea4 <DetectRhoCorePairs>
        RhoCore.UpdatePredictions( core );
 80020e4:	4620      	mov	r0, r4
 80020e6:	f7ff ffa3 	bl	8002030 <UpdateRhoCorePredictions>
        RhoCore.UpdateThreshold( core );
 80020ea:	4620      	mov	r0, r4
 80020ec:	f7ff ffde 	bl	80020ac <UpdateRhoCoreThreshold>
}
 80020f0:	e7f5      	b.n	80020de <PerformRhoCore+0xa>
	...

080020f4 <GenerateRhoCorePacket>:

void GenerateRhoCorePacket( rho_core_t * core )
{
 80020f4:	b538      	push	{r3, r4, r5, lr}
 80020f6:	4605      	mov	r5, r0
    LOG_RHO(RHO_DEBUG_2,"Generating packets.\n");
 80020f8:	2402      	movs	r4, #2
 80020fa:	e004      	b.n	8002106 <GenerateRhoCorePacket+0x12>
 80020fc:	2009      	movs	r0, #9
 80020fe:	f005 ff4b 	bl	8007f98 <putchar>
 8002102:	3401      	adds	r4, #1
 8002104:	b2e4      	uxtb	r4, r4
 8002106:	2c03      	cmp	r4, #3
 8002108:	d9f8      	bls.n	80020fc <GenerateRhoCorePacket+0x8>
 800210a:	4806      	ldr	r0, [pc, #24]	; (8002124 <GenerateRhoCorePacket+0x30>)
 800210c:	f005 ffc8 	bl	80080a0 <puts>
    RhoUtility.Generate.Packet( core );
 8002110:	4628      	mov	r0, r5
 8002112:	f001 ff79 	bl	8004008 <RhoUtility_GeneratePacket>
    RhoUtility.Print.Packet( &core->packet, PACKET_SIZE );
 8002116:	2138      	movs	r1, #56	; 0x38
 8002118:	f505 50df 	add.w	r0, r5, #7136	; 0x1be0
 800211c:	3018      	adds	r0, #24
 800211e:	f001 ff4d 	bl	8003fbc <RhoUtility_PrintPacket>
}
 8002122:	bd38      	pop	{r3, r4, r5, pc}
 8002124:	0800b2ac 	.word	0x0800b2ac

08002128 <Kumaraswamy_Initialize>:
{
 8002128:	b430      	push	{r4, r5}
 800212a:	4614      	mov	r4, r2
 800212c:	461d      	mov	r5, r3
 800212e:	9b02      	ldr	r3, [sp, #8]
    k->beta = beta;
 8002130:	e9c0 4502 	strd	r4, r5, [r0, #8]
    memcpy( &k->bands, bands, sizeof(double[KUMARASWAMY_NUM_BANDS]) );
 8002134:	681d      	ldr	r5, [r3, #0]
 8002136:	685c      	ldr	r4, [r3, #4]
 8002138:	6899      	ldr	r1, [r3, #8]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	6105      	str	r5, [r0, #16]
 800213e:	6144      	str	r4, [r0, #20]
 8002140:	6181      	str	r1, [r0, #24]
 8002142:	61c2      	str	r2, [r0, #28]
 8002144:	691d      	ldr	r5, [r3, #16]
 8002146:	695c      	ldr	r4, [r3, #20]
 8002148:	6999      	ldr	r1, [r3, #24]
 800214a:	69da      	ldr	r2, [r3, #28]
 800214c:	6205      	str	r5, [r0, #32]
 800214e:	6244      	str	r4, [r0, #36]	; 0x24
 8002150:	6281      	str	r1, [r0, #40]	; 0x28
 8002152:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 8002154:	bc30      	pop	{r4, r5}
 8002156:	4770      	bx	lr

08002158 <RhoUtility_InitializeData>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *                       Function Definitions                           *
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void RhoUtility_InitializeData( rho_core_t * core, index_t width, index_t height )
{
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	4604      	mov	r4, r0
 800215e:	460d      	mov	r5, r1
 8002160:	4616      	mov	r6, r2
    /* reset entire structure */
    memset(core, 0, sizeof(rho_core_t));
 8002162:	f641 4248 	movw	r2, #7240	; 0x1c48
 8002166:	2100      	movs	r1, #0
 8002168:	f005 f9e2 	bl	8007530 <memset>

    /* Core frame */
    core->width = width;
 800216c:	f8a4 5340 	strh.w	r5, [r4, #832]	; 0x340
    core->height = height;
 8002170:	f8a4 6342 	strh.w	r6, [r4, #834]	; 0x342

    /* Centroid */
    core->centroid.x  = (floating_t)width /2.;
 8002174:	4628      	mov	r0, r5
 8002176:	f7fe f9ed 	bl	8000554 <__aeabi_ui2d>
 800217a:	2200      	movs	r2, #0
 800217c:	4b3a      	ldr	r3, [pc, #232]	; (8002268 <RhoUtility_InitializeData+0x110>)
 800217e:	f7fe fa63 	bl	8000648 <__aeabi_dmul>
 8002182:	f7fe fd39 	bl	8000bf8 <__aeabi_d2uiz>
 8002186:	b285      	uxth	r5, r0
 8002188:	f8a4 534e 	strh.w	r5, [r4, #846]	; 0x34e
    core->centroid.y  = (floating_t)height/2.;
 800218c:	4630      	mov	r0, r6
 800218e:	f7fe f9e1 	bl	8000554 <__aeabi_ui2d>
 8002192:	2200      	movs	r2, #0
 8002194:	4b34      	ldr	r3, [pc, #208]	; (8002268 <RhoUtility_InitializeData+0x110>)
 8002196:	f7fe fa57 	bl	8000648 <__aeabi_dmul>
 800219a:	f7fe fd2d 	bl	8000bf8 <__aeabi_d2uiz>
 800219e:	b280      	uxth	r0, r0
 80021a0:	f8a4 0350 	strh.w	r0, [r4, #848]	; 0x350
    core->primary.x   = core->centroid.x;
 80021a4:	f8a4 5346 	strh.w	r5, [r4, #838]	; 0x346
    core->primary.y   = core->centroid.y;
 80021a8:	f8a4 0348 	strh.w	r0, [r4, #840]	; 0x348
    core->secondary.x = core->centroid.x;
 80021ac:	f8a4 534a 	strh.w	r5, [r4, #842]	; 0x34a
    core->secondary.y = core->centroid.y;
 80021b0:	f8a4 034c 	strh.w	r0, [r4, #844]	; 0x34c

    core->target_coverage_factor = FILTERED_COVERAGE_TARGET;
 80021b4:	a328      	add	r3, pc, #160	; (adr r3, 8002258 <RhoUtility_InitializeData+0x100>)
 80021b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ba:	e9c4 23ec 	strd	r2, r3, [r4, #944]	; 0x3b0

    /* Packet */
    core->packet.header.id       = PACKET_HEADER_ID;
 80021be:	f641 33f8 	movw	r3, #7160	; 0x1bf8
 80021c2:	22ab      	movs	r2, #171	; 0xab
 80021c4:	54e2      	strb	r2, [r4, r3]
    core->packet.header.includes = PACKET_INCLUDES;
 80021c6:	227f      	movs	r2, #127	; 0x7f
 80021c8:	f641 33f9 	movw	r3, #7161	; 0x1bf9
 80021cc:	54e2      	strb	r2, [r4, r3]
    memset(core->packet.data, 0, sizeof(packet_offset_lookup_t));
 80021ce:	2300      	movs	r3, #0
 80021d0:	f641 4108 	movw	r1, #7176	; 0x1c08
 80021d4:	5063      	str	r3, [r4, r1]

    /* Background */
    core->background_counter = 0;
 80021d6:	f884 3358 	strb.w	r3, [r4, #856]	; 0x358
    core->background_period = BACKGROUNDING_PERIOD;
 80021da:	f8c4 339c 	str.w	r3, [r4, #924]	; 0x39c

    core->thresh = (double)AVG2( MAX_THRESH, MIN_THRESH );
 80021de:	a120      	add	r1, pc, #128	; (adr r1, 8002260 <RhoUtility_InitializeData+0x108>)
 80021e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021e4:	e9c4 01f4 	strd	r0, r1, [r4, #976]	; 0x3d0
    core->thresh_byte = (byte_t)core->thresh;
 80021e8:	f884 2357 	strb.w	r2, [r4, #855]	; 0x357
    
    core->density_map_pair.x.map          = FOREGROUND_DENSITY_MAP_X;
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <RhoUtility_InitializeData+0x114>)
 80021ee:	6023      	str	r3, [r4, #0]
    core->density_map_pair.x.background   = BACKGROUND_DENSITY_MAP_X;
 80021f0:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <RhoUtility_InitializeData+0x118>)
 80021f2:	6063      	str	r3, [r4, #4]
    core->density_map_pair.x.bound        = BOUND_DENSITY_MAP_X;
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <RhoUtility_InitializeData+0x11c>)
 80021f6:	60a3      	str	r3, [r4, #8]
    core->density_map_pair.y.map          = FOREGROUND_DENSITY_MAP_Y;
 80021f8:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <RhoUtility_InitializeData+0x120>)
 80021fa:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    core->density_map_pair.y.background   = BACKGROUND_DENSITY_MAP_Y;
 80021fe:	4b1f      	ldr	r3, [pc, #124]	; (800227c <RhoUtility_InitializeData+0x124>)
 8002200:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
    core->density_map_pair.y.bound        = BOUND_DENSITY_MAP_Y;
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <RhoUtility_InitializeData+0x128>)
 8002206:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    
    KumaraswamyFunctions.Initialize( &core->kumaraswamy, NUM_STATES + 1, (floating_t[])DEFAULT_KUMARASWAMY_BANDS );
 800220a:	ad02      	add	r5, sp, #8
 800220c:	4e1d      	ldr	r6, [pc, #116]	; (8002284 <RhoUtility_InitializeData+0x12c>)
 800220e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002212:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002216:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800221a:	ab02      	add	r3, sp, #8
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2200      	movs	r2, #0
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <RhoUtility_InitializeData+0x130>)
 8002222:	f504 50d2 	add.w	r0, r4, #6720	; 0x1a40
 8002226:	3008      	adds	r0, #8
 8002228:	f7ff ff7e 	bl	8002128 <Kumaraswamy_Initialize>
    FSMFunctions.Sys.Initialize( &core->state_machine, "A", &core->state_transitions, CHAOTIC );
 800222c:	2303      	movs	r3, #3
 800222e:	f504 52ce 	add.w	r2, r4, #6592	; 0x19c0
 8002232:	3208      	adds	r2, #8
 8002234:	4915      	ldr	r1, [pc, #84]	; (800228c <RhoUtility_InitializeData+0x134>)
 8002236:	f504 50d3 	add.w	r0, r4, #6752	; 0x1a60
 800223a:	3018      	adds	r0, #24
 800223c:	f002 f80c 	bl	8004258 <FiniteStateMachine_InitializeSystem>
    
    core->timestamp = TIMESTAMP();
 8002240:	f7ff f869 	bl	8001316 <STM_Timestamp>
 8002244:	f504 54e2 	add.w	r4, r4, #7232	; 0x1c40
 8002248:	f7fe f984 	bl	8000554 <__aeabi_ui2d>
 800224c:	e9c4 0100 	strd	r0, r1, [r4]
}
 8002250:	b00a      	add	sp, #40	; 0x28
 8002252:	bd70      	pop	{r4, r5, r6, pc}
 8002254:	f3af 8000 	nop.w
 8002258:	3126e979 	.word	0x3126e979
 800225c:	3f7cac08 	.word	0x3f7cac08
 8002260:	00000000 	.word	0x00000000
 8002264:	405fe000 	.word	0x405fe000
 8002268:	3fe00000 	.word	0x3fe00000
 800226c:	200022c8 	.word	0x200022c8
 8002270:	200021c4 	.word	0x200021c4
 8002274:	2000232c 	.word	0x2000232c
 8002278:	20002430 	.word	0x20002430
 800227c:	20002390 	.word	0x20002390
 8002280:	20002228 	.word	0x20002228
 8002284:	0800b078 	.word	0x0800b078
 8002288:	40140000 	.word	0x40140000
 800228c:	0800b2e8 	.word	0x0800b2e8

08002290 <RhoUtility_InitializeFilters>:

void RhoUtility_InitializeFilters( rho_core_t * core )
{
 8002290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002292:	b099      	sub	sp, #100	; 0x64
 8002294:	4607      	mov	r7, r0
    /* Threshold Filter */
    RhoPID.Initialize( &core->thresh_filter, DEFAULT_PID_GAIN );
 8002296:	4e24      	ldr	r6, [pc, #144]	; (8002328 <RhoUtility_InitializeFilters+0x98>)
 8002298:	ac08      	add	r4, sp, #32
 800229a:	f106 0520 	add.w	r5, r6, #32
 800229e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022aa:	e884 0003 	stmia.w	r4, {r0, r1}
 80022ae:	466c      	mov	r4, sp
 80022b0:	ad0a      	add	r5, sp, #40	; 0x28
 80022b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80022be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022c0:	9a08      	ldr	r2, [sp, #32]
 80022c2:	f607 4078 	addw	r0, r7, #3192	; 0xc78
 80022c6:	f002 fb2f 	bl	8004928 <RhoPIDInitialize>

    /* Coverage Filter */
    core->target_coverage_factor  = (floating_t)FILTERED_COVERAGE_TARGET;
 80022ca:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8002308 <RhoUtility_InitializeFilters+0x78>
 80022ce:	ed87 0bec 	vstr	d0, [r7, #944]	; 0x3b0
    Kalman.Initialize(&core->target_filter, core->target_coverage_factor, RHO_TARGET_LS, RHO_TARGET_FILTER_MIN, RHO_TARGET_FILTER_MAX, DEFAULT_TARGET_UNCERTAINTY );
 80022d2:	ad12      	add	r5, sp, #72	; 0x48
 80022d4:	f106 0448 	add.w	r4, r6, #72	; 0x48
 80022d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80022e4:	ed9d 4b12 	vldr	d4, [sp, #72]	; 0x48
 80022e8:	ed9d 5b14 	vldr	d5, [sp, #80]	; 0x50
 80022ec:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 80022f0:	ed9f 3b07 	vldr	d3, [pc, #28]	; 8002310 <RhoUtility_InitializeFilters+0x80>
 80022f4:	ed9f 2b08 	vldr	d2, [pc, #32]	; 8002318 <RhoUtility_InitializeFilters+0x88>
 80022f8:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8002320 <RhoUtility_InitializeFilters+0x90>
 80022fc:	f607 5008 	addw	r0, r7, #3336	; 0xd08
 8002300:	f002 f8ea 	bl	80044d8 <InitializeKalman>
}
 8002304:	b019      	add	sp, #100	; 0x64
 8002306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002308:	3126e979 	.word	0x3126e979
 800230c:	3f7cac08 	.word	0x3f7cac08
 8002310:	00000000 	.word	0x00000000
 8002314:	3fe00000 	.word	0x3fe00000
 8002318:	d2f1a9fc 	.word	0xd2f1a9fc
 800231c:	3f50624d 	.word	0x3f50624d
 8002320:	00000000 	.word	0x00000000
 8002324:	40140000 	.word	0x40140000
 8002328:	0800b078 	.word	0x0800b078
 800232c:	00000000 	.word	0x00000000

08002330 <RhoUtility_InitializePrediction>:

void RhoUtility_InitializePrediction( prediction_t * prediction, const char * name, index_t length )
{
 8002330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	4607      	mov	r7, r0
 8002338:	4690      	mov	r8, r2
    prediction->name = name;
 800233a:	6001      	str	r1, [r0, #0]
    
    /* Prediction probabilities */
    memset( &prediction->probabilities, 0, sizeof(floating_t) * 4 );
 800233c:	2220      	movs	r2, #32
 800233e:	2100      	movs	r1, #0
 8002340:	f500 707e 	add.w	r0, r0, #1016	; 0x3f8
 8002344:	f005 f8f4 	bl	8007530 <memset>
    for(uint8_t i = 0; i < MAX_TRACKING_FILTERS; i++)
 8002348:	2600      	movs	r6, #0
 800234a:	e026      	b.n	800239a <RhoUtility_InitializePrediction+0x6a>
    {
        Kalman.Initialize( &prediction->tracking_filters[i], 0., RHO_PREDICTION_LS, 0, length, DEFAULT_PREDICTION_UNCERTAINTY );
 800234c:	466c      	mov	r4, sp
 800234e:	4d24      	ldr	r5, [pc, #144]	; (80023e0 <RhoUtility_InitializePrediction+0xb0>)
 8002350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002354:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002358:	e884 0003 	stmia.w	r4, {r0, r1}
 800235c:	4640      	mov	r0, r8
 800235e:	f7fe f8f9 	bl	8000554 <__aeabi_ui2d>
 8002362:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 80023d0 <RhoUtility_InitializePrediction+0xa0>
 8002366:	23b8      	movs	r3, #184	; 0xb8
 8002368:	fb03 f306 	mul.w	r3, r3, r6
 800236c:	3308      	adds	r3, #8
 800236e:	ed9d 4b00 	vldr	d4, [sp]
 8002372:	ed9d 5b02 	vldr	d5, [sp, #8]
 8002376:	ed9d 6b04 	vldr	d6, [sp, #16]
 800237a:	ec41 0b13 	vmov	d3, r0, r1
 800237e:	eeb0 2a40 	vmov.f32	s4, s0
 8002382:	eef0 2a60 	vmov.f32	s5, s1
 8002386:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80023d8 <RhoUtility_InitializePrediction+0xa8>
 800238a:	18f8      	adds	r0, r7, r3
 800238c:	f002 f8a4 	bl	80044d8 <InitializeKalman>
        prediction->tracking_filters_order[i] = i;
 8002390:	19bb      	adds	r3, r7, r6
 8002392:	f883 62e8 	strb.w	r6, [r3, #744]	; 0x2e8
    for(uint8_t i = 0; i < MAX_TRACKING_FILTERS; i++)
 8002396:	3601      	adds	r6, #1
 8002398:	b2f6      	uxtb	r6, r6
 800239a:	2e03      	cmp	r6, #3
 800239c:	d9d6      	bls.n	800234c <RhoUtility_InitializePrediction+0x1c>
    }
    /* Regions */
    for(uint8_t i = 0; i < MAX_REGIONS; i++)
 800239e:	2400      	movs	r4, #0
 80023a0:	e011      	b.n	80023c6 <RhoUtility_InitializePrediction+0x96>
    {
        memset(&prediction->regions[i], 0, sizeof(region_t));
 80023a2:	0160      	lsls	r0, r4, #5
 80023a4:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
 80023a8:	2220      	movs	r2, #32
 80023aa:	2100      	movs	r1, #0
 80023ac:	4438      	add	r0, r7
 80023ae:	f005 f8bf 	bl	8007530 <memset>
        prediction->regions_order[i] = (order_t){ false, i};
 80023b2:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 80023b6:	2200      	movs	r2, #0
 80023b8:	f807 2013 	strb.w	r2, [r7, r3, lsl #1]
 80023bc:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80023c0:	705c      	strb	r4, [r3, #1]
    for(uint8_t i = 0; i < MAX_REGIONS; i++)
 80023c2:	3401      	adds	r4, #1
 80023c4:	b2e4      	uxtb	r4, r4
 80023c6:	2c03      	cmp	r4, #3
 80023c8:	d9eb      	bls.n	80023a2 <RhoUtility_InitializePrediction+0x72>
    }
}
 80023ca:	b006      	add	sp, #24
 80023cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...
 80023dc:	3ff00000 	.word	0x3ff00000
 80023e0:	0800b0d8 	.word	0x0800b0d8
 80023e4:	00000000 	.word	0x00000000

080023e8 <RhoUtility_InitializeDensityMap>:

void RhoUtility_InitializeDensityMap( density_map_t * density_map, const char * name, uint16_t length, uint16_t centroid )
{
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	ed2d 8b06 	vpush	{d8-d10}
 80023ee:	b08d      	sub	sp, #52	; 0x34
 80023f0:	4605      	mov	r5, r0
 80023f2:	4614      	mov	r4, r2
    density_map->name = name;
 80023f4:	f8c0 1198 	str.w	r1, [r0, #408]	; 0x198
    
//    size_t size = sizeof(sdensity_t)*length;
//    memset(density_map->map, 0, size);
//    memset(density_map->background, 0, size);
    density_map->length = length;
 80023f8:	8202      	strh	r2, [r0, #16]
    density_map->max[0] = 0;
 80023fa:	2200      	movs	r2, #0
 80023fc:	8182      	strh	r2, [r0, #12]
    density_map->max[1] = 0;
 80023fe:	81c2      	strh	r2, [r0, #14]
    density_map->centroid = centroid;
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe f8a7 	bl	8000554 <__aeabi_ui2d>
 8002406:	e9c5 0106 	strd	r0, r1, [r5, #24]
    Kalman.Initialize( &density_map->kalmans[0],  0, RHO_DEFAULT_LS, 0, length, DEFAULT_KALMAN_UNCERTAINTY );
 800240a:	4620      	mov	r0, r4
 800240c:	f7fe f8a2 	bl	8000554 <__aeabi_ui2d>
 8002410:	ec41 0b19 	vmov	d9, r0, r1
 8002414:	4c2a      	ldr	r4, [pc, #168]	; (80024c0 <RhoUtility_InitializeDensityMap+0xd8>)
 8002416:	466e      	mov	r6, sp
 8002418:	f104 0778 	add.w	r7, r4, #120	; 0x78
 800241c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800241e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002420:	e897 0003 	ldmia.w	r7, {r0, r1}
 8002424:	e886 0003 	stmia.w	r6, {r0, r1}
 8002428:	ed9f 8b21 	vldr	d8, [pc, #132]	; 80024b0 <RhoUtility_InitializeDensityMap+0xc8>
 800242c:	ed9f ab22 	vldr	d10, [pc, #136]	; 80024b8 <RhoUtility_InitializeDensityMap+0xd0>
 8002430:	ed9d 4b00 	vldr	d4, [sp]
 8002434:	ed9d 5b02 	vldr	d5, [sp, #8]
 8002438:	ed9d 6b04 	vldr	d6, [sp, #16]
 800243c:	eeb0 3a49 	vmov.f32	s6, s18
 8002440:	eef0 3a69 	vmov.f32	s7, s19
 8002444:	eeb0 2a48 	vmov.f32	s4, s16
 8002448:	eef0 2a68 	vmov.f32	s5, s17
 800244c:	eeb0 1a4a 	vmov.f32	s2, s20
 8002450:	eef0 1a6a 	vmov.f32	s3, s21
 8002454:	eeb0 0a48 	vmov.f32	s0, s16
 8002458:	eef0 0a68 	vmov.f32	s1, s17
 800245c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8002460:	f002 f83a 	bl	80044d8 <InitializeKalman>
    Kalman.Initialize( &density_map->kalmans[1], 0, RHO_DEFAULT_LS, 0, length, DEFAULT_KALMAN_UNCERTAINTY );
 8002464:	ae06      	add	r6, sp, #24
 8002466:	3478      	adds	r4, #120	; 0x78
 8002468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800246a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800246c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002470:	e886 0003 	stmia.w	r6, {r0, r1}
 8002474:	ed9d 4b06 	vldr	d4, [sp, #24]
 8002478:	ed9d 5b08 	vldr	d5, [sp, #32]
 800247c:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8002480:	eeb0 3a49 	vmov.f32	s6, s18
 8002484:	eef0 3a69 	vmov.f32	s7, s19
 8002488:	eeb0 2a48 	vmov.f32	s4, s16
 800248c:	eef0 2a68 	vmov.f32	s5, s17
 8002490:	eeb0 1a4a 	vmov.f32	s2, s20
 8002494:	eef0 1a6a 	vmov.f32	s3, s21
 8002498:	eeb0 0a48 	vmov.f32	s0, s16
 800249c:	eef0 0a68 	vmov.f32	s1, s17
 80024a0:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
 80024a4:	f002 f818 	bl	80044d8 <InitializeKalman>
}
 80024a8:	b00d      	add	sp, #52	; 0x34
 80024aa:	ecbd 8b06 	vpop	{d8-d10}
 80024ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...
 80024bc:	40140000 	.word	0x40140000
 80024c0:	0800b078 	.word	0x0800b078

080024c4 <RhoUtility_ResetForDetect>:

void RhoUtility_ResetForDetect( rho_detection_variables * _, density_map_t * density_map, prediction_t * prediction )
{
 80024c4:	b570      	push	{r4, r5, r6, lr}
 80024c6:	4606      	mov	r6, r0
 80024c8:	460c      	mov	r4, r1
 80024ca:	4615      	mov	r5, r2
    memset( _, 0, sizeof(rho_detection_variables) );
 80024cc:	2278      	movs	r2, #120	; 0x78
 80024ce:	2100      	movs	r1, #0
 80024d0:	f005 f82e 	bl	8007530 <memset>

    _->len          = density_map->length;
 80024d4:	8a23      	ldrh	r3, [r4, #16]
 80024d6:	8033      	strh	r3, [r6, #0]
    _->range[0]     = density_map->length;
 80024d8:	8073      	strh	r3, [r6, #2]
    _->range[1]     = density_map->centroid;
 80024da:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 80024de:	f7fe fb8b 	bl	8000bf8 <__aeabi_d2uiz>
 80024e2:	80b0      	strh	r0, [r6, #4]
    _->range[2]     = 0;
 80024e4:	2400      	movs	r4, #0
 80024e6:	80f4      	strh	r4, [r6, #6]

    memset( &prediction->probabilities, 0, sizeof(floating_t)*NUM_STATES );
    memset( &prediction->probabilities, 0, sizeof(floating_t)*NUM_STATES );
 80024e8:	2220      	movs	r2, #32
 80024ea:	4621      	mov	r1, r4
 80024ec:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 80024f0:	f005 f81e 	bl	8007530 <memset>

    prediction->nu_regions    = 0;
 80024f4:	2200      	movs	r2, #0
 80024f6:	2300      	movs	r3, #0
 80024f8:	e9c5 23e4 	strd	r2, r3, [r5, #912]	; 0x390
    prediction->total_density = 0;
 80024fc:	f8c5 4388 	str.w	r4, [r5, #904]	; 0x388
    prediction->num_regions   = 0;
 8002500:	f885 4378 	strb.w	r4, [r5, #888]	; 0x378

    for( uint16_t i = 0; i < MAX_REGIONS; i++ )
 8002504:	e011      	b.n	800252a <RhoUtility_ResetForDetect+0x66>
    {
        memset( &prediction->regions[i], 0, sizeof(region_t) );
 8002506:	0160      	lsls	r0, r4, #5
 8002508:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
 800250c:	2220      	movs	r2, #32
 800250e:	2100      	movs	r1, #0
 8002510:	4428      	add	r0, r5
 8002512:	f005 f80d 	bl	8007530 <memset>
        prediction->regions_order[i] = (order_t){ false, i };
 8002516:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 800251a:	2200      	movs	r2, #0
 800251c:	f805 2013 	strb.w	r2, [r5, r3, lsl #1]
 8002520:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002524:	705c      	strb	r4, [r3, #1]
    for( uint16_t i = 0; i < MAX_REGIONS; i++ )
 8002526:	3401      	adds	r4, #1
 8002528:	b2a4      	uxth	r4, r4
 800252a:	2c03      	cmp	r4, #3
 800252c:	d9eb      	bls.n	8002506 <RhoUtility_ResetForDetect+0x42>
    }
    for( uint16_t i = 0; i < MAX_TRACKING_FILTERS; i++ )
 800252e:	2300      	movs	r3, #0
 8002530:	e004      	b.n	800253c <RhoUtility_ResetForDetect+0x78>
        prediction->tracking_filters_order[i] = i;
 8002532:	18ea      	adds	r2, r5, r3
 8002534:	f882 32e8 	strb.w	r3, [r2, #744]	; 0x2e8
    for( uint16_t i = 0; i < MAX_TRACKING_FILTERS; i++ )
 8002538:	3301      	adds	r3, #1
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b03      	cmp	r3, #3
 800253e:	d9f8      	bls.n	8002532 <RhoUtility_ResetForDetect+0x6e>
}
 8002540:	bd70      	pop	{r4, r5, r6, pc}
 8002542:	0000      	movs	r0, r0
 8002544:	0000      	movs	r0, r0
	...

08002548 <RhoUtility_PredictPeakFilter>:

    LOG_RHO(RHO_DEBUG_DETECT, "%s> Centroid: %d | Moment: %d | Density: %d\n", prediction->name, (int)density_map->centroid, _->raw_density_moment, _->total_density);
}

void RhoUtility_PredictPeakFilter( rho_detection_variables * _, density_map_t * density_map, prediction_t * prediction )
{
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254a:	4604      	mov	r4, r0
 800254c:	460d      	mov	r5, r1
    _->filter_peak      = (uint16_t)Kalman.Tick( &density_map->kalmans[_->cycle], prediction->previous_peak[_->cycle] );
 800254e:	8906      	ldrh	r6, [r0, #8]
 8002550:	f506 73de 	add.w	r3, r6, #444	; 0x1bc
 8002554:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002558:	8850      	ldrh	r0, [r2, #2]
 800255a:	f7fd fffb 	bl	8000554 <__aeabi_ui2d>
 800255e:	27b8      	movs	r7, #184	; 0xb8
 8002560:	fb07 f606 	mul.w	r6, r7, r6
 8002564:	3628      	adds	r6, #40	; 0x28
 8002566:	ec41 0b10 	vmov	d0, r0, r1
 800256a:	19a8      	adds	r0, r5, r6
 800256c:	f002 f97e 	bl	800486c <TickKalman>
 8002570:	ec51 0b10 	vmov	r0, r1, d0
 8002574:	f7fe fb40 	bl	8000bf8 <__aeabi_d2uiz>
 8002578:	b280      	uxth	r0, r0
 800257a:	8320      	strh	r0, [r4, #24]
    _->filter_peak_2    = _->filter_peak << 1;
 800257c:	0040      	lsls	r0, r0, #1
 800257e:	8360      	strh	r0, [r4, #26]
    _->filter_variance  = BOUND((uint16_t)(RHO_VARIANCE( density_map->kalmans[_->cycle].P[0][0]) ), MIN_VARIANCE, MAX_VARIANCE);
 8002580:	8926      	ldrh	r6, [r4, #8]
 8002582:	fb07 5706 	mla	r7, r7, r6, r5
 8002586:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800258a:	a116      	add	r1, pc, #88	; (adr r1, 80025e4 <RhoUtility_PredictPeakFilter+0x9c>)
 800258c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002590:	f7fd fea2 	bl	80002d8 <__aeabi_dsub>
 8002594:	2200      	movs	r2, #0
 8002596:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <RhoUtility_PredictPeakFilter+0x90>)
 8002598:	f7fe f856 	bl	8000648 <__aeabi_dmul>
 800259c:	2200      	movs	r2, #0
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <RhoUtility_PredictPeakFilter+0x94>)
 80025a0:	f7fd fe9c 	bl	80002dc <__adddf3>
 80025a4:	2200      	movs	r2, #0
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <RhoUtility_PredictPeakFilter+0x98>)
 80025a8:	f7fe f84e 	bl	8000648 <__aeabi_dmul>
 80025ac:	f7fe fb24 	bl	8000bf8 <__aeabi_d2uiz>
 80025b0:	b283      	uxth	r3, r0
 80025b2:	b163      	cbz	r3, 80025ce <RhoUtility_PredictPeakFilter+0x86>
 80025b4:	2b64      	cmp	r3, #100	; 0x64
 80025b6:	bf28      	it	cs
 80025b8:	2364      	movcs	r3, #100	; 0x64
 80025ba:	b218      	sxth	r0, r3
 80025bc:	84a0      	strh	r0, [r4, #36]	; 0x24
    density_map->kalmans[_->cycle].variance = _->filter_variance;
 80025be:	21b8      	movs	r1, #184	; 0xb8
 80025c0:	fb01 5506 	mla	r5, r1, r6, r5
 80025c4:	f7fd ffd6 	bl	8000574 <__aeabi_i2d>
 80025c8:	e9c5 0120 	strd	r0, r1, [r5, #128]	; 0x80
}
 80025cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _->filter_variance  = BOUND((uint16_t)(RHO_VARIANCE( density_map->kalmans[_->cycle].P[0][0]) ), MIN_VARIANCE, MAX_VARIANCE);
 80025ce:	2001      	movs	r0, #1
 80025d0:	e7f4      	b.n	80025bc <RhoUtility_PredictPeakFilter+0x74>
 80025d2:	bf00      	nop
 80025d4:	f3af 8000 	nop.w
 80025d8:	40240000 	.word	0x40240000
 80025dc:	3ff00000 	.word	0x3ff00000
 80025e0:	40340000 	.word	0x40340000
 80025e4:	47ae147b 	.word	0x47ae147b
 80025e8:	3f947ae1 	.word	0x3f947ae1

080025ec <RhoUtility_CalculateChaos>:
    }
#endif
}

void RhoUtility_CalculateChaos( rho_detection_variables * _, prediction_t * prediction )
{
 80025ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025f0:	b083      	sub	sp, #12
 80025f2:	4605      	mov	r5, r0
 80025f4:	460e      	mov	r6, r1
    _->chaos = MAX( ZDIV( (floating_t)prediction->previous_density[_->cycle], (floating_t)_->filtered_density ), MIN_CHAOS);
 80025f6:	6b07      	ldr	r7, [r0, #48]	; 0x30
 80025f8:	b93f      	cbnz	r7, 800260a <RhoUtility_CalculateChaos+0x1e>
 80025fa:	8903      	ldrh	r3, [r0, #8]
 80025fc:	33e0      	adds	r3, #224	; 0xe0
 80025fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002602:	3b00      	subs	r3, #0
 8002604:	bf18      	it	ne
 8002606:	2301      	movne	r3, #1
 8002608:	e01a      	b.n	8002640 <RhoUtility_CalculateChaos+0x54>
 800260a:	8903      	ldrh	r3, [r0, #8]
 800260c:	33e0      	adds	r3, #224	; 0xe0
 800260e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8002612:	f7fd ff9f 	bl	8000554 <__aeabi_ui2d>
 8002616:	4680      	mov	r8, r0
 8002618:	4689      	mov	r9, r1
 800261a:	4638      	mov	r0, r7
 800261c:	f7fd ff9a 	bl	8000554 <__aeabi_ui2d>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4640      	mov	r0, r8
 8002626:	4649      	mov	r1, r9
 8002628:	f7fe f938 	bl	800089c <__aeabi_ddiv>
 800262c:	f04f 0401 	mov.w	r4, #1
 8002630:	2200      	movs	r2, #0
 8002632:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <RhoUtility_CalculateChaos+0xc4>)
 8002634:	f7fe fa98 	bl	8000b68 <__aeabi_dcmpgt>
 8002638:	b908      	cbnz	r0, 800263e <RhoUtility_CalculateChaos+0x52>
 800263a:	f04f 0400 	mov.w	r4, #0
 800263e:	b2e3      	uxtb	r3, r4
 8002640:	b1d3      	cbz	r3, 8002678 <RhoUtility_CalculateChaos+0x8c>
 8002642:	b93f      	cbnz	r7, 8002654 <RhoUtility_CalculateChaos+0x68>
 8002644:	892b      	ldrh	r3, [r5, #8]
 8002646:	33e0      	adds	r3, #224	; 0xe0
 8002648:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800264c:	b9d3      	cbnz	r3, 8002684 <RhoUtility_CalculateChaos+0x98>
 800264e:	2000      	movs	r0, #0
 8002650:	2100      	movs	r1, #0
 8002652:	e013      	b.n	800267c <RhoUtility_CalculateChaos+0x90>
 8002654:	892b      	ldrh	r3, [r5, #8]
 8002656:	33e0      	adds	r3, #224	; 0xe0
 8002658:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 800265c:	f7fd ff7a 	bl	8000554 <__aeabi_ui2d>
 8002660:	4680      	mov	r8, r0
 8002662:	4689      	mov	r9, r1
 8002664:	4638      	mov	r0, r7
 8002666:	f7fd ff75 	bl	8000554 <__aeabi_ui2d>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4640      	mov	r0, r8
 8002670:	4649      	mov	r1, r9
 8002672:	f7fe f913 	bl	800089c <__aeabi_ddiv>
 8002676:	e001      	b.n	800267c <RhoUtility_CalculateChaos+0x90>
 8002678:	2000      	movs	r0, #0
 800267a:	490d      	ldr	r1, [pc, #52]	; (80026b0 <RhoUtility_CalculateChaos+0xc4>)
 800267c:	e9c5 0116 	strd	r0, r1, [r5, #88]	; 0x58
    LOG_RHO(RHO_DEBUG_DETECT_2, "%s:%d> Chaos:%.4f\n", prediction->name, _->cycle, _->chaos);
 8002680:	2402      	movs	r4, #2
 8002682:	e007      	b.n	8002694 <RhoUtility_CalculateChaos+0xa8>
    _->chaos = MAX( ZDIV( (floating_t)prediction->previous_density[_->cycle], (floating_t)_->filtered_density ), MIN_CHAOS);
 8002684:	2000      	movs	r0, #0
 8002686:	490b      	ldr	r1, [pc, #44]	; (80026b4 <RhoUtility_CalculateChaos+0xc8>)
 8002688:	e7f8      	b.n	800267c <RhoUtility_CalculateChaos+0x90>
    LOG_RHO(RHO_DEBUG_DETECT_2, "%s:%d> Chaos:%.4f\n", prediction->name, _->cycle, _->chaos);
 800268a:	2009      	movs	r0, #9
 800268c:	f005 fc84 	bl	8007f98 <putchar>
 8002690:	3401      	adds	r4, #1
 8002692:	b2e4      	uxtb	r4, r4
 8002694:	2c03      	cmp	r4, #3
 8002696:	d9f8      	bls.n	800268a <RhoUtility_CalculateChaos+0x9e>
 8002698:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
 800269c:	e9cd 2300 	strd	r2, r3, [sp]
 80026a0:	892a      	ldrh	r2, [r5, #8]
 80026a2:	6831      	ldr	r1, [r6, #0]
 80026a4:	4804      	ldr	r0, [pc, #16]	; (80026b8 <RhoUtility_CalculateChaos+0xcc>)
 80026a6:	f005 fc5f 	bl	8007f68 <iprintf>
}
 80026aa:	b003      	add	sp, #12
 80026ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026b0:	3ff00000 	.word	0x3ff00000
 80026b4:	40900000 	.word	0x40900000
 80026b8:	0800b2ec 	.word	0x0800b2ec

080026bc <RhoUtility_SortRegions>:
        }
    }
}

void RhoUtility_SortRegions( rho_detection_variables * _, prediction_t * prediction )
{
 80026bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c0:	ed2d 8b02 	vpush	{d8}
 80026c4:	b08b      	sub	sp, #44	; 0x2c
 80026c6:	4607      	mov	r7, r0
 80026c8:	460d      	mov	r5, r1
    uint16_t i, io, j, jo, best_index;
    floating_t best_score;
    region_t *curr, *check;
    
    /* Cycle through found regions */
    for( i = 0; i < _->total_regions; i++)
 80026ca:	2400      	movs	r4, #0
 80026cc:	e05b      	b.n	8002786 <RhoUtility_SortRegions+0xca>

        best_score = curr->score;
        best_index = i;
        
        /* Cycle through other regions */
        for( j = i+1; j < _->total_regions; j++ )
 80026ce:	3601      	adds	r6, #1
 80026d0:	b2b6      	uxth	r6, r6
 80026d2:	45b0      	cmp	r8, r6
 80026d4:	d91d      	bls.n	8002712 <RhoUtility_SortRegions+0x56>
        {
            if( !prediction->regions_order[j].valid ) continue;
 80026d6:	f506 73dc 	add.w	r3, r6, #440	; 0x1b8
 80026da:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f5      	beq.n	80026ce <RhoUtility_SortRegions+0x12>
            jo = prediction->regions_order[j].index;
 80026e2:	f506 73dc 	add.w	r3, r6, #440	; 0x1b8
 80026e6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80026ea:	785b      	ldrb	r3, [r3, #1]
            check = &prediction->regions[jo];
            if( check->sort ) continue;
 80026ec:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80026f0:	f8b2 22f8 	ldrh.w	r2, [r2, #760]	; 0x2f8
 80026f4:	2a00      	cmp	r2, #0
 80026f6:	d1ea      	bne.n	80026ce <RhoUtility_SortRegions+0x12>

            /* If unscored and less than min, set as new min */
            if( check->score < best_score )
 80026f8:	3318      	adds	r3, #24
 80026fa:	eb05 1143 	add.w	r1, r5, r3, lsl #5
 80026fe:	ec53 2b18 	vmov	r2, r3, d8
 8002702:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002706:	f7fe fa11 	bl	8000b2c <__aeabi_dcmplt>
 800270a:	2800      	cmp	r0, #0
 800270c:	d0df      	beq.n	80026ce <RhoUtility_SortRegions+0x12>
            {
                best_score = curr->score;
                best_index = j;
 800270e:	46b1      	mov	r9, r6
 8002710:	e7dd      	b.n	80026ce <RhoUtility_SortRegions+0x12>
            }
        }
        if( best_index == i ) continue;
 8002712:	454c      	cmp	r4, r9
 8002714:	d035      	beq.n	8002782 <RhoUtility_SortRegions+0xc6>

        prediction->regions_order[i].index = best_index;
 8002716:	f50a 73dc 	add.w	r3, sl, #440	; 0x1b8
 800271a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800271e:	f883 9001 	strb.w	r9, [r3, #1]
        prediction->regions_order[best_index].valid = true;
 8002722:	f509 79dc 	add.w	r9, r9, #440	; 0x1b8
 8002726:	2301      	movs	r3, #1
 8002728:	f805 3019 	strb.w	r3, [r5, r9, lsl #1]
        prediction->regions_order[best_index].index = i;
 800272c:	eb05 0949 	add.w	r9, r5, r9, lsl #1
 8002730:	f889 4001 	strb.w	r4, [r9, #1]
        prediction->regions[i].sort = true;
 8002734:	eb05 124a 	add.w	r2, r5, sl, lsl #5
 8002738:	f8a2 32f8 	strh.w	r3, [r2, #760]	; 0x2f8

        curr = &prediction->regions[i];
        LOG_RHO(RHO_DEBUG_DETECT, "%s> R%d:{ M%3d, D%3d, X%3d, W%3d } = S%.4f\n",
 800273c:	2602      	movs	r6, #2
 800273e:	e004      	b.n	800274a <RhoUtility_SortRegions+0x8e>
 8002740:	2009      	movs	r0, #9
 8002742:	f005 fc29 	bl	8007f98 <putchar>
 8002746:	3601      	adds	r6, #1
 8002748:	b2f6      	uxtb	r6, r6
 800274a:	2e03      	cmp	r6, #3
 800274c:	d9f8      	bls.n	8002740 <RhoUtility_SortRegions+0x84>
 800274e:	eb05 124a 	add.w	r2, r5, sl, lsl #5
 8002752:	f8b2 32f0 	ldrh.w	r3, [r2, #752]	; 0x2f0
 8002756:	f8b2 12f2 	ldrh.w	r1, [r2, #754]	; 0x2f2
 800275a:	f8b2 02f4 	ldrh.w	r0, [r2, #756]	; 0x2f4
 800275e:	f8b2 62f6 	ldrh.w	r6, [r2, #758]	; 0x2f6
 8002762:	f10a 0218 	add.w	r2, sl, #24
 8002766:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 800276a:	e9d2 8900 	ldrd	r8, r9, [r2]
 800276e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002772:	9602      	str	r6, [sp, #8]
 8002774:	9001      	str	r0, [sp, #4]
 8002776:	9100      	str	r1, [sp, #0]
 8002778:	4652      	mov	r2, sl
 800277a:	6829      	ldr	r1, [r5, #0]
 800277c:	4848      	ldr	r0, [pc, #288]	; (80028a0 <RhoUtility_SortRegions+0x1e4>)
 800277e:	f005 fbf3 	bl	8007f68 <iprintf>
    for( i = 0; i < _->total_regions; i++)
 8002782:	3401      	adds	r4, #1
 8002784:	b2a4      	uxth	r4, r4
 8002786:	f8b7 8010 	ldrh.w	r8, [r7, #16]
 800278a:	45a0      	cmp	r8, r4
 800278c:	d924      	bls.n	80027d8 <RhoUtility_SortRegions+0x11c>
        if( !prediction->regions_order[i].valid ) continue;
 800278e:	46a2      	mov	sl, r4
 8002790:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 8002794:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f2      	beq.n	8002782 <RhoUtility_SortRegions+0xc6>
        io = prediction->regions_order[i].index;
 800279c:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 80027a0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80027a4:	785b      	ldrb	r3, [r3, #1]
        if( curr->sort ) continue;
 80027a6:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80027aa:	f8b2 22f8 	ldrh.w	r2, [r2, #760]	; 0x2f8
 80027ae:	2a00      	cmp	r2, #0
 80027b0:	d1e7      	bne.n	8002782 <RhoUtility_SortRegions+0xc6>
        best_score = curr->score;
 80027b2:	3318      	adds	r3, #24
 80027b4:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 80027b8:	ed93 8b00 	vldr	d8, [r3]
        for( j = i+1; j < _->total_regions; j++ )
 80027bc:	1c66      	adds	r6, r4, #1
 80027be:	b2b6      	uxth	r6, r6
        best_index = i;
 80027c0:	46a1      	mov	r9, r4
        for( j = i+1; j < _->total_regions; j++ )
 80027c2:	e786      	b.n	80026d2 <RhoUtility_SortRegions+0x16>
        if( curr->score > 100. )
            printf("");
    }
    for(; i < MAX_REGIONS; i++ )
    {
        prediction->regions_order[i] = (order_t){ false, i };
 80027c4:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 80027c8:	2200      	movs	r2, #0
 80027ca:	f805 2013 	strb.w	r2, [r5, r3, lsl #1]
 80027ce:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80027d2:	705c      	strb	r4, [r3, #1]
    for(; i < MAX_REGIONS; i++ )
 80027d4:	3401      	adds	r4, #1
 80027d6:	b2a4      	uxth	r4, r4
 80027d8:	2c03      	cmp	r4, #3
 80027da:	d9f3      	bls.n	80027c4 <RhoUtility_SortRegions+0x108>
    }

    int c2[MAX_REGIONS] = {-1, -1, -1, -1};
 80027dc:	4b31      	ldr	r3, [pc, #196]	; (80028a4 <RhoUtility_SortRegions+0x1e8>)
 80027de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e0:	ac0a      	add	r4, sp, #40	; 0x28
 80027e2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    for( i = 0; i < _->total_regions; i++)
 80027e6:	2600      	movs	r6, #0
 80027e8:	e04c      	b.n	8002884 <RhoUtility_SortRegions+0x1c8>
    {
        order_t* o = &prediction->regions_order[i];
        LOG_RHO(RHO_DEBUG_DETECT_2, "%s> I%d%c L:%d S:%.4f\n", prediction->name, o->index, o->valid?'Y':'N', prediction->regions[o->index].location, prediction->regions[o->index].score);
 80027ea:	2009      	movs	r0, #9
 80027ec:	f005 fbd4 	bl	8007f98 <putchar>
 80027f0:	3401      	adds	r4, #1
 80027f2:	b2e4      	uxtb	r4, r4
 80027f4:	2c03      	cmp	r4, #3
 80027f6:	d9f8      	bls.n	80027ea <RhoUtility_SortRegions+0x12e>
 80027f8:	6829      	ldr	r1, [r5, #0]
 80027fa:	f508 73dc 	add.w	r3, r8, #440	; 0x1b8
 80027fe:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8002802:	7852      	ldrb	r2, [r2, #1]
 8002804:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 8002808:	b343      	cbz	r3, 800285c <RhoUtility_SortRegions+0x1a0>
 800280a:	2359      	movs	r3, #89	; 0x59
 800280c:	eb05 1042 	add.w	r0, r5, r2, lsl #5
 8002810:	f8b0 42f4 	ldrh.w	r4, [r0, #756]	; 0x2f4
 8002814:	f102 0018 	add.w	r0, r2, #24
 8002818:	eb05 1040 	add.w	r0, r5, r0, lsl #5
 800281c:	e9d0 ab00 	ldrd	sl, fp, [r0]
 8002820:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002824:	9400      	str	r4, [sp, #0]
 8002826:	4820      	ldr	r0, [pc, #128]	; (80028a8 <RhoUtility_SortRegions+0x1ec>)
 8002828:	f005 fb9e 	bl	8007f68 <iprintf>

        c2[i] = o->index;
 800282c:	f508 73dc 	add.w	r3, r8, #440	; 0x1b8
 8002830:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002834:	f893 9001 	ldrb.w	r9, [r3, #1]
 8002838:	ab0a      	add	r3, sp, #40	; 0x28
 800283a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800283e:	f843 9c10 	str.w	r9, [r3, #-16]
        bool already_has = false;
        for(int j = i - 1; j >= 0; j--)
 8002842:	f108 34ff 	add.w	r4, r8, #4294967295
 8002846:	2c00      	cmp	r4, #0
 8002848:	db1a      	blt.n	8002880 <RhoUtility_SortRegions+0x1c4>
        {
            if(c2[j] == c2[i])
 800284a:	ab0a      	add	r3, sp, #40	; 0x28
 800284c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002850:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002854:	4599      	cmp	r9, r3
 8002856:	d01b      	beq.n	8002890 <RhoUtility_SortRegions+0x1d4>
        for(int j = i - 1; j >= 0; j--)
 8002858:	3c01      	subs	r4, #1
 800285a:	e7f4      	b.n	8002846 <RhoUtility_SortRegions+0x18a>
        LOG_RHO(RHO_DEBUG_DETECT_2, "%s> I%d%c L:%d S:%.4f\n", prediction->name, o->index, o->valid?'Y':'N', prediction->regions[o->index].location, prediction->regions[o->index].score);
 800285c:	234e      	movs	r3, #78	; 0x4e
 800285e:	e7d5      	b.n	800280c <RhoUtility_SortRegions+0x150>
            {
                already_has = true;
                LOG_RHO(RHO_DEBUG_DETECT_2, "Already has %d at %d and %d\n", c2[i], i, j);
 8002860:	2009      	movs	r0, #9
 8002862:	f005 fb99 	bl	8007f98 <putchar>
 8002866:	f10a 0a01 	add.w	sl, sl, #1
 800286a:	fa5f fa8a 	uxtb.w	sl, sl
 800286e:	f1ba 0f03 	cmp.w	sl, #3
 8002872:	d9f5      	bls.n	8002860 <RhoUtility_SortRegions+0x1a4>
 8002874:	4623      	mov	r3, r4
 8002876:	4642      	mov	r2, r8
 8002878:	4649      	mov	r1, r9
 800287a:	480c      	ldr	r0, [pc, #48]	; (80028ac <RhoUtility_SortRegions+0x1f0>)
 800287c:	f005 fb74 	bl	8007f68 <iprintf>
    for( i = 0; i < _->total_regions; i++)
 8002880:	3601      	adds	r6, #1
 8002882:	b2b6      	uxth	r6, r6
 8002884:	8a3b      	ldrh	r3, [r7, #16]
 8002886:	42b3      	cmp	r3, r6
 8002888:	d905      	bls.n	8002896 <RhoUtility_SortRegions+0x1da>
        order_t* o = &prediction->regions_order[i];
 800288a:	46b0      	mov	r8, r6
        LOG_RHO(RHO_DEBUG_DETECT_2, "%s> I%d%c L:%d S:%.4f\n", prediction->name, o->index, o->valid?'Y':'N', prediction->regions[o->index].location, prediction->regions[o->index].score);
 800288c:	2402      	movs	r4, #2
 800288e:	e7b1      	b.n	80027f4 <RhoUtility_SortRegions+0x138>
                LOG_RHO(RHO_DEBUG_DETECT_2, "Already has %d at %d and %d\n", c2[i], i, j);
 8002890:	f04f 0a02 	mov.w	sl, #2
 8002894:	e7eb      	b.n	800286e <RhoUtility_SortRegions+0x1b2>
                break;
            }
        }
    }
}
 8002896:	b00b      	add	sp, #44	; 0x2c
 8002898:	ecbd 8b02 	vpop	{d8}
 800289c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028a0:	0800b308 	.word	0x0800b308
 80028a4:	0800b108 	.word	0x0800b108
 80028a8:	0800b33c 	.word	0x0800b33c
 80028ac:	0800b35c 	.word	0x0800b35c

080028b0 <RhoUtility_CalculatedFrameStatistics>:

void RhoUtility_CalculatedFrameStatistics( rho_detection_variables * _, prediction_t * prediction )
{
 80028b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028b4:	4604      	mov	r4, r0
 80028b6:	460d      	mov	r5, r1
    /* Update frame statistics */
    _->assumed_regions = (floating_t)_->total_regions;
 80028b8:	8a00      	ldrh	r0, [r0, #16]
 80028ba:	f7fd fe4b 	bl	8000554 <__aeabi_ui2d>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
    if( _->assumed_regions == 0. ) _->assumed_regions = 1.;
 80028c6:	2200      	movs	r2, #0
 80028c8:	2300      	movs	r3, #0
 80028ca:	f7fe f925 	bl	8000b18 <__aeabi_dcmpeq>
 80028ce:	b118      	cbz	r0, 80028d8 <RhoUtility_CalculatedFrameStatistics+0x28>
 80028d0:	2200      	movs	r2, #0
 80028d2:	4b5a      	ldr	r3, [pc, #360]	; (8002a3c <RhoUtility_CalculatedFrameStatistics+0x18c>)
 80028d4:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70

    prediction->nu_regions = BOUNDU( ZDIV( (floating_t)_->total_density * (floating_t)_->assumed_regions, _->target_density ), MAX_NU_REGIONS );
 80028d8:	e9d4 671a 	ldrd	r6, r7, [r4, #104]	; 0x68
 80028dc:	2200      	movs	r2, #0
 80028de:	2300      	movs	r3, #0
 80028e0:	4630      	mov	r0, r6
 80028e2:	4639      	mov	r1, r7
 80028e4:	f7fe f918 	bl	8000b18 <__aeabi_dcmpeq>
 80028e8:	b350      	cbz	r0, 8002940 <RhoUtility_CalculatedFrameStatistics+0x90>
 80028ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80028ec:	f7fd fe32 	bl	8000554 <__aeabi_ui2d>
 80028f0:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 80028f4:	f7fd fea8 	bl	8000648 <__aeabi_dmul>
 80028f8:	f04f 0801 	mov.w	r8, #1
 80028fc:	2200      	movs	r2, #0
 80028fe:	2300      	movs	r3, #0
 8002900:	f7fe f90a 	bl	8000b18 <__aeabi_dcmpeq>
 8002904:	b108      	cbz	r0, 800290a <RhoUtility_CalculatedFrameStatistics+0x5a>
 8002906:	f04f 0800 	mov.w	r8, #0
 800290a:	fa5f f388 	uxtb.w	r3, r8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d13b      	bne.n	800298a <RhoUtility_CalculatedFrameStatistics+0xda>
 8002912:	2200      	movs	r2, #0
 8002914:	2300      	movs	r3, #0
 8002916:	4630      	mov	r0, r6
 8002918:	4639      	mov	r1, r7
 800291a:	f7fe f8fd 	bl	8000b18 <__aeabi_dcmpeq>
 800291e:	b330      	cbz	r0, 800296e <RhoUtility_CalculatedFrameStatistics+0xbe>
 8002920:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002922:	f7fd fe17 	bl	8000554 <__aeabi_ui2d>
 8002926:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 800292a:	f7fd fe8d 	bl	8000648 <__aeabi_dmul>
 800292e:	2200      	movs	r2, #0
 8002930:	2300      	movs	r3, #0
 8002932:	f7fe f8f1 	bl	8000b18 <__aeabi_dcmpeq>
 8002936:	2800      	cmp	r0, #0
 8002938:	d03f      	beq.n	80029ba <RhoUtility_CalculatedFrameStatistics+0x10a>
 800293a:	2600      	movs	r6, #0
 800293c:	2700      	movs	r7, #0
 800293e:	e026      	b.n	800298e <RhoUtility_CalculatedFrameStatistics+0xde>
 8002940:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002942:	f7fd fe07 	bl	8000554 <__aeabi_ui2d>
 8002946:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 800294a:	f7fd fe7d 	bl	8000648 <__aeabi_dmul>
 800294e:	4632      	mov	r2, r6
 8002950:	463b      	mov	r3, r7
 8002952:	f7fd ffa3 	bl	800089c <__aeabi_ddiv>
 8002956:	f04f 0801 	mov.w	r8, #1
 800295a:	2200      	movs	r2, #0
 800295c:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <RhoUtility_CalculatedFrameStatistics+0x190>)
 800295e:	f7fe f903 	bl	8000b68 <__aeabi_dcmpgt>
 8002962:	b908      	cbnz	r0, 8002968 <RhoUtility_CalculatedFrameStatistics+0xb8>
 8002964:	f04f 0800 	mov.w	r8, #0
 8002968:	fa5f f388 	uxtb.w	r3, r8
 800296c:	e7cf      	b.n	800290e <RhoUtility_CalculatedFrameStatistics+0x5e>
 800296e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002970:	f7fd fdf0 	bl	8000554 <__aeabi_ui2d>
 8002974:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 8002978:	f7fd fe66 	bl	8000648 <__aeabi_dmul>
 800297c:	4632      	mov	r2, r6
 800297e:	463b      	mov	r3, r7
 8002980:	f7fd ff8c 	bl	800089c <__aeabi_ddiv>
 8002984:	4606      	mov	r6, r0
 8002986:	460f      	mov	r7, r1
 8002988:	e001      	b.n	800298e <RhoUtility_CalculatedFrameStatistics+0xde>
 800298a:	2600      	movs	r6, #0
 800298c:	4f2c      	ldr	r7, [pc, #176]	; (8002a40 <RhoUtility_CalculatedFrameStatistics+0x190>)
 800298e:	e9c5 67e4 	strd	r6, r7, [r5, #912]	; 0x390
    prediction->num_regions = _->total_regions;
 8002992:	8a23      	ldrh	r3, [r4, #16]
 8002994:	f885 3378 	strb.w	r3, [r5, #888]	; 0x378
    prediction->total_density = _->total_density;
 8002998:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 800299c:	f8c5 8388 	str.w	r8, [r5, #904]	; 0x388
    prediction->average_density = ZDIV( (floating_t)prediction->total_density, prediction->nu_regions );
 80029a0:	2200      	movs	r2, #0
 80029a2:	2300      	movs	r3, #0
 80029a4:	4630      	mov	r0, r6
 80029a6:	4639      	mov	r1, r7
 80029a8:	f7fe f8b6 	bl	8000b18 <__aeabi_dcmpeq>
 80029ac:	b140      	cbz	r0, 80029c0 <RhoUtility_CalculatedFrameStatistics+0x110>
 80029ae:	f1b8 0f00 	cmp.w	r8, #0
 80029b2:	d110      	bne.n	80029d6 <RhoUtility_CalculatedFrameStatistics+0x126>
 80029b4:	2000      	movs	r0, #0
 80029b6:	2100      	movs	r1, #0
 80029b8:	e009      	b.n	80029ce <RhoUtility_CalculatedFrameStatistics+0x11e>
    prediction->nu_regions = BOUNDU( ZDIV( (floating_t)_->total_density * (floating_t)_->assumed_regions, _->target_density ), MAX_NU_REGIONS );
 80029ba:	2600      	movs	r6, #0
 80029bc:	4f21      	ldr	r7, [pc, #132]	; (8002a44 <RhoUtility_CalculatedFrameStatistics+0x194>)
 80029be:	e7e6      	b.n	800298e <RhoUtility_CalculatedFrameStatistics+0xde>
    prediction->average_density = ZDIV( (floating_t)prediction->total_density, prediction->nu_regions );
 80029c0:	4640      	mov	r0, r8
 80029c2:	f7fd fdc7 	bl	8000554 <__aeabi_ui2d>
 80029c6:	4632      	mov	r2, r6
 80029c8:	463b      	mov	r3, r7
 80029ca:	f7fd ff67 	bl	800089c <__aeabi_ddiv>
 80029ce:	e9c5 01ea 	strd	r0, r1, [r5, #936]	; 0x3a8

    /* Reset sort flags */
    for( uint8_t i = 0; i < MAX_REGIONS; i++ )
 80029d2:	2300      	movs	r3, #0
 80029d4:	e009      	b.n	80029ea <RhoUtility_CalculatedFrameStatistics+0x13a>
    prediction->average_density = ZDIV( (floating_t)prediction->total_density, prediction->nu_regions );
 80029d6:	2000      	movs	r0, #0
 80029d8:	491a      	ldr	r1, [pc, #104]	; (8002a44 <RhoUtility_CalculatedFrameStatistics+0x194>)
 80029da:	e7f8      	b.n	80029ce <RhoUtility_CalculatedFrameStatistics+0x11e>
        prediction->regions[i].sort = false;
 80029dc:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80029e0:	2100      	movs	r1, #0
 80029e2:	f8a2 12f8 	strh.w	r1, [r2, #760]	; 0x2f8
    for( uint8_t i = 0; i < MAX_REGIONS; i++ )
 80029e6:	3301      	adds	r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d9f6      	bls.n	80029dc <RhoUtility_CalculatedFrameStatistics+0x12c>
    
    LOG_RHO(RHO_DEBUG_DETECT_2, "Total:%d | Target:%d | Frame:%d\n", _->total_density, (int)_->target_density, TOTAL_RHO_PIXELS);
 80029ee:	2602      	movs	r6, #2
 80029f0:	e004      	b.n	80029fc <RhoUtility_CalculatedFrameStatistics+0x14c>
 80029f2:	2009      	movs	r0, #9
 80029f4:	f005 fad0 	bl	8007f98 <putchar>
 80029f8:	3601      	adds	r6, #1
 80029fa:	b2f6      	uxtb	r6, r6
 80029fc:	2e03      	cmp	r6, #3
 80029fe:	d9f8      	bls.n	80029f2 <RhoUtility_CalculatedFrameStatistics+0x142>
 8002a00:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
 8002a04:	f7fe f8d0 	bl	8000ba8 <__aeabi_d2iz>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002a0e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002a10:	480d      	ldr	r0, [pc, #52]	; (8002a48 <RhoUtility_CalculatedFrameStatistics+0x198>)
 8002a12:	f005 faa9 	bl	8007f68 <iprintf>
    LOG_RHO(RHO_DEBUG_DETECT_2, "Regions: %d{%.3f}\n", prediction->num_regions, prediction->nu_regions);
 8002a16:	2402      	movs	r4, #2
 8002a18:	e004      	b.n	8002a24 <RhoUtility_CalculatedFrameStatistics+0x174>
 8002a1a:	2009      	movs	r0, #9
 8002a1c:	f005 fabc 	bl	8007f98 <putchar>
 8002a20:	3401      	adds	r4, #1
 8002a22:	b2e4      	uxtb	r4, r4
 8002a24:	2c03      	cmp	r4, #3
 8002a26:	d9f8      	bls.n	8002a1a <RhoUtility_CalculatedFrameStatistics+0x16a>
 8002a28:	e9d5 23e4 	ldrd	r2, r3, [r5, #912]	; 0x390
 8002a2c:	f895 1378 	ldrb.w	r1, [r5, #888]	; 0x378
 8002a30:	4806      	ldr	r0, [pc, #24]	; (8002a4c <RhoUtility_CalculatedFrameStatistics+0x19c>)
 8002a32:	f005 fa99 	bl	8007f68 <iprintf>
}
 8002a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a3a:	bf00      	nop
 8002a3c:	3ff00000 	.word	0x3ff00000
 8002a40:	40140000 	.word	0x40140000
 8002a44:	40900000 	.word	0x40900000
 8002a48:	0800b380 	.word	0x0800b380
 8002a4c:	0800b3a8 	.word	0x0800b3a8

08002a50 <RhoUtility_SortTrackingFilters>:

    RhoUtility.Predict.SortFilters( prediction );
}

void RhoUtility_SortTrackingFilters( prediction_t * prediction )
{
 8002a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a54:	4605      	mov	r5, r0
    kalman_filter_t *curr, *check;
    floating_t best_score;
    uint16_t i, io, j, jo, best_index = 0;
    /* Score all filters */
    for( i = 0; i < MAX_TRACKING_FILTERS; i++ )
 8002a56:	2400      	movs	r4, #0
 8002a58:	e008      	b.n	8002a6c <RhoUtility_SortTrackingFilters+0x1c>
        Kalman.Score( &prediction->tracking_filters[i] );
 8002a5a:	20b8      	movs	r0, #184	; 0xb8
 8002a5c:	fb00 f004 	mul.w	r0, r0, r4
 8002a60:	3008      	adds	r0, #8
 8002a62:	4428      	add	r0, r5
 8002a64:	f001 ff20 	bl	80048a8 <ScoreKalman>
    for( i = 0; i < MAX_TRACKING_FILTERS; i++ )
 8002a68:	3401      	adds	r4, #1
 8002a6a:	b2a4      	uxth	r4, r4
 8002a6c:	2c03      	cmp	r4, #3
 8002a6e:	d9f4      	bls.n	8002a5a <RhoUtility_SortTrackingFilters+0xa>

    /* Swap sort - Cycle through found regions */
    for( i = 0; i < MAX_TRACKING_FILTERS; i++)
 8002a70:	2600      	movs	r6, #0
 8002a72:	e021      	b.n	8002ab8 <RhoUtility_SortTrackingFilters+0x68>
        if( curr->sorted == true) continue;

        best_score = curr->score;
        best_index = i;
        /* Cycle through other regions */
        for( j = i+1; j < MAX_TRACKING_FILTERS; j++ )
 8002a74:	3401      	adds	r4, #1
 8002a76:	b2a4      	uxth	r4, r4
 8002a78:	2c03      	cmp	r4, #3
 8002a7a:	d80f      	bhi.n	8002a9c <RhoUtility_SortTrackingFilters+0x4c>
        {
            jo = prediction->tracking_filters_order[j];
 8002a7c:	192b      	adds	r3, r5, r4
 8002a7e:	f893 12e8 	ldrb.w	r1, [r3, #744]	; 0x2e8
            check = &prediction->tracking_filters[jo];

            /* If unscored and less than min, set as new min */
            if( check->score > best_score )
 8002a82:	23b8      	movs	r3, #184	; 0xb8
 8002a84:	fb03 5101 	mla	r1, r3, r1, r5
 8002a88:	4642      	mov	r2, r8
 8002a8a:	464b      	mov	r3, r9
 8002a8c:	e9d1 0124 	ldrd	r0, r1, [r1, #144]	; 0x90
 8002a90:	f7fe f86a 	bl	8000b68 <__aeabi_dcmpgt>
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d0ed      	beq.n	8002a74 <RhoUtility_SortTrackingFilters+0x24>
            {
                best_score = curr->score;
                best_index = j;
 8002a98:	46a2      	mov	sl, r4
 8002a9a:	e7eb      	b.n	8002a74 <RhoUtility_SortTrackingFilters+0x24>
            }
        }
        prediction->tracking_filters_order[i] = best_index;
 8002a9c:	19eb      	adds	r3, r5, r7
 8002a9e:	f883 a2e8 	strb.w	sl, [r3, #744]	; 0x2e8
        prediction->tracking_filters_order[best_index] = i;
 8002aa2:	44aa      	add	sl, r5
 8002aa4:	f88a 62e8 	strb.w	r6, [sl, #744]	; 0x2e8
        prediction->tracking_filters[i].sorted = true;
 8002aa8:	23b8      	movs	r3, #184	; 0xb8
 8002aaa:	fb07 3703 	mla	r7, r7, r3, r3
 8002aae:	442f      	add	r7, r5
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	707b      	strb	r3, [r7, #1]
    for( i = 0; i < MAX_TRACKING_FILTERS; i++)
 8002ab4:	3601      	adds	r6, #1
 8002ab6:	b2b6      	uxth	r6, r6
 8002ab8:	2e03      	cmp	r6, #3
 8002aba:	d813      	bhi.n	8002ae4 <RhoUtility_SortTrackingFilters+0x94>
        io = prediction->tracking_filters_order[i];
 8002abc:	4637      	mov	r7, r6
 8002abe:	19ab      	adds	r3, r5, r6
 8002ac0:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
        if( curr->sorted == true) continue;
 8002ac4:	23b8      	movs	r3, #184	; 0xb8
 8002ac6:	fb02 3303 	mla	r3, r2, r3, r3
 8002aca:	442b      	add	r3, r5
 8002acc:	785b      	ldrb	r3, [r3, #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <RhoUtility_SortTrackingFilters+0x64>
        best_score = curr->score;
 8002ad2:	23b8      	movs	r3, #184	; 0xb8
 8002ad4:	fb03 5202 	mla	r2, r3, r2, r5
 8002ad8:	e9d2 8924 	ldrd	r8, r9, [r2, #144]	; 0x90
        for( j = i+1; j < MAX_TRACKING_FILTERS; j++ )
 8002adc:	1c74      	adds	r4, r6, #1
 8002ade:	b2a4      	uxth	r4, r4
        best_index = i;
 8002ae0:	46b2      	mov	sl, r6
        for( j = i+1; j < MAX_TRACKING_FILTERS; j++ )
 8002ae2:	e7c9      	b.n	8002a78 <RhoUtility_SortTrackingFilters+0x28>
    }

    for( i = 0; i < MAX_TRACKING_FILTERS; i++ )
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	e007      	b.n	8002af8 <RhoUtility_SortTrackingFilters+0xa8>
        prediction->tracking_filters[i].sorted = false;
 8002ae8:	1c51      	adds	r1, r2, #1
 8002aea:	23b8      	movs	r3, #184	; 0xb8
 8002aec:	fb02 3303 	mla	r3, r2, r3, r3
 8002af0:	442b      	add	r3, r5
 8002af2:	2200      	movs	r2, #0
 8002af4:	705a      	strb	r2, [r3, #1]
    for( i = 0; i < MAX_TRACKING_FILTERS; i++ )
 8002af6:	b28a      	uxth	r2, r1
 8002af8:	2a03      	cmp	r2, #3
 8002afa:	d9f5      	bls.n	8002ae8 <RhoUtility_SortTrackingFilters+0x98>
}
 8002afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002b00 <RhoUtility_CalculateValidTracks>:

uint16_t RhoUtility_CalculateValidTracks( prediction_t * prediction )
{
 8002b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	4605      	mov	r5, r0
    uint16_t valid_tracks = 0, i, io;
    for( i = 0; i < MAX_TRACKING_FILTERS; i++ )
 8002b08:	2700      	movs	r7, #0
    uint16_t valid_tracks = 0, i, io;
 8002b0a:	46ba      	mov	sl, r7
    for( i = 0; i < MAX_TRACKING_FILTERS; i++ )
 8002b0c:	e01c      	b.n	8002b48 <RhoUtility_CalculateValidTracks+0x48>
        curr->valid = false;
        floating_t score = Kalman.Score( curr );
        if( Kalman.IsExpired(curr)
           || ( score < MIN_TRACKING_KALMAN_SCORE ) ) break;
        Kalman.Predict(curr, curr->velocity);
        LOG_RHO(RHO_DEBUG_PREDICT_2, "%s> K%d->score=%.4f\n", prediction->name, io, curr->score);
 8002b0e:	2009      	movs	r0, #9
 8002b10:	f005 fa42 	bl	8007f98 <putchar>
 8002b14:	3401      	adds	r4, #1
 8002b16:	b2e4      	uxtb	r4, r4
 8002b18:	2c03      	cmp	r4, #3
 8002b1a:	d9f8      	bls.n	8002b0e <RhoUtility_CalculateValidTracks+0xe>
 8002b1c:	24b8      	movs	r4, #184	; 0xb8
 8002b1e:	fb04 5306 	mla	r3, r4, r6, r5
 8002b22:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002b26:	e9cd 2300 	strd	r2, r3, [sp]
 8002b2a:	4632      	mov	r2, r6
 8002b2c:	6829      	ldr	r1, [r5, #0]
 8002b2e:	4820      	ldr	r0, [pc, #128]	; (8002bb0 <RhoUtility_CalculateValidTracks+0xb0>)
 8002b30:	f005 fa1a 	bl	8007f68 <iprintf>
        curr->valid = true;
 8002b34:	fb06 4604 	mla	r6, r6, r4, r4
 8002b38:	442e      	add	r6, r5
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	70b3      	strb	r3, [r6, #2]
        valid_tracks++;
 8002b3e:	449a      	add	sl, r3
 8002b40:	fa1f fa8a 	uxth.w	sl, sl
    for( i = 0; i < MAX_TRACKING_FILTERS; i++ )
 8002b44:	441f      	add	r7, r3
 8002b46:	b2bf      	uxth	r7, r7
 8002b48:	2f03      	cmp	r7, #3
 8002b4a:	d827      	bhi.n	8002b9c <RhoUtility_CalculateValidTracks+0x9c>
        io = prediction->tracking_filters_order[i];
 8002b4c:	19eb      	adds	r3, r5, r7
 8002b4e:	f893 62e8 	ldrb.w	r6, [r3, #744]	; 0x2e8
        kalman_filter_t *curr = &prediction->tracking_filters[io];
 8002b52:	23b8      	movs	r3, #184	; 0xb8
 8002b54:	fb03 f406 	mul.w	r4, r3, r6
 8002b58:	3408      	adds	r4, #8
 8002b5a:	442c      	add	r4, r5
        curr->valid = false;
 8002b5c:	fb06 3303 	mla	r3, r6, r3, r3
 8002b60:	442b      	add	r3, r5
 8002b62:	2200      	movs	r2, #0
 8002b64:	709a      	strb	r2, [r3, #2]
        floating_t score = Kalman.Score( curr );
 8002b66:	4620      	mov	r0, r4
 8002b68:	f001 fe9e 	bl	80048a8 <ScoreKalman>
 8002b6c:	ec59 8b10 	vmov	r8, r9, d0
        if( Kalman.IsExpired(curr)
 8002b70:	4620      	mov	r0, r4
 8002b72:	f001 fe81 	bl	8004878 <IsKalmanExpired>
 8002b76:	b988      	cbnz	r0, 8002b9c <RhoUtility_CalculateValidTracks+0x9c>
           || ( score < MIN_TRACKING_KALMAN_SCORE ) ) break;
 8002b78:	a30b      	add	r3, pc, #44	; (adr r3, 8002ba8 <RhoUtility_CalculateValidTracks+0xa8>)
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	4640      	mov	r0, r8
 8002b80:	4649      	mov	r1, r9
 8002b82:	f7fd ffd3 	bl	8000b2c <__aeabi_dcmplt>
 8002b86:	b948      	cbnz	r0, 8002b9c <RhoUtility_CalculateValidTracks+0x9c>
        Kalman.Predict(curr, curr->velocity);
 8002b88:	23b8      	movs	r3, #184	; 0xb8
 8002b8a:	fb03 5306 	mla	r3, r3, r6, r5
 8002b8e:	ed93 0b16 	vldr	d0, [r3, #88]	; 0x58
 8002b92:	4620      	mov	r0, r4
 8002b94:	f001 fcd1 	bl	800453a <PredictKalman>
        LOG_RHO(RHO_DEBUG_PREDICT_2, "%s> K%d->score=%.4f\n", prediction->name, io, curr->score);
 8002b98:	2402      	movs	r4, #2
 8002b9a:	e7bd      	b.n	8002b18 <RhoUtility_CalculateValidTracks+0x18>
    }
    return valid_tracks;
}
 8002b9c:	4650      	mov	r0, sl
 8002b9e:	b002      	add	sp, #8
 8002ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	47ae147b 	.word	0x47ae147b
 8002bac:	3f947ae1 	.word	0x3f947ae1
 8002bb0:	0800b3c4 	.word	0x0800b3c4
 8002bb4:	00000000 	.word	0x00000000

08002bb8 <RhoUtility_PredictTrackingFilters>:
{
 8002bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bbc:	ed2d 9b02 	vpush	{d9}
 8002bc0:	b0a1      	sub	sp, #132	; 0x84
 8002bc2:	4607      	mov	r7, r0
    uint16_t valid_tracks = RhoUtility.Predict.CalculateValidTracks( prediction );
 8002bc4:	f7ff ff9c 	bl	8002b00 <RhoUtility_CalculateValidTracks>
 8002bc8:	901f      	str	r0, [sp, #124]	; 0x7c
    LOG_RHO( RHO_DEBUG_PREDICT_2, "Found %d valid/active tracking filter(s)\n", valid_tracks);
 8002bca:	2402      	movs	r4, #2
 8002bcc:	e004      	b.n	8002bd8 <RhoUtility_PredictTrackingFilters+0x20>
 8002bce:	2009      	movs	r0, #9
 8002bd0:	f005 f9e2 	bl	8007f98 <putchar>
 8002bd4:	3401      	adds	r4, #1
 8002bd6:	b2e4      	uxtb	r4, r4
 8002bd8:	2c03      	cmp	r4, #3
 8002bda:	d9f8      	bls.n	8002bce <RhoUtility_PredictTrackingFilters+0x16>
 8002bdc:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8002bde:	911d      	str	r1, [sp, #116]	; 0x74
 8002be0:	48c1      	ldr	r0, [pc, #772]	; (8002ee8 <RhoUtility_PredictTrackingFilters+0x330>)
 8002be2:	f005 f9c1 	bl	8007f68 <iprintf>
    uint16_t m = 0, n = 0, v = 0, updated = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	931e      	str	r3, [sp, #120]	; 0x78
 8002bea:	4698      	mov	r8, r3
 8002bec:	469a      	mov	sl, r3
    floating_t aa, bb, ab, ba, curr_difference = 0., total_difference = 0., average_difference = 0.;
 8002bee:	ed9f 7bbc 	vldr	d7, [pc, #752]	; 8002ee0 <RhoUtility_PredictTrackingFilters+0x328>
 8002bf2:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002bf6:	46b9      	mov	r9, r7
 8002bf8:	461f      	mov	r7, r3
    while( m < ( valid_tracks - 1 ) && n < ( prediction->num_regions - 1 ) )
 8002bfa:	e0e9      	b.n	8002dd0 <RhoUtility_PredictTrackingFilters+0x218>
        region_t *regionA = &prediction->regions[prediction->regions_order[v++].index];
 8002bfc:	f108 0301 	add.w	r3, r8, #1
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	f508 78dc 	add.w	r8, r8, #440	; 0x1b8
 8002c06:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 8002c0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8002c0e:	9210      	str	r2, [sp, #64]	; 0x40
        for( ; v < MAX_REGIONS && !prediction->regions_order[v].valid; v++ );
 8002c10:	e001      	b.n	8002c16 <RhoUtility_PredictTrackingFilters+0x5e>
 8002c12:	3301      	adds	r3, #1
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d805      	bhi.n	8002c26 <RhoUtility_PredictTrackingFilters+0x6e>
 8002c1a:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8002c1e:	f819 2012 	ldrb.w	r2, [r9, r2, lsl #1]
 8002c22:	2a00      	cmp	r2, #0
 8002c24:	d0f5      	beq.n	8002c12 <RhoUtility_PredictTrackingFilters+0x5a>
        region_t *regionB = &prediction->regions[prediction->regions_order[v++].index];
 8002c26:	f103 0801 	add.w	r8, r3, #1
 8002c2a:	fa1f f888 	uxth.w	r8, r8
 8002c2e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c32:	eb09 0343 	add.w	r3, r9, r3, lsl #1
 8002c36:	785b      	ldrb	r3, [r3, #1]
 8002c38:	9311      	str	r3, [sp, #68]	; 0x44
        fAi = prediction->tracking_filters_order[m],
 8002c3a:	eb09 030b 	add.w	r3, r9, fp
 8002c3e:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
 8002c42:	9219      	str	r2, [sp, #100]	; 0x64
        fBi = prediction->tracking_filters_order[m+1];
 8002c44:	f10b 0301 	add.w	r3, fp, #1
 8002c48:	444b      	add	r3, r9
 8002c4a:	f893 12e8 	ldrb.w	r1, [r3, #744]	; 0x2e8
 8002c4e:	911a      	str	r1, [sp, #104]	; 0x68
        *filterA = &prediction->tracking_filters[fAi],
 8002c50:	26b8      	movs	r6, #184	; 0xb8
 8002c52:	fb06 f302 	mul.w	r3, r6, r2
 8002c56:	f103 0208 	add.w	r2, r3, #8
 8002c5a:	444a      	add	r2, r9
 8002c5c:	921b      	str	r2, [sp, #108]	; 0x6c
        *filterB = &prediction->tracking_filters[fBi];
 8002c5e:	fb06 f601 	mul.w	r6, r6, r1
 8002c62:	f106 0208 	add.w	r2, r6, #8
 8002c66:	444a      	add	r2, r9
 8002c68:	921c      	str	r2, [sp, #112]	; 0x70
        aa = fabs(filterA->value - regionA->location );
 8002c6a:	444b      	add	r3, r9
 8002c6c:	ed93 9b12 	vldr	d9, [r3, #72]	; 0x48
 8002c70:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002c72:	eb09 1342 	add.w	r3, r9, r2, lsl #5
 8002c76:	f8b3 02f4 	ldrh.w	r0, [r3, #756]	; 0x2f4
 8002c7a:	f7fd fc7b 	bl	8000574 <__aeabi_i2d>
 8002c7e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	ec51 0b19 	vmov	r0, r1, d9
 8002c8a:	f7fd fb25 	bl	80002d8 <__aeabi_dsub>
 8002c8e:	900c      	str	r0, [sp, #48]	; 0x30
 8002c90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002c94:	910d      	str	r1, [sp, #52]	; 0x34
        bb = fabs(filterB->value - regionB->location );
 8002c96:	444e      	add	r6, r9
 8002c98:	e9d6 4512 	ldrd	r4, r5, [r6, #72]	; 0x48
 8002c9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002c9e:	eb09 1343 	add.w	r3, r9, r3, lsl #5
 8002ca2:	f8b3 02f4 	ldrh.w	r0, [r3, #756]	; 0x2f4
 8002ca6:	f7fd fc65 	bl	8000574 <__aeabi_i2d>
 8002caa:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	f7fd fb0f 	bl	80002d8 <__aeabi_dsub>
 8002cba:	900e      	str	r0, [sp, #56]	; 0x38
 8002cbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002cc0:	930f      	str	r3, [sp, #60]	; 0x3c
        ab = fabs(filterA->value - regionB->location );
 8002cc2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8002cc6:	ec51 0b19 	vmov	r0, r1, d9
 8002cca:	f7fd fb05 	bl	80002d8 <__aeabi_dsub>
 8002cce:	9008      	str	r0, [sp, #32]
 8002cd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002cd4:	9309      	str	r3, [sp, #36]	; 0x24
        ba = fabs(filterB->value - regionA->location );
 8002cd6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f7fd fafb 	bl	80002d8 <__aeabi_dsub>
 8002ce2:	900a      	str	r0, [sp, #40]	; 0x28
 8002ce4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002ce8:	930b      	str	r3, [sp, #44]	; 0x2c
        LOG_RHO(RHO_DEBUG_PREDICT_2, "%s(%d,%d)> aa:%.3f ab:%.3f ba:%.3f bb:%.3f\n", prediction->name, m, n, aa, ab, ba, bb);
 8002cea:	2402      	movs	r4, #2
 8002cec:	e004      	b.n	8002cf8 <RhoUtility_PredictTrackingFilters+0x140>
 8002cee:	2009      	movs	r0, #9
 8002cf0:	f005 f952 	bl	8007f98 <putchar>
 8002cf4:	3401      	adds	r4, #1
 8002cf6:	b2e4      	uxtb	r4, r4
 8002cf8:	2c03      	cmp	r4, #3
 8002cfa:	d9f8      	bls.n	8002cee <RhoUtility_PredictTrackingFilters+0x136>
 8002cfc:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8002d00:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002d04:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8002d08:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002d0c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8002d10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002d14:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8002d18:	ed8d 7b00 	vstr	d7, [sp]
 8002d1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002d1e:	465a      	mov	r2, fp
 8002d20:	f8d9 1000 	ldr.w	r1, [r9]
 8002d24:	4871      	ldr	r0, [pc, #452]	; (8002eec <RhoUtility_PredictTrackingFilters+0x334>)
 8002d26:	f005 f91f 	bl	8007f68 <iprintf>
        if( aa * bb < ab * ba )
 8002d2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002d2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002d32:	f7fd fc89 	bl	8000648 <__aeabi_dmul>
 8002d36:	4604      	mov	r4, r0
 8002d38:	460d      	mov	r5, r1
 8002d3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002d3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002d42:	f7fd fc81 	bl	8000648 <__aeabi_dmul>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	f7fd feed 	bl	8000b2c <__aeabi_dcmplt>
 8002d52:	b158      	cbz	r0, 8002d6c <RhoUtility_PredictTrackingFilters+0x1b4>
            curr_difference = aa + bb;
 8002d54:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002d58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002d5c:	f7fd fabe 	bl	80002dc <__adddf3>
 8002d60:	4604      	mov	r4, r0
 8002d62:	460d      	mov	r5, r1
        bool swapped = false;
 8002d64:	f04f 0b00 	mov.w	fp, #0
        LOG_RHO(RHO_DEBUG_PREDICT, "∆: %.2f\n", ab + ba);
 8002d68:	2602      	movs	r6, #2
 8002d6a:	e00f      	b.n	8002d8c <RhoUtility_PredictTrackingFilters+0x1d4>
            curr_difference = ab + ba;
 8002d6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002d70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002d74:	f7fd fab2 	bl	80002dc <__adddf3>
 8002d78:	4604      	mov	r4, r0
 8002d7a:	460d      	mov	r5, r1
            swapped = true;
 8002d7c:	f04f 0b01 	mov.w	fp, #1
 8002d80:	e7f2      	b.n	8002d68 <RhoUtility_PredictTrackingFilters+0x1b0>
        LOG_RHO(RHO_DEBUG_PREDICT, "∆: %.2f\n", ab + ba);
 8002d82:	2009      	movs	r0, #9
 8002d84:	f005 f908 	bl	8007f98 <putchar>
 8002d88:	3601      	adds	r6, #1
 8002d8a:	b2f6      	uxtb	r6, r6
 8002d8c:	2e03      	cmp	r6, #3
 8002d8e:	d9f8      	bls.n	8002d82 <RhoUtility_PredictTrackingFilters+0x1ca>
 8002d90:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002d94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002d98:	f7fd faa0 	bl	80002dc <__adddf3>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4853      	ldr	r0, [pc, #332]	; (8002ef0 <RhoUtility_PredictTrackingFilters+0x338>)
 8002da2:	f005 f8e1 	bl	8007f68 <iprintf>
        total_difference += curr_difference;
 8002da6:	4622      	mov	r2, r4
 8002da8:	462b      	mov	r3, r5
 8002daa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002dae:	f7fd fa95 	bl	80002dc <__adddf3>
 8002db2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
        if( curr_difference < MAX_TRACKING_MATCH_DIFFERENCE )
 8002db6:	2200      	movs	r2, #0
 8002db8:	4b4e      	ldr	r3, [pc, #312]	; (8002ef4 <RhoUtility_PredictTrackingFilters+0x33c>)
 8002dba:	4620      	mov	r0, r4
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	f7fd feb5 	bl	8000b2c <__aeabi_dcmplt>
 8002dc2:	bb10      	cbnz	r0, 8002e0a <RhoUtility_PredictTrackingFilters+0x252>
        m+=2; n+=2;
 8002dc4:	f10a 0a02 	add.w	sl, sl, #2
 8002dc8:	fa1f fa8a 	uxth.w	sl, sl
 8002dcc:	1cbb      	adds	r3, r7, #2
 8002dce:	b29f      	uxth	r7, r3
    while( m < ( valid_tracks - 1 ) && n < ( prediction->num_regions - 1 ) )
 8002dd0:	46d3      	mov	fp, sl
 8002dd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	459a      	cmp	sl, r3
 8002dd8:	f280 8090 	bge.w	8002efc <RhoUtility_PredictTrackingFilters+0x344>
 8002ddc:	9718      	str	r7, [sp, #96]	; 0x60
 8002dde:	f899 3378 	ldrb.w	r3, [r9, #888]	; 0x378
 8002de2:	3b01      	subs	r3, #1
 8002de4:	429f      	cmp	r7, r3
 8002de6:	f280 8089 	bge.w	8002efc <RhoUtility_PredictTrackingFilters+0x344>
        for( ; v < MAX_REGIONS && !prediction->regions_order[v].valid; v++ );
 8002dea:	f1b8 0f03 	cmp.w	r8, #3
 8002dee:	f63f af05 	bhi.w	8002bfc <RhoUtility_PredictTrackingFilters+0x44>
 8002df2:	f508 73dc 	add.w	r3, r8, #440	; 0x1b8
 8002df6:	f819 3013 	ldrb.w	r3, [r9, r3, lsl #1]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f47f aefe 	bne.w	8002bfc <RhoUtility_PredictTrackingFilters+0x44>
 8002e00:	f108 0801 	add.w	r8, r8, #1
 8002e04:	fa1f f888 	uxth.w	r8, r8
 8002e08:	e7ef      	b.n	8002dea <RhoUtility_PredictTrackingFilters+0x232>
            if(swapped)
 8002e0a:	f1bb 0f00 	cmp.w	fp, #0
 8002e0e:	d023      	beq.n	8002e58 <RhoUtility_PredictTrackingFilters+0x2a0>
                Kalman.Update(filterA, regionB->location );
 8002e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e12:	eb09 1443 	add.w	r4, r9, r3, lsl #5
 8002e16:	f8b4 02f4 	ldrh.w	r0, [r4, #756]	; 0x2f4
 8002e1a:	f7fd fb9b 	bl	8000554 <__aeabi_ui2d>
 8002e1e:	ec41 0b10 	vmov	d0, r0, r1
 8002e22:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002e24:	f001 fc42 	bl	80046ac <UpdateKalman>
                Kalman.Update(filterB, regionA->location );
 8002e28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e2a:	eb09 1543 	add.w	r5, r9, r3, lsl #5
 8002e2e:	f8b5 02f4 	ldrh.w	r0, [r5, #756]	; 0x2f4
 8002e32:	f7fd fb8f 	bl	8000554 <__aeabi_ui2d>
 8002e36:	ec41 0b10 	vmov	d0, r0, r1
 8002e3a:	981c      	ldr	r0, [sp, #112]	; 0x70
 8002e3c:	f001 fc36 	bl	80046ac <UpdateKalman>
                regionA->tracking_id = fBi;
 8002e40:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002e42:	f885 3308 	strb.w	r3, [r5, #776]	; 0x308
                regionB->tracking_id = fAi;
 8002e46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002e48:	f884 3308 	strb.w	r3, [r4, #776]	; 0x308
            updated += 2;
 8002e4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002e4e:	3302      	adds	r3, #2
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	931e      	str	r3, [sp, #120]	; 0x78
            LOG_RHO(RHO_DEBUG_PREDICT, "Updating %d: %.4f\n", fAi, filterA->value);
 8002e54:	2402      	movs	r4, #2
 8002e56:	e023      	b.n	8002ea0 <RhoUtility_PredictTrackingFilters+0x2e8>
                Kalman.Update(filterA, regionA->location );
 8002e58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e5a:	eb09 1443 	add.w	r4, r9, r3, lsl #5
 8002e5e:	f8b4 02f4 	ldrh.w	r0, [r4, #756]	; 0x2f4
 8002e62:	f7fd fb77 	bl	8000554 <__aeabi_ui2d>
 8002e66:	ec41 0b10 	vmov	d0, r0, r1
 8002e6a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002e6c:	f001 fc1e 	bl	80046ac <UpdateKalman>
                Kalman.Update(filterB, regionB->location );
 8002e70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e72:	eb09 1543 	add.w	r5, r9, r3, lsl #5
 8002e76:	f8b5 02f4 	ldrh.w	r0, [r5, #756]	; 0x2f4
 8002e7a:	f7fd fb6b 	bl	8000554 <__aeabi_ui2d>
 8002e7e:	ec41 0b10 	vmov	d0, r0, r1
 8002e82:	981c      	ldr	r0, [sp, #112]	; 0x70
 8002e84:	f001 fc12 	bl	80046ac <UpdateKalman>
                regionA->tracking_id = fAi;
 8002e88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002e8a:	f884 3308 	strb.w	r3, [r4, #776]	; 0x308
                regionB->tracking_id = fBi;
 8002e8e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002e90:	f885 3308 	strb.w	r3, [r5, #776]	; 0x308
 8002e94:	e7da      	b.n	8002e4c <RhoUtility_PredictTrackingFilters+0x294>
            LOG_RHO(RHO_DEBUG_PREDICT, "Updating %d: %.4f\n", fAi, filterA->value);
 8002e96:	2009      	movs	r0, #9
 8002e98:	f005 f87e 	bl	8007f98 <putchar>
 8002e9c:	3401      	adds	r4, #1
 8002e9e:	b2e4      	uxtb	r4, r4
 8002ea0:	2c03      	cmp	r4, #3
 8002ea2:	d9f8      	bls.n	8002e96 <RhoUtility_PredictTrackingFilters+0x2de>
 8002ea4:	23b8      	movs	r3, #184	; 0xb8
 8002ea6:	9919      	ldr	r1, [sp, #100]	; 0x64
 8002ea8:	fb03 9301 	mla	r3, r3, r1, r9
 8002eac:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002eb0:	4811      	ldr	r0, [pc, #68]	; (8002ef8 <RhoUtility_PredictTrackingFilters+0x340>)
 8002eb2:	f005 f859 	bl	8007f68 <iprintf>
            LOG_RHO(RHO_DEBUG_PREDICT, "Updating %d: %.4f\n", fBi, filterB->value);
 8002eb6:	2402      	movs	r4, #2
 8002eb8:	e004      	b.n	8002ec4 <RhoUtility_PredictTrackingFilters+0x30c>
 8002eba:	2009      	movs	r0, #9
 8002ebc:	f005 f86c 	bl	8007f98 <putchar>
 8002ec0:	3401      	adds	r4, #1
 8002ec2:	b2e4      	uxtb	r4, r4
 8002ec4:	2c03      	cmp	r4, #3
 8002ec6:	d9f8      	bls.n	8002eba <RhoUtility_PredictTrackingFilters+0x302>
 8002ec8:	23b8      	movs	r3, #184	; 0xb8
 8002eca:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002ecc:	fb03 9301 	mla	r3, r3, r1, r9
 8002ed0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002ed4:	4808      	ldr	r0, [pc, #32]	; (8002ef8 <RhoUtility_PredictTrackingFilters+0x340>)
 8002ed6:	f005 f847 	bl	8007f68 <iprintf>
 8002eda:	e773      	b.n	8002dc4 <RhoUtility_PredictTrackingFilters+0x20c>
 8002edc:	f3af 8000 	nop.w
	...
 8002ee8:	0800b3e0 	.word	0x0800b3e0
 8002eec:	0800b410 	.word	0x0800b410
 8002ef0:	0800b444 	.word	0x0800b444
 8002ef4:	407f4000 	.word	0x407f4000
 8002ef8:	0800b458 	.word	0x0800b458
 8002efc:	465d      	mov	r5, fp
 8002efe:	46bb      	mov	fp, r7
 8002f00:	464f      	mov	r7, r9
    if( m < valid_tracks && n < prediction->num_regions )
 8002f02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002f04:	459a      	cmp	sl, r3
 8002f06:	f080 80c4 	bcs.w	8003092 <RhoUtility_PredictTrackingFilters+0x4da>
 8002f0a:	f899 3378 	ldrb.w	r3, [r9, #888]	; 0x378
 8002f0e:	455b      	cmp	r3, fp
 8002f10:	f240 80bf 	bls.w	8003092 <RhoUtility_PredictTrackingFilters+0x4da>
        kalman_filter_t *filter = &prediction->tracking_filters[prediction->tracking_filters_order[m]];
 8002f14:	197b      	adds	r3, r7, r5
 8002f16:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	9308      	str	r3, [sp, #32]
 8002f1e:	23b8      	movs	r3, #184	; 0xb8
 8002f20:	fb03 f302 	mul.w	r3, r3, r2
 8002f24:	3308      	adds	r3, #8
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	930a      	str	r3, [sp, #40]	; 0x28
        for( ; v < MAX_REGIONS && !prediction->regions_order[v].valid; v++ );
 8002f2a:	e003      	b.n	8002f34 <RhoUtility_PredictTrackingFilters+0x37c>
 8002f2c:	f108 0801 	add.w	r8, r8, #1
 8002f30:	fa1f f888 	uxth.w	r8, r8
 8002f34:	f1b8 0f03 	cmp.w	r8, #3
 8002f38:	d805      	bhi.n	8002f46 <RhoUtility_PredictTrackingFilters+0x38e>
 8002f3a:	f508 73dc 	add.w	r3, r8, #440	; 0x1b8
 8002f3e:	f817 3013 	ldrb.w	r3, [r7, r3, lsl #1]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f2      	beq.n	8002f2c <RhoUtility_PredictTrackingFilters+0x374>
        region_t *region = &prediction->regions[prediction->regions_order[v++].index];
 8002f46:	f508 73dc 	add.w	r3, r8, #440	; 0x1b8
 8002f4a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8002f4e:	785e      	ldrb	r6, [r3, #1]
        curr_difference = fabs(filter->value - region->location);
 8002f50:	23b8      	movs	r3, #184	; 0xb8
 8002f52:	9a08      	ldr	r2, [sp, #32]
 8002f54:	fb03 7302 	mla	r3, r3, r2, r7
 8002f58:	e9d3 8912 	ldrd	r8, r9, [r3, #72]	; 0x48
 8002f5c:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 8002f60:	f8b3 02f4 	ldrh.w	r0, [r3, #756]	; 0x2f4
 8002f64:	f7fd fb06 	bl	8000574 <__aeabi_i2d>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4640      	mov	r0, r8
 8002f6e:	4649      	mov	r1, r9
 8002f70:	f7fd f9b2 	bl	80002d8 <__aeabi_dsub>
 8002f74:	4680      	mov	r8, r0
 8002f76:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
        LOG_RHO(RHO_DEBUG_PREDICT_2, "%s(%d,%d)> curr_difference:%.3f\n", prediction->name, m, n, curr_difference);
 8002f7a:	2402      	movs	r4, #2
 8002f7c:	e004      	b.n	8002f88 <RhoUtility_PredictTrackingFilters+0x3d0>
 8002f7e:	2009      	movs	r0, #9
 8002f80:	f005 f80a 	bl	8007f98 <putchar>
 8002f84:	3401      	adds	r4, #1
 8002f86:	b2e4      	uxtb	r4, r4
 8002f88:	2c03      	cmp	r4, #3
 8002f8a:	d9f8      	bls.n	8002f7e <RhoUtility_PredictTrackingFilters+0x3c6>
 8002f8c:	e9cd 8900 	strd	r8, r9, [sp]
 8002f90:	465b      	mov	r3, fp
 8002f92:	462a      	mov	r2, r5
 8002f94:	6839      	ldr	r1, [r7, #0]
 8002f96:	486c      	ldr	r0, [pc, #432]	; (8003148 <RhoUtility_PredictTrackingFilters+0x590>)
 8002f98:	f004 ffe6 	bl	8007f68 <iprintf>
        LOG_RHO(RHO_DEBUG_PREDICT, "∆: %.2f\n", curr_difference);
 8002f9c:	2402      	movs	r4, #2
 8002f9e:	e004      	b.n	8002faa <RhoUtility_PredictTrackingFilters+0x3f2>
 8002fa0:	2009      	movs	r0, #9
 8002fa2:	f004 fff9 	bl	8007f98 <putchar>
 8002fa6:	3401      	adds	r4, #1
 8002fa8:	b2e4      	uxtb	r4, r4
 8002faa:	2c03      	cmp	r4, #3
 8002fac:	d9f8      	bls.n	8002fa0 <RhoUtility_PredictTrackingFilters+0x3e8>
 8002fae:	4642      	mov	r2, r8
 8002fb0:	464b      	mov	r3, r9
 8002fb2:	4866      	ldr	r0, [pc, #408]	; (800314c <RhoUtility_PredictTrackingFilters+0x594>)
 8002fb4:	f004 ffd8 	bl	8007f68 <iprintf>
        if( curr_difference < MAX_TRACKING_MATCH_DIFFERENCE )
 8002fb8:	2200      	movs	r2, #0
 8002fba:	4b65      	ldr	r3, [pc, #404]	; (8003150 <RhoUtility_PredictTrackingFilters+0x598>)
 8002fbc:	4640      	mov	r0, r8
 8002fbe:	4649      	mov	r1, r9
 8002fc0:	f7fd fdb4 	bl	8000b2c <__aeabi_dcmplt>
 8002fc4:	b388      	cbz	r0, 800302a <RhoUtility_PredictTrackingFilters+0x472>
            region->tracking_id = prediction->tracking_filters_order[m];
 8002fc6:	197b      	adds	r3, r7, r5
 8002fc8:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
 8002fcc:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 8002fd0:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
            LOG_RHO(RHO_DEBUG_PREDICT, "Updating %d: %.4f\n", region->tracking_id, filter->value);
 8002fd4:	2402      	movs	r4, #2
 8002fd6:	e004      	b.n	8002fe2 <RhoUtility_PredictTrackingFilters+0x42a>
 8002fd8:	2009      	movs	r0, #9
 8002fda:	f004 ffdd 	bl	8007f98 <putchar>
 8002fde:	3401      	adds	r4, #1
 8002fe0:	b2e4      	uxtb	r4, r4
 8002fe2:	2c03      	cmp	r4, #3
 8002fe4:	d9f8      	bls.n	8002fd8 <RhoUtility_PredictTrackingFilters+0x420>
 8002fe6:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 8002fea:	23b8      	movs	r3, #184	; 0xb8
 8002fec:	9a08      	ldr	r2, [sp, #32]
 8002fee:	fb03 7502 	mla	r5, r3, r2, r7
 8002ff2:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	; 0x48
 8002ff6:	f896 1308 	ldrb.w	r1, [r6, #776]	; 0x308
 8002ffa:	4856      	ldr	r0, [pc, #344]	; (8003154 <RhoUtility_PredictTrackingFilters+0x59c>)
 8002ffc:	f004 ffb4 	bl	8007f68 <iprintf>
            Kalman.Update(filter, region->location);
 8003000:	f8b6 02f4 	ldrh.w	r0, [r6, #756]	; 0x2f4
 8003004:	f7fd faa6 	bl	8000554 <__aeabi_ui2d>
 8003008:	ec41 0b10 	vmov	d0, r0, r1
 800300c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800300e:	f001 fb4d 	bl	80046ac <UpdateKalman>
            total_difference += curr_difference;
 8003012:	4642      	mov	r2, r8
 8003014:	464b      	mov	r3, r9
 8003016:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800301a:	f7fd f95f 	bl	80002dc <__adddf3>
 800301e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
            updated++;
 8003022:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003024:	3301      	adds	r3, #1
 8003026:	b29b      	uxth	r3, r3
 8003028:	931e      	str	r3, [sp, #120]	; 0x78
        m++; n++;
 800302a:	f10a 0301 	add.w	r3, sl, #1
 800302e:	fa1f fa83 	uxth.w	sl, r3
 8003032:	f10b 0301 	add.w	r3, fp, #1
 8003036:	fa1f fb83 	uxth.w	fp, r3
 800303a:	e02a      	b.n	8003092 <RhoUtility_PredictTrackingFilters+0x4da>
        LOG_RHO( RHO_DEBUG_PREDICT_2, "Activating filter at index %d[%d]\n", prediction->tracking_filters_order[n], n );
 800303c:	2009      	movs	r0, #9
 800303e:	f004 ffab 	bl	8007f98 <putchar>
 8003042:	3401      	adds	r4, #1
 8003044:	b2e4      	uxtb	r4, r4
 8003046:	2c03      	cmp	r4, #3
 8003048:	d9f8      	bls.n	800303c <RhoUtility_PredictTrackingFilters+0x484>
 800304a:	eb07 040b 	add.w	r4, r7, fp
 800304e:	465a      	mov	r2, fp
 8003050:	f894 12e8 	ldrb.w	r1, [r4, #744]	; 0x2e8
 8003054:	4840      	ldr	r0, [pc, #256]	; (8003158 <RhoUtility_PredictTrackingFilters+0x5a0>)
 8003056:	f004 ff87 	bl	8007f68 <iprintf>
        Kalman.Step( &prediction->tracking_filters[prediction->tracking_filters_order[n]], prediction->regions[prediction->regions_order[n].index].location, 0. );
 800305a:	f894 42e8 	ldrb.w	r4, [r4, #744]	; 0x2e8
 800305e:	f50b 73dc 	add.w	r3, fp, #440	; 0x1b8
 8003062:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8003066:	785b      	ldrb	r3, [r3, #1]
 8003068:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 800306c:	f8b3 02f4 	ldrh.w	r0, [r3, #756]	; 0x2f4
 8003070:	f7fd fa70 	bl	8000554 <__aeabi_ui2d>
 8003074:	23b8      	movs	r3, #184	; 0xb8
 8003076:	fb03 f304 	mul.w	r3, r3, r4
 800307a:	3308      	adds	r3, #8
 800307c:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8003138 <RhoUtility_PredictTrackingFilters+0x580>
 8003080:	ec41 0b10 	vmov	d0, r0, r1
 8003084:	18f8      	adds	r0, r7, r3
 8003086:	f001 fbd7 	bl	8004838 <StepKalman>
    for( ; n < prediction->num_regions && n < MAX_REGIONS; n++ )
 800308a:	f10b 0b01 	add.w	fp, fp, #1
 800308e:	fa1f fb8b 	uxth.w	fp, fp
 8003092:	f897 3378 	ldrb.w	r3, [r7, #888]	; 0x378
 8003096:	455b      	cmp	r3, fp
 8003098:	d913      	bls.n	80030c2 <RhoUtility_PredictTrackingFilters+0x50a>
 800309a:	f1bb 0f03 	cmp.w	fp, #3
 800309e:	d810      	bhi.n	80030c2 <RhoUtility_PredictTrackingFilters+0x50a>
        LOG_RHO( RHO_DEBUG_PREDICT_2, "Activating filter at index %d[%d]\n", prediction->tracking_filters_order[n], n );
 80030a0:	2402      	movs	r4, #2
 80030a2:	e7d0      	b.n	8003046 <RhoUtility_PredictTrackingFilters+0x48e>
        Kalman.Punish(&prediction->tracking_filters[prediction->tracking_filters_order[m]]);
 80030a4:	eb07 030a 	add.w	r3, r7, sl
 80030a8:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80030ac:	20b8      	movs	r0, #184	; 0xb8
 80030ae:	fb00 f003 	mul.w	r0, r0, r3
 80030b2:	3008      	adds	r0, #8
 80030b4:	4438      	add	r0, r7
 80030b6:	f001 fc07 	bl	80048c8 <PunishKalman>
    for( ; m < MAX_TRACKING_FILTERS; m++ )
 80030ba:	f10a 0a01 	add.w	sl, sl, #1
 80030be:	fa1f fa8a 	uxth.w	sl, sl
 80030c2:	f1ba 0f03 	cmp.w	sl, #3
 80030c6:	d9ed      	bls.n	80030a4 <RhoUtility_PredictTrackingFilters+0x4ec>
    if( updated )
 80030c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80030ca:	b1ab      	cbz	r3, 80030f8 <RhoUtility_PredictTrackingFilters+0x540>
        average_difference = total_difference / (floating_t)updated;
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fd fa41 	bl	8000554 <__aeabi_ui2d>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80030da:	f7fd fbdf 	bl	800089c <__aeabi_ddiv>
 80030de:	4604      	mov	r4, r0
 80030e0:	460d      	mov	r5, r1
        if( average_difference > MAX_TRACKING_MATCH_DIFFERENCE ) prediction->probabilities.confidence = 0.;
 80030e2:	2200      	movs	r2, #0
 80030e4:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <RhoUtility_PredictTrackingFilters+0x598>)
 80030e6:	f7fd fd3f 	bl	8000b68 <__aeabi_dcmpgt>
 80030ea:	b168      	cbz	r0, 8003108 <RhoUtility_PredictTrackingFilters+0x550>
 80030ec:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80030f0:	2000      	movs	r0, #0
 80030f2:	2100      	movs	r1, #0
 80030f4:	e9c3 0100 	strd	r0, r1, [r3]
    RhoUtility.Predict.SortFilters( prediction );
 80030f8:	4638      	mov	r0, r7
 80030fa:	f7ff fca9 	bl	8002a50 <RhoUtility_SortTrackingFilters>
}
 80030fe:	b021      	add	sp, #132	; 0x84
 8003100:	ecbd 9b02 	vpop	{d9}
 8003104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else prediction->probabilities.confidence = TRACKING_MATCH_TRUST * ( 1 - ( average_difference / MAX_TRACKING_MATCH_DIFFERENCE ) );
 8003108:	2200      	movs	r2, #0
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <RhoUtility_PredictTrackingFilters+0x598>)
 800310c:	4620      	mov	r0, r4
 800310e:	4629      	mov	r1, r5
 8003110:	f7fd fbc4 	bl	800089c <__aeabi_ddiv>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	2000      	movs	r0, #0
 800311a:	4910      	ldr	r1, [pc, #64]	; (800315c <RhoUtility_PredictTrackingFilters+0x5a4>)
 800311c:	f7fd f8dc 	bl	80002d8 <__aeabi_dsub>
 8003120:	a307      	add	r3, pc, #28	; (adr r3, 8003140 <RhoUtility_PredictTrackingFilters+0x588>)
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	f7fd fa8f 	bl	8000648 <__aeabi_dmul>
 800312a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800312e:	e9c3 0100 	strd	r0, r1, [r3]
 8003132:	e7e1      	b.n	80030f8 <RhoUtility_PredictTrackingFilters+0x540>
 8003134:	f3af 8000 	nop.w
	...
 8003140:	9999999a 	.word	0x9999999a
 8003144:	3fd99999 	.word	0x3fd99999
 8003148:	0800b474 	.word	0x0800b474
 800314c:	0800b444 	.word	0x0800b444
 8003150:	407f4000 	.word	0x407f4000
 8003154:	0800b458 	.word	0x0800b458
 8003158:	0800b49c 	.word	0x0800b49c
 800315c:	3ff00000 	.word	0x3ff00000

08003160 <RhoUtility_PredictTrackingProbabilities>:

void RhoUtility_PredictTrackingProbabilities( prediction_t * prediction )
{
 8003160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003164:	ed2d 8b02 	vpush	{d8}
 8003168:	b089      	sub	sp, #36	; 0x24
 800316a:	4605      	mov	r5, r0
    floating_t a = prediction->nu_regions+1, b = (floating_t)NUM_STATE_GROUPS+1, curr_CDF, prev_CDF = 0.,
 800316c:	2200      	movs	r2, #0
 800316e:	4b2a      	ldr	r3, [pc, #168]	; (8003218 <RhoUtility_PredictTrackingProbabilities+0xb8>)
 8003170:	e9d0 01e4 	ldrd	r0, r1, [r0, #912]	; 0x390
 8003174:	f7fd f8b2 	bl	80002dc <__adddf3>
 8003178:	ec41 0b18 	vmov	d8, r0, r1
    interval[4] = STATE_KUMARASWAMY_INTERVALS;
 800317c:	466c      	mov	r4, sp
 800317e:	4e27      	ldr	r6, [pc, #156]	; (800321c <RhoUtility_PredictTrackingProbabilities+0xbc>)
 8003180:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003184:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for( uint8_t i = 0; i < NUM_STATE_GROUPS; i++ )
 800318c:	2400      	movs	r4, #0
    floating_t a = prediction->nu_regions+1, b = (floating_t)NUM_STATE_GROUPS+1, curr_CDF, prev_CDF = 0.,
 800318e:	2600      	movs	r6, #0
 8003190:	2700      	movs	r7, #0
    for( uint8_t i = 0; i < NUM_STATE_GROUPS; i++ )
 8003192:	e02c      	b.n	80031ee <RhoUtility_PredictTrackingProbabilities+0x8e>
    {
        curr_CDF = KUMARASWAMY_CDF(interval[i],a,b);
 8003194:	ab08      	add	r3, sp, #32
 8003196:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800319a:	eeb0 1a48 	vmov.f32	s2, s16
 800319e:	eef0 1a68 	vmov.f32	s3, s17
 80031a2:	ed13 0b08 	vldr	d0, [r3, #-32]	; 0xffffffe0
 80031a6:	f006 ff6f 	bl	800a088 <pow>
 80031aa:	ec53 2b10 	vmov	r2, r3, d0
 80031ae:	2000      	movs	r0, #0
 80031b0:	4919      	ldr	r1, [pc, #100]	; (8003218 <RhoUtility_PredictTrackingProbabilities+0xb8>)
 80031b2:	f7fd f891 	bl	80002d8 <__aeabi_dsub>
 80031b6:	ec41 0b10 	vmov	d0, r0, r1
 80031ba:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8003210 <RhoUtility_PredictTrackingProbabilities+0xb0>
 80031be:	f006 ff63 	bl	800a088 <pow>
 80031c2:	ec53 2b10 	vmov	r2, r3, d0
 80031c6:	2000      	movs	r0, #0
 80031c8:	4913      	ldr	r1, [pc, #76]	; (8003218 <RhoUtility_PredictTrackingProbabilities+0xb8>)
 80031ca:	f7fd f885 	bl	80002d8 <__aeabi_dsub>
 80031ce:	4680      	mov	r8, r0
 80031d0:	4689      	mov	r9, r1
        prediction->probabilities.P[i] = curr_CDF - prev_CDF;
 80031d2:	4632      	mov	r2, r6
 80031d4:	463b      	mov	r3, r7
 80031d6:	f7fd f87f 	bl	80002d8 <__aeabi_dsub>
 80031da:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 80031de:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80031e2:	e9c3 0100 	strd	r0, r1, [r3]
    for( uint8_t i = 0; i < NUM_STATE_GROUPS; i++ )
 80031e6:	3401      	adds	r4, #1
 80031e8:	b2e4      	uxtb	r4, r4
        prev_CDF = curr_CDF;
 80031ea:	4646      	mov	r6, r8
 80031ec:	464f      	mov	r7, r9
    for( uint8_t i = 0; i < NUM_STATE_GROUPS; i++ )
 80031ee:	2c03      	cmp	r4, #3
 80031f0:	d9d0      	bls.n	8003194 <RhoUtility_PredictTrackingProbabilities+0x34>
    }
    
    prediction->primary   = prediction->tracking_filters[0].value;
 80031f2:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	; 0x48
 80031f6:	e9c5 23e6 	strd	r2, r3, [r5, #920]	; 0x398
    prediction->secondary = prediction->tracking_filters[1].value;
 80031fa:	e9d5 2340 	ldrd	r2, r3, [r5, #256]	; 0x100
 80031fe:	e9c5 23e8 	strd	r2, r3, [r5, #928]	; 0x3a0
}
 8003202:	b009      	add	sp, #36	; 0x24
 8003204:	ecbd 8b02 	vpop	{d8}
 8003208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800320c:	f3af 8000 	nop.w
 8003210:	00000000 	.word	0x00000000
 8003214:	40140000 	.word	0x40140000
 8003218:	3ff00000 	.word	0x3ff00000
 800321c:	0800b118 	.word	0x0800b118

08003220 <RhoUtility_ResetForPrediction>:

void RhoUtility_ResetForPrediction( prediction_predict_variables * _, prediction_pair_t * prediction, index_pair_t centroid )
{
 8003220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003224:	b083      	sub	sp, #12
 8003226:	4604      	mov	r4, r0
 8003228:	460d      	mov	r5, r1
 800322a:	4617      	mov	r7, r2
 800322c:	f3c2 460f 	ubfx	r6, r2, #16, #16
    _->primary   = (index_pair_t){ prediction->y.primary,   (uint16_t)prediction->x.primary   };
 8003230:	f501 63f7 	add.w	r3, r1, #1976	; 0x7b8
 8003234:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8003238:	e9d1 01e6 	ldrd	r0, r1, [r1, #920]	; 0x398
 800323c:	f7fd fcdc 	bl	8000bf8 <__aeabi_d2uiz>
 8003240:	fa1f f880 	uxth.w	r8, r0
 8003244:	4650      	mov	r0, sl
 8003246:	4659      	mov	r1, fp
 8003248:	f7fd fcd6 	bl	8000bf8 <__aeabi_d2uiz>
 800324c:	8020      	strh	r0, [r4, #0]
 800324e:	f8a4 8002 	strh.w	r8, [r4, #2]
    _->secondary = (index_pair_t){ prediction->y.secondary, (uint16_t)prediction->x.secondary };
 8003252:	f505 63f8 	add.w	r3, r5, #1984	; 0x7c0
 8003256:	e9d3 8900 	ldrd	r8, r9, [r3]
 800325a:	e9d5 01e8 	ldrd	r0, r1, [r5, #928]	; 0x3a0
 800325e:	f7fd fccb 	bl	8000bf8 <__aeabi_d2uiz>
 8003262:	b285      	uxth	r5, r0
 8003264:	4640      	mov	r0, r8
 8003266:	4649      	mov	r1, r9
 8003268:	f7fd fcc6 	bl	8000bf8 <__aeabi_d2uiz>
 800326c:	80a0      	strh	r0, [r4, #4]
 800326e:	80e5      	strh	r5, [r4, #6]
    _->centroid  = (index_pair_t){ centroid.x, centroid.y };
 8003270:	8127      	strh	r7, [r4, #8]
 8003272:	8166      	strh	r6, [r4, #10]
}
 8003274:	b003      	add	sp, #12
 8003276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800327c <RhoUtility_CombineAxisProbabilites>:
            SWAP(_->primary.x, _->secondary.x);
    }
}

void RhoUtility_CombineAxisProbabilites( prediction_pair_t * prediction )
{
 800327c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327e:	4605      	mov	r5, r0
    /* Combine X & Y probabilities with confidence factor */
    double x_confidence, y_confidence;
    for( uint8_t i = 0; i < NUM_STATE_GROUPS; i++ )
 8003280:	2400      	movs	r4, #0
 8003282:	e02b      	b.n	80032dc <RhoUtility_CombineAxisProbabilites+0x60>
    {
        x_confidence = prediction->x.probabilities.confidence * prediction->x.probabilities.P[i];
 8003284:	f505 6183 	add.w	r1, r5, #1048	; 0x418
 8003288:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 800328c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003298:	f7fd f9d6 	bl	8000648 <__aeabi_dmul>
 800329c:	4606      	mov	r6, r0
 800329e:	460f      	mov	r7, r1
        y_confidence = prediction->y.probabilities.confidence * prediction->y.probabilities.P[i];
 80032a0:	f605 0138 	addw	r1, r5, #2104	; 0x838
 80032a4:	f204 1303 	addw	r3, r4, #259	; 0x103
 80032a8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80032ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032b4:	f7fd f9c8 	bl	8000648 <__aeabi_dmul>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
        prediction->probabilities.P[i] = AVG2( x_confidence, y_confidence );
 80032bc:	4630      	mov	r0, r6
 80032be:	4639      	mov	r1, r7
 80032c0:	f7fd f80c 	bl	80002dc <__adddf3>
 80032c4:	2200      	movs	r2, #0
 80032c6:	4b10      	ldr	r3, [pc, #64]	; (8003308 <RhoUtility_CombineAxisProbabilites+0x8c>)
 80032c8:	f7fd f9be 	bl	8000648 <__aeabi_dmul>
 80032cc:	f504 7384 	add.w	r3, r4, #264	; 0x108
 80032d0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80032d4:	e9c3 0100 	strd	r0, r1, [r3]
    for( uint8_t i = 0; i < NUM_STATE_GROUPS; i++ )
 80032d8:	3401      	adds	r4, #1
 80032da:	b2e4      	uxtb	r4, r4
 80032dc:	2c03      	cmp	r4, #3
 80032de:	d9d1      	bls.n	8003284 <RhoUtility_CombineAxisProbabilites+0x8>
    }
    prediction->probabilities.confidence = AVG2( prediction->x.probabilities.confidence, prediction->y.probabilities.confidence );
 80032e0:	f505 6183 	add.w	r1, r5, #1048	; 0x418
 80032e4:	f605 0338 	addw	r3, r5, #2104	; 0x838
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032f0:	f7fc fff4 	bl	80002dc <__adddf3>
 80032f4:	2200      	movs	r2, #0
 80032f6:	4b04      	ldr	r3, [pc, #16]	; (8003308 <RhoUtility_CombineAxisProbabilites+0x8c>)
 80032f8:	f7fd f9a6 	bl	8000648 <__aeabi_dmul>
 80032fc:	f505 6506 	add.w	r5, r5, #2144	; 0x860
 8003300:	e9c5 0100 	strd	r0, r1, [r5]
}
 8003304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003306:	bf00      	nop
 8003308:	3fe00000 	.word	0x3fe00000

0800330c <RhoUtility_UpdateCorePredictionData>:

void RhoUtility_UpdateCorePredictionData( prediction_predict_variables * _, rho_core_t * core )
{
 800330c:	b570      	push	{r4, r5, r6, lr}
 800330e:	4604      	mov	r4, r0
 8003310:	460e      	mov	r6, r1
    _->centroid.x = (uint16_t)core->density_map_pair.y.centroid;
 8003312:	e9d1 016e 	ldrd	r0, r1, [r1, #440]	; 0x1b8
 8003316:	f7fd fc6f 	bl	8000bf8 <__aeabi_d2uiz>
 800331a:	8120      	strh	r0, [r4, #8]
    _->centroid.y = (uint16_t)core->density_map_pair.x.centroid;
 800331c:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8003320:	f7fd fc6a 	bl	8000bf8 <__aeabi_d2uiz>
 8003324:	8160      	strh	r0, [r4, #10]

    LOG_RHO(RHO_DEBUG_UPDATE_2, "Centroid.x>%d | Centroid.y>%d\n", _->centroid.x, _->centroid.y);
 8003326:	2502      	movs	r5, #2
 8003328:	e004      	b.n	8003334 <RhoUtility_UpdateCorePredictionData+0x28>
 800332a:	2009      	movs	r0, #9
 800332c:	f004 fe34 	bl	8007f98 <putchar>
 8003330:	3501      	adds	r5, #1
 8003332:	b2ed      	uxtb	r5, r5
 8003334:	2d03      	cmp	r5, #3
 8003336:	d9f8      	bls.n	800332a <RhoUtility_UpdateCorePredictionData+0x1e>
 8003338:	8962      	ldrh	r2, [r4, #10]
 800333a:	8921      	ldrh	r1, [r4, #8]
 800333c:	480f      	ldr	r0, [pc, #60]	; (800337c <RhoUtility_UpdateCorePredictionData+0x70>)
 800333e:	f004 fe13 	bl	8007f68 <iprintf>

    core->primary   = _->primary;
 8003342:	4623      	mov	r3, r4
 8003344:	f853 2b04 	ldr.w	r2, [r3], #4
 8003348:	f8c6 2346 	str.w	r2, [r6, #838]	; 0x346
    core->secondary = _->secondary;
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f8c6 334a 	str.w	r3, [r6, #842]	; 0x34a
    core->centroid  = _->centroid;
 8003352:	68a3      	ldr	r3, [r4, #8]
 8003354:	f8c6 334e 	str.w	r3, [r6, #846]	; 0x34e

    /* NOTE: density maps invert axes */
    core->density_map_pair.y.centroid         = _->centroid.x;
 8003358:	8920      	ldrh	r0, [r4, #8]
 800335a:	f7fd f8fb 	bl	8000554 <__aeabi_ui2d>
 800335e:	e9c6 016e 	strd	r0, r1, [r6, #440]	; 0x1b8
    core->density_map_pair.x.centroid         = _->centroid.y;
 8003362:	8960      	ldrh	r0, [r4, #10]
 8003364:	f7fd f8f6 	bl	8000554 <__aeabi_ui2d>
 8003368:	e9c6 0106 	strd	r0, r1, [r6, #24]
    core->prediction_pair.y.previous_centroid = _->centroid.x;
 800336c:	8923      	ldrh	r3, [r4, #8]
 800336e:	f8a6 3b96 	strh.w	r3, [r6, #2966]	; 0xb96
    core->prediction_pair.x.previous_centroid = _->centroid.y;
 8003372:	8963      	ldrh	r3, [r4, #10]
 8003374:	f8a6 3776 	strh.w	r3, [r6, #1910]	; 0x776
}
 8003378:	bd70      	pop	{r4, r5, r6, pc}
 800337a:	bf00      	nop
 800337c:	0800b4c8 	.word	0x0800b4c8

08003380 <RhoUtility_CalculateBackgroundTuneFactor>:
//        core->Thresh = WeightedAverage(core->PredictiveStateModelPair.proposed_threshold, core->Thresh, 0.5);
    core->thresh_byte = (byte_t)core->thresh;
}

void RhoUtility_CalculateBackgroundTuneFactor( rho_core_t * core )
{
 8003380:	b5d0      	push	{r4, r6, r7, lr}
 8003382:	4604      	mov	r4, r0
    floating_t background_tune_factor = 0.;
    if( core->quadrant_background_total > BACKGROUND_COVERAGE_MIN )
 8003384:	f8d0 038c 	ldr.w	r0, [r0, #908]	; 0x38c
 8003388:	2850      	cmp	r0, #80	; 0x50
 800338a:	d933      	bls.n	80033f4 <RhoUtility_CalculateBackgroundTuneFactor+0x74>
    {
        floating_t background_coverage_factor = 1 - ZDIV( BACKGROUND_COVERAGE_MIN, core->quadrant_background_total );
 800338c:	b148      	cbz	r0, 80033a2 <RhoUtility_CalculateBackgroundTuneFactor+0x22>
 800338e:	2350      	movs	r3, #80	; 0x50
 8003390:	fbb3 f0f0 	udiv	r0, r3, r0
 8003394:	f1c0 0001 	rsb	r0, r0, #1
 8003398:	f7fd f8dc 	bl	8000554 <__aeabi_ui2d>
 800339c:	4606      	mov	r6, r0
 800339e:	460f      	mov	r7, r1
 80033a0:	e002      	b.n	80033a8 <RhoUtility_CalculateBackgroundTuneFactor+0x28>
 80033a2:	a719      	add	r7, pc, #100	; (adr r7, 8003408 <RhoUtility_CalculateBackgroundTuneFactor+0x88>)
 80033a4:	e9d7 6700 	ldrd	r6, r7, [r7]
        background_tune_factor = -pow( BOUND(background_coverage_factor, -BACKGROUND_TUNE_MAX, BACKGROUND_TUNE_MAX), BACKGROUND_TUNE_EXPONENT);
 80033a8:	2200      	movs	r2, #0
 80033aa:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80033ae:	4630      	mov	r0, r6
 80033b0:	4639      	mov	r1, r7
 80033b2:	f7fd fbbb 	bl	8000b2c <__aeabi_dcmplt>
 80033b6:	b958      	cbnz	r0, 80033d0 <RhoUtility_CalculateBackgroundTuneFactor+0x50>
 80033b8:	2200      	movs	r2, #0
 80033ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033be:	4630      	mov	r0, r6
 80033c0:	4639      	mov	r1, r7
 80033c2:	f7fd fbd1 	bl	8000b68 <__aeabi_dcmpgt>
 80033c6:	b130      	cbz	r0, 80033d6 <RhoUtility_CalculateBackgroundTuneFactor+0x56>
 80033c8:	2600      	movs	r6, #0
 80033ca:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 80033ce:	e002      	b.n	80033d6 <RhoUtility_CalculateBackgroundTuneFactor+0x56>
 80033d0:	2600      	movs	r6, #0
 80033d2:	f04f 4740 	mov.w	r7, #3221225472	; 0xc0000000
 80033d6:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8003400 <RhoUtility_CalculateBackgroundTuneFactor+0x80>
 80033da:	ec47 6b10 	vmov	d0, r6, r7
 80033de:	f006 fe53 	bl	800a088 <pow>
 80033e2:	ec51 0b10 	vmov	r0, r1, d0
 80033e6:	ee10 2a10 	vmov	r2, s0
 80033ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    }
    core->tune.background = background_tune_factor;
 80033ee:	e9c4 23f6 	strd	r2, r3, [r4, #984]	; 0x3d8
}
 80033f2:	bdd0      	pop	{r4, r6, r7, pc}
    floating_t background_tune_factor = 0.;
 80033f4:	2200      	movs	r2, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	e7f9      	b.n	80033ee <RhoUtility_CalculateBackgroundTuneFactor+0x6e>
 80033fa:	bf00      	nop
 80033fc:	f3af 8000 	nop.w
 8003400:	00000000 	.word	0x00000000
 8003404:	40080000 	.word	0x40080000
 8003408:	80200000 	.word	0x80200000
 800340c:	41efffff 	.word	0x41efffff

08003410 <RhoUtility_CalculateTargetTuneFactor>:
    LOG_RHO(RHO_DEBUG_2, "Avg:%d | Nu:%.4f\n", (int)core->prediction_pair.average_density, core->prediction_pair.nu_regions);
    LOG_RHO(RHO_DEBUG_2, "Target cov.:%.4f | Target val: %.4f | Thresh val:%.4f\n", core->target_coverage_factor, core->target_filter.value, core->thresh_filter.value);
}

void RhoUtility_CalculateTargetTuneFactor( rho_core_t * core )
{
 8003410:	b5d0      	push	{r4, r6, r7, lr}
 8003412:	4604      	mov	r4, r0
    core->tune.target = TARGET_TUNE_FACTOR * ZDIV( core->thresh_filter.value, core->target_filter.value );
 8003414:	f600 5348 	addw	r3, r0, #3400	; 0xd48
 8003418:	e9d3 6700 	ldrd	r6, r7, [r3]
 800341c:	2200      	movs	r2, #0
 800341e:	2300      	movs	r3, #0
 8003420:	4630      	mov	r0, r6
 8003422:	4639      	mov	r1, r7
 8003424:	f7fd fb78 	bl	8000b18 <__aeabi_dcmpeq>
 8003428:	b158      	cbz	r0, 8003442 <RhoUtility_CalculateTargetTuneFactor+0x32>
 800342a:	f604 41b8 	addw	r1, r4, #3256	; 0xcb8
 800342e:	2200      	movs	r2, #0
 8003430:	2300      	movs	r3, #0
 8003432:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003436:	f7fd fb6f 	bl	8000b18 <__aeabi_dcmpeq>
 800343a:	b168      	cbz	r0, 8003458 <RhoUtility_CalculateTargetTuneFactor+0x48>
 800343c:	2000      	movs	r0, #0
 800343e:	2100      	movs	r1, #0
 8003440:	e007      	b.n	8003452 <RhoUtility_CalculateTargetTuneFactor+0x42>
 8003442:	f604 41b8 	addw	r1, r4, #3256	; 0xcb8
 8003446:	4632      	mov	r2, r6
 8003448:	463b      	mov	r3, r7
 800344a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800344e:	f7fd fa25 	bl	800089c <__aeabi_ddiv>
 8003452:	e9c4 01fa 	strd	r0, r1, [r4, #1000]	; 0x3e8
}
 8003456:	bdd0      	pop	{r4, r6, r7, pc}
    core->tune.target = TARGET_TUNE_FACTOR * ZDIV( core->thresh_filter.value, core->target_filter.value );
 8003458:	2000      	movs	r0, #0
 800345a:	4901      	ldr	r1, [pc, #4]	; (8003460 <RhoUtility_CalculateTargetTuneFactor+0x50>)
 800345c:	e7f9      	b.n	8003452 <RhoUtility_CalculateTargetTuneFactor+0x42>
 800345e:	bf00      	nop
 8003460:	40900000 	.word	0x40900000
 8003464:	00000000 	.word	0x00000000

08003468 <RhoUtility_CalculateTargetCoverageFactor>:
    
void RhoUtility_CalculateTargetCoverageFactor( rho_core_t * core )
{
 8003468:	b510      	push	{r4, lr}
 800346a:	4604      	mov	r4, r0
    if( core->prediction_pair.probabilities.confidence > MIN_STATE_CONFIDENCE )
 800346c:	f600 4158 	addw	r1, r0, #3160	; 0xc58
 8003470:	a312      	add	r3, pc, #72	; (adr r3, 80034bc <RhoUtility_CalculateTargetCoverageFactor+0x54>)
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	e9d1 0100 	ldrd	r0, r1, [r1]
 800347a:	f7fd fb75 	bl	8000b68 <__aeabi_dcmpgt>
 800347e:	b180      	cbz	r0, 80034a2 <RhoUtility_CalculateTargetCoverageFactor+0x3a>
        core->target_coverage_factor = core->prediction_pair.nu_regions * core->prediction_pair.average_density / (floating_t)TOTAL_RHO_PIXELS;
 8003480:	f504 6146 	add.w	r1, r4, #3168	; 0xc60
 8003484:	f504 6347 	add.w	r3, r4, #3184	; 0xc70
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003490:	f7fd f8da 	bl	8000648 <__aeabi_dmul>
 8003494:	2200      	movs	r2, #0
 8003496:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <RhoUtility_CalculateTargetCoverageFactor+0x50>)
 8003498:	f7fd fa00 	bl	800089c <__aeabi_ddiv>
 800349c:	e9c4 01ec 	strd	r0, r1, [r4, #944]	; 0x3b0
    {
        LOG_RHO(RHO_DEBUG_2, "Proposed: Num - %d | Density - %.2f | State - %s\n", core->predictive_state_model_pair.proposed_num, core->predictive_state_model_pair.proposed_avg_den, stateString(core->predictive_state_model_pair.current_state));
//        core->TargetCoverageFactor = core->PredictiveStateModelPair.proposed_num * core->PredictiveStateModelPair.proposed_avg_den / (floating_t)TOTAL_RHO_PIXELS;
    }
#endif
}
 80034a0:	bd10      	pop	{r4, pc}
        core->target_coverage_factor = core->total_coverage / (floating_t)TOTAL_RHO_PIXELS;
 80034a2:	f8d4 0390 	ldr.w	r0, [r4, #912]	; 0x390
 80034a6:	f7fd f855 	bl	8000554 <__aeabi_ui2d>
 80034aa:	2200      	movs	r2, #0
 80034ac:	4b02      	ldr	r3, [pc, #8]	; (80034b8 <RhoUtility_CalculateTargetCoverageFactor+0x50>)
 80034ae:	f7fd f9f5 	bl	800089c <__aeabi_ddiv>
 80034b2:	e9c4 01ec 	strd	r0, r1, [r4, #944]	; 0x3b0
}
 80034b6:	e7f3      	b.n	80034a0 <RhoUtility_CalculateTargetCoverageFactor+0x38>
 80034b8:	40af4000 	.word	0x40af4000
 80034bc:	47ae147b 	.word	0x47ae147b
 80034c0:	3f847ae1 	.word	0x3f847ae1
 80034c4:	00000000 	.word	0x00000000

080034c8 <RhoUtility_CalculateStateTuneFactor>:
{
 80034c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034cc:	b085      	sub	sp, #20
 80034ce:	4604      	mov	r4, r0
    core->target_coverage_factor = core->target_filter.value;
 80034d0:	f600 5348 	addw	r3, r0, #3400	; 0xd48
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	e9c0 23ec 	strd	r2, r3, [r0, #944]	; 0x3b0
    core->prediction_pair.average_density = MAX( core->prediction_pair.x.average_density, core->prediction_pair.y.average_density );
 80034dc:	f500 63f4 	add.w	r3, r0, #1952	; 0x7a0
 80034e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80034e4:	f500 633c 	add.w	r3, r0, #3008	; 0xbc0
 80034e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80034ec:	4632      	mov	r2, r6
 80034ee:	463b      	mov	r3, r7
 80034f0:	4640      	mov	r0, r8
 80034f2:	4649      	mov	r1, r9
 80034f4:	f7fd fb38 	bl	8000b68 <__aeabi_dcmpgt>
 80034f8:	b108      	cbz	r0, 80034fe <RhoUtility_CalculateStateTuneFactor+0x36>
 80034fa:	4646      	mov	r6, r8
 80034fc:	464f      	mov	r7, r9
 80034fe:	f504 6347 	add.w	r3, r4, #3184	; 0xc70
 8003502:	e9c3 6700 	strd	r6, r7, [r3]
    LOG_RHO(RHO_DEBUG_UPDATE, "Filtered|Total %%: %.7f|%.7f\n", core->filtered_percentage, core->total_percentage);
 8003506:	2502      	movs	r5, #2
 8003508:	e004      	b.n	8003514 <RhoUtility_CalculateStateTuneFactor+0x4c>
 800350a:	2009      	movs	r0, #9
 800350c:	f004 fd44 	bl	8007f98 <putchar>
 8003510:	3501      	adds	r5, #1
 8003512:	b2ed      	uxtb	r5, r5
 8003514:	2d03      	cmp	r5, #3
 8003516:	d9f8      	bls.n	800350a <RhoUtility_CalculateStateTuneFactor+0x42>
 8003518:	e9d4 23e8 	ldrd	r2, r3, [r4, #928]	; 0x3a0
 800351c:	e9cd 2300 	strd	r2, r3, [sp]
 8003520:	e9d4 23ea 	ldrd	r2, r3, [r4, #936]	; 0x3a8
 8003524:	483c      	ldr	r0, [pc, #240]	; (8003618 <RhoUtility_CalculateStateTuneFactor+0x150>)
 8003526:	f004 fd1f 	bl	8007f68 <iprintf>
    LOG_RHO(RHO_DEBUG_UPDATE, "Current state: %s\n", stateString(core->state_machine.state));
 800352a:	2502      	movs	r5, #2
 800352c:	e004      	b.n	8003538 <RhoUtility_CalculateStateTuneFactor+0x70>
 800352e:	2009      	movs	r0, #9
 8003530:	f004 fd32 	bl	8007f98 <putchar>
 8003534:	3501      	adds	r5, #1
 8003536:	b2ed      	uxtb	r5, r5
 8003538:	2d03      	cmp	r5, #3
 800353a:	d9f8      	bls.n	800352e <RhoUtility_CalculateStateTuneFactor+0x66>
 800353c:	f641 2578 	movw	r5, #6776	; 0x1a78
 8003540:	5763      	ldrsb	r3, [r4, r5]
            "UP",
            "TP",
            "OP",
            "CH"
        };
        return strings[(uint8_t)s+1];
 8003542:	b2db      	uxtb	r3, r3
 8003544:	3301      	adds	r3, #1
 8003546:	4a35      	ldr	r2, [pc, #212]	; (800361c <RhoUtility_CalculateStateTuneFactor+0x154>)
 8003548:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800354c:	4834      	ldr	r0, [pc, #208]	; (8003620 <RhoUtility_CalculateStateTuneFactor+0x158>)
 800354e:	f004 fd0b 	bl	8007f68 <iprintf>
    switch(core->state_machine.state)
 8003552:	5763      	ldrsb	r3, [r4, r5]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d006      	beq.n	8003566 <RhoUtility_CalculateStateTuneFactor+0x9e>
 8003558:	2b02      	cmp	r3, #2
 800355a:	d010      	beq.n	800357e <RhoUtility_CalculateStateTuneFactor+0xb6>
 800355c:	b17b      	cbz	r3, 800357e <RhoUtility_CalculateStateTuneFactor+0xb6>
            RhoUtility.Calculate.TargetCoverageFactor( core );
 800355e:	4620      	mov	r0, r4
 8003560:	f7ff ff82 	bl	8003468 <RhoUtility_CalculateTargetCoverageFactor>
            break;
 8003564:	e00e      	b.n	8003584 <RhoUtility_CalculateStateTuneFactor+0xbc>
            Kalman.Step( &core->target_filter, core->total_percentage, 0. );
 8003566:	f604 5508 	addw	r5, r4, #3336	; 0xd08
 800356a:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8003610 <RhoUtility_CalculateStateTuneFactor+0x148>
 800356e:	ed94 0be8 	vldr	d0, [r4, #928]	; 0x3a0
 8003572:	4628      	mov	r0, r5
 8003574:	f001 f960 	bl	8004838 <StepKalman>
            Kalman.Print( &core->target_filter );
 8003578:	4628      	mov	r0, r5
 800357a:	f001 f9d1 	bl	8004920 <PrintKalman>
            RhoUtility.Calculate.TargetCoverageFactor( core );
 800357e:	4620      	mov	r0, r4
 8003580:	f7ff ff72 	bl	8003468 <RhoUtility_CalculateTargetCoverageFactor>
    RhoPID.Update( &core->thresh_filter, core->target_coverage_factor, core->target_filter.value );
 8003584:	f604 5348 	addw	r3, r4, #3400	; 0xd48
 8003588:	ed93 1b00 	vldr	d1, [r3]
 800358c:	ed94 0bec 	vldr	d0, [r4, #944]	; 0x3b0
 8003590:	f604 4078 	addw	r0, r4, #3192	; 0xc78
 8003594:	f001 fa18 	bl	80049c8 <RhoPIDUpdate>
    core->tune.state = core->thresh_filter.value;
 8003598:	f604 43b8 	addw	r3, r4, #3256	; 0xcb8
 800359c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a0:	e9c4 23f8 	strd	r2, r3, [r4, #992]	; 0x3e0
    LOG_RHO(RHO_DEBUG_2, "Avg:%d | Nu:%.4f\n", (int)core->prediction_pair.average_density, core->prediction_pair.nu_regions);
 80035a4:	2502      	movs	r5, #2
 80035a6:	e004      	b.n	80035b2 <RhoUtility_CalculateStateTuneFactor+0xea>
 80035a8:	2009      	movs	r0, #9
 80035aa:	f004 fcf5 	bl	8007f98 <putchar>
 80035ae:	3501      	adds	r5, #1
 80035b0:	b2ed      	uxtb	r5, r5
 80035b2:	2d03      	cmp	r5, #3
 80035b4:	d9f8      	bls.n	80035a8 <RhoUtility_CalculateStateTuneFactor+0xe0>
 80035b6:	f504 6347 	add.w	r3, r4, #3184	; 0xc70
 80035ba:	f504 6246 	add.w	r2, r4, #3168	; 0xc60
 80035be:	e9d2 6700 	ldrd	r6, r7, [r2]
 80035c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035c6:	f7fd faef 	bl	8000ba8 <__aeabi_d2iz>
 80035ca:	4601      	mov	r1, r0
 80035cc:	4632      	mov	r2, r6
 80035ce:	463b      	mov	r3, r7
 80035d0:	4814      	ldr	r0, [pc, #80]	; (8003624 <RhoUtility_CalculateStateTuneFactor+0x15c>)
 80035d2:	f004 fcc9 	bl	8007f68 <iprintf>
    LOG_RHO(RHO_DEBUG_2, "Target cov.:%.4f | Target val: %.4f | Thresh val:%.4f\n", core->target_coverage_factor, core->target_filter.value, core->thresh_filter.value);
 80035d6:	2502      	movs	r5, #2
 80035d8:	e004      	b.n	80035e4 <RhoUtility_CalculateStateTuneFactor+0x11c>
 80035da:	2009      	movs	r0, #9
 80035dc:	f004 fcdc 	bl	8007f98 <putchar>
 80035e0:	3501      	adds	r5, #1
 80035e2:	b2ed      	uxtb	r5, r5
 80035e4:	2d03      	cmp	r5, #3
 80035e6:	d9f8      	bls.n	80035da <RhoUtility_CalculateStateTuneFactor+0x112>
 80035e8:	f604 43b8 	addw	r3, r4, #3256	; 0xcb8
 80035ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035f4:	f604 5348 	addw	r3, r4, #3400	; 0xd48
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	e9cd 2300 	strd	r2, r3, [sp]
 8003600:	e9d4 23ec 	ldrd	r2, r3, [r4, #944]	; 0x3b0
 8003604:	4808      	ldr	r0, [pc, #32]	; (8003628 <RhoUtility_CalculateStateTuneFactor+0x160>)
 8003606:	f004 fcaf 	bl	8007f68 <iprintf>
}
 800360a:	b005      	add	sp, #20
 800360c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...
 8003618:	0800b4f0 	.word	0x0800b4f0
 800361c:	0800b734 	.word	0x0800b734
 8003620:	0800b514 	.word	0x0800b514
 8003624:	0800b530 	.word	0x0800b530
 8003628:	0800b548 	.word	0x0800b548

0800362c <RhoUtility_CalculateTune>:
{
 800362c:	b5d0      	push	{r4, r6, r7, lr}
 800362e:	4604      	mov	r4, r0
    RhoUtility.Calculate.BackgroundTuneFactor( core );
 8003630:	f7ff fea6 	bl	8003380 <RhoUtility_CalculateBackgroundTuneFactor>
    RhoUtility.Calculate.StateTuneFactor( core );
 8003634:	4620      	mov	r0, r4
 8003636:	f7ff ff47 	bl	80034c8 <RhoUtility_CalculateStateTuneFactor>
    RhoUtility.Calculate.TargetTuneFactor( core );
 800363a:	4620      	mov	r0, r4
 800363c:	f7ff fee8 	bl	8003410 <RhoUtility_CalculateTargetTuneFactor>
    core->tune.proposed = BOUND( core->tune.background + core->tune.state + core->tune.target, -THRESH_STEP_MAX, THRESH_STEP_MAX);
 8003640:	e9d4 23f8 	ldrd	r2, r3, [r4, #992]	; 0x3e0
 8003644:	e9d4 01f6 	ldrd	r0, r1, [r4, #984]	; 0x3d8
 8003648:	f7fc fe48 	bl	80002dc <__adddf3>
 800364c:	e9d4 23fa 	ldrd	r2, r3, [r4, #1000]	; 0x3e8
 8003650:	f7fc fe44 	bl	80002dc <__adddf3>
 8003654:	4606      	mov	r6, r0
 8003656:	460f      	mov	r7, r1
 8003658:	2200      	movs	r2, #0
 800365a:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <RhoUtility_CalculateTune+0x98>)
 800365c:	f7fd fa66 	bl	8000b2c <__aeabi_dcmplt>
 8003660:	b948      	cbnz	r0, 8003676 <RhoUtility_CalculateTune+0x4a>
 8003662:	2200      	movs	r2, #0
 8003664:	4b18      	ldr	r3, [pc, #96]	; (80036c8 <RhoUtility_CalculateTune+0x9c>)
 8003666:	4630      	mov	r0, r6
 8003668:	4639      	mov	r1, r7
 800366a:	f7fd fa7d 	bl	8000b68 <__aeabi_dcmpgt>
 800366e:	b120      	cbz	r0, 800367a <RhoUtility_CalculateTune+0x4e>
 8003670:	2600      	movs	r6, #0
 8003672:	4f15      	ldr	r7, [pc, #84]	; (80036c8 <RhoUtility_CalculateTune+0x9c>)
 8003674:	e001      	b.n	800367a <RhoUtility_CalculateTune+0x4e>
 8003676:	2600      	movs	r6, #0
 8003678:	4f12      	ldr	r7, [pc, #72]	; (80036c4 <RhoUtility_CalculateTune+0x98>)
 800367a:	e9c4 67fc 	strd	r6, r7, [r4, #1008]	; 0x3f0
    core->thresh = BOUND(core->thresh + core->tune.proposed, THRESH_MIN, THRESH_MAX);
 800367e:	4632      	mov	r2, r6
 8003680:	463b      	mov	r3, r7
 8003682:	e9d4 01f4 	ldrd	r0, r1, [r4, #976]	; 0x3d0
 8003686:	f7fc fe29 	bl	80002dc <__adddf3>
 800368a:	4606      	mov	r6, r0
 800368c:	460f      	mov	r7, r1
 800368e:	2200      	movs	r2, #0
 8003690:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <RhoUtility_CalculateTune+0xa0>)
 8003692:	f7fd fa4b 	bl	8000b2c <__aeabi_dcmplt>
 8003696:	b948      	cbnz	r0, 80036ac <RhoUtility_CalculateTune+0x80>
 8003698:	2200      	movs	r2, #0
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <RhoUtility_CalculateTune+0xa4>)
 800369c:	4630      	mov	r0, r6
 800369e:	4639      	mov	r1, r7
 80036a0:	f7fd fa62 	bl	8000b68 <__aeabi_dcmpgt>
 80036a4:	b120      	cbz	r0, 80036b0 <RhoUtility_CalculateTune+0x84>
 80036a6:	2600      	movs	r6, #0
 80036a8:	4f09      	ldr	r7, [pc, #36]	; (80036d0 <RhoUtility_CalculateTune+0xa4>)
 80036aa:	e001      	b.n	80036b0 <RhoUtility_CalculateTune+0x84>
 80036ac:	2600      	movs	r6, #0
 80036ae:	4f07      	ldr	r7, [pc, #28]	; (80036cc <RhoUtility_CalculateTune+0xa0>)
 80036b0:	e9c4 67f4 	strd	r6, r7, [r4, #976]	; 0x3d0
    core->thresh_byte = (byte_t)core->thresh;
 80036b4:	4630      	mov	r0, r6
 80036b6:	4639      	mov	r1, r7
 80036b8:	f7fd fa9e 	bl	8000bf8 <__aeabi_d2uiz>
 80036bc:	f884 0357 	strb.w	r0, [r4, #855]	; 0x357
}
 80036c0:	bdd0      	pop	{r4, r6, r7, pc}
 80036c2:	bf00      	nop
 80036c4:	c0140000 	.word	0xc0140000
 80036c8:	40140000 	.word	0x40140000
 80036cc:	40240000 	.word	0x40240000
 80036d0:	406f4000 	.word	0x406f4000

080036d4 <RhoUtility_RedistributeDensities>:

/* Perform density redistribution from combining current frame and background */
void RhoUtility_RedistributeDensities( rho_core_t * core )
{
 80036d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036d8:	b097      	sub	sp, #92	; 0x5c
 80036da:	4681      	mov	r9, r0
    LOG_RHO(RHO_DEBUG_2, "Redistributing densities.\n");
 80036dc:	2502      	movs	r5, #2
 80036de:	e004      	b.n	80036ea <RhoUtility_RedistributeDensities+0x16>
 80036e0:	2009      	movs	r0, #9
 80036e2:	f004 fc59 	bl	8007f98 <putchar>
 80036e6:	3501      	adds	r5, #1
 80036e8:	b2ed      	uxtb	r5, r5
 80036ea:	2d03      	cmp	r5, #3
 80036ec:	d9f8      	bls.n	80036e0 <RhoUtility_RedistributeDensities+0xc>
 80036ee:	486c      	ldr	r0, [pc, #432]	; (80038a0 <RhoUtility_RedistributeDensities+0x1cc>)
 80036f0:	f004 fcd6 	bl	80080a0 <puts>
    redistribution_variables _ =
 80036f4:	224c      	movs	r2, #76	; 0x4c
 80036f6:	2100      	movs	r1, #0
 80036f8:	a803      	add	r0, sp, #12
 80036fa:	f003 ff19 	bl	8007530 <memset>
    {
        { core->secondary.x, abs(core->centroid.x-core->secondary.x), core->width - core->centroid.x  },
 80036fe:	f8b9 334a 	ldrh.w	r3, [r9, #842]	; 0x34a
    redistribution_variables _ =
 8003702:	f8ad 3000 	strh.w	r3, [sp]
        { core->secondary.x, abs(core->centroid.x-core->secondary.x), core->width - core->centroid.x  },
 8003706:	f8b9 534e 	ldrh.w	r5, [r9, #846]	; 0x34e
 800370a:	1aea      	subs	r2, r5, r3
 800370c:	2a00      	cmp	r2, #0
 800370e:	bfb8      	it	lt
 8003710:	4252      	neglt	r2, r2
    redistribution_variables _ =
 8003712:	f8ad 2002 	strh.w	r2, [sp, #2]
        { core->secondary.x, abs(core->centroid.x-core->secondary.x), core->width - core->centroid.x  },
 8003716:	f8b9 2340 	ldrh.w	r2, [r9, #832]	; 0x340
 800371a:	1b51      	subs	r1, r2, r5
    redistribution_variables _ =
 800371c:	f8ad 1004 	strh.w	r1, [sp, #4]
        { core->secondary.y, abs(core->centroid.y-core->secondary.y), core->height - core->centroid.y },
 8003720:	f8b9 134c 	ldrh.w	r1, [r9, #844]	; 0x34c
    redistribution_variables _ =
 8003724:	f8ad 1006 	strh.w	r1, [sp, #6]
        { core->secondary.y, abs(core->centroid.y-core->secondary.y), core->height - core->centroid.y },
 8003728:	f8b9 0350 	ldrh.w	r0, [r9, #848]	; 0x350
 800372c:	1a46      	subs	r6, r0, r1
 800372e:	2e00      	cmp	r6, #0
 8003730:	bfb8      	it	lt
 8003732:	4276      	neglt	r6, r6
    redistribution_variables _ =
 8003734:	f8ad 6008 	strh.w	r6, [sp, #8]
        { core->secondary.y, abs(core->centroid.y-core->secondary.y), core->height - core->centroid.y },
 8003738:	f8b9 6342 	ldrh.w	r6, [r9, #834]	; 0x342
 800373c:	1a36      	subs	r6, r6, r0
    redistribution_variables _ =
 800373e:	f8ad 600a 	strh.w	r6, [sp, #10]
        { 0 }, 0
    };
    if( core->centroid.x < core->secondary.x )
 8003742:	42ab      	cmp	r3, r5
 8003744:	d906      	bls.n	8003754 <RhoUtility_RedistributeDensities+0x80>
    {
        _.xl[0] = core->centroid.x;
 8003746:	f8ad 5000 	strh.w	r5, [sp]
        _.xl[2] = core->width - core->secondary.x;
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f8ad 3004 	strh.w	r3, [sp, #4]
        _.c |= 0x01;
 8003750:	2301      	movs	r3, #1
 8003752:	930e      	str	r3, [sp, #56]	; 0x38
    }
    if( core->centroid.y < core->secondary.y )
 8003754:	4281      	cmp	r1, r0
 8003756:	d926      	bls.n	80037a6 <RhoUtility_RedistributeDensities+0xd2>
    {
        _.yl[0] = core->centroid.y;
 8003758:	f8ad 0006 	strh.w	r0, [sp, #6]
        _.yl[2] = core->width - core->secondary.y;
 800375c:	1a52      	subs	r2, r2, r1
 800375e:	f8ad 200a 	strh.w	r2, [sp, #10]
        _.c |= 0x02;
 8003762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003764:	f043 0302 	orr.w	r3, r3, #2
 8003768:	930e      	str	r3, [sp, #56]	; 0x38
 800376a:	e01c      	b.n	80037a6 <RhoUtility_RedistributeDensities+0xd2>
    }
    while( _.y < 3 )
        for( _.x = 0; _.x < 3; )
            _.area[_.p++] = _.xl[_.x++] * _.yl[_.y++];
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	9214      	str	r2, [sp, #80]	; 0x50
 8003770:	aa16      	add	r2, sp, #88	; 0x58
 8003772:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003776:	f833 1c58 	ldrh.w	r1, [r3, #-88]
 800377a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	9215      	str	r2, [sp, #84]	; 0x54
 8003780:	aa16      	add	r2, sp, #88	; 0x58
 8003782:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003786:	f833 2c52 	ldrh.w	r2, [r3, #-82]
 800378a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800378c:	1c58      	adds	r0, r3, #1
 800378e:	9012      	str	r0, [sp, #72]	; 0x48
 8003790:	fb02 f201 	mul.w	r2, r2, r1
 8003794:	3302      	adds	r3, #2
 8003796:	a916      	add	r1, sp, #88	; 0x58
 8003798:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800379c:	f843 2c54 	str.w	r2, [r3, #-84]
        for( _.x = 0; _.x < 3; )
 80037a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d9e2      	bls.n	800376c <RhoUtility_RedistributeDensities+0x98>
    while( _.y < 3 )
 80037a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d85b      	bhi.n	8003864 <RhoUtility_RedistributeDensities+0x190>
        for( _.x = 0; _.x < 3; )
 80037ac:	2300      	movs	r3, #0
 80037ae:	9314      	str	r3, [sp, #80]	; 0x50
 80037b0:	e7f6      	b.n	80037a0 <RhoUtility_RedistributeDensities+0xcc>
        for( _.x = 0, _.b = 0; _.x < _.l; _.x++ )
        {
            _.a = _.area[rlookup.config[_.c].current[_.q][_.x]];
            for( _.y = 0; _.y < _.l_; _.y++ )
                _.b += _.area[rlookup.config[_.c].background[rlookup.config[_.c].factor[_.q][_.x]][_.y]];
            _.d += ZDIV( _.a, _.b ) * core->quadrant_background[_.q];
 80037b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80037b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037b6:	b91b      	cbnz	r3, 80037c0 <RhoUtility_RedistributeDensities+0xec>
 80037b8:	b127      	cbz	r7, 80037c4 <RhoUtility_RedistributeDensities+0xf0>
 80037ba:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80037be:	e001      	b.n	80037c4 <RhoUtility_RedistributeDensities+0xf0>
 80037c0:	fbb7 f7f3 	udiv	r7, r7, r3
 80037c4:	f105 03da 	add.w	r3, r5, #218	; 0xda
 80037c8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	fb07 2703 	mla	r7, r7, r3, r2
 80037d2:	970f      	str	r7, [sp, #60]	; 0x3c
        for( _.x = 0, _.b = 0; _.x < _.l; _.x++ )
 80037d4:	3001      	adds	r0, #1
 80037d6:	9014      	str	r0, [sp, #80]	; 0x50
 80037d8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80037da:	4584      	cmp	ip, r0
 80037dc:	d932      	bls.n	8003844 <RhoUtility_RedistributeDensities+0x170>
            _.a = _.area[rlookup.config[_.c].current[_.q][_.x]];
 80037de:	2334      	movs	r3, #52	; 0x34
 80037e0:	fb03 f301 	mul.w	r3, r3, r1
 80037e4:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 80037e8:	4b2e      	ldr	r3, [pc, #184]	; (80038a4 <RhoUtility_RedistributeDensities+0x1d0>)
 80037ea:	4413      	add	r3, r2
 80037ec:	4403      	add	r3, r0
 80037ee:	7c1b      	ldrb	r3, [r3, #16]
 80037f0:	3302      	adds	r3, #2
 80037f2:	aa16      	add	r2, sp, #88	; 0x58
 80037f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80037f8:	f853 7c54 	ldr.w	r7, [r3, #-84]
            for( _.y = 0; _.y < _.l_; _.y++ )
 80037fc:	2300      	movs	r3, #0
 80037fe:	9315      	str	r3, [sp, #84]	; 0x54
 8003800:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003802:	4296      	cmp	r6, r2
 8003804:	d9d5      	bls.n	80037b2 <RhoUtility_RedistributeDensities+0xde>
                _.b += _.area[rlookup.config[_.c].background[rlookup.config[_.c].factor[_.q][_.x]][_.y]];
 8003806:	4c27      	ldr	r4, [pc, #156]	; (80038a4 <RhoUtility_RedistributeDensities+0x1d0>)
 8003808:	2334      	movs	r3, #52	; 0x34
 800380a:	fb03 f301 	mul.w	r3, r3, r1
 800380e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8003812:	4423      	add	r3, r4
 8003814:	4403      	add	r3, r0
 8003816:	f893 8020 	ldrb.w	r8, [r3, #32]
 800381a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800381e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003822:	4443      	add	r3, r8
 8003824:	eb04 0e83 	add.w	lr, r4, r3, lsl #2
 8003828:	f81e 3002 	ldrb.w	r3, [lr, r2]
 800382c:	3302      	adds	r3, #2
 800382e:	ac16      	add	r4, sp, #88	; 0x58
 8003830:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003834:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003838:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800383a:	4423      	add	r3, r4
 800383c:	930d      	str	r3, [sp, #52]	; 0x34
            for( _.y = 0; _.y < _.l_; _.y++ )
 800383e:	3201      	adds	r2, #1
 8003840:	9215      	str	r2, [sp, #84]	; 0x54
 8003842:	e7dd      	b.n	8003800 <RhoUtility_RedistributeDensities+0x12c>
        }
#ifndef ALLOW_NEGATIVE_REDISTRIBUTION
        if( _.d > core->quadrant[_.q] ) core->quadrant_final[_.q] = 0;
 8003844:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003846:	f105 03d6 	add.w	r3, r5, #214	; 0xd6
 800384a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	d91b      	bls.n	800388c <RhoUtility_RedistributeDensities+0x1b8>
 8003854:	f105 03de 	add.w	r3, r5, #222	; 0xde
 8003858:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800385c:	2200      	movs	r2, #0
 800385e:	605a      	str	r2, [r3, #4]
    for( ; _.q < 4; _.q++ )
 8003860:	3501      	adds	r5, #1
 8003862:	9513      	str	r5, [sp, #76]	; 0x4c
 8003864:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8003866:	2d03      	cmp	r5, #3
 8003868:	d817      	bhi.n	800389a <RhoUtility_RedistributeDensities+0x1c6>
        _.l  = rlookup.config[_.c].length[    _.q];
 800386a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800386c:	4a0d      	ldr	r2, [pc, #52]	; (80038a4 <RhoUtility_RedistributeDensities+0x1d0>)
 800386e:	2334      	movs	r3, #52	; 0x34
 8003870:	fb03 2301 	mla	r3, r3, r1, r2
 8003874:	195a      	adds	r2, r3, r5
 8003876:	f892 c030 	ldrb.w	ip, [r2, #48]	; 0x30
        _.l_ = rlookup.config[_.c].length[3 - _.q];
 800387a:	f1c5 0203 	rsb	r2, r5, #3
 800387e:	4413      	add	r3, r2
 8003880:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
        for( _.x = 0, _.b = 0; _.x < _.l; _.x++ )
 8003884:	2300      	movs	r3, #0
 8003886:	9314      	str	r3, [sp, #80]	; 0x50
 8003888:	930d      	str	r3, [sp, #52]	; 0x34
 800388a:	e7a5      	b.n	80037d8 <RhoUtility_RedistributeDensities+0x104>
        else
#endif
            core->quadrant_final[_.q] = core->quadrant[_.q] - _.d;
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	f105 02de 	add.w	r2, r5, #222	; 0xde
 8003892:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8003896:	6053      	str	r3, [r2, #4]
 8003898:	e7e2      	b.n	8003860 <RhoUtility_RedistributeDensities+0x18c>
    }
}
 800389a:	b017      	add	sp, #92	; 0x5c
 800389c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038a0:	0800b588 	.word	0x0800b588
 80038a4:	0800b664 	.word	0x0800b664

080038a8 <RhoUtility_CorrectPredictionAmbiguity>:
{
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	4604      	mov	r4, r0
 80038ac:	460d      	mov	r5, r1
    if(   !( ( _->primary.x < _->centroid.x ) ^ ( _->secondary.x > _->centroid.x ) )
 80038ae:	8802      	ldrh	r2, [r0, #0]
 80038b0:	8903      	ldrh	r3, [r0, #8]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	bf34      	ite	cc
 80038b6:	2200      	movcc	r2, #0
 80038b8:	2201      	movcs	r2, #1
 80038ba:	8881      	ldrh	r1, [r0, #4]
 80038bc:	428b      	cmp	r3, r1
 80038be:	bf2c      	ite	cs
 80038c0:	2300      	movcs	r3, #0
 80038c2:	2301      	movcc	r3, #1
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d10c      	bne.n	80038e2 <RhoUtility_CorrectPredictionAmbiguity+0x3a>
       || !( ( _->primary.y < _->centroid.y ) ^ ( _->secondary.y > _->centroid.y ) ) )
 80038c8:	8842      	ldrh	r2, [r0, #2]
 80038ca:	8943      	ldrh	r3, [r0, #10]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	bf34      	ite	cc
 80038d0:	2200      	movcc	r2, #0
 80038d2:	2201      	movcs	r2, #1
 80038d4:	88c1      	ldrh	r1, [r0, #6]
 80038d6:	428b      	cmp	r3, r1
 80038d8:	bf2c      	ite	cs
 80038da:	2300      	movcs	r3, #0
 80038dc:	2301      	movcc	r3, #1
 80038de:	429a      	cmp	r2, r3
 80038e0:	d027      	beq.n	8003932 <RhoUtility_CorrectPredictionAmbiguity+0x8a>
        RhoUtility.Predict.RedistributeDensities( core );
 80038e2:	4628      	mov	r0, r5
 80038e4:	f7ff fef6 	bl	80036d4 <RhoUtility_RedistributeDensities>
        _->quadrant_check = (  core->quadrant_final[0] > core->quadrant_final[1] ) + ( core->quadrant_final[2] < core->quadrant_final[3] ) - 1;
 80038e8:	f8d5 137c 	ldr.w	r1, [r5, #892]	; 0x37c
 80038ec:	f8d5 2380 	ldr.w	r2, [r5, #896]	; 0x380
 80038f0:	f8d5 3384 	ldr.w	r3, [r5, #900]	; 0x384
 80038f4:	f8d5 0388 	ldr.w	r0, [r5, #904]	; 0x388
 80038f8:	4283      	cmp	r3, r0
 80038fa:	bf2c      	ite	cs
 80038fc:	2300      	movcs	r3, #0
 80038fe:	2301      	movcc	r3, #1
 8003900:	4291      	cmp	r1, r2
 8003902:	bf98      	it	ls
 8003904:	3b01      	subls	r3, #1
 8003906:	7323      	strb	r3, [r4, #12]
        if( ( _->primary.x > _->secondary.x ) ^ ( ( _->quadrant_check > 0 ) ^ ( _->primary.y < _->secondary.y ) ) )
 8003908:	8821      	ldrh	r1, [r4, #0]
 800390a:	88a0      	ldrh	r0, [r4, #4]
 800390c:	4281      	cmp	r1, r0
 800390e:	bf94      	ite	ls
 8003910:	2500      	movls	r5, #0
 8003912:	2501      	movhi	r5, #1
 8003914:	8862      	ldrh	r2, [r4, #2]
 8003916:	88e6      	ldrh	r6, [r4, #6]
 8003918:	42b2      	cmp	r2, r6
 800391a:	bf2c      	ite	cs
 800391c:	2200      	movcs	r2, #0
 800391e:	2201      	movcc	r2, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	bfd4      	ite	le
 8003924:	4613      	movle	r3, r2
 8003926:	f082 0301 	eorgt.w	r3, r2, #1
 800392a:	42ab      	cmp	r3, r5
 800392c:	d001      	beq.n	8003932 <RhoUtility_CorrectPredictionAmbiguity+0x8a>
            SWAP(_->primary.x, _->secondary.x);
 800392e:	8020      	strh	r0, [r4, #0]
 8003930:	80a1      	strh	r1, [r4, #4]
}
 8003932:	bd70      	pop	{r4, r5, r6, pc}

08003934 <RhoUtility_GenerateRegionScore>:

void RhoUtility_GenerateRegionScore( region_t * region, density_t total_density, byte_t peak )
{
 8003934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003938:	4604      	mov	r4, r0
 800393a:	4688      	mov	r8, r1
 800393c:	4615      	mov	r5, r2
    floating_t
        delta_d = ( (floating_t)region->density / (floating_t)total_density) - 0.5,
 800393e:	8840      	ldrh	r0, [r0, #2]
 8003940:	f7fc fe08 	bl	8000554 <__aeabi_ui2d>
 8003944:	4606      	mov	r6, r0
 8003946:	460f      	mov	r7, r1
 8003948:	4640      	mov	r0, r8
 800394a:	f7fc fe03 	bl	8000554 <__aeabi_ui2d>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4630      	mov	r0, r6
 8003954:	4639      	mov	r1, r7
 8003956:	f7fc ffa1 	bl	800089c <__aeabi_ddiv>
 800395a:	2200      	movs	r2, #0
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <RhoUtility_GenerateRegionScore+0x94>)
 800395e:	f7fc fcbb 	bl	80002d8 <__aeabi_dsub>
 8003962:	4680      	mov	r8, r0
 8003964:	4689      	mov	r9, r1
        delta_p = (floating_t)peak / (floating_t)region->maximum;
 8003966:	4628      	mov	r0, r5
 8003968:	f7fc fdf4 	bl	8000554 <__aeabi_ui2d>
 800396c:	4606      	mov	r6, r0
 800396e:	460f      	mov	r7, r1
 8003970:	8820      	ldrh	r0, [r4, #0]
 8003972:	f7fc fdef 	bl	8000554 <__aeabi_ui2d>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4630      	mov	r0, r6
 800397c:	4639      	mov	r1, r7
 800397e:	f7fc ff8d 	bl	800089c <__aeabi_ddiv>
 8003982:	4606      	mov	r6, r0
 8003984:	460f      	mov	r7, r1
    region->score = sqrt( REGION_SCORE_FACTOR * ( ( delta_d * delta_d ) + ( delta_p * delta_p ) ) );
 8003986:	4642      	mov	r2, r8
 8003988:	464b      	mov	r3, r9
 800398a:	4640      	mov	r0, r8
 800398c:	4649      	mov	r1, r9
 800398e:	f7fc fe5b 	bl	8000648 <__aeabi_dmul>
 8003992:	4680      	mov	r8, r0
 8003994:	4689      	mov	r9, r1
 8003996:	4632      	mov	r2, r6
 8003998:	463b      	mov	r3, r7
 800399a:	4630      	mov	r0, r6
 800399c:	4639      	mov	r1, r7
 800399e:	f7fc fe53 	bl	8000648 <__aeabi_dmul>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4640      	mov	r0, r8
 80039a8:	4649      	mov	r1, r9
 80039aa:	f7fc fc97 	bl	80002dc <__adddf3>
 80039ae:	2200      	movs	r2, #0
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <RhoUtility_GenerateRegionScore+0x94>)
 80039b2:	f7fc fe49 	bl	8000648 <__aeabi_dmul>
 80039b6:	ec41 0b10 	vmov	d0, r0, r1
 80039ba:	f006 fc13 	bl	800a1e4 <sqrt>
 80039be:	ed84 0b04 	vstr	d0, [r4, #16]
    if( region->score > 100. )
        printf("");
}
 80039c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039c6:	bf00      	nop
 80039c8:	3fe00000 	.word	0x3fe00000
 80039cc:	00000000 	.word	0x00000000

080039d0 <RhoUtility_ScoreRegions>:
    _->recalculate = false;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if(_->filtered_density > 0 )
 80039d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f040 80b5 	bne.w	8003b48 <RhoUtility_ScoreRegions+0x178>
 80039de:	4770      	bx	lr
                ? _->recalculation_chaos : _->chaos;
 80039e0:	e9d5 8916 	ldrd	r8, r9, [r5, #88]	; 0x58
            _->recalculation_chaos = ZDIV_LNUM;
 80039e4:	2200      	movs	r2, #0
 80039e6:	4b60      	ldr	r3, [pc, #384]	; (8003b68 <RhoUtility_ScoreRegions+0x198>)
 80039e8:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
            if( curr->score > chaos )
 80039ec:	f10b 0318 	add.w	r3, fp, #24
 80039f0:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 80039f4:	ed93 8b00 	vldr	d8, [r3]
 80039f8:	4642      	mov	r2, r8
 80039fa:	464b      	mov	r3, r9
 80039fc:	ec51 0b18 	vmov	r0, r1, d8
 8003a00:	f7fd f8b2 	bl	8000b68 <__aeabi_dcmpgt>
 8003a04:	bb80      	cbnz	r0, 8003a68 <RhoUtility_ScoreRegions+0x98>
        for(uint8_t i = 0; i < _->total_regions; i++)
 8003a06:	3401      	adds	r4, #1
 8003a08:	b2e4      	uxtb	r4, r4
 8003a0a:	b2a3      	uxth	r3, r4
 8003a0c:	8a2a      	ldrh	r2, [r5, #16]
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	f080 8089 	bcs.w	8003b26 <RhoUtility_ScoreRegions+0x156>
            if(!prediction->regions_order[i].valid) continue;
 8003a14:	46a2      	mov	sl, r4
 8003a16:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 8003a1a:	f816 3013 	ldrb.w	r3, [r6, r3, lsl #1]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f1      	beq.n	8003a06 <RhoUtility_ScoreRegions+0x36>
            uint8_t jo = prediction->regions_order[i].index;
 8003a22:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 8003a26:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8003a2a:	f893 b001 	ldrb.w	fp, [r3, #1]
            region_t * curr = &prediction->regions[jo];
 8003a2e:	ea4f 104b 	mov.w	r0, fp, lsl #5
 8003a32:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
            RhoUtility.Generate.RegionScore( curr, _->filtered_density, _->maximum );
 8003a36:	f895 2020 	ldrb.w	r2, [r5, #32]
 8003a3a:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8003a3c:	4430      	add	r0, r6
 8003a3e:	f7ff ff79 	bl	8003934 <RhoUtility_GenerateRegionScore>
            floating_t chaos = ( _->recalculation_chaos > 0 && _->recalculation_chaos < ZDIV_LNUM )
 8003a42:	e9d5 8918 	ldrd	r8, r9, [r5, #96]	; 0x60
                ? _->recalculation_chaos : _->chaos;
 8003a46:	2200      	movs	r2, #0
 8003a48:	2300      	movs	r3, #0
 8003a4a:	4640      	mov	r0, r8
 8003a4c:	4649      	mov	r1, r9
 8003a4e:	f7fd f88b 	bl	8000b68 <__aeabi_dcmpgt>
 8003a52:	2800      	cmp	r0, #0
 8003a54:	d0c4      	beq.n	80039e0 <RhoUtility_ScoreRegions+0x10>
            floating_t chaos = ( _->recalculation_chaos > 0 && _->recalculation_chaos < ZDIV_LNUM )
 8003a56:	2200      	movs	r2, #0
 8003a58:	4b43      	ldr	r3, [pc, #268]	; (8003b68 <RhoUtility_ScoreRegions+0x198>)
 8003a5a:	4640      	mov	r0, r8
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	f7fd f865 	bl	8000b2c <__aeabi_dcmplt>
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d1be      	bne.n	80039e4 <RhoUtility_ScoreRegions+0x14>
 8003a66:	e7bb      	b.n	80039e0 <RhoUtility_ScoreRegions+0x10>
                _->recalculation_chaos = MIN( curr->score, _->recalculation_chaos );
 8003a68:	2200      	movs	r2, #0
 8003a6a:	4b3f      	ldr	r3, [pc, #252]	; (8003b68 <RhoUtility_ScoreRegions+0x198>)
 8003a6c:	ec51 0b18 	vmov	r0, r1, d8
 8003a70:	f7fd f85c 	bl	8000b2c <__aeabi_dcmplt>
 8003a74:	b908      	cbnz	r0, 8003a7a <RhoUtility_ScoreRegions+0xaa>
 8003a76:	ed9f 8b3a 	vldr	d8, [pc, #232]	; 8003b60 <RhoUtility_ScoreRegions+0x190>
 8003a7a:	ed85 8b18 	vstr	d8, [r5, #96]	; 0x60
                LOG_RHO(RHO_DEBUG_DETECT_2, "%s:%d> R%d Score: %.4f | Chaos: %.4f\n", prediction->name, _->cycle, jo, curr->score, chaos);
 8003a7e:	2402      	movs	r4, #2
 8003a80:	e004      	b.n	8003a8c <RhoUtility_ScoreRegions+0xbc>
 8003a82:	2009      	movs	r0, #9
 8003a84:	f004 fa88 	bl	8007f98 <putchar>
 8003a88:	3401      	adds	r4, #1
 8003a8a:	b2e4      	uxtb	r4, r4
 8003a8c:	2c03      	cmp	r4, #3
 8003a8e:	d9f8      	bls.n	8003a82 <RhoUtility_ScoreRegions+0xb2>
 8003a90:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003a94:	f10b 0318 	add.w	r3, fp, #24
 8003a98:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	e9cd 2300 	strd	r2, r3, [sp]
 8003aa4:	465b      	mov	r3, fp
 8003aa6:	892a      	ldrh	r2, [r5, #8]
 8003aa8:	6831      	ldr	r1, [r6, #0]
 8003aaa:	4830      	ldr	r0, [pc, #192]	; (8003b6c <RhoUtility_ScoreRegions+0x19c>)
 8003aac:	f004 fa5c 	bl	8007f68 <iprintf>
                _->recalculate = true;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
                prediction->regions_order[i].valid = false;
 8003ab6:	f50a 7adc 	add.w	sl, sl, #440	; 0x1b8
 8003aba:	2300      	movs	r3, #0
 8003abc:	f806 301a 	strb.w	r3, [r6, sl, lsl #1]
                sdensity_t current_peak = (sdensity_t)density_map->map[curr->location];
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	eb06 124b 	add.w	r2, r6, fp, lsl #5
 8003ac6:	f8b2 22f4 	ldrh.w	r2, [r2, #756]	; 0x2f4
 8003aca:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
                _->filter_peak_2 = current_peak << 1;
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	0051      	lsls	r1, r2, #1
 8003ad2:	8369      	strh	r1, [r5, #26]
                if( current_peak < _->filter_peak)
 8003ad4:	8b29      	ldrh	r1, [r5, #24]
 8003ad6:	428b      	cmp	r3, r1
 8003ad8:	da2a      	bge.n	8003b30 <RhoUtility_ScoreRegions+0x160>
                    _->filter_band_lower += abs( (sdensity_t)_->filter_band_lower - current_peak) >> 1;
 8003ada:	8ba9      	ldrh	r1, [r5, #28]
 8003adc:	f9b5 201c 	ldrsh.w	r2, [r5, #28]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	bfb8      	it	lt
 8003ae6:	425b      	neglt	r3, r3
 8003ae8:	eb01 0363 	add.w	r3, r1, r3, asr #1
 8003aec:	83ab      	strh	r3, [r5, #28]
                uint16_t half_region_width = curr->width >> 1;
 8003aee:	eb06 124b 	add.w	r2, r6, fp, lsl #5
 8003af2:	f8b2 32f6 	ldrh.w	r3, [r2, #758]	; 0x2f6
 8003af6:	0858      	lsrs	r0, r3, #1
                if(curr->location - half_region_width > _->range[_->cycle_])
 8003af8:	f8b2 12f4 	ldrh.w	r1, [r2, #756]	; 0x2f4
 8003afc:	eba1 0353 	sub.w	r3, r1, r3, lsr #1
 8003b00:	896a      	ldrh	r2, [r5, #10]
 8003b02:	eb05 0442 	add.w	r4, r5, r2, lsl #1
 8003b06:	8864      	ldrh	r4, [r4, #2]
 8003b08:	42a3      	cmp	r3, r4
 8003b0a:	dd13      	ble.n	8003b34 <RhoUtility_ScoreRegions+0x164>
                    _->end = curr->location - half_region_width;
 8003b0c:	82eb      	strh	r3, [r5, #22]
                if(curr->location + half_region_width < _->range[_->cycle])
 8003b0e:	eb06 164b 	add.w	r6, r6, fp, lsl #5
 8003b12:	f8b6 22f4 	ldrh.w	r2, [r6, #756]	; 0x2f4
 8003b16:	1884      	adds	r4, r0, r2
 8003b18:	892b      	ldrh	r3, [r5, #8]
 8003b1a:	eb05 0143 	add.w	r1, r5, r3, lsl #1
 8003b1e:	8849      	ldrh	r1, [r1, #2]
 8003b20:	428c      	cmp	r4, r1
 8003b22:	da0c      	bge.n	8003b3e <RhoUtility_ScoreRegions+0x16e>
                    _->start = curr->location + half_region_width;
 8003b24:	82ac      	strh	r4, [r5, #20]
}
 8003b26:	b005      	add	sp, #20
 8003b28:	ecbd 8b02 	vpop	{d8}
 8003b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                else _->filter_band_lower = current_peak;
 8003b30:	83aa      	strh	r2, [r5, #28]
 8003b32:	e7dc      	b.n	8003aee <RhoUtility_ScoreRegions+0x11e>
                else _->end = _->range[_->cycle_];
 8003b34:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8003b38:	8853      	ldrh	r3, [r2, #2]
 8003b3a:	82eb      	strh	r3, [r5, #22]
 8003b3c:	e7e7      	b.n	8003b0e <RhoUtility_ScoreRegions+0x13e>
                else _->start = _->range[_->cycle];
 8003b3e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8003b42:	885b      	ldrh	r3, [r3, #2]
 8003b44:	82ab      	strh	r3, [r5, #20]
 8003b46:	e7ee      	b.n	8003b26 <RhoUtility_ScoreRegions+0x156>
{
 8003b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4c:	ed2d 8b02 	vpush	{d8}
 8003b50:	b085      	sub	sp, #20
 8003b52:	4605      	mov	r5, r0
 8003b54:	460f      	mov	r7, r1
 8003b56:	4616      	mov	r6, r2
        for(uint8_t i = 0; i < _->total_regions; i++)
 8003b58:	2400      	movs	r4, #0
 8003b5a:	e756      	b.n	8003a0a <RhoUtility_ScoreRegions+0x3a>
 8003b5c:	f3af 8000 	nop.w
 8003b60:	00000000 	.word	0x00000000
 8003b64:	40900000 	.word	0x40900000
 8003b68:	40900000 	.word	0x40900000
 8003b6c:	0800b5a8 	.word	0x0800b5a8

08003b70 <RhoUtility_PerformDetect>:
{
 8003b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b74:	ed2d 8b02 	vpush	{d8}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	460d      	mov	r5, r1
 8003b7e:	4616      	mov	r6, r2
    _->raw_density_moment = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	6383      	str	r3, [r0, #56]	; 0x38
    _->total_density = 0;
 8003b84:	62c3      	str	r3, [r0, #44]	; 0x2c
    _->filtered_density = 0;
 8003b86:	6303      	str	r3, [r0, #48]	; 0x30
    DUAL_FILTER_CYCLE(_->cycle)
 8003b88:	8103      	strh	r3, [r0, #8]
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	8143      	strh	r3, [r0, #10]
 8003b8e:	e141      	b.n	8003e14 <RhoUtility_PerformDetect+0x2a4>
        if(_->filter_peak > _->filter_variance)
 8003b90:	8b22      	ldrh	r2, [r4, #24]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	dd04      	ble.n	8003ba0 <RhoUtility_PerformDetect+0x30>
            _->filter_band_lower = _->filter_peak - _->filter_variance;
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	83a3      	strh	r3, [r4, #28]
        return true;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e156      	b.n	8003e4e <RhoUtility_PerformDetect+0x2de>
            _->filter_band_lower = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	83a3      	strh	r3, [r4, #28]
 8003ba4:	e7fa      	b.n	8003b9c <RhoUtility_PerformDetect+0x2c>
                LOG_RHO(RHO_DEBUG_DETECT_2, "%s:%d> Recalc: %d\n", prediction->name, _->cycle, _->recalculation_counter);
 8003ba6:	2009      	movs	r0, #9
 8003ba8:	f004 f9f6 	bl	8007f98 <putchar>
 8003bac:	3701      	adds	r7, #1
 8003bae:	b2ff      	uxtb	r7, r7
 8003bb0:	2f03      	cmp	r7, #3
 8003bb2:	d9f8      	bls.n	8003ba6 <RhoUtility_PerformDetect+0x36>
 8003bb4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003bb8:	8922      	ldrh	r2, [r4, #8]
 8003bba:	6831      	ldr	r1, [r6, #0]
 8003bbc:	48ad      	ldr	r0, [pc, #692]	; (8003e74 <RhoUtility_PerformDetect+0x304>)
 8003bbe:	f004 f9d3 	bl	8007f68 <iprintf>
    BOUNDED_CYCLE_DUAL(_->x, _->start, _->end, _->curr, density_map->map, _->background_curr, density_map->background)
 8003bc2:	8aa3      	ldrh	r3, [r4, #20]
 8003bc4:	8263      	strh	r3, [r4, #18]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	8463      	strh	r3, [r4, #34]	; 0x22
 8003bca:	83e3      	strh	r3, [r4, #30]
 8003bcc:	e023      	b.n	8003c16 <RhoUtility_PerformDetect+0xa6>
    if( _->curr >= _->background_curr )
 8003bce:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8003bd2:	8be2      	ldrh	r2, [r4, #30]
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	db0c      	blt.n	8003bf2 <RhoUtility_PerformDetect+0x82>
        _->total_density += _->curr;
 8003bd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003bda:	441a      	add	r2, r3
 8003bdc:	62e2      	str	r2, [r4, #44]	; 0x2c
        _->raw_density_moment += _->curr * (density_t)_->x;
 8003bde:	8a62      	ldrh	r2, [r4, #18]
 8003be0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003be2:	fb02 1203 	mla	r2, r2, r3, r1
 8003be6:	63a2      	str	r2, [r4, #56]	; 0x38
        if(_->curr > _->maximum)
 8003be8:	8c22      	ldrh	r2, [r4, #32]
 8003bea:	4293      	cmp	r3, r2
 8003bec:	dd20      	ble.n	8003c30 <RhoUtility_PerformDetect+0xc0>
            _->maximum = _->curr;
 8003bee:	8423      	strh	r3, [r4, #32]
 8003bf0:	e01e      	b.n	8003c30 <RhoUtility_PerformDetect+0xc0>
        _->curr = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	8463      	strh	r3, [r4, #34]	; 0x22
}
 8003bf6:	e01b      	b.n	8003c30 <RhoUtility_PerformDetect+0xc0>
        _->width++;
 8003bf8:	89e3      	ldrh	r3, [r4, #14]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	81e3      	strh	r3, [r4, #14]
    BOUNDED_CYCLE_DUAL(_->x, _->start, _->end, _->curr, density_map->map, _->background_curr, density_map->background)
 8003bfe:	8a63      	ldrh	r3, [r4, #18]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	8263      	strh	r3, [r4, #18]
 8003c06:	682a      	ldr	r2, [r5, #0]
 8003c08:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003c0c:	8462      	strh	r2, [r4, #34]	; 0x22
 8003c0e:	686a      	ldr	r2, [r5, #4]
 8003c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c14:	83e3      	strh	r3, [r4, #30]
 8003c16:	8a63      	ldrh	r3, [r4, #18]
 8003c18:	8ae2      	ldrh	r2, [r4, #22]
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	f240 80b9 	bls.w	8003d92 <RhoUtility_PerformDetect+0x222>
        density_map->bound[_->x] = 0;
 8003c20:	68aa      	ldr	r2, [r5, #8]
 8003c22:	2100      	movs	r1, #0
 8003c24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        if( !_->recalculate )
 8003c28:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ce      	beq.n	8003bce <RhoUtility_PerformDetect+0x5e>
    if( _->curr > _->filter_band_lower)
 8003c30:	f9b4 7022 	ldrsh.w	r7, [r4, #34]	; 0x22
 8003c34:	8ba3      	ldrh	r3, [r4, #28]
 8003c36:	429f      	cmp	r7, r3
 8003c38:	dd23      	ble.n	8003c82 <RhoUtility_PerformDetect+0x112>
        _->has_region = 1;
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        _->gap_counter = 0;
 8003c40:	2200      	movs	r2, #0
 8003c42:	81a2      	strh	r2, [r4, #12]
        _->curr -= _->filter_band_lower;
 8003c44:	1aff      	subs	r7, r7, r3
 8003c46:	b23f      	sxth	r7, r7
 8003c48:	8467      	strh	r7, [r4, #34]	; 0x22
        if( _->curr >= 0 )
 8003c4a:	4297      	cmp	r7, r2
 8003c4c:	dbd4      	blt.n	8003bf8 <RhoUtility_PerformDetect+0x88>
           RhoUtility.Generate.CumulativeMoments( (floating_t)_->curr, (floating_t)_->x, &_->average_curr, &_->average_moment, &_->average_counter );
 8003c4e:	f104 0a40 	add.w	sl, r4, #64	; 0x40
 8003c52:	f104 0950 	add.w	r9, r4, #80	; 0x50
 8003c56:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8003c5a:	8a60      	ldrh	r0, [r4, #18]
 8003c5c:	f7fc fc7a 	bl	8000554 <__aeabi_ui2d>
 8003c60:	ec41 0b18 	vmov	d8, r0, r1
 8003c64:	4638      	mov	r0, r7
 8003c66:	f7fc fc85 	bl	8000574 <__aeabi_i2d>
 8003c6a:	ec41 0b10 	vmov	d0, r0, r1
 8003c6e:	4652      	mov	r2, sl
 8003c70:	4649      	mov	r1, r9
 8003c72:	4640      	mov	r0, r8
 8003c74:	eeb0 1a48 	vmov.f32	s2, s16
 8003c78:	eef0 1a68 	vmov.f32	s3, s17
 8003c7c:	f000 ff5a 	bl	8004b34 <GenerateCumulativeMomentsStatistics>
 8003c80:	e7ba      	b.n	8003bf8 <RhoUtility_PerformDetect+0x88>
    else if( ++_->gap_counter > RHO_GAP_MAX && _->has_region && _->total_regions < MAX_REGIONS
 8003c82:	89a3      	ldrh	r3, [r4, #12]
 8003c84:	3301      	adds	r3, #1
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	81a3      	strh	r3, [r4, #12]
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d97a      	bls.n	8003d84 <RhoUtility_PerformDetect+0x214>
 8003c8e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d076      	beq.n	8003d84 <RhoUtility_PerformDetect+0x214>
 8003c96:	8a27      	ldrh	r7, [r4, #16]
 8003c98:	2f03      	cmp	r7, #3
 8003c9a:	d873      	bhi.n	8003d84 <RhoUtility_PerformDetect+0x214>
        _->current_density = (density_2d_t)_->average_curr;
 8003c9c:	e9d4 ab12 	ldrd	sl, fp, [r4, #72]	; 0x48
 8003ca0:	4650      	mov	r0, sl
 8003ca2:	4659      	mov	r1, fp
 8003ca4:	f7fc ffa8 	bl	8000bf8 <__aeabi_d2uiz>
 8003ca8:	4680      	mov	r8, r0
 8003caa:	62a0      	str	r0, [r4, #40]	; 0x28
        _->filtered_density += _->current_density;
 8003cac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003cae:	4403      	add	r3, r0
 8003cb0:	6323      	str	r3, [r4, #48]	; 0x30
        if( _->current_density > MIN_REGION_DENSITY)
 8003cb2:	2802      	cmp	r0, #2
 8003cb4:	d945      	bls.n	8003d42 <RhoUtility_PerformDetect+0x1d2>
            uint16_t loc = (uint16_t)ZDIV( _->average_moment, _->average_curr );
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2300      	movs	r3, #0
 8003cba:	4650      	mov	r0, sl
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	f7fc ff2b 	bl	8000b18 <__aeabi_dcmpeq>
 8003cc2:	b150      	cbz	r0, 8003cda <RhoUtility_PerformDetect+0x16a>
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 8003ccc:	f7fc ff24 	bl	8000b18 <__aeabi_dcmpeq>
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	d043      	beq.n	8003d5c <RhoUtility_PerformDetect+0x1ec>
 8003cd4:	f04f 0a00 	mov.w	sl, #0
 8003cd8:	e009      	b.n	8003cee <RhoUtility_PerformDetect+0x17e>
 8003cda:	4652      	mov	r2, sl
 8003cdc:	465b      	mov	r3, fp
 8003cde:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 8003ce2:	f7fc fddb 	bl	800089c <__aeabi_ddiv>
 8003ce6:	f7fc ff87 	bl	8000bf8 <__aeabi_d2uiz>
 8003cea:	fa1f fa80 	uxth.w	sl, r0
            uint8_t next_index = _->total_regions;
 8003cee:	b2ff      	uxtb	r7, r7
            if(_->recalculate)
 8003cf0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d140      	bne.n	8003d7a <RhoUtility_PerformDetect+0x20a>
            prediction->regions[prediction->regions_order[next_index].index] = (region_t){ density_map->map[loc], _->current_density, loc, _->width };
 8003cf8:	f507 7bdc 	add.w	fp, r7, #440	; 0x1b8
 8003cfc:	eb06 034b 	add.w	r3, r6, fp, lsl #1
 8003d00:	f893 9001 	ldrb.w	r9, [r3, #1]
 8003d04:	682b      	ldr	r3, [r5, #0]
 8003d06:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 8003d0a:	9302      	str	r3, [sp, #8]
 8003d0c:	89e2      	ldrh	r2, [r4, #14]
 8003d0e:	9203      	str	r2, [sp, #12]
 8003d10:	eb06 1949 	add.w	r9, r6, r9, lsl #5
 8003d14:	2220      	movs	r2, #32
 8003d16:	2100      	movs	r1, #0
 8003d18:	f509 703c 	add.w	r0, r9, #752	; 0x2f0
 8003d1c:	f003 fc08 	bl	8007530 <memset>
 8003d20:	9b02      	ldr	r3, [sp, #8]
 8003d22:	f8a9 32f0 	strh.w	r3, [r9, #752]	; 0x2f0
 8003d26:	f8a9 82f2 	strh.w	r8, [r9, #754]	; 0x2f2
 8003d2a:	f8a9 a2f4 	strh.w	sl, [r9, #756]	; 0x2f4
 8003d2e:	9a03      	ldr	r2, [sp, #12]
 8003d30:	f8a9 22f6 	strh.w	r2, [r9, #758]	; 0x2f6
            prediction->regions_order[next_index].valid = true;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f806 301b 	strb.w	r3, [r6, fp, lsl #1]
            if(next_index == _->total_regions)
 8003d3a:	b2bf      	uxth	r7, r7
 8003d3c:	8a23      	ldrh	r3, [r4, #16]
 8003d3e:	429f      	cmp	r7, r3
 8003d40:	d01d      	beq.n	8003d7e <RhoUtility_PerformDetect+0x20e>
        _->average_moment = 0.; _->average_curr = 0.; _->average_counter = 0.;
 8003d42:	2200      	movs	r2, #0
 8003d44:	2300      	movs	r3, #0
 8003d46:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8003d4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003d4e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
        _->has_region = 0; _->gap_counter = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8003d58:	81a3      	strh	r3, [r4, #12]
 8003d5a:	e750      	b.n	8003bfe <RhoUtility_PerformDetect+0x8e>
            uint16_t loc = (uint16_t)ZDIV( _->average_moment, _->average_curr );
 8003d5c:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8003d60:	e7c5      	b.n	8003cee <RhoUtility_PerformDetect+0x17e>
                for( uint8_t i = 0; i < next_index; i++ )
 8003d62:	3301      	adds	r3, #1
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	429f      	cmp	r7, r3
 8003d68:	d9c6      	bls.n	8003cf8 <RhoUtility_PerformDetect+0x188>
                    if( !prediction->regions_order[i].valid )
 8003d6a:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8003d6e:	f816 2012 	ldrb.w	r2, [r6, r2, lsl #1]
 8003d72:	2a00      	cmp	r2, #0
 8003d74:	d1f5      	bne.n	8003d62 <RhoUtility_PerformDetect+0x1f2>
                        next_index = i;
 8003d76:	461f      	mov	r7, r3
 8003d78:	e7be      	b.n	8003cf8 <RhoUtility_PerformDetect+0x188>
                for( uint8_t i = 0; i < next_index; i++ )
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e7f3      	b.n	8003d66 <RhoUtility_PerformDetect+0x1f6>
                _->total_regions++;
 8003d7e:	3301      	adds	r3, #1
 8003d80:	8223      	strh	r3, [r4, #16]
 8003d82:	e7de      	b.n	8003d42 <RhoUtility_PerformDetect+0x1d2>
    else if (!_->has_region )
 8003d84:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f47f af38 	bne.w	8003bfe <RhoUtility_PerformDetect+0x8e>
        _->width = 0;
 8003d8e:	81e3      	strh	r3, [r4, #14]
 8003d90:	e735      	b.n	8003bfe <RhoUtility_PerformDetect+0x8e>
                if( !_->recalculate ) RhoUtility.Detect.CalculateChaos( _, prediction );
 8003d92:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003d96:	b1ab      	cbz	r3, 8003dc4 <RhoUtility_PerformDetect+0x254>
                RhoUtility.Detect.ScoreRegions( _, density_map, prediction );
 8003d98:	4632      	mov	r2, r6
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	f7ff fe17 	bl	80039d0 <RhoUtility_ScoreRegions>
                if(_->recalculation_counter == 0) _->first_filtered_density = _->filtered_density;
 8003da2:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003da6:	b90b      	cbnz	r3, 8003dac <RhoUtility_PerformDetect+0x23c>
 8003da8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003daa:	6362      	str	r2, [r4, #52]	; 0x34
            } while( _->recalculate && ++_->recalculation_counter < MAX_RHO_RECALCULATION_LEVEL );
 8003dac:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003db0:	2a00      	cmp	r2, #0
 8003db2:	d04e      	beq.n	8003e52 <RhoUtility_PerformDetect+0x2e2>
 8003db4:	3301      	adds	r3, #1
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d848      	bhi.n	8003e52 <RhoUtility_PerformDetect+0x2e2>
                LOG_RHO(RHO_DEBUG_DETECT_2, "%s:%d> Recalc: %d\n", prediction->name, _->cycle, _->recalculation_counter);
 8003dc0:	2702      	movs	r7, #2
 8003dc2:	e6f5      	b.n	8003bb0 <RhoUtility_PerformDetect+0x40>
                if( !_->recalculate ) RhoUtility.Detect.CalculateChaos( _, prediction );
 8003dc4:	4631      	mov	r1, r6
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f7fe fc10 	bl	80025ec <RhoUtility_CalculateChaos>
 8003dcc:	e7e4      	b.n	8003d98 <RhoUtility_PerformDetect+0x228>
        LOG_RHO(RHO_DEBUG_DETECT_2, "%s:%d> Peak: %d\n", prediction->name, _->cycle, prediction->previous_peak[_->cycle]);
 8003dce:	2009      	movs	r0, #9
 8003dd0:	f004 f8e2 	bl	8007f98 <putchar>
 8003dd4:	3701      	adds	r7, #1
 8003dd6:	b2ff      	uxtb	r7, r7
 8003dd8:	2f03      	cmp	r7, #3
 8003dda:	d9f8      	bls.n	8003dce <RhoUtility_PerformDetect+0x25e>
 8003ddc:	8922      	ldrh	r2, [r4, #8]
 8003dde:	f502 73de 	add.w	r3, r2, #444	; 0x1bc
 8003de2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8003de6:	885b      	ldrh	r3, [r3, #2]
 8003de8:	6831      	ldr	r1, [r6, #0]
 8003dea:	4823      	ldr	r0, [pc, #140]	; (8003e78 <RhoUtility_PerformDetect+0x308>)
 8003dec:	f004 f8bc 	bl	8007f68 <iprintf>
        prediction->previous_density[_->cycle] = _->first_filtered_density;
 8003df0:	8923      	ldrh	r3, [r4, #8]
 8003df2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003df4:	33e0      	adds	r3, #224	; 0xe0
 8003df6:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
        density_map->max[_->cycle] = _->maximum;
 8003dfa:	8923      	ldrh	r3, [r4, #8]
 8003dfc:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
 8003e00:	3304      	adds	r3, #4
 8003e02:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8003e06:	809a      	strh	r2, [r3, #4]
    DUAL_FILTER_CYCLE(_->cycle)
 8003e08:	8923      	ldrh	r3, [r4, #8]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	8123      	strh	r3, [r4, #8]
 8003e0e:	8963      	ldrh	r3, [r4, #10]
 8003e10:	3301      	adds	r3, #1
 8003e12:	8163      	strh	r3, [r4, #10]
 8003e14:	8963      	ldrh	r3, [r4, #10]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d828      	bhi.n	8003e6c <RhoUtility_PerformDetect+0x2fc>
        _->maximum  = 0;
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	8422      	strh	r2, [r4, #32]
        _->start    = _->range[_->cycle];
 8003e1e:	8921      	ldrh	r1, [r4, #8]
 8003e20:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003e24:	8849      	ldrh	r1, [r1, #2]
 8003e26:	82a1      	strh	r1, [r4, #20]
        _->end      = _->range[_->cycle_];
 8003e28:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003e2c:	885b      	ldrh	r3, [r3, #2]
 8003e2e:	82e3      	strh	r3, [r4, #22]
        _->recalculation_counter = 0;
 8003e30:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        _->recalculate = false;
 8003e34:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        RhoUtility.Predict.PeakFilter( _, density_map, prediction );
 8003e38:	4632      	mov	r2, r6
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	f7fe fb83 	bl	8002548 <RhoUtility_PredictPeakFilter>
    if( _->filter_variance > 0 )// && (_->filter_peak == 0 || _->filter_peak > _->filter_variance ))
 8003e42:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f73f aea2 	bgt.w	8003b90 <RhoUtility_PerformDetect+0x20>
    return false;
 8003e4c:	2300      	movs	r3, #0
        if( RhoUtility.Detect.LowerBound( _ ) )
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1b6      	bne.n	8003dc0 <RhoUtility_PerformDetect+0x250>
        prediction->previous_peak[_->cycle] = BOUNDU( _->maximum, _->len );
 8003e52:	8c22      	ldrh	r2, [r4, #32]
 8003e54:	8821      	ldrh	r1, [r4, #0]
 8003e56:	8923      	ldrh	r3, [r4, #8]
 8003e58:	428a      	cmp	r2, r1
 8003e5a:	bf28      	it	cs
 8003e5c:	460a      	movcs	r2, r1
 8003e5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e62:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8003e66:	805a      	strh	r2, [r3, #2]
        LOG_RHO(RHO_DEBUG_DETECT_2, "%s:%d> Peak: %d\n", prediction->name, _->cycle, prediction->previous_peak[_->cycle]);
 8003e68:	2702      	movs	r7, #2
 8003e6a:	e7b5      	b.n	8003dd8 <RhoUtility_PerformDetect+0x268>
    for( uint8_t i = 0; i < _->total_regions; i++ )
 8003e6c:	2300      	movs	r3, #0
    uint8_t valid_regions = 0;
 8003e6e:	4619      	mov	r1, r3
 8003e70:	e006      	b.n	8003e80 <RhoUtility_PerformDetect+0x310>
 8003e72:	bf00      	nop
 8003e74:	0800b5d4 	.word	0x0800b5d4
 8003e78:	0800b5f0 	.word	0x0800b5f0
    for( uint8_t i = 0; i < _->total_regions; i++ )
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	8a20      	ldrh	r0, [r4, #16]
 8003e84:	4282      	cmp	r2, r0
 8003e86:	d208      	bcs.n	8003e9a <RhoUtility_PerformDetect+0x32a>
        if( prediction->regions_order[i].valid ) valid_regions++;
 8003e88:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8003e8c:	f816 2012 	ldrb.w	r2, [r6, r2, lsl #1]
 8003e90:	2a00      	cmp	r2, #0
 8003e92:	d0f3      	beq.n	8003e7c <RhoUtility_PerformDetect+0x30c>
 8003e94:	3101      	adds	r1, #1
 8003e96:	b2c9      	uxtb	r1, r1
 8003e98:	e7f0      	b.n	8003e7c <RhoUtility_PerformDetect+0x30c>
    _->total_regions = valid_regions;
 8003e9a:	8221      	strh	r1, [r4, #16]
    LOG_RHO(RHO_DEBUG_DETECT_2, "Regions: %d\n", _->total_regions);
 8003e9c:	2702      	movs	r7, #2
 8003e9e:	e004      	b.n	8003eaa <RhoUtility_PerformDetect+0x33a>
 8003ea0:	2009      	movs	r0, #9
 8003ea2:	f004 f879 	bl	8007f98 <putchar>
 8003ea6:	3701      	adds	r7, #1
 8003ea8:	b2ff      	uxtb	r7, r7
 8003eaa:	2f03      	cmp	r7, #3
 8003eac:	d9f8      	bls.n	8003ea0 <RhoUtility_PerformDetect+0x330>
 8003eae:	8a21      	ldrh	r1, [r4, #16]
 8003eb0:	481f      	ldr	r0, [pc, #124]	; (8003f30 <RhoUtility_PerformDetect+0x3c0>)
 8003eb2:	f004 f859 	bl	8007f68 <iprintf>
    RhoUtility.Detect.SortRegions( _, prediction );
 8003eb6:	4631      	mov	r1, r6
 8003eb8:	4620      	mov	r0, r4
 8003eba:	f7fe fbff 	bl	80026bc <RhoUtility_SortRegions>
    floating_t proposed_center = (floating_t)_->raw_density_moment/(floating_t)_->total_density;
 8003ebe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003ec0:	f7fc fb48 	bl	8000554 <__aeabi_ui2d>
 8003ec4:	4680      	mov	r8, r0
 8003ec6:	4689      	mov	r9, r1
 8003ec8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003eca:	f7fc fb43 	bl	8000554 <__aeabi_ui2d>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4640      	mov	r0, r8
 8003ed4:	4649      	mov	r1, r9
 8003ed6:	f7fc fce1 	bl	800089c <__aeabi_ddiv>
 8003eda:	4680      	mov	r8, r0
 8003edc:	4689      	mov	r9, r1
    density_map->centroid = BOUNDU(proposed_center, density_map->length);
 8003ede:	8a28      	ldrh	r0, [r5, #16]
 8003ee0:	f7fc fb48 	bl	8000574 <__aeabi_i2d>
 8003ee4:	4682      	mov	sl, r0
 8003ee6:	468b      	mov	fp, r1
 8003ee8:	4642      	mov	r2, r8
 8003eea:	464b      	mov	r3, r9
 8003eec:	f7fc fe1e 	bl	8000b2c <__aeabi_dcmplt>
 8003ef0:	b908      	cbnz	r0, 8003ef6 <RhoUtility_PerformDetect+0x386>
 8003ef2:	46c2      	mov	sl, r8
 8003ef4:	46cb      	mov	fp, r9
 8003ef6:	e9c5 ab06 	strd	sl, fp, [r5, #24]
    LOG_RHO(RHO_DEBUG_DETECT, "%s> Centroid: %d | Moment: %d | Density: %d\n", prediction->name, (int)density_map->centroid, _->raw_density_moment, _->total_density);
 8003efa:	2702      	movs	r7, #2
 8003efc:	e004      	b.n	8003f08 <RhoUtility_PerformDetect+0x398>
 8003efe:	2009      	movs	r0, #9
 8003f00:	f004 f84a 	bl	8007f98 <putchar>
 8003f04:	3701      	adds	r7, #1
 8003f06:	b2ff      	uxtb	r7, r7
 8003f08:	2f03      	cmp	r7, #3
 8003f0a:	d9f8      	bls.n	8003efe <RhoUtility_PerformDetect+0x38e>
 8003f0c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8003f0e:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 8003f12:	f7fc fe49 	bl	8000ba8 <__aeabi_d2iz>
 8003f16:	4602      	mov	r2, r0
 8003f18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	463b      	mov	r3, r7
 8003f1e:	6831      	ldr	r1, [r6, #0]
 8003f20:	4804      	ldr	r0, [pc, #16]	; (8003f34 <RhoUtility_PerformDetect+0x3c4>)
 8003f22:	f004 f821 	bl	8007f68 <iprintf>
}
 8003f26:	b005      	add	sp, #20
 8003f28:	ecbd 8b02 	vpop	{d8}
 8003f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f30:	0800b608 	.word	0x0800b608
 8003f34:	0800b61c 	.word	0x0800b61c

08003f38 <RhoUtility_GenerateCentroid>:

/* Generic centroid and mass calculator */
density_2d_t RhoUtility_GenerateCentroid( sdensity_t * density_map, uint16_t length, uint16_t * centroid, register density_t thresh )
{
 8003f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f3c:	ed2d 8b02 	vpush	{d8}
 8003f40:	b087      	sub	sp, #28
 8003f42:	4680      	mov	r8, r0
 8003f44:	460e      	mov	r6, r1
 8003f46:	4691      	mov	r9, r2
 8003f48:	461f      	mov	r7, r3
    floating_t avg = 0, average_moment = 0, count = 0, total = 0;
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f56:	e9cd 2300 	strd	r2, r3, [sp]
    for( uint16_t i = 0; i < length; i++ )
 8003f5a:	2400      	movs	r4, #0
 8003f5c:	e014      	b.n	8003f88 <RhoUtility_GenerateCentroid+0x50>
    {
        sdensity_t curr = density_map[i];
        if( curr > thresh )
        {
            /* Note only fraction m1/m0 is needed so either average method works*/
            RhoUtility.Generate.CumulativeMoments((floating_t)curr, (floating_t)i, &avg, &average_moment, &count);
 8003f5e:	4620      	mov	r0, r4
 8003f60:	f7fc faf8 	bl	8000554 <__aeabi_ui2d>
 8003f64:	ec41 0b18 	vmov	d8, r0, r1
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f7fc fb03 	bl	8000574 <__aeabi_i2d>
 8003f6e:	ec41 0b10 	vmov	d0, r0, r1
 8003f72:	466a      	mov	r2, sp
 8003f74:	a902      	add	r1, sp, #8
 8003f76:	a804      	add	r0, sp, #16
 8003f78:	eeb0 1a48 	vmov.f32	s2, s16
 8003f7c:	eef0 1a68 	vmov.f32	s3, s17
 8003f80:	f000 fdd8 	bl	8004b34 <GenerateCumulativeMomentsStatistics>
    for( uint16_t i = 0; i < length; i++ )
 8003f84:	3401      	adds	r4, #1
 8003f86:	b2a4      	uxth	r4, r4
 8003f88:	42b4      	cmp	r4, r6
 8003f8a:	d204      	bcs.n	8003f96 <RhoUtility_GenerateCentroid+0x5e>
        sdensity_t curr = density_map[i];
 8003f8c:	f938 5014 	ldrsh.w	r5, [r8, r4, lsl #1]
        if( curr > thresh )
 8003f90:	42bd      	cmp	r5, r7
 8003f92:	ddf7      	ble.n	8003f84 <RhoUtility_GenerateCentroid+0x4c>
 8003f94:	e7e3      	b.n	8003f5e <RhoUtility_GenerateCentroid+0x26>
            total += curr;
        }
    }
    *centroid = (uint16_t)(average_moment/avg);
 8003f96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f9e:	f7fc fc7d 	bl	800089c <__aeabi_ddiv>
 8003fa2:	f7fc fe29 	bl	8000bf8 <__aeabi_d2uiz>
 8003fa6:	f8a9 0000 	strh.w	r0, [r9]
    return(density_2d_t)count;
 8003faa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fae:	f7fc fe23 	bl	8000bf8 <__aeabi_d2uiz>
}
 8003fb2:	b007      	add	sp, #28
 8003fb4:	ecbd 8b02 	vpop	{d8}
 8003fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003fbc <RhoUtility_PrintPacket>:

void RhoUtility_PrintPacket( packet_t * packet, uint16_t length )
{
    LOG_PACKET(DEBUG_0,"Packet Size - %lubytes\n", sizeof(packet_t));
    for(int i = 0; i < sizeof(packet_t); )
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2a47      	cmp	r2, #71	; 0x47
 8003fc0:	d807      	bhi.n	8003fd2 <RhoUtility_PrintPacket+0x16>
    {
        LOG_PACKET(DEBUG_0,"(%02d)", i);
        for( int j = 0; j < length && i < sizeof(packet_t); j++, i++ )
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	4299      	cmp	r1, r3
 8003fc6:	ddfa      	ble.n	8003fbe <RhoUtility_PrintPacket+0x2>
 8003fc8:	2a47      	cmp	r2, #71	; 0x47
 8003fca:	d8f8      	bhi.n	8003fbe <RhoUtility_PrintPacket+0x2>
 8003fcc:	3301      	adds	r3, #1
 8003fce:	3201      	adds	r2, #1
 8003fd0:	e7f8      	b.n	8003fc4 <RhoUtility_PrintPacket+0x8>
            LOG_PACKET(DEBUG_0," 0x%02x", *(byte_t*)(&((byte_t*)&packet->header)[i]));
        LOG_PACKET(DEBUG_0,"\n");
    }
    LOG_PACKET(DEBUG_0,"{%02x}{%02x}{%02x}{%02x} %f\n",packet->data[0],packet->data[1],packet->data[2],packet->data[3],*(floating_t*)packet->data);
}
 8003fd2:	4770      	bx	lr

08003fd4 <RhoUtility_GenerateBackground>:
    
void RhoUtility_GenerateBackground( rho_core_t * core )
{
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	4604      	mov	r4, r0
    density_2d_t xt = RhoUtility.Generate.Centroid( core->density_map_pair.x.background, core->density_map_pair.x.length, &core->secondary.x, BACKGROUND_CENTROID_CALC_THRESH );
 8003fd8:	230a      	movs	r3, #10
 8003fda:	f200 324a 	addw	r2, r0, #842	; 0x34a
 8003fde:	8a01      	ldrh	r1, [r0, #16]
 8003fe0:	6840      	ldr	r0, [r0, #4]
 8003fe2:	f7ff ffa9 	bl	8003f38 <RhoUtility_GenerateCentroid>
 8003fe6:	4605      	mov	r5, r0
    density_2d_t yt = RhoUtility.Generate.Centroid( core->density_map_pair.y.background, core->density_map_pair.y.length, &core->secondary.y, BACKGROUND_CENTROID_CALC_THRESH );
 8003fe8:	230a      	movs	r3, #10
 8003fea:	f504 7253 	add.w	r2, r4, #844	; 0x34c
 8003fee:	f8b4 11b0 	ldrh.w	r1, [r4, #432]	; 0x1b0
 8003ff2:	f8d4 01a4 	ldr.w	r0, [r4, #420]	; 0x1a4
 8003ff6:	f7ff ff9f 	bl	8003f38 <RhoUtility_GenerateCentroid>
    core->quadrant_background_total = MAX(xt, yt);
 8003ffa:	4285      	cmp	r5, r0
 8003ffc:	bf38      	it	cc
 8003ffe:	4605      	movcc	r5, r0
 8004000:	f8c4 538c 	str.w	r5, [r4, #908]	; 0x38c
}
 8004004:	bd38      	pop	{r3, r4, r5, pc}
	...

08004008 <RhoUtility_GeneratePacket>:

void RhoUtility_GeneratePacket( rho_core_t * core )
{
 8004008:	b510      	push	{r4, lr}
 800400a:	b08e      	sub	sp, #56	; 0x38
    packet_value_lookup_t  packet_value_lookup  = PACKET_ADDRESS_INITIALIZER(core->prediction_pair);
 800400c:	f500 6306 	add.w	r3, r0, #2144	; 0x860
 8004010:	9307      	str	r3, [sp, #28]
 8004012:	f500 6388 	add.w	r3, r0, #1088	; 0x440
 8004016:	9308      	str	r3, [sp, #32]
 8004018:	f600 1318 	addw	r3, r0, #2328	; 0x918
 800401c:	9309      	str	r3, [sp, #36]	; 0x24
 800401e:	f500 639f 	add.w	r3, r0, #1272	; 0x4f8
 8004022:	930a      	str	r3, [sp, #40]	; 0x28
 8004024:	f500 6344 	add.w	r3, r0, #3136	; 0xc40
 8004028:	930b      	str	r3, [sp, #44]	; 0x2c
 800402a:	f600 4348 	addw	r3, r0, #3144	; 0xc48
 800402e:	930c      	str	r3, [sp, #48]	; 0x30
 8004030:	f500 6345 	add.w	r3, r0, #3152	; 0xc50
 8004034:	930d      	str	r3, [sp, #52]	; 0x34
    packet_offset_lookup_t packet_offset_lookup = PACKET_OFFSETS;
 8004036:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <RhoUtility_GeneratePacket+0xe0>)
 8004038:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800403c:	9306      	str	r3, [sp, #24]
    packet_generation_variables _ =
 800403e:	2300      	movs	r3, #0
 8004040:	9304      	str	r3, [sp, #16]
 8004042:	9305      	str	r3, [sp, #20]
    {
        &core->packet,
 8004044:	f500 54df 	add.w	r4, r0, #7136	; 0x1be0
 8004048:	3418      	adds	r4, #24
        (address_t)&core->packet.data,
 800404a:	f500 50e0 	add.w	r0, r0, #7168	; 0x1c00
 800404e:	3008      	adds	r0, #8
    packet_generation_variables _ =
 8004050:	9001      	str	r0, [sp, #4]
        (address_t)&packet_offset_lookup,
 8004052:	ab06      	add	r3, sp, #24
    packet_generation_variables _ =
 8004054:	9302      	str	r3, [sp, #8]
 8004056:	ab07      	add	r3, sp, #28
 8004058:	9303      	str	r3, [sp, #12]
        (address_t*)&packet_value_lookup,
        0
    };
    _.packet->header.timestamp = TIMESTAMP();
 800405a:	f7fd f95c 	bl	8001316 <STM_Timestamp>
 800405e:	6060      	str	r0, [r4, #4]
    while( _.i++ < NUM_PACKET_ELEMENTS )
 8004060:	e014      	b.n	800408c <RhoUtility_GeneratePacket+0x84>
    {
        if( _.packet->header.includes & 0x01 )
        {
            if(!_.t) _.l = (*(packing_template_t*)_.llPtr).a;
            else     _.l = (*(packing_template_t*)_.llPtr).b;
 8004062:	9b02      	ldr	r3, [sp, #8]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800406a:	f88d 3013 	strb.w	r3, [sp, #19]
 800406e:	e022      	b.n	80040b6 <RhoUtility_GeneratePacket+0xae>
            for( _.j = 0; _.j < _.l; _.j++)
                ((byte_t*)_.pdPtr)[_.j] = *(((byte_t*)* _.alPtr)+_.j);
            _.pdPtr += _.l;
 8004070:	9b01      	ldr	r3, [sp, #4]
 8004072:	441a      	add	r2, r3
 8004074:	9201      	str	r2, [sp, #4]
        }
        _.alPtr++;
 8004076:	9b03      	ldr	r3, [sp, #12]
 8004078:	3304      	adds	r3, #4
 800407a:	9303      	str	r3, [sp, #12]
        _.includes >>= 1;
        if((_.t=!_.t )) ++_.llPtr;
 800407c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8004080:	fab3 f383 	clz	r3, r3
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	f88d 3014 	strb.w	r3, [sp, #20]
 800408a:	bb33      	cbnz	r3, 80040da <RhoUtility_GeneratePacket+0xd2>
    while( _.i++ < NUM_PACKET_ELEMENTS )
 800408c:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	f88d 2011 	strb.w	r2, [sp, #17]
 8004096:	2b07      	cmp	r3, #7
 8004098:	d823      	bhi.n	80040e2 <RhoUtility_GeneratePacket+0xda>
        if( _.packet->header.includes & 0x01 )
 800409a:	7863      	ldrb	r3, [r4, #1]
 800409c:	f013 0f01 	tst.w	r3, #1
 80040a0:	d0e9      	beq.n	8004076 <RhoUtility_GeneratePacket+0x6e>
            if(!_.t) _.l = (*(packing_template_t*)_.llPtr).a;
 80040a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1db      	bne.n	8004062 <RhoUtility_GeneratePacket+0x5a>
 80040aa:	9b02      	ldr	r3, [sp, #8]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80040b2:	f88d 3013 	strb.w	r3, [sp, #19]
            for( _.j = 0; _.j < _.l; _.j++)
 80040b6:	2300      	movs	r3, #0
 80040b8:	f88d 3012 	strb.w	r3, [sp, #18]
 80040bc:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80040c0:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d2d3      	bcs.n	8004070 <RhoUtility_GeneratePacket+0x68>
                ((byte_t*)_.pdPtr)[_.j] = *(((byte_t*)* _.alPtr)+_.j);
 80040c8:	9a03      	ldr	r2, [sp, #12]
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	5c99      	ldrb	r1, [r3, r2]
 80040ce:	9a01      	ldr	r2, [sp, #4]
 80040d0:	5499      	strb	r1, [r3, r2]
            for( _.j = 0; _.j < _.l; _.j++)
 80040d2:	3301      	adds	r3, #1
 80040d4:	f88d 3012 	strb.w	r3, [sp, #18]
 80040d8:	e7f0      	b.n	80040bc <RhoUtility_GeneratePacket+0xb4>
        if((_.t=!_.t )) ++_.llPtr;
 80040da:	9b02      	ldr	r3, [sp, #8]
 80040dc:	3301      	adds	r3, #1
 80040de:	9302      	str	r3, [sp, #8]
 80040e0:	e7d4      	b.n	800408c <RhoUtility_GeneratePacket+0x84>
    }
}
 80040e2:	b00e      	add	sp, #56	; 0x38
 80040e4:	bd10      	pop	{r4, pc}
 80040e6:	bf00      	nop
 80040e8:	0800b078 	.word	0x0800b078

080040ec <WeightedAverage>:
        lambda = a_minus_d + radius;
        return y_offset * ZDIV( -2 * b, a - lambda );
    }
#endif
    static floating_t WeightedAverage( floating_t a, floating_t b, floating_t w )
   {
 80040ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040f0:	4616      	mov	r6, r2
 80040f2:	461f      	mov	r7, r3
 80040f4:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
       return ( ( a * w ) + ( b * ( 1 - w ) ) );
 80040f8:	4642      	mov	r2, r8
 80040fa:	464b      	mov	r3, r9
 80040fc:	f7fc faa4 	bl	8000648 <__aeabi_dmul>
 8004100:	4604      	mov	r4, r0
 8004102:	460d      	mov	r5, r1
 8004104:	4642      	mov	r2, r8
 8004106:	464b      	mov	r3, r9
 8004108:	2000      	movs	r0, #0
 800410a:	4907      	ldr	r1, [pc, #28]	; (8004128 <WeightedAverage+0x3c>)
 800410c:	f7fc f8e4 	bl	80002d8 <__aeabi_dsub>
 8004110:	4632      	mov	r2, r6
 8004112:	463b      	mov	r3, r7
 8004114:	f7fc fa98 	bl	8000648 <__aeabi_dmul>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4620      	mov	r0, r4
 800411e:	4629      	mov	r1, r5
 8004120:	f7fc f8dc 	bl	80002dc <__adddf3>
   }
 8004124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004128:	3ff00000 	.word	0x3ff00000

0800412c <FiniteStateMachine_ResetState>:
    for(uint8_t i = 0; i < NUM_STATES; i++ )
        FSMFunctions.Map.ResetState( P, i );
}

void FiniteStateMachine_ResetState( transition_matrix_t * P, uint8_t i )
{
 800412c:	b430      	push	{r4, r5}
    for( uint8_t j = 0; j < NUM_STATES; j++ )
 800412e:	2300      	movs	r3, #0
 8004130:	e009      	b.n	8004146 <FiniteStateMachine_ResetState+0x1a>
        (*P)[i][j] = 0.0;
 8004132:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 8004136:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800413a:	2400      	movs	r4, #0
 800413c:	2500      	movs	r5, #0
 800413e:	e9c2 4500 	strd	r4, r5, [r2]
    for( uint8_t j = 0; j < NUM_STATES; j++ )
 8004142:	3301      	adds	r3, #1
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b03      	cmp	r3, #3
 8004148:	d9f3      	bls.n	8004132 <FiniteStateMachine_ResetState+0x6>
    (*P)[i][i] = 1.0;
 800414a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800414e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8004152:	2200      	movs	r2, #0
 8004154:	4b02      	ldr	r3, [pc, #8]	; (8004160 <FiniteStateMachine_ResetState+0x34>)
 8004156:	e9c1 2300 	strd	r2, r3, [r1]
}
 800415a:	bc30      	pop	{r4, r5}
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	3ff00000 	.word	0x3ff00000

08004164 <FiniteStateMachine_InitializeMap>:
{
 8004164:	b538      	push	{r3, r4, r5, lr}
 8004166:	4605      	mov	r5, r0
    for(uint8_t i = 0; i < NUM_STATES; i++ )
 8004168:	2400      	movs	r4, #0
 800416a:	e005      	b.n	8004178 <FiniteStateMachine_InitializeMap+0x14>
        FSMFunctions.Map.ResetState( P, i );
 800416c:	4621      	mov	r1, r4
 800416e:	4628      	mov	r0, r5
 8004170:	f7ff ffdc 	bl	800412c <FiniteStateMachine_ResetState>
    for(uint8_t i = 0; i < NUM_STATES; i++ )
 8004174:	3401      	adds	r4, #1
 8004176:	b2e4      	uxtb	r4, r4
 8004178:	2c03      	cmp	r4, #3
 800417a:	d9f7      	bls.n	800416c <FiniteStateMachine_InitializeMap+0x8>
}
 800417c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004180 <FiniteStateMachine_NormalizeState>:
    for( uint8_t i = 0; i < NUM_STATES; i++ )
        FSMFunctions.Map.NormalizeState( P, i );
}

uint8_t FiniteStateMachine_NormalizeState( transition_matrix_t * P, uint8_t i )
{
 8004180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004184:	ed2d 8b02 	vpush	{d8}
 8004188:	b083      	sub	sp, #12
 800418a:	4680      	mov	r8, r0
 800418c:	460d      	mov	r5, r1
    uint8_t max_index = i, j;
    double total = 0, invtotal, curr, max = 0;
 800418e:	2600      	movs	r6, #0
 8004190:	2700      	movs	r7, #0
    for( j = 0; j < NUM_STATES; j++ )
 8004192:	2400      	movs	r4, #0
 8004194:	e001      	b.n	800419a <FiniteStateMachine_NormalizeState+0x1a>
 8004196:	3401      	adds	r4, #1
 8004198:	b2e4      	uxtb	r4, r4
 800419a:	2c03      	cmp	r4, #3
 800419c:	d816      	bhi.n	80041cc <FiniteStateMachine_NormalizeState+0x4c>
    {
        curr = (*P)[i][j];
 800419e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80041a2:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80041a6:	e9d3 ab00 	ldrd	sl, fp, [r3]
        if( curr >= 0. )
 80041aa:	2200      	movs	r2, #0
 80041ac:	2300      	movs	r3, #0
 80041ae:	4650      	mov	r0, sl
 80041b0:	4659      	mov	r1, fp
 80041b2:	f7fc fccf 	bl	8000b54 <__aeabi_dcmpge>
 80041b6:	2800      	cmp	r0, #0
 80041b8:	d0ed      	beq.n	8004196 <FiniteStateMachine_NormalizeState+0x16>
            total += curr;
 80041ba:	4652      	mov	r2, sl
 80041bc:	465b      	mov	r3, fp
 80041be:	4630      	mov	r0, r6
 80041c0:	4639      	mov	r1, r7
 80041c2:	f7fc f88b 	bl	80002dc <__adddf3>
 80041c6:	4606      	mov	r6, r0
 80041c8:	460f      	mov	r7, r1
 80041ca:	e7e4      	b.n	8004196 <FiniteStateMachine_NormalizeState+0x16>
    }
    if(total)
 80041cc:	2200      	movs	r2, #0
 80041ce:	2300      	movs	r3, #0
 80041d0:	4630      	mov	r0, r6
 80041d2:	4639      	mov	r1, r7
 80041d4:	f7fc fca0 	bl	8000b18 <__aeabi_dcmpeq>
 80041d8:	bb50      	cbnz	r0, 8004230 <FiniteStateMachine_NormalizeState+0xb0>
    {
        invtotal = ZDIV( 1., total );
 80041da:	4632      	mov	r2, r6
 80041dc:	463b      	mov	r3, r7
 80041de:	2000      	movs	r0, #0
 80041e0:	491b      	ldr	r1, [pc, #108]	; (8004250 <FiniteStateMachine_NormalizeState+0xd0>)
 80041e2:	f7fc fb5b 	bl	800089c <__aeabi_ddiv>
 80041e6:	4682      	mov	sl, r0
 80041e8:	468b      	mov	fp, r1
    uint8_t max_index = i, j;
 80041ea:	9501      	str	r5, [sp, #4]
    double total = 0, invtotal, curr, max = 0;
 80041ec:	2600      	movs	r6, #0
 80041ee:	2700      	movs	r7, #0
        for( j = 0; j < NUM_STATES; j++ )
 80041f0:	2400      	movs	r4, #0
 80041f2:	e001      	b.n	80041f8 <FiniteStateMachine_NormalizeState+0x78>
 80041f4:	3401      	adds	r4, #1
 80041f6:	b2e4      	uxtb	r4, r4
 80041f8:	2c03      	cmp	r4, #3
 80041fa:	d822      	bhi.n	8004242 <FiniteStateMachine_NormalizeState+0xc2>
        {
            (*P)[i][j] *= invtotal;
 80041fc:	eb04 0985 	add.w	r9, r4, r5, lsl #2
 8004200:	eb08 09c9 	add.w	r9, r8, r9, lsl #3
 8004204:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004208:	4650      	mov	r0, sl
 800420a:	4659      	mov	r1, fp
 800420c:	f7fc fa1c 	bl	8000648 <__aeabi_dmul>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	ec43 2b18 	vmov	d8, r2, r3
 8004218:	ed89 8b00 	vstr	d8, [r9]
            if( (*P)[i][j] > max )
 800421c:	4632      	mov	r2, r6
 800421e:	463b      	mov	r3, r7
 8004220:	f7fc fca2 	bl	8000b68 <__aeabi_dcmpgt>
 8004224:	2800      	cmp	r0, #0
 8004226:	d0e5      	beq.n	80041f4 <FiniteStateMachine_NormalizeState+0x74>
            {
                max = (*P)[i][j];
 8004228:	ec57 6b18 	vmov	r6, r7, d8
                max_index = j;
 800422c:	9401      	str	r4, [sp, #4]
 800422e:	e7e1      	b.n	80041f4 <FiniteStateMachine_NormalizeState+0x74>
            }
        }
    }
    else (*P)[i][i] = 1.0;
 8004230:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8004234:	eb08 08c0 	add.w	r8, r8, r0, lsl #3
 8004238:	2200      	movs	r2, #0
 800423a:	4b05      	ldr	r3, [pc, #20]	; (8004250 <FiniteStateMachine_NormalizeState+0xd0>)
 800423c:	e9c8 2300 	strd	r2, r3, [r8]
    uint8_t max_index = i, j;
 8004240:	9501      	str	r5, [sp, #4]
    
    return max_index;
}
 8004242:	9801      	ldr	r0, [sp, #4]
 8004244:	b003      	add	sp, #12
 8004246:	ecbd 8b02 	vpop	{d8}
 800424a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424e:	bf00      	nop
 8004250:	3ff00000 	.word	0x3ff00000
 8004254:	00000000 	.word	0x00000000

08004258 <FiniteStateMachine_InitializeSystem>:

void FiniteStateMachine_InitializeSystem( fsm_system_t * sys, const char * name, transition_matrix_t * P, state_t initial_state )
{
 8004258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800425a:	ed2d 8b04 	vpush	{d8-d9}
 800425e:	b08d      	sub	sp, #52	; 0x34
 8004260:	4604      	mov	r4, r0
    sys->name               = name;
 8004262:	f8c0 117c 	str.w	r1, [r0, #380]	; 0x17c
    sys->state              = initial_state;
 8004266:	7003      	strb	r3, [r0, #0]
    sys->prev               = UNKNOWN_STATE;
 8004268:	23ff      	movs	r3, #255	; 0xff
 800426a:	7043      	strb	r3, [r0, #1]
    sys->next               = UNKNOWN_STATE;
 800426c:	7083      	strb	r3, [r0, #2]
    sys->selection_index    = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	70c3      	strb	r3, [r0, #3]
    sys->P                  = P;
 8004272:	f8c0 2178 	str.w	r2, [r0, #376]	; 0x178
    
    Kalman.Initialize( &sys->stability.system, 0., FSM_LIFESPAN, 0., 1., FSM_STABLIITY_UNCERTAINTY );
 8004276:	4e2e      	ldr	r6, [pc, #184]	; (8004330 <FiniteStateMachine_InitializeSystem+0xd8>)
 8004278:	466f      	mov	r7, sp
 800427a:	4635      	mov	r5, r6
 800427c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800427e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004280:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004284:	e887 0003 	stmia.w	r7, {r0, r1}
 8004288:	ed9f 9b21 	vldr	d9, [pc, #132]	; 8004310 <FiniteStateMachine_InitializeSystem+0xb8>
 800428c:	ed9f 8b22 	vldr	d8, [pc, #136]	; 8004318 <FiniteStateMachine_InitializeSystem+0xc0>
 8004290:	ed9d 4b00 	vldr	d4, [sp]
 8004294:	ed9d 5b02 	vldr	d5, [sp, #8]
 8004298:	ed9d 6b04 	vldr	d6, [sp, #16]
 800429c:	eeb0 3a49 	vmov.f32	s6, s18
 80042a0:	eef0 3a69 	vmov.f32	s7, s19
 80042a4:	eeb0 2a48 	vmov.f32	s4, s16
 80042a8:	eef0 2a68 	vmov.f32	s5, s17
 80042ac:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8004320 <FiniteStateMachine_InitializeSystem+0xc8>
 80042b0:	eeb0 0a48 	vmov.f32	s0, s16
 80042b4:	eef0 0a68 	vmov.f32	s1, s17
 80042b8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80042bc:	f000 f90c 	bl	80044d8 <InitializeKalman>
    Kalman.Initialize( &sys->stability.state, 0., FSM_STATE_LIFESPAN, 0., 1., FSM_STATE_UNCERTAINTY );
 80042c0:	af06      	add	r7, sp, #24
 80042c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80042c4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80042c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80042ca:	e887 0003 	stmia.w	r7, {r0, r1}
 80042ce:	ed9d 4b06 	vldr	d4, [sp, #24]
 80042d2:	ed9d 5b08 	vldr	d5, [sp, #32]
 80042d6:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80042da:	eeb0 3a49 	vmov.f32	s6, s18
 80042de:	eef0 3a69 	vmov.f32	s7, s19
 80042e2:	eeb0 2a48 	vmov.f32	s4, s16
 80042e6:	eef0 2a68 	vmov.f32	s5, s17
 80042ea:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8004328 <FiniteStateMachine_InitializeSystem+0xd0>
 80042ee:	eeb0 0a48 	vmov.f32	s0, s16
 80042f2:	eef0 0a68 	vmov.f32	s1, s17
 80042f6:	f104 0008 	add.w	r0, r4, #8
 80042fa:	f000 f8ed 	bl	80044d8 <InitializeKalman>
    
    if( sys->P != NULL )
 80042fe:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
 8004302:	b108      	cbz	r0, 8004308 <FiniteStateMachine_InitializeSystem+0xb0>
        FSMFunctions.Map.Initialize( sys->P );
 8004304:	f7ff ff2e 	bl	8004164 <FiniteStateMachine_InitializeMap>
}
 8004308:	b00d      	add	sp, #52	; 0x34
 800430a:	ecbd 8b04 	vpop	{d8-d9}
 800430e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004310:	00000000 	.word	0x00000000
 8004314:	3ff00000 	.word	0x3ff00000
	...
 8004324:	40240000 	.word	0x40240000
 8004328:	00000000 	.word	0x00000000
 800432c:	40080000 	.word	0x40080000
 8004330:	0800b140 	.word	0x0800b140

08004334 <FiniteStateMachine_UpdateProbabilities>:
    sys->stability.system.timestamp = TIMESTAMP();
    sys->stability.state.timestamp = TIMESTAMP();
}

void FiniteStateMachine_UpdateProbabilities( fsm_system_t * sys, double p[NUM_STATES] )
{
 8004334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004338:	ed2d 8b02 	vpush	{d8}
 800433c:	b083      	sub	sp, #12
 800433e:	4605      	mov	r5, r0
 8004340:	4688      	mov	r8, r1
    state_t c = sys->state;
 8004342:	f990 9000 	ldrsb.w	r9, [r0]

    LOG_FSM( FSM_DEBUG_UPDATE, "%s: Update probabilities are [%5.3f, %5.3f, %5.3f, %5.3f].\n", sys->name, p[0], p[1], p[2], p[3]);
    LOG_FSM( FSM_DEBUG_UPDATE, "State %s has stability %.4f\n", stateString(c), sys->stability.state.value );

    floating_t curr = 0;
    for( uint8_t i = 0; i < NUM_STATES; i++ )
 8004346:	2400      	movs	r4, #0
 8004348:	e007      	b.n	800435a <FiniteStateMachine_UpdateProbabilities+0x26>
    {
        LOG_FSM(FSM_DEBUG_UPDATE, "Updating %s by %.2f.\n", stateString(i), p[i]);
        curr = WeightedAverage( (*sys->P)[c][i], p[i], ( sys->stability.state.value + 1 ) / 2 );
        if( curr <= MAX_SINGLE_CONFIDENCE )
            (*sys->P)[c][i] = curr;
 800434a:	eb04 0389 	add.w	r3, r4, r9, lsl #2
 800434e:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8004352:	e9c7 ab00 	strd	sl, fp, [r7]
    for( uint8_t i = 0; i < NUM_STATES; i++ )
 8004356:	3401      	adds	r4, #1
 8004358:	b2e4      	uxtb	r4, r4
 800435a:	2c03      	cmp	r4, #3
 800435c:	d826      	bhi.n	80043ac <FiniteStateMachine_UpdateProbabilities+0x78>
        curr = WeightedAverage( (*sys->P)[c][i], p[i], ( sys->stability.state.value + 1 ) / 2 );
 800435e:	f8d5 7178 	ldr.w	r7, [r5, #376]	; 0x178
 8004362:	eb08 06c4 	add.w	r6, r8, r4, lsl #3
 8004366:	2200      	movs	r2, #0
 8004368:	4b1c      	ldr	r3, [pc, #112]	; (80043dc <FiniteStateMachine_UpdateProbabilities+0xa8>)
 800436a:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800436e:	f7fb ffb5 	bl	80002dc <__adddf3>
 8004372:	ed96 8b00 	vldr	d8, [r6]
 8004376:	eb04 0389 	add.w	r3, r4, r9, lsl #2
 800437a:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 800437e:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8004382:	2200      	movs	r2, #0
 8004384:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <FiniteStateMachine_UpdateProbabilities+0xac>)
 8004386:	f7fc f95f 	bl	8000648 <__aeabi_dmul>
 800438a:	e9cd 0100 	strd	r0, r1, [sp]
 800438e:	ec53 2b18 	vmov	r2, r3, d8
 8004392:	4650      	mov	r0, sl
 8004394:	4659      	mov	r1, fp
 8004396:	f7ff fea9 	bl	80040ec <WeightedAverage>
 800439a:	4682      	mov	sl, r0
 800439c:	468b      	mov	fp, r1
        if( curr <= MAX_SINGLE_CONFIDENCE )
 800439e:	2200      	movs	r2, #0
 80043a0:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <FiniteStateMachine_UpdateProbabilities+0xa8>)
 80043a2:	f7fc fbcd 	bl	8000b40 <__aeabi_dcmple>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d0d5      	beq.n	8004356 <FiniteStateMachine_UpdateProbabilities+0x22>
 80043aa:	e7ce      	b.n	800434a <FiniteStateMachine_UpdateProbabilities+0x16>
    }
    floating_t state_change_rate = TIMESTAMP() - sys->stability.state.timestamp;
 80043ac:	f7fc ffb3 	bl	8001316 <STM_Timestamp>
 80043b0:	f7fc f8d0 	bl	8000554 <__aeabi_ui2d>
 80043b4:	e9d5 2320 	ldrd	r2, r3, [r5, #128]	; 0x80
 80043b8:	f7fb ff8e 	bl	80002d8 <__aeabi_dsub>
    Kalman.Step( &sys->stability.state, p[sys->state], state_change_rate );
 80043bc:	f915 3b08 	ldrsb.w	r3, [r5], #8
 80043c0:	eb08 08c3 	add.w	r8, r8, r3, lsl #3
 80043c4:	ec41 0b11 	vmov	d1, r0, r1
 80043c8:	ed98 0b00 	vldr	d0, [r8]
 80043cc:	4628      	mov	r0, r5
 80043ce:	f000 fa33 	bl	8004838 <StepKalman>
}
 80043d2:	b003      	add	sp, #12
 80043d4:	ecbd 8b02 	vpop	{d8}
 80043d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043dc:	3ff00000 	.word	0x3ff00000
 80043e0:	3fe00000 	.word	0x3fe00000
 80043e4:	00000000 	.word	0x00000000

080043e8 <FiniteStateMachine_UpdateState>:
void FiniteStateMachine_UpdateState( fsm_system_t * sys )
{
    /* State change */

    LOG_FSM(FSM_DEBUG, "~~~ State is %s ~~~\n", stateString(sys->next));
    if( sys->next != sys->state && sys->next != UNKNOWN_STATE )
 80043e8:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80043ec:	f990 2000 	ldrsb.w	r2, [r0]
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d026      	beq.n	8004442 <FiniteStateMachine_UpdateState+0x5a>
{
 80043f4:	b510      	push	{r4, lr}
 80043f6:	4604      	mov	r4, r0
    if( sys->next != sys->state && sys->next != UNKNOWN_STATE )
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d100      	bne.n	8004400 <FiniteStateMachine_UpdateState+0x18>
        
#ifdef FSM_DECAY_INACTIVE
        FSMFunctions.Sys.DecayInactive( sys );
#endif
    }
}
 80043fe:	bd10      	pop	{r4, pc}
        sys->prev   = sys->state;
 8004400:	7042      	strb	r2, [r0, #1]
        sys->state  = sys->next;
 8004402:	7003      	strb	r3, [r0, #0]
        sys->next   = UNKNOWN_STATE;
 8004404:	23ff      	movs	r3, #255	; 0xff
 8004406:	7083      	strb	r3, [r0, #2]
        Kalman.Reset( &sys->stability.state, 0. );
 8004408:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8004448 <FiniteStateMachine_UpdateState+0x60>
 800440c:	3008      	adds	r0, #8
 800440e:	f000 f83b 	bl	8004488 <ResetKalman>
        floating_t system_change_rate = TIMESTAMP() - sys->stability.system.timestamp;
 8004412:	f7fc ff80 	bl	8001316 <STM_Timestamp>
 8004416:	f7fc f89d 	bl	8000554 <__aeabi_ui2d>
 800441a:	e9d4 234e 	ldrd	r2, r3, [r4, #312]	; 0x138
 800441e:	f7fb ff5b 	bl	80002d8 <__aeabi_dsub>
        Kalman.Step( &sys->stability.system, (*sys->P)[sys->state][sys->state], system_change_rate );
 8004422:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
 8004426:	f914 3bc0 	ldrsb.w	r3, [r4], #192
 800442a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800442e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004432:	ec41 0b11 	vmov	d1, r0, r1
 8004436:	ed93 0b00 	vldr	d0, [r3]
 800443a:	4620      	mov	r0, r4
 800443c:	f000 f9fc 	bl	8004838 <StepKalman>
}
 8004440:	e7dd      	b.n	80043fe <FiniteStateMachine_UpdateState+0x16>
 8004442:	4770      	bx	lr
 8004444:	f3af 8000 	nop.w
	...

08004450 <FiniteStateMachine_UpdateSystem>:
{
 8004450:	b510      	push	{r4, lr}
 8004452:	4604      	mov	r4, r0
    FSMFunctions.Sys.UpdateProbabilities( sys, p );
 8004454:	f7ff ff6e 	bl	8004334 <FiniteStateMachine_UpdateProbabilities>
    sys->next = (state_t)FSMFunctions.Map.NormalizeState( sys->P, sys->state );
 8004458:	f994 1000 	ldrsb.w	r1, [r4]
 800445c:	b2c9      	uxtb	r1, r1
 800445e:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
 8004462:	f7ff fe8d 	bl	8004180 <FiniteStateMachine_NormalizeState>
 8004466:	70a0      	strb	r0, [r4, #2]
    FSMFunctions.Sys.UpdateState( sys );
 8004468:	4620      	mov	r0, r4
 800446a:	f7ff ffbd 	bl	80043e8 <FiniteStateMachine_UpdateState>
    sys->stability.system.timestamp = TIMESTAMP();
 800446e:	f7fc ff52 	bl	8001316 <STM_Timestamp>
 8004472:	f7fc f86f 	bl	8000554 <__aeabi_ui2d>
 8004476:	e9c4 014e 	strd	r0, r1, [r4, #312]	; 0x138
    sys->stability.state.timestamp = TIMESTAMP();
 800447a:	f7fc ff4c 	bl	8001316 <STM_Timestamp>
 800447e:	f7fc f869 	bl	8000554 <__aeabi_ui2d>
 8004482:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
}
 8004486:	bd10      	pop	{r4, pc}

08004488 <ResetKalman>:
    
    ResetKalman(k, v);
}

void ResetKalman( kalman_filter_t * k, floating_t v )
{
 8004488:	b510      	push	{r4, lr}
 800448a:	4604      	mov	r4, r0
    k->K[0]        = 0; /* Gain */
 800448c:	2200      	movs	r2, #0
 800448e:	2300      	movs	r3, #0
 8004490:	e9c0 2300 	strd	r2, r3, [r0]
    k->K[1]        = 0;
 8004494:	e9c0 2302 	strd	r2, r3, [r0, #8]
    k->P[0][0]     = 0; /* Error covariance */
 8004498:	e9c0 2304 	strd	r2, r3, [r0, #16]
    k->P[0][1]     = 0;
 800449c:	e9c0 2306 	strd	r2, r3, [r0, #24]
    k->P[1][0]     = 0;
 80044a0:	e9c0 2308 	strd	r2, r3, [r0, #32]
    k->P[1][1]     = 0;
 80044a4:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    k->rate        = 0;
 80044a8:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    k->bias        = 0;
 80044ac:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    k->prev        = 0;
 80044b0:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    k->velocity    = 0;
 80044b4:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
    k->variance    = 0;
 80044b8:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
    k->flag        = 0;
 80044bc:	2100      	movs	r1, #0
 80044be:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    k->score       = 0;
 80044c2:	e9c0 2322 	strd	r2, r3, [r0, #136]	; 0x88
    k->value       = v;
 80044c6:	ed80 0b10 	vstr	d0, [r0, #64]	; 0x40
    k->origin      = TIMESTAMP();
 80044ca:	f7fc ff24 	bl	8001316 <STM_Timestamp>
 80044ce:	f7fc f841 	bl	8000554 <__aeabi_ui2d>
 80044d2:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
}
 80044d6:	bd10      	pop	{r4, pc}

080044d8 <InitializeKalman>:
{
 80044d8:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 80044dc:	ed2d 8b02 	vpush	{d8}
 80044e0:	b086      	sub	sp, #24
 80044e2:	4604      	mov	r4, r0
 80044e4:	eeb0 8a40 	vmov.f32	s16, s0
 80044e8:	eef0 8a60 	vmov.f32	s17, s1
 80044ec:	ec59 8b12 	vmov	r8, r9, d2
 80044f0:	ec57 6b13 	vmov	r6, r7, d3
    k->lifespan    = ls;
 80044f4:	ed80 1b18 	vstr	d1, [r0, #96]	; 0x60
    k->uncertainty.value   = uncertainty.value;
 80044f8:	ed80 4b26 	vstr	d4, [r0, #152]	; 0x98
    k->uncertainty.bias    = uncertainty.bias;
 80044fc:	ed80 5b28 	vstr	d5, [r0, #160]	; 0xa0
    k->uncertainty.sensor  = uncertainty.sensor;
 8004500:	ed80 6b2a 	vstr	d6, [r0, #168]	; 0xa8
    k->origin    = TIMESTAMP();
 8004504:	f7fc ff07 	bl	8001316 <STM_Timestamp>
 8004508:	f7fc f824 	bl	8000554 <__aeabi_ui2d>
 800450c:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
    k->timestamp = k->origin;
 8004510:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    k->min_value = minv;
 8004514:	e9c4 891a 	strd	r8, r9, [r4, #104]	; 0x68
    k->max_value = maxv;
 8004518:	e9c4 671c 	strd	r6, r7, [r4, #112]	; 0x70
    k->acceleration_mode = false;
 800451c:	2300      	movs	r3, #0
 800451e:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
    ResetKalman(k, v);
 8004522:	eeb0 0a48 	vmov.f32	s0, s16
 8004526:	eef0 0a68 	vmov.f32	s1, s17
 800452a:	4620      	mov	r0, r4
 800452c:	f7ff ffac 	bl	8004488 <ResetKalman>
}
 8004530:	b006      	add	sp, #24
 8004532:	ecbd 8b02 	vpop	{d8}
 8004536:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}

0800453a <PredictKalman>:

void PredictKalman( kalman_filter_t * k, floating_t rate_new )
{
 800453a:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
 800453e:	ed2d 9b02 	vpush	{d9}
 8004542:	b082      	sub	sp, #8
 8004544:	4604      	mov	r4, r0
 8004546:	ed8d 0b00 	vstr	d0, [sp]
    floating_t delta_time = TIMESTAMP() - k->timestamp;
 800454a:	f7fc fee4 	bl	8001316 <STM_Timestamp>
 800454e:	f7fc f801 	bl	8000554 <__aeabi_ui2d>
 8004552:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	; 0x78
 8004556:	f7fb febf 	bl	80002d8 <__aeabi_dsub>
 800455a:	4606      	mov	r6, r0
 800455c:	460f      	mov	r7, r1
    
    /* Quick expiration check */
    if(delta_time > k->lifespan)
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
 8004566:	f7fc fae1 	bl	8000b2c <__aeabi_dcmplt>
 800456a:	2800      	cmp	r0, #0
 800456c:	f040 8090 	bne.w	8004690 <PredictKalman+0x156>
        k->timestamp = TIMESTAMP();
        return;
    }
    
    /* \hat{x}_{k\mid k-1} = F \hat{x_{k-1\mid k-1}} + B \dot{\theta}_k */
    k->velocity = k->value - k->prev;
 8004570:	e9d4 8910 	ldrd	r8, r9, [r4, #64]	; 0x40
 8004574:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
 8004578:	4640      	mov	r0, r8
 800457a:	4649      	mov	r1, r9
 800457c:	f7fb feac 	bl	80002d8 <__aeabi_dsub>
 8004580:	4682      	mov	sl, r0
 8004582:	468b      	mov	fp, r1
 8004584:	e9c4 ab14 	strd	sl, fp, [r4, #80]	; 0x50
    k->prev     = k->value;
 8004588:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
    k->rate     = k->acceleration_mode ?
 800458c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
        delta_time * rate_new - k->bias + k->velocity
        : rate_new - k->bias;
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8084 	beq.w	800469e <PredictKalman+0x164>
        delta_time * rate_new - k->bias + k->velocity
 8004596:	e9dd 2300 	ldrd	r2, r3, [sp]
 800459a:	4630      	mov	r0, r6
 800459c:	4639      	mov	r1, r7
 800459e:	f7fc f853 	bl	8000648 <__aeabi_dmul>
 80045a2:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80045a6:	f7fb fe97 	bl	80002d8 <__aeabi_dsub>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
        : rate_new - k->bias;
 80045ae:	4650      	mov	r0, sl
 80045b0:	4659      	mov	r1, fp
 80045b2:	f7fb fe93 	bl	80002dc <__adddf3>
    k->rate     = k->acceleration_mode ?
 80045b6:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    k->value   += delta_time * k->rate;
 80045ba:	4632      	mov	r2, r6
 80045bc:	463b      	mov	r3, r7
 80045be:	f7fc f843 	bl	8000648 <__aeabi_dmul>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4640      	mov	r0, r8
 80045c8:	4649      	mov	r1, r9
 80045ca:	f7fb fe87 	bl	80002dc <__adddf3>
 80045ce:	4680      	mov	r8, r0
 80045d0:	4689      	mov	r9, r1
    k->value    = BOUND(k->value, k->min_value, k->max_value);
 80045d2:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
 80045d6:	4652      	mov	r2, sl
 80045d8:	465b      	mov	r3, fp
 80045da:	f7fc faa7 	bl	8000b2c <__aeabi_dcmplt>
 80045de:	b950      	cbnz	r0, 80045f6 <PredictKalman+0xbc>
 80045e0:	e9d4 ab1c 	ldrd	sl, fp, [r4, #112]	; 0x70
 80045e4:	4652      	mov	r2, sl
 80045e6:	465b      	mov	r3, fp
 80045e8:	4640      	mov	r0, r8
 80045ea:	4649      	mov	r1, r9
 80045ec:	f7fc fabc 	bl	8000b68 <__aeabi_dcmpgt>
 80045f0:	b908      	cbnz	r0, 80045f6 <PredictKalman+0xbc>
 80045f2:	46c2      	mov	sl, r8
 80045f4:	46cb      	mov	fp, r9
 80045f6:	e9c4 ab10 	strd	sl, fp, [r4, #64]	; 0x40
    
    /* P_{k\mid k-1} = F P_{k-1\mid k-1} F^T + Q_k */
    floating_t dt_P_1_1 = delta_time * k->P[1][1];
 80045fa:	e9d4 ab0a 	ldrd	sl, fp, [r4, #40]	; 0x28
 80045fe:	4632      	mov	r2, r6
 8004600:	463b      	mov	r3, r7
 8004602:	4650      	mov	r0, sl
 8004604:	4659      	mov	r1, fp
 8004606:	f7fc f81f 	bl	8000648 <__aeabi_dmul>
 800460a:	4680      	mov	r8, r0
 800460c:	4689      	mov	r9, r1
 800460e:	e9cd 8900 	strd	r8, r9, [sp]
    k->P[0][0]   += delta_time * ( dt_P_1_1 -
                                  k->P[0][1] -
 8004612:	ed94 9b06 	vldr	d9, [r4, #24]
    k->P[0][0]   += delta_time * ( dt_P_1_1 -
 8004616:	ec53 2b19 	vmov	r2, r3, d9
 800461a:	f7fb fe5d 	bl	80002d8 <__aeabi_dsub>
                                  k->P[1][0] +
 800461e:	e9d4 8908 	ldrd	r8, r9, [r4, #32]
                                  k->P[0][1] -
 8004622:	4642      	mov	r2, r8
 8004624:	464b      	mov	r3, r9
 8004626:	f7fb fe57 	bl	80002d8 <__aeabi_dsub>
                                  k->P[1][0] +
 800462a:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
 800462e:	f7fb fe55 	bl	80002dc <__adddf3>
    k->P[0][0]   += delta_time * ( dt_P_1_1 -
 8004632:	4632      	mov	r2, r6
 8004634:	463b      	mov	r3, r7
 8004636:	f7fc f807 	bl	8000648 <__aeabi_dmul>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8004642:	f7fb fe4b 	bl	80002dc <__adddf3>
 8004646:	e9c4 0104 	strd	r0, r1, [r4, #16]
                                  k->uncertainty.value );
    k->P[0][1]   -= dt_P_1_1;
 800464a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800464e:	ec51 0b19 	vmov	r0, r1, d9
 8004652:	f7fb fe41 	bl	80002d8 <__aeabi_dsub>
 8004656:	e9c4 0106 	strd	r0, r1, [r4, #24]
    k->P[1][0]   -= dt_P_1_1;
 800465a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800465e:	4640      	mov	r0, r8
 8004660:	4649      	mov	r1, r9
 8004662:	f7fb fe39 	bl	80002d8 <__aeabi_dsub>
 8004666:	e9c4 0108 	strd	r0, r1, [r4, #32]
    k->P[1][1]   += k->uncertainty.bias * delta_time;
 800466a:	4632      	mov	r2, r6
 800466c:	463b      	mov	r3, r7
 800466e:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
 8004672:	f7fb ffe9 	bl	8000648 <__aeabi_dmul>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4650      	mov	r0, sl
 800467c:	4659      	mov	r1, fp
 800467e:	f7fb fe2d 	bl	80002dc <__adddf3>
 8004682:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    
//    LOG_KALMAN(KALMAN_DEBUG_2, "Prediction - Value:%.2f Rate:%.2f Velocity:%.2f\n", k->value, k->rate, k->velocity);
}
 8004686:	b002      	add	sp, #8
 8004688:	ecbd 9b02 	vpop	{d9}
 800468c:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
        k->timestamp = TIMESTAMP();
 8004690:	f7fc fe41 	bl	8001316 <STM_Timestamp>
 8004694:	f7fb ff5e 	bl	8000554 <__aeabi_ui2d>
 8004698:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
        return;
 800469c:	e7f3      	b.n	8004686 <PredictKalman+0x14c>
        : rate_new - k->bias;
 800469e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80046a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046a6:	f7fb fe17 	bl	80002d8 <__aeabi_dsub>
 80046aa:	e784      	b.n	80045b6 <PredictKalman+0x7c>

080046ac <UpdateKalman>:

void UpdateKalman( kalman_filter_t * k, floating_t value_new )
{
 80046ac:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
 80046b0:	ed2d 8b02 	vpush	{d8}
 80046b4:	b086      	sub	sp, #24
 80046b6:	4604      	mov	r4, r0
 80046b8:	ed8d 0b00 	vstr	d0, [sp]
    /* S_k = H P_{k\mid k-1} H^T + R */
    floating_t S_ = 1. / ( k->P[0][0] + k->uncertainty.sensor );
 80046bc:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
 80046c0:	e9d0 232a 	ldrd	r2, r3, [r0, #168]	; 0xa8
 80046c4:	4630      	mov	r0, r6
 80046c6:	4639      	mov	r1, r7
 80046c8:	f7fb fe08 	bl	80002dc <__adddf3>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	2000      	movs	r0, #0
 80046d2:	4958      	ldr	r1, [pc, #352]	; (8004834 <UpdateKalman+0x188>)
 80046d4:	f7fc f8e2 	bl	800089c <__aeabi_ddiv>
 80046d8:	4680      	mov	r8, r0
 80046da:	4689      	mov	r9, r1
    
    /* K_k = P_{k\mid k-1} H^T S^{-1}_k */
    k->K[0]       = k->P[0][0] * S_;
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4630      	mov	r0, r6
 80046e2:	4639      	mov	r1, r7
 80046e4:	f7fb ffb0 	bl	8000648 <__aeabi_dmul>
 80046e8:	4682      	mov	sl, r0
 80046ea:	468b      	mov	fp, r1
 80046ec:	e9c4 ab00 	strd	sl, fp, [r4]
    k->K[1]       = k->P[1][0] * S_;
 80046f0:	ed94 8b08 	vldr	d8, [r4, #32]
 80046f4:	4642      	mov	r2, r8
 80046f6:	464b      	mov	r3, r9
 80046f8:	ec51 0b18 	vmov	r0, r1, d8
 80046fc:	f7fb ffa4 	bl	8000648 <__aeabi_dmul>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004708:	ec43 2b17 	vmov	d7, r2, r3
 800470c:	ed84 7b02 	vstr	d7, [r4, #8]
    
    /* \tilde{y} = z_k - H \hat{x}_{k\mid k-1} */
    floating_t delta_value = value_new - k->value;
 8004710:	e9d4 8910 	ldrd	r8, r9, [r4, #64]	; 0x40
 8004714:	4642      	mov	r2, r8
 8004716:	464b      	mov	r3, r9
 8004718:	e9dd 0100 	ldrd	r0, r1, [sp]
 800471c:	f7fb fddc 	bl	80002d8 <__aeabi_dsub>
    k->value     += k->K[0] * delta_value;
 8004720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4650      	mov	r0, sl
 800472a:	4659      	mov	r1, fp
 800472c:	f7fb ff8c 	bl	8000648 <__aeabi_dmul>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4640      	mov	r0, r8
 8004736:	4649      	mov	r1, r9
 8004738:	f7fb fdd0 	bl	80002dc <__adddf3>
 800473c:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    k->bias      += k->K[1] * delta_value;
 8004740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004748:	f7fb ff7e 	bl	8000648 <__aeabi_dmul>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8004754:	f7fb fdc2 	bl	80002dc <__adddf3>
 8004758:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    
    k->P[0][0]   -= k->K[0] * k->P[0][0];
 800475c:	4652      	mov	r2, sl
 800475e:	465b      	mov	r3, fp
 8004760:	4630      	mov	r0, r6
 8004762:	4639      	mov	r1, r7
 8004764:	f7fb ff70 	bl	8000648 <__aeabi_dmul>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4630      	mov	r0, r6
 800476e:	4639      	mov	r1, r7
 8004770:	f7fb fdb2 	bl	80002d8 <__aeabi_dsub>
 8004774:	4680      	mov	r8, r0
 8004776:	4689      	mov	r9, r1
 8004778:	e9c4 8904 	strd	r8, r9, [r4, #16]
    k->P[0][1]   -= k->K[0] * k->P[0][1];
 800477c:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8004780:	4632      	mov	r2, r6
 8004782:	463b      	mov	r3, r7
 8004784:	4650      	mov	r0, sl
 8004786:	4659      	mov	r1, fp
 8004788:	f7fb ff5e 	bl	8000648 <__aeabi_dmul>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4630      	mov	r0, r6
 8004792:	4639      	mov	r1, r7
 8004794:	f7fb fda0 	bl	80002d8 <__aeabi_dsub>
 8004798:	4606      	mov	r6, r0
 800479a:	460f      	mov	r7, r1
 800479c:	e9c4 6706 	strd	r6, r7, [r4, #24]
    k->P[1][0]   -= k->K[1] * k->P[0][0];
 80047a0:	4642      	mov	r2, r8
 80047a2:	464b      	mov	r3, r9
 80047a4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80047a8:	4640      	mov	r0, r8
 80047aa:	4649      	mov	r1, r9
 80047ac:	f7fb ff4c 	bl	8000648 <__aeabi_dmul>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	ec51 0b18 	vmov	r0, r1, d8
 80047b8:	f7fb fd8e 	bl	80002d8 <__aeabi_dsub>
 80047bc:	e9c4 0108 	strd	r0, r1, [r4, #32]
    k->P[1][1]   -= k->K[1] * k->P[0][1];
 80047c0:	4632      	mov	r2, r6
 80047c2:	463b      	mov	r3, r7
 80047c4:	4640      	mov	r0, r8
 80047c6:	4649      	mov	r1, r9
 80047c8:	f7fb ff3e 	bl	8000648 <__aeabi_dmul>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 80047d4:	f7fb fd80 	bl	80002d8 <__aeabi_dsub>
 80047d8:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    
    k->timestamp  = TIMESTAMP();
 80047dc:	f7fc fd9b 	bl	8001316 <STM_Timestamp>
 80047e0:	f7fb feb8 	bl	8000554 <__aeabi_ui2d>
 80047e4:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    
    k->value = BOUND(k->value, k->min_value, k->max_value);
 80047e8:	e9d4 8910 	ldrd	r8, r9, [r4, #64]	; 0x40
 80047ec:	e9d4 671a 	ldrd	r6, r7, [r4, #104]	; 0x68
 80047f0:	4632      	mov	r2, r6
 80047f2:	463b      	mov	r3, r7
 80047f4:	4640      	mov	r0, r8
 80047f6:	4649      	mov	r1, r9
 80047f8:	f7fc f998 	bl	8000b2c <__aeabi_dcmplt>
 80047fc:	b950      	cbnz	r0, 8004814 <UpdateKalman+0x168>
 80047fe:	e9d4 671c 	ldrd	r6, r7, [r4, #112]	; 0x70
 8004802:	4632      	mov	r2, r6
 8004804:	463b      	mov	r3, r7
 8004806:	4640      	mov	r0, r8
 8004808:	4649      	mov	r1, r9
 800480a:	f7fc f9ad 	bl	8000b68 <__aeabi_dcmpgt>
 800480e:	b908      	cbnz	r0, 8004814 <UpdateKalman+0x168>
 8004810:	4646      	mov	r6, r8
 8004812:	464f      	mov	r7, r9
 8004814:	e9c4 6710 	strd	r6, r7, [r4, #64]	; 0x40
    
    k->estimation_error = k->value - value_new;
 8004818:	e9dd 2300 	ldrd	r2, r3, [sp]
 800481c:	4630      	mov	r0, r6
 800481e:	4639      	mov	r1, r7
 8004820:	f7fb fd5a 	bl	80002d8 <__aeabi_dsub>
 8004824:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
//    LOG_KALMAN(KALMAN_DEBUG_2, "Update - Value:%.2f Bias:%.2f K:%.2f|%.2f\n", k->value, k->bias, k->K[0], k->K[1]);
};
 8004828:	b006      	add	sp, #24
 800482a:	ecbd 8b02 	vpop	{d8}
 800482e:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 8004832:	bf00      	nop
 8004834:	3ff00000 	.word	0x3ff00000

08004838 <StepKalman>:
{
    return Kalman.Step( k, value_new, k->velocity );
}

floating_t StepKalman( kalman_filter_t * k, floating_t value_new, floating_t rate_new )
{
 8004838:	b510      	push	{r4, lr}
 800483a:	ed2d 8b02 	vpush	{d8}
 800483e:	4604      	mov	r4, r0
 8004840:	eeb0 8a40 	vmov.f32	s16, s0
 8004844:	eef0 8a60 	vmov.f32	s17, s1
//    LOG_KALMAN(KALMAN_DEBUG_2, "Step - Id:%p NewVal:%.2f NewRate:%.2f\n", k, value_new, rate_new);
    PredictKalman(k, rate_new);
 8004848:	eeb0 0a41 	vmov.f32	s0, s2
 800484c:	eef0 0a61 	vmov.f32	s1, s3
 8004850:	f7ff fe73 	bl	800453a <PredictKalman>
    UpdateKalman(k, value_new);
 8004854:	eeb0 0a48 	vmov.f32	s0, s16
 8004858:	eef0 0a68 	vmov.f32	s1, s17
 800485c:	4620      	mov	r0, r4
 800485e:	f7ff ff25 	bl	80046ac <UpdateKalman>
    return k->value;
}
 8004862:	ed94 0b10 	vldr	d0, [r4, #64]	; 0x40
 8004866:	ecbd 8b02 	vpop	{d8}
 800486a:	bd10      	pop	{r4, pc}

0800486c <TickKalman>:
{
 800486c:	b508      	push	{r3, lr}
    return Kalman.Step( k, value_new, k->velocity );
 800486e:	ed90 1b14 	vldr	d1, [r0, #80]	; 0x50
 8004872:	f7ff ffe1 	bl	8004838 <StepKalman>
}
 8004876:	bd08      	pop	{r3, pc}

08004878 <IsKalmanExpired>:

bool IsKalmanExpired( kalman_filter_t * k )
{
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	4604      	mov	r4, r0
    return ((TIMESTAMP() - k->timestamp) > k->lifespan);
 800487c:	f7fc fd4b 	bl	8001316 <STM_Timestamp>
 8004880:	e9d4 671e 	ldrd	r6, r7, [r4, #120]	; 0x78
 8004884:	f7fb fe66 	bl	8000554 <__aeabi_ui2d>
 8004888:	4632      	mov	r2, r6
 800488a:	463b      	mov	r3, r7
 800488c:	f7fb fd24 	bl	80002d8 <__aeabi_dsub>
 8004890:	f04f 0501 	mov.w	r5, #1
 8004894:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
 8004898:	f7fc f966 	bl	8000b68 <__aeabi_dcmpgt>
 800489c:	b908      	cbnz	r0, 80048a2 <IsKalmanExpired+0x2a>
 800489e:	f04f 0500 	mov.w	r5, #0
}
 80048a2:	f005 0001 	and.w	r0, r5, #1
 80048a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080048a8 <ScoreKalman>:

inline floating_t ScoreKalman( kalman_filter_t * k )
{
    floating_t score = k->K[0];
 80048a8:	ed90 0b00 	vldr	d0, [r0]
    if(k->flag) score = 0.;
 80048ac:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
 80048b0:	b10b      	cbz	r3, 80048b6 <ScoreKalman+0xe>
 80048b2:	ed9f 0b03 	vldr	d0, [pc, #12]	; 80048c0 <ScoreKalman+0x18>
    k->score = score;
 80048b6:	ed80 0b22 	vstr	d0, [r0, #136]	; 0x88
    return score;
}
 80048ba:	4770      	bx	lr
 80048bc:	f3af 8000 	nop.w
	...

080048c8 <PunishKalman>:

void PunishKalman( kalman_filter_t * k )
{
 80048c8:	b510      	push	{r4, lr}
 80048ca:	4604      	mov	r4, r0
    k->K[0] *= KALMAN_PUNISH_FACTOR;
 80048cc:	a310      	add	r3, pc, #64	; (adr r3, 8004910 <PunishKalman+0x48>)
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	e9d0 0100 	ldrd	r0, r1, [r0]
 80048d6:	f7fb feb7 	bl	8000648 <__aeabi_dmul>
 80048da:	e9c4 0100 	strd	r0, r1, [r4]
    if(k->flag) score = 0.;
 80048de:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
 80048e2:	b10b      	cbz	r3, 80048e8 <PunishKalman+0x20>
 80048e4:	2000      	movs	r0, #0
 80048e6:	2100      	movs	r1, #0
    k->score = score;
 80048e8:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
    if( ScoreKalman(k) < MIN_KALMAN_GAIN )
 80048ec:	a30a      	add	r3, pc, #40	; (adr r3, 8004918 <PunishKalman+0x50>)
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	f7fc f91b 	bl	8000b2c <__aeabi_dcmplt>
 80048f6:	b900      	cbnz	r0, 80048fa <PunishKalman+0x32>
        ResetKalman(k, 0);
}
 80048f8:	bd10      	pop	{r4, pc}
        ResetKalman(k, 0);
 80048fa:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8004908 <PunishKalman+0x40>
 80048fe:	4620      	mov	r0, r4
 8004900:	f7ff fdc2 	bl	8004488 <ResetKalman>
}
 8004904:	e7f8      	b.n	80048f8 <PunishKalman+0x30>
 8004906:	bf00      	nop
	...
 8004910:	66666666 	.word	0x66666666
 8004914:	3fe66666 	.word	0x3fe66666
 8004918:	d2f1a9fc 	.word	0xd2f1a9fc
 800491c:	3f50624d 	.word	0x3f50624d

08004920 <PrintKalman>:
//    LOG_KALMAN(KALMAN_DEBUG, "Val: %.4f | Rate: %.4f | Vel:%.4f\n", k->value, k->rate, k->velocity);
//    LOG_KALMAN(KALMAN_DEBUG, "Bias: %.4f | Var: %.4f | Scr:%.4f\n", k->bias, k->variance, k->score);
//    LOG_KALMAN(KALMAN_DEBUG, "K:\t[%.4f][%.4f]\n", k->K[0], k->K[1]);
//    LOG_KALMAN(KALMAN_DEBUG, "P:\t[%.4f][%.4f]\n", k->P[0][0], k->P[0][1]);
//    LOG_KALMAN(KALMAN_DEBUG, "  \t[%.4f][%.4f]\n", k->P[1][0], k->P[1][1]);
}
 8004920:	4770      	bx	lr
 8004922:	0000      	movs	r0, r0
 8004924:	0000      	movs	r0, r0
	...

08004928 <RhoPIDInitialize>:
#ifndef TIMESTAMP
#include "timestamp.h"
#endif

void RhoPIDInitialize( pid_filter_t * pid, pid_gain_t k )
{
 8004928:	b082      	sub	sp, #8
 800492a:	b5d0      	push	{r4, r6, r7, lr}
 800492c:	4604      	mov	r4, r0
 800492e:	a904      	add	r1, sp, #16
 8004930:	e881 000c 	stmia.w	r1, {r2, r3}
    /* Zero Entire PID */
    memset( pid, 0, sizeof(pid_filter_t) );
 8004934:	2290      	movs	r2, #144	; 0x90
 8004936:	2100      	movs	r1, #0
 8004938:	f002 fdfa 	bl	8007530 <memset>
    
    if( !k.kp && !k.ki && !k.kd )
 800493c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8004940:	2200      	movs	r2, #0
 8004942:	2300      	movs	r3, #0
 8004944:	4630      	mov	r0, r6
 8004946:	4639      	mov	r1, r7
 8004948:	f7fc f8e6 	bl	8000b18 <__aeabi_dcmpeq>
 800494c:	b1f8      	cbz	r0, 800498e <RhoPIDInitialize+0x66>
 800494e:	2200      	movs	r2, #0
 8004950:	2300      	movs	r3, #0
 8004952:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004956:	f7fc f8df 	bl	8000b18 <__aeabi_dcmpeq>
 800495a:	b1c0      	cbz	r0, 800498e <RhoPIDInitialize+0x66>
 800495c:	2200      	movs	r2, #0
 800495e:	2300      	movs	r3, #0
 8004960:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004964:	f7fc f8d8 	bl	8000b18 <__aeabi_dcmpeq>
 8004968:	b188      	cbz	r0, 800498e <RhoPIDInitialize+0x66>
    {
        k.pu = 1.;
        pid->gain.kp = DEFAULT_PROPORTIONAL_FACTOR * k.ku;
 800496a:	2200      	movs	r2, #0
 800496c:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <RhoPIDInitialize+0x98>)
 800496e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004972:	f7fb fe69 	bl	8000648 <__aeabi_dmul>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	e9c4 2300 	strd	r2, r3, [r4]
        pid->gain.ki = DEFAULT_INTEGRAL_FACTOR * ( pid->gain.kp / k.pu );
 800497e:	a30e      	add	r3, pc, #56	; (adr r3, 80049b8 <RhoPIDInitialize+0x90>)
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	f7fb fe60 	bl	8000648 <__aeabi_dmul>
 8004988:	e9c4 0102 	strd	r0, r1, [r4, #8]
        pid->gain.kd = DEFAULT_DERIVATIVE_FACTOR * ( pid->gain.kd * k.pu );
 800498c:	e009      	b.n	80049a2 <RhoPIDInitialize+0x7a>
    }
    else
    {
        pid->gain.kp = k.kp;
 800498e:	e9c4 6700 	strd	r6, r7, [r4]
        pid->gain.ki = k.ki;
 8004992:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004996:	e9c4 2302 	strd	r2, r3, [r4, #8]
        pid->gain.kd = k.kd;
 800499a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800499e:	e9c4 2304 	strd	r2, r3, [r4, #16]
    }
    pid->timestamp = TIMESTAMP();
 80049a2:	f7fc fcb8 	bl	8001316 <STM_Timestamp>
 80049a6:	f7fb fdd5 	bl	8000554 <__aeabi_ui2d>
 80049aa:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
}
 80049ae:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 80049b2:	b002      	add	sp, #8
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80049bc:	3f60624d 	.word	0x3f60624d
 80049c0:	3fe00000 	.word	0x3fe00000
 80049c4:	00000000 	.word	0x00000000

080049c8 <RhoPIDUpdate>:

void RhoPIDUpdate( pid_filter_t * pid, floating_t actual, floating_t target )
{
 80049c8:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
 80049cc:	ed2d 8b02 	vpush	{d8}
 80049d0:	b082      	sub	sp, #8
 80049d2:	4604      	mov	r4, r0
 80049d4:	ec51 0b10 	vmov	r0, r1, d0
 80049d8:	ec53 2b11 	vmov	r2, r3, d1
    pid->error = actual - target;
 80049dc:	f7fb fc7c 	bl	80002d8 <__aeabi_dsub>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
    
    pid->pv = pid->error * pid->gain.kp;
 80049e8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80049ec:	f7fb fe2c 	bl	8000648 <__aeabi_dmul>
 80049f0:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    
    pid->dt = TIMESTAMP() - pid->timestamp;
 80049f4:	f7fc fc8f 	bl	8001316 <STM_Timestamp>
 80049f8:	e9d4 6716 	ldrd	r6, r7, [r4, #88]	; 0x58
 80049fc:	f7fb fdaa 	bl	8000554 <__aeabi_ui2d>
 8004a00:	4632      	mov	r2, r6
 8004a02:	463b      	mov	r3, r7
 8004a04:	f7fb fc68 	bl	80002d8 <__aeabi_dsub>
 8004a08:	4606      	mov	r6, r0
 8004a0a:	460f      	mov	r7, r1
 8004a0c:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
    pid->total_error += pid->error * pid->dt;
 8004a10:	e9d4 891a 	ldrd	r8, r9, [r4, #104]	; 0x68
 8004a14:	4642      	mov	r2, r8
 8004a16:	464b      	mov	r3, r9
 8004a18:	f7fb fe16 	bl	8000648 <__aeabi_dmul>
 8004a1c:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	; 0x78
 8004a20:	f7fb fc5c 	bl	80002dc <__adddf3>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	e9cd 2300 	strd	r2, r3, [sp]
    pid->iv = pid->gain.ki * pid->total_error;
 8004a2c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8004a30:	f7fb fe0a 	bl	8000648 <__aeabi_dmul>
 8004a34:	4682      	mov	sl, r0
 8004a36:	468b      	mov	fp, r1
 8004a38:	e9c4 ab0c 	strd	sl, fp, [r4, #48]	; 0x30
    
    pid->delta_error = pid->prev_error - pid->error;
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	464b      	mov	r3, r9
 8004a40:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
 8004a44:	f7fb fc48 	bl	80002d8 <__aeabi_dsub>
 8004a48:	ec41 0b18 	vmov	d8, r0, r1
 8004a4c:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    pid->dv = ZDIV( ( pid->gain.kd * pid->delta_error ), pid->dt);
 8004a50:	2200      	movs	r2, #0
 8004a52:	2300      	movs	r3, #0
 8004a54:	4630      	mov	r0, r6
 8004a56:	4639      	mov	r1, r7
 8004a58:	f7fc f85e 	bl	8000b18 <__aeabi_dcmpeq>
 8004a5c:	b170      	cbz	r0, 8004a7c <RhoPIDUpdate+0xb4>
 8004a5e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8004a62:	ec51 0b18 	vmov	r0, r1, d8
 8004a66:	f7fb fdef 	bl	8000648 <__aeabi_dmul>
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f7fc f853 	bl	8000b18 <__aeabi_dcmpeq>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	d04f      	beq.n	8004b16 <RhoPIDUpdate+0x14e>
 8004a76:	2600      	movs	r6, #0
 8004a78:	2700      	movs	r7, #0
 8004a7a:	e00b      	b.n	8004a94 <RhoPIDUpdate+0xcc>
 8004a7c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8004a80:	ec51 0b18 	vmov	r0, r1, d8
 8004a84:	f7fb fde0 	bl	8000648 <__aeabi_dmul>
 8004a88:	4632      	mov	r2, r6
 8004a8a:	463b      	mov	r3, r7
 8004a8c:	f7fb ff06 	bl	800089c <__aeabi_ddiv>
 8004a90:	4606      	mov	r6, r0
 8004a92:	460f      	mov	r7, r1
 8004a94:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    
    pid->value = pid->pv + pid->iv + pid->dv + pid->bias;
 8004a98:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8004a9c:	4650      	mov	r0, sl
 8004a9e:	4659      	mov	r1, fp
 8004aa0:	f7fb fc1c 	bl	80002dc <__adddf3>
 8004aa4:	4632      	mov	r2, r6
 8004aa6:	463b      	mov	r3, r7
 8004aa8:	f7fb fc18 	bl	80002dc <__adddf3>
 8004aac:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
 8004ab0:	f7fb fc14 	bl	80002dc <__adddf3>
 8004ab4:	4606      	mov	r6, r0
 8004ab6:	460f      	mov	r7, r1
 8004ab8:	e9c4 6710 	strd	r6, r7, [r4, #64]	; 0x40
    
    if( pid->max_value > 0 )
 8004abc:	e9d4 ab22 	ldrd	sl, fp, [r4, #136]	; 0x88
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	4650      	mov	r0, sl
 8004ac6:	4659      	mov	r1, fp
 8004ac8:	f7fc f84e 	bl	8000b68 <__aeabi_dcmpgt>
 8004acc:	b198      	cbz	r0, 8004af6 <RhoPIDUpdate+0x12e>
        pid->value = BOUND(pid->value, pid->min_value, pid->max_value);
 8004ace:	ed94 8b20 	vldr	d8, [r4, #128]	; 0x80
 8004ad2:	ec53 2b18 	vmov	r2, r3, d8
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	4639      	mov	r1, r7
 8004ada:	f7fc f827 	bl	8000b2c <__aeabi_dcmplt>
 8004ade:	b940      	cbnz	r0, 8004af2 <RhoPIDUpdate+0x12a>
 8004ae0:	4652      	mov	r2, sl
 8004ae2:	465b      	mov	r3, fp
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	4639      	mov	r1, r7
 8004ae8:	f7fc f83e 	bl	8000b68 <__aeabi_dcmpgt>
 8004aec:	b1b0      	cbz	r0, 8004b1c <RhoPIDUpdate+0x154>
 8004aee:	ec4b ab18 	vmov	d8, sl, fp
 8004af2:	ed84 8b10 	vstr	d8, [r4, #64]	; 0x40
    
    pid->prev_error = pid->error;
 8004af6:	e9c4 8918 	strd	r8, r9, [r4, #96]	; 0x60

    pid->total_error *= 0.9;
 8004afa:	a30c      	add	r3, pc, #48	; (adr r3, 8004b2c <RhoPIDUpdate+0x164>)
 8004afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b04:	f7fb fda0 	bl	8000648 <__aeabi_dmul>
 8004b08:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
}
 8004b0c:	b002      	add	sp, #8
 8004b0e:	ecbd 8b02 	vpop	{d8}
 8004b12:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
    pid->dv = ZDIV( ( pid->gain.kd * pid->delta_error ), pid->dt);
 8004b16:	2600      	movs	r6, #0
 8004b18:	4f03      	ldr	r7, [pc, #12]	; (8004b28 <RhoPIDUpdate+0x160>)
 8004b1a:	e7bb      	b.n	8004a94 <RhoPIDUpdate+0xcc>
        pid->value = BOUND(pid->value, pid->min_value, pid->max_value);
 8004b1c:	ec47 6b18 	vmov	d8, r6, r7
 8004b20:	e7e7      	b.n	8004af2 <RhoPIDUpdate+0x12a>
 8004b22:	bf00      	nop
 8004b24:	f3af 8000 	nop.w
 8004b28:	40900000 	.word	0x40900000
 8004b2c:	cccccccd 	.word	0xcccccccd
 8004b30:	3feccccc 	.word	0x3feccccc

08004b34 <GenerateCumulativeMomentsStatistics>:
#ifndef MIN
#define MIN(A,B) (A<B?A:B)
#endif

void GenerateCumulativeMomentsStatistics( floating_t v, floating_t i, floating_t *m0, floating_t *m1, floating_t *n )
{
 8004b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b38:	ec57 6b10 	vmov	r6, r7, d0
 8004b3c:	ec59 8b11 	vmov	r8, r9, d1
 8004b40:	4605      	mov	r5, r0
 8004b42:	460c      	mov	r4, r1
 8004b44:	4692      	mov	sl, r2
#ifdef __USE_RUNNING_AVERAGE__
    floating_t n_=1/(++(*n));
    *m0+=((v-*m0)*n_);
    *m1+=(((v*i)-*m1)*n_);
#else
    ++(*n);
 8004b46:	2200      	movs	r2, #0
 8004b48:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <GenerateCumulativeMomentsStatistics+0x54>)
 8004b4a:	e9da 0100 	ldrd	r0, r1, [sl]
 8004b4e:	f7fb fbc5 	bl	80002dc <__adddf3>
 8004b52:	e9ca 0100 	strd	r0, r1, [sl]
    *m0+=v;
 8004b56:	4632      	mov	r2, r6
 8004b58:	463b      	mov	r3, r7
 8004b5a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004b5e:	f7fb fbbd 	bl	80002dc <__adddf3>
 8004b62:	e9c5 0100 	strd	r0, r1, [r5]
    *m1+=v*i;
 8004b66:	4642      	mov	r2, r8
 8004b68:	464b      	mov	r3, r9
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	f7fb fd6b 	bl	8000648 <__aeabi_dmul>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004b7a:	f7fb fbaf 	bl	80002dc <__adddf3>
 8004b7e:	e9c4 0100 	strd	r0, r1, [r4]
#endif
}
 8004b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b86:	bf00      	nop
 8004b88:	3ff00000 	.word	0x3ff00000

08004b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004b8c:	480d      	ldr	r0, [pc, #52]	; (8004bc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004b8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b90:	480d      	ldr	r0, [pc, #52]	; (8004bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004b92:	490e      	ldr	r1, [pc, #56]	; (8004bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b94:	4a0e      	ldr	r2, [pc, #56]	; (8004bd0 <LoopForever+0xe>)
  movs r3, #0
 8004b96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004b98:	e002      	b.n	8004ba0 <LoopCopyDataInit>

08004b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b9e:	3304      	adds	r3, #4

08004ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ba4:	d3f9      	bcc.n	8004b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ba6:	4a0b      	ldr	r2, [pc, #44]	; (8004bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ba8:	4c0b      	ldr	r4, [pc, #44]	; (8004bd8 <LoopForever+0x16>)
  movs r3, #0
 8004baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bac:	e001      	b.n	8004bb2 <LoopFillZerobss>

08004bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bb0:	3204      	adds	r2, #4

08004bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bb4:	d3fb      	bcc.n	8004bae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004bb6:	f000 f8c5 	bl	8004d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bba:	f002 fc7f 	bl	80074bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004bbe:	f7fc fd8f 	bl	80016e0 <main>

08004bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8004bc2:	e7fe      	b.n	8004bc2 <LoopForever>
  ldr   r0, =_estack
 8004bc4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bcc:	20002010 	.word	0x20002010
  ldr r2, =_sidata
 8004bd0:	0800bc70 	.word	0x0800bc70
  ldr r2, =_sbss
 8004bd4:	20002010 	.word	0x20002010
  ldr r4, =_ebss
 8004bd8:	20002ab8 	.word	0x20002ab8

08004bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004bdc:	e7fe      	b.n	8004bdc <ADC1_2_IRQHandler>

08004bde <InitPlatform>:
/************************************************************************
 *                      Local Function Definitions                      *
 ***********************************************************************/
void InitPlatform( platform_t * platform, protocol_t host_communication_protocol, generic_handle_t host_communication_handle )
{
  *platform = (platform_t){ host_communication_protocol, host_communication_handle };
 8004bde:	7001      	strb	r1, [r0, #0]
 8004be0:	6042      	str	r2, [r0, #4]
}
 8004be2:	4770      	bx	lr

08004be4 <PerformHostCommand>:
}

platform_status_enum PerformHostCommand(
  host_command_type_enum command,
  platform_wait_priority_level_enum priority )
{
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	4606      	mov	r6, r0
  platform_status_enum status = NO_STATUS;
  uint16_t return_data = 0;
  host_command_t packet = { HOST_ADDRESS, THIS_ID, priority, command };
 8004bea:	2301      	movs	r3, #1
 8004bec:	f88d 3004 	strb.w	r3, [sp, #4]
 8004bf0:	f88d 3005 	strb.w	r3, [sp, #5]
 8004bf4:	f88d 1006 	strb.w	r1, [sp, #6]
 8004bf8:	f88d 0007 	strb.w	r0, [sp, #7]
  for( uint8_t i = 0;
 8004bfc:	2400      	movs	r4, #0
  platform_status_enum status = NO_STATUS;
 8004bfe:	4625      	mov	r5, r4
  for( uint8_t i = 0;
 8004c00:	e00d      	b.n	8004c1e <PerformHostCommand+0x3a>
    i++ )
  {
    switch( command )
    {
      case PING_HOST:
        return_data = PlatformFunctions.Host.Transmit( (uint8_t *)&packet, sizeof(host_command_t) );
 8004c02:	2104      	movs	r1, #4
 8004c04:	eb0d 0001 	add.w	r0, sp, r1
 8004c08:	f000 f816 	bl	8004c38 <TransmitToHost>
 8004c0c:	b280      	uxth	r0, r0
        if( return_data == 0 )
 8004c0e:	b170      	cbz	r0, 8004c2e <PerformHostCommand+0x4a>
        if( return_data == 0 )
        {
          status = INVALID_OUTPUT;
          continue;
        }
        status = OK;
 8004c10:	4635      	mov	r5, r6
        break;
      default:
        status = INVALID_INPUT;
        break;
    }
    PlatformFunctions.Wait( HOST_COMMAND_RETRY_TIME );
 8004c12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c16:	f7fc fb82 	bl	800131e <STM_Wait>
    i++ )
 8004c1a:	3401      	adds	r4, #1
 8004c1c:	b2e4      	uxtb	r4, r4
  for( uint8_t i = 0;
 8004c1e:	2c02      	cmp	r4, #2
 8004c20:	d807      	bhi.n	8004c32 <PerformHostCommand+0x4e>
    && status != OK;
 8004c22:	2d01      	cmp	r5, #1
 8004c24:	d005      	beq.n	8004c32 <PerformHostCommand+0x4e>
    switch( command )
 8004c26:	2e01      	cmp	r6, #1
 8004c28:	d0eb      	beq.n	8004c02 <PerformHostCommand+0x1e>
        status = INVALID_INPUT;
 8004c2a:	2503      	movs	r5, #3
 8004c2c:	e7f1      	b.n	8004c12 <PerformHostCommand+0x2e>
          status = FAILURE;
 8004c2e:	2502      	movs	r5, #2
 8004c30:	e7f3      	b.n	8004c1a <PerformHostCommand+0x36>
  }
  return status;
}
 8004c32:	4628      	mov	r0, r5
 8004c34:	b002      	add	sp, #8
 8004c36:	bd70      	pop	{r4, r5, r6, pc}

08004c38 <TransmitToHost>:

uint8_t TransmitToHost( uint8_t * buffer, uint16_t length )
{
 8004c38:	b508      	push	{r3, lr}
 8004c3a:	460a      	mov	r2, r1
#if HOST_COMMUNICATION_PROTOCOL == USART
  return PlatformFunctions.USART.Transmit( (UART_Handle_t *)Platform.HostHandle, buffer, length );
 8004c3c:	4601      	mov	r1, r0
 8004c3e:	4b02      	ldr	r3, [pc, #8]	; (8004c48 <TransmitToHost+0x10>)
 8004c40:	6858      	ldr	r0, [r3, #4]
 8004c42:	f7fc fb43 	bl	80012cc <STM_UartTxDMA>
#elif HOST_COMMUNICATION_PROTOCOL == USB
  return CDC_Transmit_FS(buffer, length);
#else
#error "Invalid host communication protocol!"
#endif
}
 8004c46:	bd08      	pop	{r3, pc}
 8004c48:	20002a9c 	.word	0x20002a9c

08004c4c <ReceiveFromHost>:
uint16_t ReceiveFromHost( uint8_t * buffer )
{
 8004c4c:	b508      	push	{r3, lr}
 8004c4e:	4601      	mov	r1, r0
  #if HOST_COMMUNICATION_PROTOCOL == USART
    return PlatformFunctions.USART.Receive( (UART_Handle_t *)Platform.HostHandle, buffer );
 8004c50:	4b02      	ldr	r3, [pc, #8]	; (8004c5c <ReceiveFromHost+0x10>)
 8004c52:	6858      	ldr	r0, [r3, #4]
 8004c54:	f7fc fb3c 	bl	80012d0 <STM_UartRxDMA>
    PlatformFunctions.I2C.Receive( (I2C_Handle_t *)Platform.HostHandle, HOST_ADDRESS, data, len );
    return 1;
  #else
  #error "Invalid host communication protocol!"
  #endif
}
 8004c58:	bd08      	pop	{r3, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20002a9c 	.word	0x20002a9c

08004c60 <WritePin>:
{
 8004c60:	b508      	push	{r3, lr}
 8004c62:	460a      	mov	r2, r1
	PLATFORM_SPECIFIC(WritePin)( gpio->port, gpio->pin, val );
 8004c64:	8881      	ldrh	r1, [r0, #4]
 8004c66:	6800      	ldr	r0, [r0, #0]
 8004c68:	f7fc fb4d 	bl	8001306 <STM_WritePin>
}
 8004c6c:	bd08      	pop	{r3, pc}

08004c6e <TogglePin>:
{
 8004c6e:	b508      	push	{r3, lr}
	PLATFORM_SPECIFIC(TogglePin)( gpio->port, gpio->pin );
 8004c70:	8881      	ldrh	r1, [r0, #4]
 8004c72:	6800      	ldr	r0, [r0, #0]
 8004c74:	f7fc fb4b 	bl	800130e <STM_TogglePin>
}
 8004c78:	bd08      	pop	{r3, pc}

08004c7a <SetPortMode>:
{
 8004c7a:	b508      	push	{r3, lr}
  PLATFORM_SPECIFIC(SetPortMode)( gpio->port, gpio->pin, val );
 8004c7c:	b2ca      	uxtb	r2, r1
 8004c7e:	8881      	ldrh	r1, [r0, #4]
 8004c80:	6800      	ldr	r0, [r0, #0]
 8004c82:	f7fc fb2f 	bl	80012e4 <STM_SetPortMode>
}
 8004c86:	bd08      	pop	{r3, pc}

08004c88 <InitSystem>:
#include "printers.h"

void InitSystem(
  system_t * system,
  system_states_list_t * state_list )
{
 8004c88:	b508      	push	{r3, lr}
  system->state_list = state_list;
 8004c8a:	6041      	str	r1, [r0, #4]
  SystemFunctions.State.Set( system, system->state );
 8004c8c:	7841      	ldrb	r1, [r0, #1]
 8004c8e:	f000 f83d 	bl	8004d0c <SetStateSystem>
}
 8004c92:	bd08      	pop	{r3, pc}

08004c94 <NextStateSystem>:

void NextStateSystem( system_t * system )
{
 8004c94:	b510      	push	{r4, lr}
 8004c96:	4604      	mov	r4, r0
  SystemFunctions.State.Enter( system, SystemFunctions.State.Get(system)->next );
 8004c98:	f000 f805 	bl	8004ca6 <GetStateSystem>
 8004c9c:	7841      	ldrb	r1, [r0, #1]
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f000 f80d 	bl	8004cbe <EnterStateSystem>
}
 8004ca4:	bd10      	pop	{r4, pc}

08004ca6 <GetStateSystem>:

system_state_t * GetStateSystem( system_t * system )
{
 8004ca6:	b508      	push	{r3, lr}
  return SystemFunctions.State.GetFromList( system, system->state );
 8004ca8:	7841      	ldrb	r1, [r0, #1]
 8004caa:	f000 f81a 	bl	8004ce2 <GetStateFromListSystem>
}
 8004cae:	bd08      	pop	{r3, pc}

08004cb0 <PerformStateSystem>:
    LOG(STATE_DEBUG, "Entering %s\r\n", system_state_enum_strings[new_state]);
  system->state = new_state;
}

void PerformStateSystem( system_t * system )
{
 8004cb0:	b508      	push	{r3, lr}
  void (*routine)(void) = SystemFunctions.State.Get(system)->routine;
 8004cb2:	f7ff fff8 	bl	8004ca6 <GetStateSystem>
 8004cb6:	6843      	ldr	r3, [r0, #4]
  if( routine != NULL ) routine();
 8004cb8:	b103      	cbz	r3, 8004cbc <PerformStateSystem+0xc>
 8004cba:	4798      	blx	r3
}
 8004cbc:	bd08      	pop	{r3, pc}

08004cbe <EnterStateSystem>:

void EnterStateSystem( system_t * system, system_state_enum new_state )
{
 8004cbe:	b510      	push	{r4, lr}
 8004cc0:	4604      	mov	r4, r0
  SystemFunctions.State.Set( system, new_state );
 8004cc2:	f000 f823 	bl	8004d0c <SetStateSystem>
  SystemFunctions.State.Perform( system );
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f7ff fff2 	bl	8004cb0 <PerformStateSystem>
}
 8004ccc:	bd10      	pop	{r4, pc}

08004cce <IsInStateSystem>:

bool IsInStateSystem( system_t * system, system_state_enum check_state )
{
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	460c      	mov	r4, r1
  return ( SystemFunctions.State.Get( system )->state == check_state );
 8004cd2:	f7ff ffe8 	bl	8004ca6 <GetStateSystem>
 8004cd6:	7800      	ldrb	r0, [r0, #0]
}
 8004cd8:	42a0      	cmp	r0, r4
 8004cda:	bf14      	ite	ne
 8004cdc:	2000      	movne	r0, #0
 8004cde:	2001      	moveq	r0, #1
 8004ce0:	bd10      	pop	{r4, pc}

08004ce2 <GetStateFromListSystem>:
system_state_t * GetStateFromListSystem( system_t * system, system_state_enum state )
{
    system_state_t * state_type;
    /* Cycle state list to find specified state.
        If not found, return is ERROR_STATE */
    for( uint8_t i = 0; i < SYS_ERROR; i++ )
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2b07      	cmp	r3, #7
 8004ce6:	d80f      	bhi.n	8004d08 <GetStateFromListSystem+0x26>
{
 8004ce8:	b410      	push	{r4}
    {
        state_type = &(*system->state_list)[i];
 8004cea:	6842      	ldr	r2, [r0, #4]
 8004cec:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
        if( state_type->state == state ) break;
 8004cf0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8004cf4:	428a      	cmp	r2, r1
 8004cf6:	d003      	beq.n	8004d00 <GetStateFromListSystem+0x1e>
    for( uint8_t i = 0; i < SYS_ERROR; i++ )
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b07      	cmp	r3, #7
 8004cfe:	d9f4      	bls.n	8004cea <GetStateFromListSystem+0x8>
    }
    return state_type;
}
 8004d00:	4620      	mov	r0, r4
 8004d02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	4620      	mov	r0, r4
 8004d0a:	4770      	bx	lr

08004d0c <SetStateSystem>:
{
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	4605      	mov	r5, r0
 8004d10:	460c      	mov	r4, r1
  if( system->state != new_state )
 8004d12:	7843      	ldrb	r3, [r0, #1]
 8004d14:	428b      	cmp	r3, r1
 8004d16:	d00e      	beq.n	8004d36 <SetStateSystem+0x2a>
    LOG(STATE_DEBUG, "Entering %s\r\n", system_state_enum_strings[new_state]);
 8004d18:	2603      	movs	r6, #3
 8004d1a:	e004      	b.n	8004d26 <SetStateSystem+0x1a>
 8004d1c:	2009      	movs	r0, #9
 8004d1e:	f003 f93b 	bl	8007f98 <putchar>
 8004d22:	3601      	adds	r6, #1
 8004d24:	b2f6      	uxtb	r6, r6
 8004d26:	2e03      	cmp	r6, #3
 8004d28:	d9f8      	bls.n	8004d1c <SetStateSystem+0x10>
 8004d2a:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <SetStateSystem+0x30>)
 8004d2c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8004d30:	4803      	ldr	r0, [pc, #12]	; (8004d40 <SetStateSystem+0x34>)
 8004d32:	f003 f919 	bl	8007f68 <iprintf>
  system->state = new_state;
 8004d36:	706c      	strb	r4, [r5, #1]
}
 8004d38:	bd70      	pop	{r4, r5, r6, pc}
 8004d3a:	bf00      	nop
 8004d3c:	0800b7d0 	.word	0x0800b7d0
 8004d40:	0800b748 	.word	0x0800b748

08004d44 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004d44:	4a03      	ldr	r2, [pc, #12]	; (8004d54 <SystemInit+0x10>)
 8004d46:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004d4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d52:	4770      	bx	lr
 8004d54:	e000ed00 	.word	0xe000ed00

08004d58 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8004d58:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <HAL_InitTick+0x44>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	b90b      	cbnz	r3, 8004d62 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d5e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004d60:	4770      	bx	lr
{
 8004d62:	b510      	push	{r4, lr}
 8004d64:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004d66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d6e:	4a0c      	ldr	r2, [pc, #48]	; (8004da0 <HAL_InitTick+0x48>)
 8004d70:	6810      	ldr	r0, [r2, #0]
 8004d72:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d76:	f000 f8b3 	bl	8004ee0 <HAL_SYSTICK_Config>
 8004d7a:	b968      	cbnz	r0, 8004d98 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d7c:	2c0f      	cmp	r4, #15
 8004d7e:	d901      	bls.n	8004d84 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8004d80:	2001      	movs	r0, #1
 8004d82:	e00a      	b.n	8004d9a <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d84:	2200      	movs	r2, #0
 8004d86:	4621      	mov	r1, r4
 8004d88:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8c:	f000 f854 	bl	8004e38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d90:	4b04      	ldr	r3, [pc, #16]	; (8004da4 <HAL_InitTick+0x4c>)
 8004d92:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8004d94:	2000      	movs	r0, #0
 8004d96:	e000      	b.n	8004d9a <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8004d98:	2001      	movs	r0, #1
}
 8004d9a:	bd10      	pop	{r4, pc}
 8004d9c:	20001e34 	.word	0x20001e34
 8004da0:	20001e30 	.word	0x20001e30
 8004da4:	20001e38 	.word	0x20001e38

08004da8 <HAL_Init>:
{
 8004da8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004daa:	2003      	movs	r0, #3
 8004dac:	f000 f832 	bl	8004e14 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004db0:	2000      	movs	r0, #0
 8004db2:	f7ff ffd1 	bl	8004d58 <HAL_InitTick>
 8004db6:	b110      	cbz	r0, 8004dbe <HAL_Init+0x16>
    status = HAL_ERROR;
 8004db8:	2401      	movs	r4, #1
}
 8004dba:	4620      	mov	r0, r4
 8004dbc:	bd10      	pop	{r4, pc}
 8004dbe:	4604      	mov	r4, r0
    HAL_MspInit();
 8004dc0:	f7fc fcae 	bl	8001720 <HAL_MspInit>
 8004dc4:	e7f9      	b.n	8004dba <HAL_Init+0x12>
	...

08004dc8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004dc8:	4a03      	ldr	r2, [pc, #12]	; (8004dd8 <HAL_IncTick+0x10>)
 8004dca:	6813      	ldr	r3, [r2, #0]
 8004dcc:	4903      	ldr	r1, [pc, #12]	; (8004ddc <HAL_IncTick+0x14>)
 8004dce:	6809      	ldr	r1, [r1, #0]
 8004dd0:	440b      	add	r3, r1
 8004dd2:	6013      	str	r3, [r2, #0]
}
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20002aa4 	.word	0x20002aa4
 8004ddc:	20001e34 	.word	0x20001e34

08004de0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004de0:	4b01      	ldr	r3, [pc, #4]	; (8004de8 <HAL_GetTick+0x8>)
 8004de2:	6818      	ldr	r0, [r3, #0]
}
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	20002aa4 	.word	0x20002aa4

08004dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004df0:	f7ff fff6 	bl	8004de0 <HAL_GetTick>
 8004df4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004df6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004dfa:	d002      	beq.n	8004e02 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dfc:	4b04      	ldr	r3, [pc, #16]	; (8004e10 <HAL_Delay+0x24>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e02:	f7ff ffed 	bl	8004de0 <HAL_GetTick>
 8004e06:	1b40      	subs	r0, r0, r5
 8004e08:	42a0      	cmp	r0, r4
 8004e0a:	d3fa      	bcc.n	8004e02 <HAL_Delay+0x16>
  {
  }
}
 8004e0c:	bd38      	pop	{r3, r4, r5, pc}
 8004e0e:	bf00      	nop
 8004e10:	20001e34 	.word	0x20001e34

08004e14 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e14:	4a07      	ldr	r2, [pc, #28]	; (8004e34 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004e16:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e18:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004e1c:	041b      	lsls	r3, r3, #16
 8004e1e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e20:	0200      	lsls	r0, r0, #8
 8004e22:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e26:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004e30:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004e32:	4770      	bx	lr
 8004e34:	e000ed00 	.word	0xe000ed00

08004e38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e38:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e3a:	4b17      	ldr	r3, [pc, #92]	; (8004e98 <HAL_NVIC_SetPriority+0x60>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e42:	f1c3 0407 	rsb	r4, r3, #7
 8004e46:	2c04      	cmp	r4, #4
 8004e48:	bf28      	it	cs
 8004e4a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e4c:	1d1d      	adds	r5, r3, #4
 8004e4e:	2d06      	cmp	r5, #6
 8004e50:	d918      	bls.n	8004e84 <HAL_NVIC_SetPriority+0x4c>
 8004e52:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e54:	f04f 35ff 	mov.w	r5, #4294967295
 8004e58:	fa05 f404 	lsl.w	r4, r5, r4
 8004e5c:	ea21 0104 	bic.w	r1, r1, r4
 8004e60:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e62:	fa05 f303 	lsl.w	r3, r5, r3
 8004e66:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e6a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	db0b      	blt.n	8004e88 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e70:	0109      	lsls	r1, r1, #4
 8004e72:	b2c9      	uxtb	r1, r1
 8004e74:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004e78:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004e7c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004e80:	bc30      	pop	{r4, r5}
 8004e82:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e84:	2300      	movs	r3, #0
 8004e86:	e7e5      	b.n	8004e54 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e88:	f000 000f 	and.w	r0, r0, #15
 8004e8c:	0109      	lsls	r1, r1, #4
 8004e8e:	b2c9      	uxtb	r1, r1
 8004e90:	4b02      	ldr	r3, [pc, #8]	; (8004e9c <HAL_NVIC_SetPriority+0x64>)
 8004e92:	5419      	strb	r1, [r3, r0]
 8004e94:	e7f4      	b.n	8004e80 <HAL_NVIC_SetPriority+0x48>
 8004e96:	bf00      	nop
 8004e98:	e000ed00 	.word	0xe000ed00
 8004e9c:	e000ed14 	.word	0xe000ed14

08004ea0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	db07      	blt.n	8004eb4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ea4:	f000 021f 	and.w	r2, r0, #31
 8004ea8:	0940      	lsrs	r0, r0, #5
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4093      	lsls	r3, r2
 8004eae:	4a02      	ldr	r2, [pc, #8]	; (8004eb8 <HAL_NVIC_EnableIRQ+0x18>)
 8004eb0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	e000e100 	.word	0xe000e100

08004ebc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	db0c      	blt.n	8004eda <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ec0:	f000 021f 	and.w	r2, r0, #31
 8004ec4:	0940      	lsrs	r0, r0, #5
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	4093      	lsls	r3, r2
 8004eca:	3020      	adds	r0, #32
 8004ecc:	4a03      	ldr	r2, [pc, #12]	; (8004edc <HAL_NVIC_DisableIRQ+0x20>)
 8004ece:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ed2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004ed6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004eda:	4770      	bx	lr
 8004edc:	e000e100 	.word	0xe000e100

08004ee0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ee0:	3801      	subs	r0, #1
 8004ee2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004ee6:	d20a      	bcs.n	8004efe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ee8:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <HAL_SYSTICK_Config+0x24>)
 8004eea:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eec:	4a06      	ldr	r2, [pc, #24]	; (8004f08 <HAL_SYSTICK_Config+0x28>)
 8004eee:	21f0      	movs	r1, #240	; 0xf0
 8004ef0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ef8:	2207      	movs	r2, #7
 8004efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004efc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004efe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	e000e010 	.word	0xe000e010
 8004f08:	e000ed00 	.word	0xe000ed00

08004f0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f0c:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f0e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8004f10:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8004f12:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004f14:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8004f16:	b114      	cbz	r4, 8004f1e <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f18:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8004f1a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004f1c:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f1e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004f20:	f004 051f 	and.w	r5, r4, #31
 8004f24:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8004f26:	2401      	movs	r4, #1
 8004f28:	40ac      	lsls	r4, r5
 8004f2a:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f2c:	6804      	ldr	r4, [r0, #0]
 8004f2e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f30:	6883      	ldr	r3, [r0, #8]
 8004f32:	2b10      	cmp	r3, #16
 8004f34:	d005      	beq.n	8004f42 <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004f36:	6803      	ldr	r3, [r0, #0]
 8004f38:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004f3a:	6803      	ldr	r3, [r0, #0]
 8004f3c:	60da      	str	r2, [r3, #12]
  }
}
 8004f3e:	bc70      	pop	{r4, r5, r6}
 8004f40:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8004f42:	6803      	ldr	r3, [r0, #0]
 8004f44:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004f46:	6803      	ldr	r3, [r0, #0]
 8004f48:	60d9      	str	r1, [r3, #12]
 8004f4a:	e7f8      	b.n	8004f3e <DMA_SetConfig+0x32>

08004f4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004f4c:	6803      	ldr	r3, [r0, #0]
 8004f4e:	4a0c      	ldr	r2, [pc, #48]	; (8004f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d813      	bhi.n	8004f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004f54:	490b      	ldr	r1, [pc, #44]	; (8004f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	3b08      	subs	r3, #8
 8004f5a:	4a0b      	ldr	r2, [pc, #44]	; (8004f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 8004f5c:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004f60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004f62:	f022 0203 	bic.w	r2, r2, #3
 8004f66:	440a      	add	r2, r1
 8004f68:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f6a:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8004f6c:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004f6e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8004f72:	2201      	movs	r2, #1
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004f7a:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004f7c:	4904      	ldr	r1, [pc, #16]	; (8004f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8004f7e:	e7ea      	b.n	8004f56 <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 8004f80:	40020407 	.word	0x40020407
 8004f84:	40020800 	.word	0x40020800
 8004f88:	cccccccd 	.word	0xcccccccd
 8004f8c:	40020880 	.word	0x40020880
 8004f90:	40020820 	.word	0x40020820

08004f94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f94:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f96:	4a07      	ldr	r2, [pc, #28]	; (8004fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8004f98:	441a      	add	r2, r3
 8004f9a:	0092      	lsls	r2, r2, #2
 8004f9c:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f9e:	4a06      	ldr	r2, [pc, #24]	; (8004fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004fa0:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	f003 031f 	and.w	r3, r3, #31
 8004fa8:	2201      	movs	r2, #1
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	1000823f 	.word	0x1000823f
 8004fb8:	40020940 	.word	0x40020940

08004fbc <HAL_DMA_Init>:
  if (hdma == NULL)
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d05b      	beq.n	8005078 <HAL_DMA_Init+0xbc>
{
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004fc4:	6801      	ldr	r1, [r0, #0]
 8004fc6:	4b2d      	ldr	r3, [pc, #180]	; (800507c <HAL_DMA_Init+0xc0>)
 8004fc8:	4299      	cmp	r1, r3
 8004fca:	d83d      	bhi.n	8005048 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004fcc:	4b2c      	ldr	r3, [pc, #176]	; (8005080 <HAL_DMA_Init+0xc4>)
 8004fce:	440b      	add	r3, r1
 8004fd0:	4a2c      	ldr	r2, [pc, #176]	; (8005084 <HAL_DMA_Init+0xc8>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	091b      	lsrs	r3, r3, #4
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004fdc:	4b2a      	ldr	r3, [pc, #168]	; (8005088 <HAL_DMA_Init+0xcc>)
 8004fde:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8004fe6:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004fe8:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8004fec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8004ff0:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ff2:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8004ff4:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ff6:	6920      	ldr	r0, [r4, #16]
 8004ff8:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ffa:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ffc:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ffe:	69a0      	ldr	r0, [r4, #24]
 8005000:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8005002:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005004:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8005006:	6a20      	ldr	r0, [r4, #32]
 8005008:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 800500a:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 800500c:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800500e:	4620      	mov	r0, r4
 8005010:	f7ff ff9c 	bl	8004f4c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005014:	68a3      	ldr	r3, [r4, #8]
 8005016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800501a:	d020      	beq.n	800505e <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800501c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800501e:	7922      	ldrb	r2, [r4, #4]
 8005020:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005022:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005024:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005026:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	3b01      	subs	r3, #1
 800502c:	2b03      	cmp	r3, #3
 800502e:	d919      	bls.n	8005064 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005034:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005036:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005038:	2000      	movs	r0, #0
 800503a:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 800503c:	2301      	movs	r3, #1
 800503e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8005042:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8005046:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005048:	4b10      	ldr	r3, [pc, #64]	; (800508c <HAL_DMA_Init+0xd0>)
 800504a:	440b      	add	r3, r1
 800504c:	4a0d      	ldr	r2, [pc, #52]	; (8005084 <HAL_DMA_Init+0xc8>)
 800504e:	fba2 2303 	umull	r2, r3, r2, r3
 8005052:	091b      	lsrs	r3, r3, #4
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005058:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <HAL_DMA_Init+0xd4>)
 800505a:	6403      	str	r3, [r0, #64]	; 0x40
 800505c:	e7c0      	b.n	8004fe0 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800505e:	2300      	movs	r3, #0
 8005060:	6063      	str	r3, [r4, #4]
 8005062:	e7db      	b.n	800501c <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005064:	4620      	mov	r0, r4
 8005066:	f7ff ff95 	bl	8004f94 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800506a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005070:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005072:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	e7df      	b.n	8005038 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8005078:	2001      	movs	r0, #1
}
 800507a:	4770      	bx	lr
 800507c:	40020407 	.word	0x40020407
 8005080:	bffdfff8 	.word	0xbffdfff8
 8005084:	cccccccd 	.word	0xcccccccd
 8005088:	40020000 	.word	0x40020000
 800508c:	bffdfbf8 	.word	0xbffdfbf8
 8005090:	40020400 	.word	0x40020400

08005094 <HAL_DMA_Start_IT>:
{
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8005098:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 800509c:	2801      	cmp	r0, #1
 800509e:	d041      	beq.n	8005124 <HAL_DMA_Start_IT+0x90>
 80050a0:	2001      	movs	r0, #1
 80050a2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80050a6:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 80050aa:	b2c0      	uxtb	r0, r0
 80050ac:	2801      	cmp	r0, #1
 80050ae:	d004      	beq.n	80050ba <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 80050b0:	2300      	movs	r3, #0
 80050b2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 80050b6:	2002      	movs	r0, #2
}
 80050b8:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80050ba:	2002      	movs	r0, #2
 80050bc:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050c0:	2000      	movs	r0, #0
 80050c2:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80050c4:	6825      	ldr	r5, [r4, #0]
 80050c6:	6828      	ldr	r0, [r5, #0]
 80050c8:	f020 0001 	bic.w	r0, r0, #1
 80050cc:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050ce:	4620      	mov	r0, r4
 80050d0:	f7ff ff1c 	bl	8004f0c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80050d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050d6:	b1d3      	cbz	r3, 800510e <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050d8:	6822      	ldr	r2, [r4, #0]
 80050da:	6813      	ldr	r3, [r2, #0]
 80050dc:	f043 030e 	orr.w	r3, r3, #14
 80050e0:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80050ea:	d003      	beq.n	80050f4 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050f2:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80050f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80050f6:	b11b      	cbz	r3, 8005100 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050fe:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8005100:	6822      	ldr	r2, [r4, #0]
 8005102:	6813      	ldr	r3, [r2, #0]
 8005104:	f043 0301 	orr.w	r3, r3, #1
 8005108:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800510a:	2000      	movs	r0, #0
 800510c:	e7d4      	b.n	80050b8 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800510e:	6822      	ldr	r2, [r4, #0]
 8005110:	6813      	ldr	r3, [r2, #0]
 8005112:	f023 0304 	bic.w	r3, r3, #4
 8005116:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005118:	6822      	ldr	r2, [r4, #0]
 800511a:	6813      	ldr	r3, [r2, #0]
 800511c:	f043 030a 	orr.w	r3, r3, #10
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e7de      	b.n	80050e2 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8005124:	2002      	movs	r0, #2
 8005126:	e7c7      	b.n	80050b8 <HAL_DMA_Start_IT+0x24>

08005128 <HAL_DMA_Abort>:
{
 8005128:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800512a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	2a02      	cmp	r2, #2
 8005132:	d009      	beq.n	8005148 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005134:	2204      	movs	r2, #4
 8005136:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8005138:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8005146:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005148:	6801      	ldr	r1, [r0, #0]
 800514a:	680a      	ldr	r2, [r1, #0]
 800514c:	f022 020e 	bic.w	r2, r2, #14
 8005150:	600a      	str	r2, [r1, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005152:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005154:	680a      	ldr	r2, [r1, #0]
 8005156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800515a:	600a      	str	r2, [r1, #0]
     __HAL_DMA_DISABLE(hdma);
 800515c:	6801      	ldr	r1, [r0, #0]
 800515e:	680a      	ldr	r2, [r1, #0]
 8005160:	f022 0201 	bic.w	r2, r2, #1
 8005164:	600a      	str	r2, [r1, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005166:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005168:	f002 011f 	and.w	r1, r2, #31
 800516c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800516e:	2201      	movs	r2, #1
 8005170:	408a      	lsls	r2, r1
 8005172:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005174:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005176:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005178:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 800517a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800517c:	b142      	cbz	r2, 8005190 <HAL_DMA_Abort+0x68>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800517e:	6811      	ldr	r1, [r2, #0]
 8005180:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005184:	6011      	str	r1, [r2, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005186:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005188:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800518a:	6051      	str	r1, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800518c:	2000      	movs	r0, #0
 800518e:	e7d4      	b.n	800513a <HAL_DMA_Abort+0x12>
 8005190:	2000      	movs	r0, #0
 8005192:	e7d2      	b.n	800513a <HAL_DMA_Abort+0x12>

08005194 <HAL_DMA_Abort_IT>:
{
 8005194:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005196:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d009      	beq.n	80051b4 <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051a0:	2304      	movs	r3, #4
 80051a2:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80051a4:	2301      	movs	r3, #1
 80051a6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80051aa:	2200      	movs	r2, #0
 80051ac:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 80051b0:	4618      	mov	r0, r3
}
 80051b2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051b4:	6802      	ldr	r2, [r0, #0]
 80051b6:	6813      	ldr	r3, [r2, #0]
 80051b8:	f023 030e 	bic.w	r3, r3, #14
 80051bc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80051be:	6802      	ldr	r2, [r0, #0]
 80051c0:	6813      	ldr	r3, [r2, #0]
 80051c2:	f023 0301 	bic.w	r3, r3, #1
 80051c6:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051c8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80051ca:	6813      	ldr	r3, [r2, #0]
 80051cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051d0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80051d4:	f003 021f 	and.w	r2, r3, #31
 80051d8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80051da:	2301      	movs	r3, #1
 80051dc:	4093      	lsls	r3, r2
 80051de:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051e0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80051e2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80051e4:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80051e6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80051e8:	b133      	cbz	r3, 80051f8 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051f0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051f2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80051f4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80051f6:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80051fe:	2300      	movs	r3, #0
 8005200:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8005204:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005206:	b113      	cbz	r3, 800520e <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 8005208:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800520a:	2000      	movs	r0, #0
 800520c:	e7d1      	b.n	80051b2 <HAL_DMA_Abort_IT+0x1e>
 800520e:	2000      	movs	r0, #0
 8005210:	e7cf      	b.n	80051b2 <HAL_DMA_Abort_IT+0x1e>

08005212 <HAL_DMA_IRQHandler>:
{
 8005212:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005214:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005216:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005218:	6804      	ldr	r4, [r0, #0]
 800521a:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800521c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	2204      	movs	r2, #4
 8005224:	409a      	lsls	r2, r3
 8005226:	420a      	tst	r2, r1
 8005228:	d015      	beq.n	8005256 <HAL_DMA_IRQHandler+0x44>
 800522a:	f015 0f04 	tst.w	r5, #4
 800522e:	d012      	beq.n	8005256 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	f013 0f20 	tst.w	r3, #32
 8005236:	d103      	bne.n	8005240 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	f023 0304 	bic.w	r3, r3, #4
 800523e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005240:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005242:	f003 021f 	and.w	r2, r3, #31
 8005246:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005248:	2304      	movs	r3, #4
 800524a:	4093      	lsls	r3, r2
 800524c:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800524e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005250:	b103      	cbz	r3, 8005254 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8005252:	4798      	blx	r3
}
 8005254:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005256:	2202      	movs	r2, #2
 8005258:	409a      	lsls	r2, r3
 800525a:	420a      	tst	r2, r1
 800525c:	d01c      	beq.n	8005298 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 800525e:	f015 0f02 	tst.w	r5, #2
 8005262:	d019      	beq.n	8005298 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	f013 0f20 	tst.w	r3, #32
 800526a:	d106      	bne.n	800527a <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	f023 030a 	bic.w	r3, r3, #10
 8005272:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005274:	2301      	movs	r3, #1
 8005276:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800527a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800527c:	f003 021f 	and.w	r2, r3, #31
 8005280:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005282:	2302      	movs	r3, #2
 8005284:	4093      	lsls	r3, r2
 8005286:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8005288:	2300      	movs	r3, #0
 800528a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800528e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0df      	beq.n	8005254 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8005294:	4798      	blx	r3
 8005296:	e7dd      	b.n	8005254 <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005298:	2208      	movs	r2, #8
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	420b      	tst	r3, r1
 80052a0:	d0d8      	beq.n	8005254 <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 80052a2:	f015 0f08 	tst.w	r5, #8
 80052a6:	d0d5      	beq.n	8005254 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	f023 030e 	bic.w	r3, r3, #14
 80052ae:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80052b2:	f003 031f 	and.w	r3, r3, #31
 80052b6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80052b8:	2201      	movs	r2, #1
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052c0:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80052c2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80052c6:	2300      	movs	r3, #0
 80052c8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80052cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0c0      	beq.n	8005254 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80052d2:	4798      	blx	r3
  return;
 80052d4:	e7be      	b.n	8005254 <HAL_DMA_IRQHandler+0x42>
	...

080052d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052da:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80052dc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80052de:	e036      	b.n	800534e <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052e0:	2405      	movs	r4, #5
 80052e2:	e000      	b.n	80052e6 <HAL_GPIO_Init+0xe>
 80052e4:	2400      	movs	r4, #0
 80052e6:	40b4      	lsls	r4, r6
 80052e8:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052ea:	3502      	adds	r5, #2
 80052ec:	4e5f      	ldr	r6, [pc, #380]	; (800546c <HAL_GPIO_Init+0x194>)
 80052ee:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80052f2:	4c5f      	ldr	r4, [pc, #380]	; (8005470 <HAL_GPIO_Init+0x198>)
 80052f4:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80052f6:	43d4      	mvns	r4, r2
 80052f8:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052fc:	684f      	ldr	r7, [r1, #4]
 80052fe:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8005302:	d001      	beq.n	8005308 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8005304:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8005308:	4d59      	ldr	r5, [pc, #356]	; (8005470 <HAL_GPIO_Init+0x198>)
 800530a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 800530c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800530e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005312:	684f      	ldr	r7, [r1, #4]
 8005314:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8005318:	d001      	beq.n	800531e <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 800531a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800531e:	4d54      	ldr	r5, [pc, #336]	; (8005470 <HAL_GPIO_Init+0x198>)
 8005320:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005322:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8005324:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005328:	684f      	ldr	r7, [r1, #4]
 800532a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800532e:	d001      	beq.n	8005334 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8005330:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8005334:	4d4e      	ldr	r5, [pc, #312]	; (8005470 <HAL_GPIO_Init+0x198>)
 8005336:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8005338:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800533a:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800533c:	684e      	ldr	r6, [r1, #4]
 800533e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8005342:	d001      	beq.n	8005348 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8005344:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8005348:	4a49      	ldr	r2, [pc, #292]	; (8005470 <HAL_GPIO_Init+0x198>)
 800534a:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 800534c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800534e:	680a      	ldr	r2, [r1, #0]
 8005350:	fa32 f403 	lsrs.w	r4, r2, r3
 8005354:	f000 8087 	beq.w	8005466 <HAL_GPIO_Init+0x18e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005358:	2401      	movs	r4, #1
 800535a:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 800535c:	4022      	ands	r2, r4
 800535e:	d0f5      	beq.n	800534c <HAL_GPIO_Init+0x74>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005360:	684d      	ldr	r5, [r1, #4]
 8005362:	1e6e      	subs	r6, r5, #1
 8005364:	2e01      	cmp	r6, #1
 8005366:	d903      	bls.n	8005370 <HAL_GPIO_Init+0x98>
 8005368:	2d11      	cmp	r5, #17
 800536a:	d001      	beq.n	8005370 <HAL_GPIO_Init+0x98>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800536c:	2d12      	cmp	r5, #18
 800536e:	d112      	bne.n	8005396 <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR;
 8005370:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005372:	005f      	lsls	r7, r3, #1
 8005374:	2503      	movs	r5, #3
 8005376:	40bd      	lsls	r5, r7
 8005378:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800537c:	68cd      	ldr	r5, [r1, #12]
 800537e:	40bd      	lsls	r5, r7
 8005380:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8005382:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8005384:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005386:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800538a:	684d      	ldr	r5, [r1, #4]
 800538c:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8005390:	409c      	lsls	r4, r3
 8005392:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8005394:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8005396:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005398:	005e      	lsls	r6, r3, #1
 800539a:	2503      	movs	r5, #3
 800539c:	40b5      	lsls	r5, r6
 800539e:	43ec      	mvns	r4, r5
 80053a0:	ea27 0705 	bic.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053a4:	688d      	ldr	r5, [r1, #8]
 80053a6:	40b5      	lsls	r5, r6
 80053a8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80053aa:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053ac:	684d      	ldr	r5, [r1, #4]
 80053ae:	2d02      	cmp	r5, #2
 80053b0:	d001      	beq.n	80053b6 <HAL_GPIO_Init+0xde>
 80053b2:	2d12      	cmp	r5, #18
 80053b4:	d113      	bne.n	80053de <HAL_GPIO_Init+0x106>
        temp = GPIOx->AFR[position >> 3U];
 80053b6:	08df      	lsrs	r7, r3, #3
 80053b8:	3708      	adds	r7, #8
 80053ba:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053be:	f003 0507 	and.w	r5, r3, #7
 80053c2:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 80053c6:	250f      	movs	r5, #15
 80053c8:	fa05 f50c 	lsl.w	r5, r5, ip
 80053cc:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053d0:	690d      	ldr	r5, [r1, #16]
 80053d2:	fa05 f50c 	lsl.w	r5, r5, ip
 80053d6:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80053da:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 80053de:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053e0:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053e2:	684c      	ldr	r4, [r1, #4]
 80053e4:	f004 0403 	and.w	r4, r4, #3
 80053e8:	40b4      	lsls	r4, r6
 80053ea:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 80053ec:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80053ee:	684c      	ldr	r4, [r1, #4]
 80053f0:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80053f4:	d0aa      	beq.n	800534c <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053f6:	4c1f      	ldr	r4, [pc, #124]	; (8005474 <HAL_GPIO_Init+0x19c>)
 80053f8:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80053fa:	f045 0501 	orr.w	r5, r5, #1
 80053fe:	6625      	str	r5, [r4, #96]	; 0x60
 8005400:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8005402:	f004 0401 	and.w	r4, r4, #1
 8005406:	9401      	str	r4, [sp, #4]
 8005408:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800540a:	089d      	lsrs	r5, r3, #2
 800540c:	1cae      	adds	r6, r5, #2
 800540e:	4c17      	ldr	r4, [pc, #92]	; (800546c <HAL_GPIO_Init+0x194>)
 8005410:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005414:	f003 0403 	and.w	r4, r3, #3
 8005418:	00a6      	lsls	r6, r4, #2
 800541a:	240f      	movs	r4, #15
 800541c:	40b4      	lsls	r4, r6
 800541e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005422:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8005426:	f43f af5d 	beq.w	80052e4 <HAL_GPIO_Init+0xc>
 800542a:	4c13      	ldr	r4, [pc, #76]	; (8005478 <HAL_GPIO_Init+0x1a0>)
 800542c:	42a0      	cmp	r0, r4
 800542e:	d012      	beq.n	8005456 <HAL_GPIO_Init+0x17e>
 8005430:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005434:	42a0      	cmp	r0, r4
 8005436:	d010      	beq.n	800545a <HAL_GPIO_Init+0x182>
 8005438:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800543c:	42a0      	cmp	r0, r4
 800543e:	d00e      	beq.n	800545e <HAL_GPIO_Init+0x186>
 8005440:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005444:	42a0      	cmp	r0, r4
 8005446:	d00c      	beq.n	8005462 <HAL_GPIO_Init+0x18a>
 8005448:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800544c:	42a0      	cmp	r0, r4
 800544e:	f43f af47 	beq.w	80052e0 <HAL_GPIO_Init+0x8>
 8005452:	2406      	movs	r4, #6
 8005454:	e747      	b.n	80052e6 <HAL_GPIO_Init+0xe>
 8005456:	2401      	movs	r4, #1
 8005458:	e745      	b.n	80052e6 <HAL_GPIO_Init+0xe>
 800545a:	2402      	movs	r4, #2
 800545c:	e743      	b.n	80052e6 <HAL_GPIO_Init+0xe>
 800545e:	2403      	movs	r4, #3
 8005460:	e741      	b.n	80052e6 <HAL_GPIO_Init+0xe>
 8005462:	2404      	movs	r4, #4
 8005464:	e73f      	b.n	80052e6 <HAL_GPIO_Init+0xe>
  }
}
 8005466:	b003      	add	sp, #12
 8005468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800546a:	bf00      	nop
 800546c:	40010000 	.word	0x40010000
 8005470:	40010400 	.word	0x40010400
 8005474:	40021000 	.word	0x40021000
 8005478:	48000400 	.word	0x48000400

0800547c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800547c:	b10a      	cbz	r2, 8005482 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800547e:	6181      	str	r1, [r0, #24]
 8005480:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005482:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8005484:	4770      	bx	lr

08005486 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005486:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005488:	ea01 0203 	and.w	r2, r1, r3
 800548c:	ea21 0103 	bic.w	r1, r1, r3
 8005490:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005494:	6181      	str	r1, [r0, #24]
}
 8005496:	4770      	bx	lr

08005498 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005498:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800549a:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	4203      	tst	r3, r0
 80054a0:	d100      	bne.n	80054a4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80054a2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054a4:	4b02      	ldr	r3, [pc, #8]	; (80054b0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80054a6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054a8:	f7fb fe76 	bl	8001198 <HAL_GPIO_EXTI_Callback>
}
 80054ac:	e7f9      	b.n	80054a2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80054ae:	bf00      	nop
 80054b0:	40010400 	.word	0x40010400

080054b4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054b4:	6803      	ldr	r3, [r0, #0]
 80054b6:	699a      	ldr	r2, [r3, #24]
 80054b8:	f012 0f02 	tst.w	r2, #2
 80054bc:	d001      	beq.n	80054c2 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80054be:	2200      	movs	r2, #0
 80054c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054c2:	6803      	ldr	r3, [r0, #0]
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	f012 0f01 	tst.w	r2, #1
 80054ca:	d103      	bne.n	80054d4 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	619a      	str	r2, [r3, #24]
  }
}
 80054d4:	4770      	bx	lr

080054d6 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054d6:	b470      	push	{r4, r5, r6}
 80054d8:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80054da:	6805      	ldr	r5, [r0, #0]
 80054dc:	6868      	ldr	r0, [r5, #4]
 80054de:	0d74      	lsrs	r4, r6, #21
 80054e0:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80054e4:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80054e8:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80054ec:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80054f0:	f044 0403 	orr.w	r4, r4, #3
 80054f4:	ea20 0004 	bic.w	r0, r0, r4
 80054f8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80054fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005500:	4319      	orrs	r1, r3
 8005502:	4331      	orrs	r1, r6
 8005504:	4301      	orrs	r1, r0
 8005506:	6069      	str	r1, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005508:	bc70      	pop	{r4, r5, r6}
 800550a:	4770      	bx	lr

0800550c <I2C_IsAcknowledgeFailed>:
{
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	4605      	mov	r5, r0
 8005510:	460e      	mov	r6, r1
 8005512:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005514:	6803      	ldr	r3, [r0, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f013 0f10 	tst.w	r3, #16
 800551c:	d101      	bne.n	8005522 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 800551e:	2000      	movs	r0, #0
}
 8005520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005522:	682b      	ldr	r3, [r5, #0]
 8005524:	699c      	ldr	r4, [r3, #24]
 8005526:	f014 0f20 	tst.w	r4, #32
 800552a:	d117      	bne.n	800555c <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 800552c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005530:	d0f7      	beq.n	8005522 <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005532:	f7ff fc55 	bl	8004de0 <HAL_GetTick>
 8005536:	1bc0      	subs	r0, r0, r7
 8005538:	42b0      	cmp	r0, r6
 800553a:	d801      	bhi.n	8005540 <I2C_IsAcknowledgeFailed+0x34>
 800553c:	2e00      	cmp	r6, #0
 800553e:	d1f0      	bne.n	8005522 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005540:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005542:	f043 0320 	orr.w	r3, r3, #32
 8005546:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005548:	2320      	movs	r3, #32
 800554a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800554e:	2300      	movs	r3, #0
 8005550:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8005554:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8005558:	2001      	movs	r0, #1
 800555a:	e7e1      	b.n	8005520 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800555c:	2210      	movs	r2, #16
 800555e:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	2420      	movs	r4, #32
 8005564:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8005566:	4628      	mov	r0, r5
 8005568:	f7ff ffa4 	bl	80054b4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800556c:	682a      	ldr	r2, [r5, #0]
 800556e:	6853      	ldr	r3, [r2, #4]
 8005570:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005574:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005578:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005582:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005584:	f043 0304 	orr.w	r3, r3, #4
 8005588:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800558a:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800558e:	2300      	movs	r3, #0
 8005590:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005594:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8005598:	2001      	movs	r0, #1
 800559a:	e7c1      	b.n	8005520 <I2C_IsAcknowledgeFailed+0x14>

0800559c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	4604      	mov	r4, r0
 80055a0:	460d      	mov	r5, r1
 80055a2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	f013 0f02 	tst.w	r3, #2
 80055ac:	d11d      	bne.n	80055ea <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ae:	4632      	mov	r2, r6
 80055b0:	4629      	mov	r1, r5
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7ff ffaa 	bl	800550c <I2C_IsAcknowledgeFailed>
 80055b8:	b9c8      	cbnz	r0, 80055ee <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80055ba:	f1b5 3fff 	cmp.w	r5, #4294967295
 80055be:	d0f1      	beq.n	80055a4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c0:	f7ff fc0e 	bl	8004de0 <HAL_GetTick>
 80055c4:	1b80      	subs	r0, r0, r6
 80055c6:	42a8      	cmp	r0, r5
 80055c8:	d801      	bhi.n	80055ce <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80055ca:	2d00      	cmp	r5, #0
 80055cc:	d1ea      	bne.n	80055a4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80055d0:	f043 0320 	orr.w	r3, r3, #32
 80055d4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055d6:	2320      	movs	r3, #32
 80055d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055dc:	2300      	movs	r3, #0
 80055de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80055e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80055e6:	2001      	movs	r0, #1
 80055e8:	e000      	b.n	80055ec <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80055ea:	2000      	movs	r0, #0
}
 80055ec:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80055ee:	2001      	movs	r0, #1
 80055f0:	e7fc      	b.n	80055ec <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080055f2 <I2C_WaitOnFlagUntilTimeout>:
{
 80055f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f6:	4606      	mov	r6, r0
 80055f8:	4688      	mov	r8, r1
 80055fa:	4617      	mov	r7, r2
 80055fc:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055fe:	6834      	ldr	r4, [r6, #0]
 8005600:	69a4      	ldr	r4, [r4, #24]
 8005602:	ea38 0304 	bics.w	r3, r8, r4
 8005606:	bf0c      	ite	eq
 8005608:	2401      	moveq	r4, #1
 800560a:	2400      	movne	r4, #0
 800560c:	42bc      	cmp	r4, r7
 800560e:	d118      	bne.n	8005642 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005610:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005614:	d0f3      	beq.n	80055fe <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005616:	f7ff fbe3 	bl	8004de0 <HAL_GetTick>
 800561a:	9b06      	ldr	r3, [sp, #24]
 800561c:	1ac0      	subs	r0, r0, r3
 800561e:	42a8      	cmp	r0, r5
 8005620:	d801      	bhi.n	8005626 <I2C_WaitOnFlagUntilTimeout+0x34>
 8005622:	2d00      	cmp	r5, #0
 8005624:	d1eb      	bne.n	80055fe <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005626:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005628:	f043 0320 	orr.w	r3, r3, #32
 800562c:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800562e:	2320      	movs	r3, #32
 8005630:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005634:	2300      	movs	r3, #0
 8005636:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800563a:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800563e:	2001      	movs	r0, #1
 8005640:	e000      	b.n	8005644 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8005642:	2000      	movs	r0, #0
}
 8005644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005648 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	4605      	mov	r5, r0
 800564c:	460c      	mov	r4, r1
 800564e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	f013 0f20 	tst.w	r3, #32
 8005658:	d11a      	bne.n	8005690 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800565a:	4632      	mov	r2, r6
 800565c:	4621      	mov	r1, r4
 800565e:	4628      	mov	r0, r5
 8005660:	f7ff ff54 	bl	800550c <I2C_IsAcknowledgeFailed>
 8005664:	b9b0      	cbnz	r0, 8005694 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005666:	f7ff fbbb 	bl	8004de0 <HAL_GetTick>
 800566a:	1b80      	subs	r0, r0, r6
 800566c:	42a0      	cmp	r0, r4
 800566e:	d801      	bhi.n	8005674 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8005670:	2c00      	cmp	r4, #0
 8005672:	d1ed      	bne.n	8005650 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005674:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005676:	f043 0320 	orr.w	r3, r3, #32
 800567a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800567c:	2320      	movs	r3, #32
 800567e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005682:	2300      	movs	r3, #0
 8005684:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005688:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800568c:	2001      	movs	r0, #1
}
 800568e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005690:	2000      	movs	r0, #0
 8005692:	e7fc      	b.n	800568e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8005694:	2001      	movs	r0, #1
 8005696:	e7fa      	b.n	800568e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08005698 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005698:	2800      	cmp	r0, #0
 800569a:	d059      	beq.n	8005750 <HAL_I2C_Init+0xb8>
{
 800569c:	b510      	push	{r4, lr}
 800569e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056a0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d043      	beq.n	8005730 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80056a8:	2324      	movs	r3, #36	; 0x24
 80056aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80056ae:	6822      	ldr	r2, [r4, #0]
 80056b0:	6813      	ldr	r3, [r2, #0]
 80056b2:	f023 0301 	bic.w	r3, r3, #1
 80056b6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056b8:	6863      	ldr	r3, [r4, #4]
 80056ba:	6822      	ldr	r2, [r4, #0]
 80056bc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80056c0:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056c2:	6822      	ldr	r2, [r4, #0]
 80056c4:	6893      	ldr	r3, [r2, #8]
 80056c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056ca:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056cc:	68e3      	ldr	r3, [r4, #12]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d033      	beq.n	800573a <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056d2:	68a3      	ldr	r3, [r4, #8]
 80056d4:	6822      	ldr	r2, [r4, #0]
 80056d6:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80056da:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056dc:	68e3      	ldr	r3, [r4, #12]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d031      	beq.n	8005746 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056e2:	6822      	ldr	r2, [r4, #0]
 80056e4:	6853      	ldr	r3, [r2, #4]
 80056e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ee:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056f0:	6822      	ldr	r2, [r4, #0]
 80056f2:	68d3      	ldr	r3, [r2, #12]
 80056f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056f8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80056fa:	6923      	ldr	r3, [r4, #16]
 80056fc:	6962      	ldr	r2, [r4, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	69a1      	ldr	r1, [r4, #24]
 8005702:	6822      	ldr	r2, [r4, #0]
 8005704:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005708:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800570a:	69e3      	ldr	r3, [r4, #28]
 800570c:	6a21      	ldr	r1, [r4, #32]
 800570e:	6822      	ldr	r2, [r4, #0]
 8005710:	430b      	orrs	r3, r1
 8005712:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005714:	6822      	ldr	r2, [r4, #0]
 8005716:	6813      	ldr	r3, [r2, #0]
 8005718:	f043 0301 	orr.w	r3, r3, #1
 800571c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800571e:	2000      	movs	r0, #0
 8005720:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005722:	2320      	movs	r3, #32
 8005724:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005728:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800572a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800572e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005730:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005734:	f7fc f814 	bl	8001760 <HAL_I2C_MspInit>
 8005738:	e7b6      	b.n	80056a8 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800573a:	68a3      	ldr	r3, [r4, #8]
 800573c:	6822      	ldr	r2, [r4, #0]
 800573e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005742:	6093      	str	r3, [r2, #8]
 8005744:	e7ca      	b.n	80056dc <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800574c:	605a      	str	r2, [r3, #4]
 800574e:	e7c8      	b.n	80056e2 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8005750:	2001      	movs	r0, #1
}
 8005752:	4770      	bx	lr

08005754 <HAL_I2C_Master_Transmit>:
{
 8005754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	460f      	mov	r7, r1
 800575c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800575e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005762:	b2c9      	uxtb	r1, r1
 8005764:	2920      	cmp	r1, #32
 8005766:	f040 80a3 	bne.w	80058b0 <HAL_I2C_Master_Transmit+0x15c>
 800576a:	4604      	mov	r4, r0
 800576c:	4690      	mov	r8, r2
 800576e:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8005770:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005774:	2b01      	cmp	r3, #1
 8005776:	f000 809f 	beq.w	80058b8 <HAL_I2C_Master_Transmit+0x164>
 800577a:	f04f 0a01 	mov.w	sl, #1
 800577e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005782:	f7ff fb2d 	bl	8004de0 <HAL_GetTick>
 8005786:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005788:	9000      	str	r0, [sp, #0]
 800578a:	2319      	movs	r3, #25
 800578c:	4652      	mov	r2, sl
 800578e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005792:	4620      	mov	r0, r4
 8005794:	f7ff ff2d 	bl	80055f2 <I2C_WaitOnFlagUntilTimeout>
 8005798:	2800      	cmp	r0, #0
 800579a:	f040 808f 	bne.w	80058bc <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800579e:	2321      	movs	r3, #33	; 0x21
 80057a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80057a4:	2310      	movs	r3, #16
 80057a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057aa:	2300      	movs	r3, #0
 80057ac:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80057ae:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80057b2:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057b6:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2bff      	cmp	r3, #255	; 0xff
 80057be:	d90a      	bls.n	80057d6 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057c0:	22ff      	movs	r2, #255	; 0xff
 80057c2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80057c4:	4b41      	ldr	r3, [pc, #260]	; (80058cc <HAL_I2C_Master_Transmit+0x178>)
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057cc:	4639      	mov	r1, r7
 80057ce:	4620      	mov	r0, r4
 80057d0:	f7ff fe81 	bl	80054d6 <I2C_TransferConfig>
 80057d4:	e018      	b.n	8005808 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 80057d6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80057d8:	b292      	uxth	r2, r2
 80057da:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80057dc:	4b3b      	ldr	r3, [pc, #236]	; (80058cc <HAL_I2C_Master_Transmit+0x178>)
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	4639      	mov	r1, r7
 80057e8:	4620      	mov	r0, r4
 80057ea:	f7ff fe74 	bl	80054d6 <I2C_TransferConfig>
 80057ee:	e00b      	b.n	8005808 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 80057f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80057f2:	b292      	uxth	r2, r2
 80057f4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057f6:	2300      	movs	r3, #0
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	4639      	mov	r1, r7
 8005802:	4620      	mov	r0, r4
 8005804:	f7ff fe67 	bl	80054d6 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005808:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d033      	beq.n	8005878 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005810:	462a      	mov	r2, r5
 8005812:	4631      	mov	r1, r6
 8005814:	4620      	mov	r0, r4
 8005816:	f7ff fec1 	bl	800559c <I2C_WaitOnTXISFlagUntilTimeout>
 800581a:	2800      	cmp	r0, #0
 800581c:	d150      	bne.n	80058c0 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800581e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	7812      	ldrb	r2, [r2, #0]
 8005824:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005828:	3301      	adds	r3, #1
 800582a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800582c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29b      	uxth	r3, r3
 8005834:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005836:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005838:	3b01      	subs	r3, #1
 800583a:	b29b      	uxth	r3, r3
 800583c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800583e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005840:	b292      	uxth	r2, r2
 8005842:	2a00      	cmp	r2, #0
 8005844:	d0e0      	beq.n	8005808 <HAL_I2C_Master_Transmit+0xb4>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1de      	bne.n	8005808 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800584a:	9500      	str	r5, [sp, #0]
 800584c:	4633      	mov	r3, r6
 800584e:	2200      	movs	r2, #0
 8005850:	2180      	movs	r1, #128	; 0x80
 8005852:	4620      	mov	r0, r4
 8005854:	f7ff fecd 	bl	80055f2 <I2C_WaitOnFlagUntilTimeout>
 8005858:	bba0      	cbnz	r0, 80058c4 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800585a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	2bff      	cmp	r3, #255	; 0xff
 8005860:	d9c6      	bls.n	80057f0 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005862:	22ff      	movs	r2, #255	; 0xff
 8005864:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005866:	2300      	movs	r3, #0
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800586e:	4639      	mov	r1, r7
 8005870:	4620      	mov	r0, r4
 8005872:	f7ff fe30 	bl	80054d6 <I2C_TransferConfig>
 8005876:	e7c7      	b.n	8005808 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005878:	462a      	mov	r2, r5
 800587a:	4631      	mov	r1, r6
 800587c:	4620      	mov	r0, r4
 800587e:	f7ff fee3 	bl	8005648 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005882:	bb08      	cbnz	r0, 80058c8 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	2220      	movs	r2, #32
 8005888:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800588a:	6821      	ldr	r1, [r4, #0]
 800588c:	684b      	ldr	r3, [r1, #4]
 800588e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005892:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005896:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800589a:	f023 0301 	bic.w	r3, r3, #1
 800589e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80058a0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058a4:	2300      	movs	r3, #0
 80058a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80058aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80058ae:	e000      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 80058b0:	2002      	movs	r0, #2
}
 80058b2:	b002      	add	sp, #8
 80058b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80058b8:	2002      	movs	r0, #2
 80058ba:	e7fa      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 80058bc:	2001      	movs	r0, #1
 80058be:	e7f8      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 80058c0:	2001      	movs	r0, #1
 80058c2:	e7f6      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 80058c4:	2001      	movs	r0, #1
 80058c6:	e7f4      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 80058c8:	2001      	movs	r0, #1
 80058ca:	e7f2      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x15e>
 80058cc:	80002000 	.word	0x80002000

080058d0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058d0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d124      	bne.n	8005924 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058da:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d022      	beq.n	8005928 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80058e2:	2301      	movs	r3, #1
 80058e4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058e8:	2324      	movs	r3, #36	; 0x24
 80058ea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058ee:	6802      	ldr	r2, [r0, #0]
 80058f0:	6813      	ldr	r3, [r2, #0]
 80058f2:	f023 0301 	bic.w	r3, r3, #1
 80058f6:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058f8:	6802      	ldr	r2, [r0, #0]
 80058fa:	6813      	ldr	r3, [r2, #0]
 80058fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005900:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005902:	6802      	ldr	r2, [r0, #0]
 8005904:	6813      	ldr	r3, [r2, #0]
 8005906:	4319      	orrs	r1, r3
 8005908:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800590a:	6802      	ldr	r2, [r0, #0]
 800590c:	6813      	ldr	r3, [r2, #0]
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005914:	2320      	movs	r3, #32
 8005916:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800591a:	2300      	movs	r3, #0
 800591c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005920:	4618      	mov	r0, r3
 8005922:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005924:	2002      	movs	r0, #2
 8005926:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005928:	2002      	movs	r0, #2
  }
}
 800592a:	4770      	bx	lr

0800592c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800592c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b20      	cmp	r3, #32
 8005934:	d122      	bne.n	800597c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005936:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800593a:	2b01      	cmp	r3, #1
 800593c:	d020      	beq.n	8005980 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800593e:	2301      	movs	r3, #1
 8005940:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005944:	2324      	movs	r3, #36	; 0x24
 8005946:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800594a:	6802      	ldr	r2, [r0, #0]
 800594c:	6813      	ldr	r3, [r2, #0]
 800594e:	f023 0301 	bic.w	r3, r3, #1
 8005952:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005954:	6802      	ldr	r2, [r0, #0]
 8005956:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005958:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800595c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005960:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005962:	6802      	ldr	r2, [r0, #0]
 8005964:	6813      	ldr	r3, [r2, #0]
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800596c:	2320      	movs	r3, #32
 800596e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005972:	2300      	movs	r3, #0
 8005974:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005978:	4618      	mov	r0, r3
 800597a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800597c:	2002      	movs	r0, #2
 800597e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005980:	2002      	movs	r0, #2
  }
}
 8005982:	4770      	bx	lr

08005984 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005984:	2800      	cmp	r0, #0
 8005986:	d136      	bne.n	80059f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005988:	4b3e      	ldr	r3, [pc, #248]	; (8005a84 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005994:	d008      	beq.n	80059a8 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005996:	4a3b      	ldr	r2, [pc, #236]	; (8005a84 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8005998:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800599c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80059a4:	2000      	movs	r0, #0
 80059a6:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059a8:	4a36      	ldr	r2, [pc, #216]	; (8005a84 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80059aa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80059ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80059b6:	6813      	ldr	r3, [r2, #0]
 80059b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80059bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059c0:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80059c2:	4b31      	ldr	r3, [pc, #196]	; (8005a88 <HAL_PWREx_ControlVoltageScaling+0x104>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	2332      	movs	r3, #50	; 0x32
 80059c8:	fb03 f302 	mul.w	r3, r3, r2
 80059cc:	4a2f      	ldr	r2, [pc, #188]	; (8005a8c <HAL_PWREx_ControlVoltageScaling+0x108>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	0c9b      	lsrs	r3, r3, #18
 80059d4:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059d6:	e000      	b.n	80059da <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 80059d8:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059da:	4a2a      	ldr	r2, [pc, #168]	; (8005a84 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80059dc:	6952      	ldr	r2, [r2, #20]
 80059de:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80059e2:	d001      	beq.n	80059e8 <HAL_PWREx_ControlVoltageScaling+0x64>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1f7      	bne.n	80059d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059e8:	4b26      	ldr	r3, [pc, #152]	; (8005a84 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80059f0:	d144      	bne.n	8005a7c <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 80059f2:	2000      	movs	r0, #0
 80059f4:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059f6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80059fa:	d008      	beq.n	8005a0e <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059fc:	4a21      	ldr	r2, [pc, #132]	; (8005a84 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80059fe:	6813      	ldr	r3, [r2, #0]
 8005a00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a08:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a0e:	4b1d      	ldr	r3, [pc, #116]	; (8005a84 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a1a:	d008      	beq.n	8005a2e <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a1c:	4a19      	ldr	r2, [pc, #100]	; (8005a84 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8005a1e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8005a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a26:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a2e:	4a15      	ldr	r2, [pc, #84]	; (8005a84 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8005a30:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8005a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a3c:	6813      	ldr	r3, [r2, #0]
 8005a3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a46:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a48:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	2332      	movs	r3, #50	; 0x32
 8005a4e:	fb03 f302 	mul.w	r3, r3, r2
 8005a52:	4a0e      	ldr	r2, [pc, #56]	; (8005a8c <HAL_PWREx_ControlVoltageScaling+0x108>)
 8005a54:	fba2 2303 	umull	r2, r3, r2, r3
 8005a58:	0c9b      	lsrs	r3, r3, #18
 8005a5a:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a5c:	e000      	b.n	8005a60 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8005a5e:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a60:	4a08      	ldr	r2, [pc, #32]	; (8005a84 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8005a62:	6952      	ldr	r2, [r2, #20]
 8005a64:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005a68:	d001      	beq.n	8005a6e <HAL_PWREx_ControlVoltageScaling+0xea>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1f7      	bne.n	8005a5e <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a6e:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005a76:	d103      	bne.n	8005a80 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8005a78:	2000      	movs	r0, #0
 8005a7a:	4770      	bx	lr
        return HAL_TIMEOUT;
 8005a7c:	2003      	movs	r0, #3
 8005a7e:	4770      	bx	lr
        return HAL_TIMEOUT;
 8005a80:	2003      	movs	r0, #3
}
 8005a82:	4770      	bx	lr
 8005a84:	40007000 	.word	0x40007000
 8005a88:	20001e30 	.word	0x20001e30
 8005a8c:	431bde83 	.word	0x431bde83

08005a90 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005a90:	4a02      	ldr	r2, [pc, #8]	; (8005a9c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8005a92:	6893      	ldr	r3, [r2, #8]
 8005a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a98:	6093      	str	r3, [r2, #8]
}
 8005a9a:	4770      	bx	lr
 8005a9c:	40007000 	.word	0x40007000

08005aa0 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005aa0:	4a12      	ldr	r2, [pc, #72]	; (8005aec <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8005aa2:	68d3      	ldr	r3, [r2, #12]
 8005aa4:	f003 0303 	and.w	r3, r3, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005aa8:	68d0      	ldr	r0, [r2, #12]
 8005aaa:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005aae:	3001      	adds	r0, #1

  switch (pllsource)
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d011      	beq.n	8005ad8 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ab4:	4b0e      	ldr	r3, [pc, #56]	; (8005af0 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8005ab6:	fbb3 f3f0 	udiv	r3, r3, r0
 8005aba:	4a0c      	ldr	r2, [pc, #48]	; (8005aec <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8005abc:	68d0      	ldr	r0, [r2, #12]
 8005abe:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8005ac2:	fb00 f003 	mul.w	r0, r0, r3
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ac6:	4b09      	ldr	r3, [pc, #36]	; (8005aec <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8005ace:	3301      	adds	r3, #1
 8005ad0:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8005ad2:	fbb0 f0f3 	udiv	r0, r0, r3
 8005ad6:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ad8:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 8005ada:	fbb3 f3f0 	udiv	r3, r3, r0
 8005ade:	68d0      	ldr	r0, [r2, #12]
 8005ae0:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8005ae4:	fb00 f003 	mul.w	r0, r0, r3
    break;
 8005ae8:	e7ed      	b.n	8005ac6 <RCC_GetSysClockFreqFromPLLSource+0x26>
 8005aea:	bf00      	nop
 8005aec:	40021000 	.word	0x40021000
 8005af0:	00f42400 	.word	0x00f42400
 8005af4:	003d0900 	.word	0x003d0900

08005af8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005af8:	2800      	cmp	r0, #0
 8005afa:	f000 8254 	beq.w	8005fa6 <HAL_RCC_OscConfig+0x4ae>
{
 8005afe:	b570      	push	{r4, r5, r6, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b04:	6803      	ldr	r3, [r0, #0]
 8005b06:	f013 0f01 	tst.w	r3, #1
 8005b0a:	d037      	beq.n	8005b7c <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b0c:	4ab4      	ldr	r2, [pc, #720]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005b0e:	6893      	ldr	r3, [r2, #8]
 8005b10:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b14:	68d2      	ldr	r2, [r2, #12]
 8005b16:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005b1a:	2b0c      	cmp	r3, #12
 8005b1c:	d023      	beq.n	8005b66 <HAL_RCC_OscConfig+0x6e>
 8005b1e:	2b08      	cmp	r3, #8
 8005b20:	d023      	beq.n	8005b6a <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b22:	6863      	ldr	r3, [r4, #4]
 8005b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b28:	d04e      	beq.n	8005bc8 <HAL_RCC_OscConfig+0xd0>
 8005b2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b2e:	d051      	beq.n	8005bd4 <HAL_RCC_OscConfig+0xdc>
 8005b30:	4bab      	ldr	r3, [pc, #684]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b40:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b42:	6863      	ldr	r3, [r4, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d052      	beq.n	8005bee <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8005b48:	f7ff f94a 	bl	8004de0 <HAL_GetTick>
 8005b4c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b4e:	4ba4      	ldr	r3, [pc, #656]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005b56:	d111      	bne.n	8005b7c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b58:	f7ff f942 	bl	8004de0 <HAL_GetTick>
 8005b5c:	1b40      	subs	r0, r0, r5
 8005b5e:	2864      	cmp	r0, #100	; 0x64
 8005b60:	d9f5      	bls.n	8005b4e <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8005b62:	2003      	movs	r0, #3
 8005b64:	e228      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005b66:	2a03      	cmp	r2, #3
 8005b68:	d1d9      	bne.n	8005b1e <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b6a:	4b9d      	ldr	r3, [pc, #628]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005b72:	d003      	beq.n	8005b7c <HAL_RCC_OscConfig+0x84>
 8005b74:	6863      	ldr	r3, [r4, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 8217 	beq.w	8005faa <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	f013 0f02 	tst.w	r3, #2
 8005b82:	d05d      	beq.n	8005c40 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b84:	4a96      	ldr	r2, [pc, #600]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005b86:	6893      	ldr	r3, [r2, #8]
 8005b88:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b8c:	68d2      	ldr	r2, [r2, #12]
 8005b8e:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005b92:	2b0c      	cmp	r3, #12
 8005b94:	d03a      	beq.n	8005c0c <HAL_RCC_OscConfig+0x114>
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d03a      	beq.n	8005c10 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b9a:	68e3      	ldr	r3, [r4, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d075      	beq.n	8005c8c <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8005ba0:	4a8f      	ldr	r2, [pc, #572]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005ba2:	6813      	ldr	r3, [r2, #0]
 8005ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005baa:	f7ff f919 	bl	8004de0 <HAL_GetTick>
 8005bae:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bb0:	4b8b      	ldr	r3, [pc, #556]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005bb8:	d15f      	bne.n	8005c7a <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bba:	f7ff f911 	bl	8004de0 <HAL_GetTick>
 8005bbe:	1b40      	subs	r0, r0, r5
 8005bc0:	2802      	cmp	r0, #2
 8005bc2:	d9f5      	bls.n	8005bb0 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8005bc4:	2003      	movs	r0, #3
 8005bc6:	e1f7      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bc8:	4a85      	ldr	r2, [pc, #532]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005bca:	6813      	ldr	r3, [r2, #0]
 8005bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	e7b6      	b.n	8005b42 <HAL_RCC_OscConfig+0x4a>
 8005bd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bd8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	e7a9      	b.n	8005b42 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8005bee:	f7ff f8f7 	bl	8004de0 <HAL_GetTick>
 8005bf2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bf4:	4b7a      	ldr	r3, [pc, #488]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005bfc:	d0be      	beq.n	8005b7c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bfe:	f7ff f8ef 	bl	8004de0 <HAL_GetTick>
 8005c02:	1b40      	subs	r0, r0, r5
 8005c04:	2864      	cmp	r0, #100	; 0x64
 8005c06:	d9f5      	bls.n	8005bf4 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8005c08:	2003      	movs	r0, #3
 8005c0a:	e1d5      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005c0c:	2a02      	cmp	r2, #2
 8005c0e:	d1c2      	bne.n	8005b96 <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c10:	4b73      	ldr	r3, [pc, #460]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005c18:	d003      	beq.n	8005c22 <HAL_RCC_OscConfig+0x12a>
 8005c1a:	68e3      	ldr	r3, [r4, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 81c6 	beq.w	8005fae <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c22:	4a6f      	ldr	r2, [pc, #444]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005c24:	6853      	ldr	r3, [r2, #4]
 8005c26:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c2a:	6921      	ldr	r1, [r4, #16]
 8005c2c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005c30:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005c32:	4b6c      	ldr	r3, [pc, #432]	; (8005de4 <HAL_RCC_OscConfig+0x2ec>)
 8005c34:	6818      	ldr	r0, [r3, #0]
 8005c36:	f7ff f88f 	bl	8004d58 <HAL_InitTick>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	f040 81b9 	bne.w	8005fb2 <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	f013 0f08 	tst.w	r3, #8
 8005c46:	d04c      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c48:	6963      	ldr	r3, [r4, #20]
 8005c4a:	b39b      	cbz	r3, 8005cb4 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 8005c4c:	4a64      	ldr	r2, [pc, #400]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005c4e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005c52:	f043 0301 	orr.w	r3, r3, #1
 8005c56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005c5a:	f7ff f8c1 	bl	8004de0 <HAL_GetTick>
 8005c5e:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c60:	4b5f      	ldr	r3, [pc, #380]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c66:	f013 0f02 	tst.w	r3, #2
 8005c6a:	d13a      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c6c:	f7ff f8b8 	bl	8004de0 <HAL_GetTick>
 8005c70:	1b40      	subs	r0, r0, r5
 8005c72:	2802      	cmp	r0, #2
 8005c74:	d9f4      	bls.n	8005c60 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 8005c76:	2003      	movs	r0, #3
 8005c78:	e19e      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7a:	4a59      	ldr	r2, [pc, #356]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005c7c:	6853      	ldr	r3, [r2, #4]
 8005c7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c82:	6921      	ldr	r1, [r4, #16]
 8005c84:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005c88:	6053      	str	r3, [r2, #4]
 8005c8a:	e7d9      	b.n	8005c40 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8005c8c:	4a54      	ldr	r2, [pc, #336]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005c8e:	6813      	ldr	r3, [r2, #0]
 8005c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c94:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005c96:	f7ff f8a3 	bl	8004de0 <HAL_GetTick>
 8005c9a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c9c:	4b50      	ldr	r3, [pc, #320]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005ca4:	d0cc      	beq.n	8005c40 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca6:	f7ff f89b 	bl	8004de0 <HAL_GetTick>
 8005caa:	1b40      	subs	r0, r0, r5
 8005cac:	2802      	cmp	r0, #2
 8005cae:	d9f5      	bls.n	8005c9c <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8005cb0:	2003      	movs	r0, #3
 8005cb2:	e181      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 8005cb4:	4a4a      	ldr	r2, [pc, #296]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005cb6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005cba:	f023 0301 	bic.w	r3, r3, #1
 8005cbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005cc2:	f7ff f88d 	bl	8004de0 <HAL_GetTick>
 8005cc6:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cc8:	4b45      	ldr	r3, [pc, #276]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cce:	f013 0f02 	tst.w	r3, #2
 8005cd2:	d006      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cd4:	f7ff f884 	bl	8004de0 <HAL_GetTick>
 8005cd8:	1b40      	subs	r0, r0, r5
 8005cda:	2802      	cmp	r0, #2
 8005cdc:	d9f4      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 8005cde:	2003      	movs	r0, #3
 8005ce0:	e16a      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	f013 0f04 	tst.w	r3, #4
 8005ce8:	f000 8081 	beq.w	8005dee <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005cec:	4b3c      	ldr	r3, [pc, #240]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005cf4:	d136      	bne.n	8005d64 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cf6:	4b3a      	ldr	r3, [pc, #232]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005cf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005cfa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005cfe:	659a      	str	r2, [r3, #88]	; 0x58
 8005d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005d0a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d0c:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <HAL_RCC_OscConfig+0x2f0>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005d14:	d028      	beq.n	8005d68 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d16:	68a3      	ldr	r3, [r4, #8]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d039      	beq.n	8005d90 <HAL_RCC_OscConfig+0x298>
 8005d1c:	2b05      	cmp	r3, #5
 8005d1e:	d03f      	beq.n	8005da0 <HAL_RCC_OscConfig+0x2a8>
 8005d20:	4b2f      	ldr	r3, [pc, #188]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005d22:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005d26:	f022 0201 	bic.w	r2, r2, #1
 8005d2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005d2e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005d32:	f022 0204 	bic.w	r2, r2, #4
 8005d36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d3a:	68a3      	ldr	r3, [r4, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d03d      	beq.n	8005dbc <HAL_RCC_OscConfig+0x2c4>
      tickstart = HAL_GetTick();
 8005d40:	f7ff f84e 	bl	8004de0 <HAL_GetTick>
 8005d44:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d46:	4b26      	ldr	r3, [pc, #152]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4c:	f013 0f02 	tst.w	r3, #2
 8005d50:	d14c      	bne.n	8005dec <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d52:	f7ff f845 	bl	8004de0 <HAL_GetTick>
 8005d56:	1b80      	subs	r0, r0, r6
 8005d58:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d5c:	4298      	cmp	r0, r3
 8005d5e:	d9f2      	bls.n	8005d46 <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8005d60:	2003      	movs	r0, #3
 8005d62:	e129      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 8005d64:	2500      	movs	r5, #0
 8005d66:	e7d1      	b.n	8005d0c <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d68:	4a1f      	ldr	r2, [pc, #124]	; (8005de8 <HAL_RCC_OscConfig+0x2f0>)
 8005d6a:	6813      	ldr	r3, [r2, #0]
 8005d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d70:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005d72:	f7ff f835 	bl	8004de0 <HAL_GetTick>
 8005d76:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d78:	4b1b      	ldr	r3, [pc, #108]	; (8005de8 <HAL_RCC_OscConfig+0x2f0>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005d80:	d1c9      	bne.n	8005d16 <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d82:	f7ff f82d 	bl	8004de0 <HAL_GetTick>
 8005d86:	1b80      	subs	r0, r0, r6
 8005d88:	2802      	cmp	r0, #2
 8005d8a:	d9f5      	bls.n	8005d78 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 8005d8c:	2003      	movs	r0, #3
 8005d8e:	e113      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d90:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005d92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d96:	f043 0301 	orr.w	r3, r3, #1
 8005d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d9e:	e7cc      	b.n	8005d3a <HAL_RCC_OscConfig+0x242>
 8005da0:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005da2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005da6:	f042 0204 	orr.w	r2, r2, #4
 8005daa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005dae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005dba:	e7be      	b.n	8005d3a <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 8005dbc:	f7ff f810 	bl	8004de0 <HAL_GetTick>
 8005dc0:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005dc2:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <HAL_RCC_OscConfig+0x2e8>)
 8005dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc8:	f013 0f02 	tst.w	r3, #2
 8005dcc:	d00e      	beq.n	8005dec <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dce:	f7ff f807 	bl	8004de0 <HAL_GetTick>
 8005dd2:	1b80      	subs	r0, r0, r6
 8005dd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8005dd8:	4298      	cmp	r0, r3
 8005dda:	d9f2      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x2ca>
          return HAL_TIMEOUT;
 8005ddc:	2003      	movs	r0, #3
 8005dde:	e0eb      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
 8005de0:	40021000 	.word	0x40021000
 8005de4:	20001e38 	.word	0x20001e38
 8005de8:	40007000 	.word	0x40007000
    if (pwrclkchanged == SET)
 8005dec:	b9e5      	cbnz	r5, 8005e28 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	f013 0f20 	tst.w	r3, #32
 8005df4:	d035      	beq.n	8005e62 <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005df6:	69a3      	ldr	r3, [r4, #24]
 8005df8:	b1e3      	cbz	r3, 8005e34 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 8005dfa:	4a77      	ldr	r2, [pc, #476]	; (8005fd8 <HAL_RCC_OscConfig+0x4e0>)
 8005dfc:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8005e00:	f043 0301 	orr.w	r3, r3, #1
 8005e04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005e08:	f7fe ffea 	bl	8004de0 <HAL_GetTick>
 8005e0c:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e0e:	4b72      	ldr	r3, [pc, #456]	; (8005fd8 <HAL_RCC_OscConfig+0x4e0>)
 8005e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e14:	f013 0f02 	tst.w	r3, #2
 8005e18:	d123      	bne.n	8005e62 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e1a:	f7fe ffe1 	bl	8004de0 <HAL_GetTick>
 8005e1e:	1b40      	subs	r0, r0, r5
 8005e20:	2802      	cmp	r0, #2
 8005e22:	d9f4      	bls.n	8005e0e <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8005e24:	2003      	movs	r0, #3
 8005e26:	e0c7      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e28:	4a6b      	ldr	r2, [pc, #428]	; (8005fd8 <HAL_RCC_OscConfig+0x4e0>)
 8005e2a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e30:	6593      	str	r3, [r2, #88]	; 0x58
 8005e32:	e7dc      	b.n	8005dee <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8005e34:	4a68      	ldr	r2, [pc, #416]	; (8005fd8 <HAL_RCC_OscConfig+0x4e0>)
 8005e36:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8005e3a:	f023 0301 	bic.w	r3, r3, #1
 8005e3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005e42:	f7fe ffcd 	bl	8004de0 <HAL_GetTick>
 8005e46:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e48:	4b63      	ldr	r3, [pc, #396]	; (8005fd8 <HAL_RCC_OscConfig+0x4e0>)
 8005e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e4e:	f013 0f02 	tst.w	r3, #2
 8005e52:	d006      	beq.n	8005e62 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e54:	f7fe ffc4 	bl	8004de0 <HAL_GetTick>
 8005e58:	1b40      	subs	r0, r0, r5
 8005e5a:	2802      	cmp	r0, #2
 8005e5c:	d9f4      	bls.n	8005e48 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 8005e5e:	2003      	movs	r0, #3
 8005e60:	e0aa      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e62:	69e3      	ldr	r3, [r4, #28]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 80a6 	beq.w	8005fb6 <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e6a:	4a5b      	ldr	r2, [pc, #364]	; (8005fd8 <HAL_RCC_OscConfig+0x4e0>)
 8005e6c:	6892      	ldr	r2, [r2, #8]
 8005e6e:	f002 020c 	and.w	r2, r2, #12
 8005e72:	2a0c      	cmp	r2, #12
 8005e74:	d069      	beq.n	8005f4a <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d01d      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 8005e7a:	4b57      	ldr	r3, [pc, #348]	; (8005fd8 <HAL_RCC_OscConfig+0x4e0>)
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005e82:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	f022 0203 	bic.w	r2, r2, #3
 8005e8a:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8005e92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e96:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8005e98:	f7fe ffa2 	bl	8004de0 <HAL_GetTick>
 8005e9c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e9e:	4b4e      	ldr	r3, [pc, #312]	; (8005fd8 <HAL_RCC_OscConfig+0x4e0>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005ea6:	d04e      	beq.n	8005f46 <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea8:	f7fe ff9a 	bl	8004de0 <HAL_GetTick>
 8005eac:	1b00      	subs	r0, r0, r4
 8005eae:	2802      	cmp	r0, #2
 8005eb0:	d9f5      	bls.n	8005e9e <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 8005eb2:	2003      	movs	r0, #3
 8005eb4:	e080      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 8005eb6:	4a48      	ldr	r2, [pc, #288]	; (8005fd8 <HAL_RCC_OscConfig+0x4e0>)
 8005eb8:	6813      	ldr	r3, [r2, #0]
 8005eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ebe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005ec0:	f7fe ff8e 	bl	8004de0 <HAL_GetTick>
 8005ec4:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ec6:	4b44      	ldr	r3, [pc, #272]	; (8005fd8 <HAL_RCC_OscConfig+0x4e0>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005ece:	d006      	beq.n	8005ede <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ed0:	f7fe ff86 	bl	8004de0 <HAL_GetTick>
 8005ed4:	1b40      	subs	r0, r0, r5
 8005ed6:	2802      	cmp	r0, #2
 8005ed8:	d9f5      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 8005eda:	2003      	movs	r0, #3
 8005edc:	e06c      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ede:	4a3e      	ldr	r2, [pc, #248]	; (8005fd8 <HAL_RCC_OscConfig+0x4e0>)
 8005ee0:	68d3      	ldr	r3, [r2, #12]
 8005ee2:	493e      	ldr	r1, [pc, #248]	; (8005fdc <HAL_RCC_OscConfig+0x4e4>)
 8005ee4:	4019      	ands	r1, r3
 8005ee6:	6a23      	ldr	r3, [r4, #32]
 8005ee8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005eea:	3801      	subs	r0, #1
 8005eec:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005ef0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005ef2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005ef6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005ef8:	0840      	lsrs	r0, r0, #1
 8005efa:	3801      	subs	r0, #1
 8005efc:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8005f00:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005f02:	0840      	lsrs	r0, r0, #1
 8005f04:	3801      	subs	r0, #1
 8005f06:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8005f0a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005f0c:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8005f10:	430b      	orrs	r3, r1
 8005f12:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8005f14:	6813      	ldr	r3, [r2, #0]
 8005f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f1a:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f1c:	68d3      	ldr	r3, [r2, #12]
 8005f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f22:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8005f24:	f7fe ff5c 	bl	8004de0 <HAL_GetTick>
 8005f28:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f2a:	4b2b      	ldr	r3, [pc, #172]	; (8005fd8 <HAL_RCC_OscConfig+0x4e0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005f32:	d106      	bne.n	8005f42 <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f34:	f7fe ff54 	bl	8004de0 <HAL_GetTick>
 8005f38:	1b00      	subs	r0, r0, r4
 8005f3a:	2802      	cmp	r0, #2
 8005f3c:	d9f5      	bls.n	8005f2a <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 8005f3e:	2003      	movs	r0, #3
 8005f40:	e03a      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8005f42:	2000      	movs	r0, #0
 8005f44:	e038      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
 8005f46:	2000      	movs	r0, #0
 8005f48:	e036      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d036      	beq.n	8005fbc <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 8005f4e:	4b22      	ldr	r3, [pc, #136]	; (8005fd8 <HAL_RCC_OscConfig+0x4e0>)
 8005f50:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f52:	f003 0103 	and.w	r1, r3, #3
 8005f56:	6a22      	ldr	r2, [r4, #32]
 8005f58:	4291      	cmp	r1, r2
 8005f5a:	d131      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f62:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f64:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005f68:	d12c      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f6a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f6e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f70:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005f74:	d128      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f76:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005f7a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f7c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005f80:	d124      	bne.n	8005fcc <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f82:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8005f86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005f88:	0852      	lsrs	r2, r2, #1
 8005f8a:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f8c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005f90:	d11e      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f92:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005f96:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005f98:	0852      	lsrs	r2, r2, #1
 8005f9a:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f9c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8005fa0:	d118      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 8005fa6:	2001      	movs	r0, #1
}
 8005fa8:	4770      	bx	lr
        return HAL_ERROR;
 8005faa:	2001      	movs	r0, #1
 8005fac:	e004      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8005fae:	2001      	movs	r0, #1
 8005fb0:	e002      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 8005fb2:	2001      	movs	r0, #1
 8005fb4:	e000      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8005fb6:	2000      	movs	r0, #0
}
 8005fb8:	b002      	add	sp, #8
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8005fbc:	2001      	movs	r0, #1
 8005fbe:	e7fb      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	e7f9      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
 8005fc4:	2001      	movs	r0, #1
 8005fc6:	e7f7      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
 8005fc8:	2001      	movs	r0, #1
 8005fca:	e7f5      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
 8005fcc:	2001      	movs	r0, #1
 8005fce:	e7f3      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	e7f1      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
 8005fd4:	2001      	movs	r0, #1
 8005fd6:	e7ef      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c0>
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	019f800c 	.word	0x019f800c

08005fe0 <HAL_RCC_MCOConfig>:
{
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	460d      	mov	r5, r1
 8005fe6:	4616      	mov	r6, r2
  MCO1_CLK_ENABLE();
 8005fe8:	4c10      	ldr	r4, [pc, #64]	; (800602c <HAL_RCC_MCOConfig+0x4c>)
 8005fea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005ff2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = MCO1_PIN;
 8005ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006000:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006002:	2302      	movs	r3, #2
 8006004:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006006:	2303      	movs	r3, #3
 8006008:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800600a:	2300      	movs	r3, #0
 800600c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800600e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006010:	a901      	add	r1, sp, #4
 8006012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006016:	f7ff f95f 	bl	80052d8 <HAL_GPIO_Init>
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 800601a:	68a3      	ldr	r3, [r4, #8]
 800601c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006020:	ea45 0206 	orr.w	r2, r5, r6
 8006024:	431a      	orrs	r2, r3
 8006026:	60a2      	str	r2, [r4, #8]
}
 8006028:	b006      	add	sp, #24
 800602a:	bd70      	pop	{r4, r5, r6, pc}
 800602c:	40021000 	.word	0x40021000

08006030 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006030:	4b1e      	ldr	r3, [pc, #120]	; (80060ac <HAL_RCC_GetSysClockFreq+0x7c>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 030c 	and.w	r3, r3, #12
 8006038:	2b04      	cmp	r3, #4
 800603a:	d032      	beq.n	80060a2 <HAL_RCC_GetSysClockFreq+0x72>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800603c:	4b1b      	ldr	r3, [pc, #108]	; (80060ac <HAL_RCC_GetSysClockFreq+0x7c>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 030c 	and.w	r3, r3, #12
 8006044:	2b08      	cmp	r3, #8
 8006046:	d02e      	beq.n	80060a6 <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006048:	4b18      	ldr	r3, [pc, #96]	; (80060ac <HAL_RCC_GetSysClockFreq+0x7c>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 030c 	and.w	r3, r3, #12
 8006050:	2b0c      	cmp	r3, #12
 8006052:	d001      	beq.n	8006058 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8006054:	2000      	movs	r0, #0
}
 8006056:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006058:	4a14      	ldr	r2, [pc, #80]	; (80060ac <HAL_RCC_GetSysClockFreq+0x7c>)
 800605a:	68d3      	ldr	r3, [r2, #12]
 800605c:	f003 0303 	and.w	r3, r3, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006060:	68d0      	ldr	r0, [r2, #12]
 8006062:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8006066:	3001      	adds	r0, #1
    switch (pllsource)
 8006068:	2b03      	cmp	r3, #3
 800606a:	d011      	beq.n	8006090 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800606c:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x80>)
 800606e:	fbb3 f3f0 	udiv	r3, r3, r0
 8006072:	4a0e      	ldr	r2, [pc, #56]	; (80060ac <HAL_RCC_GetSysClockFreq+0x7c>)
 8006074:	68d0      	ldr	r0, [r2, #12]
 8006076:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800607a:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800607e:	4b0b      	ldr	r3, [pc, #44]	; (80060ac <HAL_RCC_GetSysClockFreq+0x7c>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8006086:	3301      	adds	r3, #1
 8006088:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800608a:	fbb0 f0f3 	udiv	r0, r0, r3
 800608e:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006090:	4b08      	ldr	r3, [pc, #32]	; (80060b4 <HAL_RCC_GetSysClockFreq+0x84>)
 8006092:	fbb3 f3f0 	udiv	r3, r3, r0
 8006096:	68d0      	ldr	r0, [r2, #12]
 8006098:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800609c:	fb00 f003 	mul.w	r0, r0, r3
      break;
 80060a0:	e7ed      	b.n	800607e <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 80060a2:	4803      	ldr	r0, [pc, #12]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x80>)
 80060a4:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80060a6:	4803      	ldr	r0, [pc, #12]	; (80060b4 <HAL_RCC_GetSysClockFreq+0x84>)
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40021000 	.word	0x40021000
 80060b0:	00f42400 	.word	0x00f42400
 80060b4:	003d0900 	.word	0x003d0900

080060b8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80060b8:	2800      	cmp	r0, #0
 80060ba:	f000 80e6 	beq.w	800628a <HAL_RCC_ClockConfig+0x1d2>
{
 80060be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c0:	460c      	mov	r4, r1
 80060c2:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060c4:	4b74      	ldr	r3, [pc, #464]	; (8006298 <HAL_RCC_ClockConfig+0x1e0>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	428b      	cmp	r3, r1
 80060ce:	d20b      	bcs.n	80060e8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060d0:	4a71      	ldr	r2, [pc, #452]	; (8006298 <HAL_RCC_ClockConfig+0x1e0>)
 80060d2:	6813      	ldr	r3, [r2, #0]
 80060d4:	f023 030f 	bic.w	r3, r3, #15
 80060d8:	430b      	orrs	r3, r1
 80060da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060dc:	6813      	ldr	r3, [r2, #0]
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	428b      	cmp	r3, r1
 80060e4:	f040 80d3 	bne.w	800628e <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060e8:	682e      	ldr	r6, [r5, #0]
 80060ea:	f016 0601 	ands.w	r6, r6, #1
 80060ee:	d05f      	beq.n	80061b0 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060f0:	686b      	ldr	r3, [r5, #4]
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d015      	beq.n	8006122 <HAL_RCC_ClockConfig+0x6a>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d033      	beq.n	8006162 <HAL_RCC_ClockConfig+0xaa>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060fa:	4b68      	ldr	r3, [pc, #416]	; (800629c <HAL_RCC_ClockConfig+0x1e4>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006102:	f000 80c6 	beq.w	8006292 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006106:	f7ff ff93 	bl	8006030 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800610a:	4b65      	ldr	r3, [pc, #404]	; (80062a0 <HAL_RCC_ClockConfig+0x1e8>)
 800610c:	4298      	cmp	r0, r3
 800610e:	d933      	bls.n	8006178 <HAL_RCC_ClockConfig+0xc0>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006110:	4a62      	ldr	r2, [pc, #392]	; (800629c <HAL_RCC_ClockConfig+0x1e4>)
 8006112:	6893      	ldr	r3, [r2, #8]
 8006114:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800611e:	2680      	movs	r6, #128	; 0x80
 8006120:	e02b      	b.n	800617a <HAL_RCC_ClockConfig+0xc2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006122:	4b5e      	ldr	r3, [pc, #376]	; (800629c <HAL_RCC_ClockConfig+0x1e4>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800612a:	d101      	bne.n	8006130 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 800612c:	2001      	movs	r0, #1
 800612e:	e08b      	b.n	8006248 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006130:	f7ff fcb6 	bl	8005aa0 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8006134:	4b5a      	ldr	r3, [pc, #360]	; (80062a0 <HAL_RCC_ClockConfig+0x1e8>)
 8006136:	4298      	cmp	r0, r3
 8006138:	d91a      	bls.n	8006170 <HAL_RCC_ClockConfig+0xb8>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800613a:	4b58      	ldr	r3, [pc, #352]	; (800629c <HAL_RCC_ClockConfig+0x1e4>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8006142:	d005      	beq.n	8006150 <HAL_RCC_ClockConfig+0x98>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006144:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006146:	f016 0602 	ands.w	r6, r6, #2
 800614a:	d016      	beq.n	800617a <HAL_RCC_ClockConfig+0xc2>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800614c:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800614e:	b98b      	cbnz	r3, 8006174 <HAL_RCC_ClockConfig+0xbc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006150:	4a52      	ldr	r2, [pc, #328]	; (800629c <HAL_RCC_ClockConfig+0x1e4>)
 8006152:	6893      	ldr	r3, [r2, #8]
 8006154:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800615e:	2680      	movs	r6, #128	; 0x80
 8006160:	e00b      	b.n	800617a <HAL_RCC_ClockConfig+0xc2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006162:	4b4e      	ldr	r3, [pc, #312]	; (800629c <HAL_RCC_ClockConfig+0x1e4>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800616a:	d1cc      	bne.n	8006106 <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 800616c:	2001      	movs	r0, #1
 800616e:	e06b      	b.n	8006248 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006170:	2600      	movs	r6, #0
 8006172:	e002      	b.n	800617a <HAL_RCC_ClockConfig+0xc2>
 8006174:	2600      	movs	r6, #0
 8006176:	e000      	b.n	800617a <HAL_RCC_ClockConfig+0xc2>
 8006178:	2600      	movs	r6, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800617a:	4a48      	ldr	r2, [pc, #288]	; (800629c <HAL_RCC_ClockConfig+0x1e4>)
 800617c:	6893      	ldr	r3, [r2, #8]
 800617e:	f023 0303 	bic.w	r3, r3, #3
 8006182:	6869      	ldr	r1, [r5, #4]
 8006184:	430b      	orrs	r3, r1
 8006186:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006188:	f7fe fe2a 	bl	8004de0 <HAL_GetTick>
 800618c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800618e:	4b43      	ldr	r3, [pc, #268]	; (800629c <HAL_RCC_ClockConfig+0x1e4>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 030c 	and.w	r3, r3, #12
 8006196:	686a      	ldr	r2, [r5, #4]
 8006198:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800619c:	d008      	beq.n	80061b0 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800619e:	f7fe fe1f 	bl	8004de0 <HAL_GetTick>
 80061a2:	1bc0      	subs	r0, r0, r7
 80061a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80061a8:	4298      	cmp	r0, r3
 80061aa:	d9f0      	bls.n	800618e <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80061ac:	2003      	movs	r0, #3
 80061ae:	e04b      	b.n	8006248 <HAL_RCC_ClockConfig+0x190>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	f013 0f02 	tst.w	r3, #2
 80061b6:	d048      	beq.n	800624a <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b8:	f013 0f04 	tst.w	r3, #4
 80061bc:	d004      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061be:	4a37      	ldr	r2, [pc, #220]	; (800629c <HAL_RCC_ClockConfig+0x1e4>)
 80061c0:	6893      	ldr	r3, [r2, #8]
 80061c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061c6:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	f013 0f08 	tst.w	r3, #8
 80061ce:	d006      	beq.n	80061de <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80061d0:	4a32      	ldr	r2, [pc, #200]	; (800629c <HAL_RCC_ClockConfig+0x1e4>)
 80061d2:	6893      	ldr	r3, [r2, #8]
 80061d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80061d8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061dc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061de:	4a2f      	ldr	r2, [pc, #188]	; (800629c <HAL_RCC_ClockConfig+0x1e4>)
 80061e0:	6893      	ldr	r3, [r2, #8]
 80061e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061e6:	68a9      	ldr	r1, [r5, #8]
 80061e8:	430b      	orrs	r3, r1
 80061ea:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061ec:	4b2a      	ldr	r3, [pc, #168]	; (8006298 <HAL_RCC_ClockConfig+0x1e0>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 030f 	and.w	r3, r3, #15
 80061f4:	42a3      	cmp	r3, r4
 80061f6:	d830      	bhi.n	800625a <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	f013 0f04 	tst.w	r3, #4
 80061fe:	d006      	beq.n	800620e <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006200:	4a26      	ldr	r2, [pc, #152]	; (800629c <HAL_RCC_ClockConfig+0x1e4>)
 8006202:	6893      	ldr	r3, [r2, #8]
 8006204:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006208:	68e9      	ldr	r1, [r5, #12]
 800620a:	430b      	orrs	r3, r1
 800620c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800620e:	682b      	ldr	r3, [r5, #0]
 8006210:	f013 0f08 	tst.w	r3, #8
 8006214:	d007      	beq.n	8006226 <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006216:	4a21      	ldr	r2, [pc, #132]	; (800629c <HAL_RCC_ClockConfig+0x1e4>)
 8006218:	6893      	ldr	r3, [r2, #8]
 800621a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800621e:	6929      	ldr	r1, [r5, #16]
 8006220:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006224:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006226:	f7ff ff03 	bl	8006030 <HAL_RCC_GetSysClockFreq>
 800622a:	4b1c      	ldr	r3, [pc, #112]	; (800629c <HAL_RCC_ClockConfig+0x1e4>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006232:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <HAL_RCC_ClockConfig+0x1ec>)
 8006234:	5cd3      	ldrb	r3, [r2, r3]
 8006236:	f003 031f 	and.w	r3, r3, #31
 800623a:	40d8      	lsrs	r0, r3
 800623c:	4b1a      	ldr	r3, [pc, #104]	; (80062a8 <HAL_RCC_ClockConfig+0x1f0>)
 800623e:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8006240:	4b1a      	ldr	r3, [pc, #104]	; (80062ac <HAL_RCC_ClockConfig+0x1f4>)
 8006242:	6818      	ldr	r0, [r3, #0]
 8006244:	f7fe fd88 	bl	8004d58 <HAL_InitTick>
}
 8006248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 800624a:	2e80      	cmp	r6, #128	; 0x80
 800624c:	d1ce      	bne.n	80061ec <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800624e:	4a13      	ldr	r2, [pc, #76]	; (800629c <HAL_RCC_ClockConfig+0x1e4>)
 8006250:	6893      	ldr	r3, [r2, #8]
 8006252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006256:	6093      	str	r3, [r2, #8]
 8006258:	e7c8      	b.n	80061ec <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800625a:	4a0f      	ldr	r2, [pc, #60]	; (8006298 <HAL_RCC_ClockConfig+0x1e0>)
 800625c:	6813      	ldr	r3, [r2, #0]
 800625e:	f023 030f 	bic.w	r3, r3, #15
 8006262:	4323      	orrs	r3, r4
 8006264:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006266:	f7fe fdbb 	bl	8004de0 <HAL_GetTick>
 800626a:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800626c:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <HAL_RCC_ClockConfig+0x1e0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	42a3      	cmp	r3, r4
 8006276:	d0bf      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006278:	f7fe fdb2 	bl	8004de0 <HAL_GetTick>
 800627c:	1b80      	subs	r0, r0, r6
 800627e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006282:	4298      	cmp	r0, r3
 8006284:	d9f2      	bls.n	800626c <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 8006286:	2003      	movs	r0, #3
 8006288:	e7de      	b.n	8006248 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 800628a:	2001      	movs	r0, #1
}
 800628c:	4770      	bx	lr
      return HAL_ERROR;
 800628e:	2001      	movs	r0, #1
 8006290:	e7da      	b.n	8006248 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 8006292:	2001      	movs	r0, #1
 8006294:	e7d8      	b.n	8006248 <HAL_RCC_ClockConfig+0x190>
 8006296:	bf00      	nop
 8006298:	40022000 	.word	0x40022000
 800629c:	40021000 	.word	0x40021000
 80062a0:	04c4b400 	.word	0x04c4b400
 80062a4:	0800b7f8 	.word	0x0800b7f8
 80062a8:	20001e30 	.word	0x20001e30
 80062ac:	20001e38 	.word	0x20001e38

080062b0 <HAL_RCC_GetHCLKFreq>:
}
 80062b0:	4b01      	ldr	r3, [pc, #4]	; (80062b8 <HAL_RCC_GetHCLKFreq+0x8>)
 80062b2:	6818      	ldr	r0, [r3, #0]
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	20001e30 	.word	0x20001e30

080062bc <HAL_RCC_GetPCLK1Freq>:
{
 80062bc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062be:	f7ff fff7 	bl	80062b0 <HAL_RCC_GetHCLKFreq>
 80062c2:	4b05      	ldr	r3, [pc, #20]	; (80062d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80062ca:	4a04      	ldr	r2, [pc, #16]	; (80062dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80062cc:	5cd3      	ldrb	r3, [r2, r3]
 80062ce:	f003 031f 	and.w	r3, r3, #31
}
 80062d2:	40d8      	lsrs	r0, r3
 80062d4:	bd08      	pop	{r3, pc}
 80062d6:	bf00      	nop
 80062d8:	40021000 	.word	0x40021000
 80062dc:	0800b808 	.word	0x0800b808

080062e0 <HAL_RCC_GetPCLK2Freq>:
{
 80062e0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062e2:	f7ff ffe5 	bl	80062b0 <HAL_RCC_GetHCLKFreq>
 80062e6:	4b05      	ldr	r3, [pc, #20]	; (80062fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80062ee:	4a04      	ldr	r2, [pc, #16]	; (8006300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062f0:	5cd3      	ldrb	r3, [r2, r3]
 80062f2:	f003 031f 	and.w	r3, r3, #31
}
 80062f6:	40d8      	lsrs	r0, r3
 80062f8:	bd08      	pop	{r3, pc}
 80062fa:	bf00      	nop
 80062fc:	40021000 	.word	0x40021000
 8006300:	0800b808 	.word	0x0800b808

08006304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006306:	b083      	sub	sp, #12
 8006308:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800630a:	6803      	ldr	r3, [r0, #0]
 800630c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006310:	d069      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006312:	4bb3      	ldr	r3, [pc, #716]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006316:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800631a:	d11e      	bne.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800631c:	4bb0      	ldr	r3, [pc, #704]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800631e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006320:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006324:	659a      	str	r2, [r3, #88]	; 0x58
 8006326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006330:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006332:	4aac      	ldr	r2, [pc, #688]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006334:	6813      	ldr	r3, [r2, #0]
 8006336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800633a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800633c:	f7fe fd50 	bl	8004de0 <HAL_GetTick>
 8006340:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006342:	4ba8      	ldr	r3, [pc, #672]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f413 7f80 	tst.w	r3, #256	; 0x100
 800634a:	d108      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800634c:	f7fe fd48 	bl	8004de0 <HAL_GetTick>
 8006350:	1b40      	subs	r0, r0, r5
 8006352:	2802      	cmp	r0, #2
 8006354:	d9f5      	bls.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 8006356:	2503      	movs	r5, #3
 8006358:	e002      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 800635a:	2600      	movs	r6, #0
 800635c:	e7e9      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800635e:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8006360:	bb45      	cbnz	r5, 80063b4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006362:	4b9f      	ldr	r3, [pc, #636]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006368:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800636c:	d015      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x96>
 800636e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006370:	429a      	cmp	r2, r3
 8006372:	d012      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006374:	4a9a      	ldr	r2, [pc, #616]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006376:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800637a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800637e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8006382:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006386:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800638a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800638e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006392:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800639a:	f013 0f01 	tst.w	r3, #1
 800639e:	d110      	bne.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 80063a0:	b945      	cbnz	r5, 80063b4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063a2:	4a8f      	ldr	r2, [pc, #572]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80063a4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80063a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80063ae:	430b      	orrs	r3, r1
 80063b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063b4:	b1c6      	cbz	r6, 80063e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063b6:	4a8a      	ldr	r2, [pc, #552]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80063b8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80063ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063be:	6593      	str	r3, [r2, #88]	; 0x58
 80063c0:	e012      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 80063c2:	f7fe fd0d 	bl	8004de0 <HAL_GetTick>
 80063c6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063c8:	4b85      	ldr	r3, [pc, #532]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80063ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ce:	f013 0f02 	tst.w	r3, #2
 80063d2:	d1e5      	bne.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063d4:	f7fe fd04 	bl	8004de0 <HAL_GetTick>
 80063d8:	1bc0      	subs	r0, r0, r7
 80063da:	f241 3388 	movw	r3, #5000	; 0x1388
 80063de:	4298      	cmp	r0, r3
 80063e0:	d9f2      	bls.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 80063e2:	2503      	movs	r5, #3
 80063e4:	e7dc      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063e6:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	f013 0f01 	tst.w	r3, #1
 80063ee:	d008      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063f0:	4a7b      	ldr	r2, [pc, #492]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80063f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80063f6:	f023 0303 	bic.w	r3, r3, #3
 80063fa:	6861      	ldr	r1, [r4, #4]
 80063fc:	430b      	orrs	r3, r1
 80063fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	f013 0f02 	tst.w	r3, #2
 8006408:	d008      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800640a:	4a75      	ldr	r2, [pc, #468]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800640c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006410:	f023 030c 	bic.w	r3, r3, #12
 8006414:	68a1      	ldr	r1, [r4, #8]
 8006416:	430b      	orrs	r3, r1
 8006418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	f013 0f04 	tst.w	r3, #4
 8006422:	d008      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006424:	4a6e      	ldr	r2, [pc, #440]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006426:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800642a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800642e:	68e1      	ldr	r1, [r4, #12]
 8006430:	430b      	orrs	r3, r1
 8006432:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	f013 0f08 	tst.w	r3, #8
 800643c:	d008      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800643e:	4a68      	ldr	r2, [pc, #416]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006440:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006444:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006448:	6921      	ldr	r1, [r4, #16]
 800644a:	430b      	orrs	r3, r1
 800644c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	f013 0f20 	tst.w	r3, #32
 8006456:	d008      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006458:	4a61      	ldr	r2, [pc, #388]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800645a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800645e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006462:	6961      	ldr	r1, [r4, #20]
 8006464:	430b      	orrs	r3, r1
 8006466:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006470:	d008      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006472:	4a5b      	ldr	r2, [pc, #364]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006474:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006478:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800647c:	69a1      	ldr	r1, [r4, #24]
 800647e:	430b      	orrs	r3, r1
 8006480:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	f013 0f80 	tst.w	r3, #128	; 0x80
 800648a:	d008      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800648c:	4a54      	ldr	r2, [pc, #336]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800648e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006492:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006496:	69e1      	ldr	r1, [r4, #28]
 8006498:	430b      	orrs	r3, r1
 800649a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80064a4:	d008      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064a6:	4a4e      	ldr	r2, [pc, #312]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80064a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80064ac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80064b0:	6a21      	ldr	r1, [r4, #32]
 80064b2:	430b      	orrs	r3, r1
 80064b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	f413 7f00 	tst.w	r3, #512	; 0x200
 80064be:	d008      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064c0:	4a47      	ldr	r2, [pc, #284]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80064c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80064c6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80064ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064cc:	430b      	orrs	r3, r1
 80064ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80064d8:	d00c      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064da:	4a41      	ldr	r2, [pc, #260]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80064dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80064e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80064e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80064e6:	430b      	orrs	r3, r1
 80064e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80064ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80064ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064f2:	d057      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80064fa:	d00c      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80064fc:	4a38      	ldr	r2, [pc, #224]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80064fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006502:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006506:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006508:	430b      	orrs	r3, r1
 800650a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800650e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006514:	d04b      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800651c:	d00c      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800651e:	4a30      	ldr	r2, [pc, #192]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006520:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006524:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8006528:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800652a:	430b      	orrs	r3, r1
 800652c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006530:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006532:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006536:	d03f      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800653e:	d00c      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006540:	4a27      	ldr	r2, [pc, #156]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006542:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006546:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800654a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800654c:	430b      	orrs	r3, r1
 800654e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006552:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006558:	d033      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006560:	d00c      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006562:	4a1f      	ldr	r2, [pc, #124]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006564:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006568:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800656c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800656e:	430b      	orrs	r3, r1
 8006570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006574:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800657a:	d027      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006582:	d00c      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006584:	4a16      	ldr	r2, [pc, #88]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006586:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800658a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800658e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006590:	430b      	orrs	r3, r1
 8006592:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006596:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006598:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800659c:	d01b      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  }

#endif /* QUADSPI */

  return status;
}
 800659e:	4628      	mov	r0, r5
 80065a0:	b003      	add	sp, #12
 80065a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065a4:	68d3      	ldr	r3, [r2, #12]
 80065a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065aa:	60d3      	str	r3, [r2, #12]
 80065ac:	e7a2      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065ae:	68d3      	ldr	r3, [r2, #12]
 80065b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065b4:	60d3      	str	r3, [r2, #12]
 80065b6:	e7ae      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065b8:	68d3      	ldr	r3, [r2, #12]
 80065ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065be:	60d3      	str	r3, [r2, #12]
 80065c0:	e7ba      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065c2:	68d3      	ldr	r3, [r2, #12]
 80065c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065c8:	60d3      	str	r3, [r2, #12]
 80065ca:	e7c6      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x256>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065cc:	68d3      	ldr	r3, [r2, #12]
 80065ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065d2:	60d3      	str	r3, [r2, #12]
 80065d4:	e7d2      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80065d6:	68d3      	ldr	r3, [r2, #12]
 80065d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065dc:	60d3      	str	r3, [r2, #12]
 80065de:	e7de      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80065e0:	40021000 	.word	0x40021000
 80065e4:	40007000 	.word	0x40007000

080065e8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065e8:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ea:	6a05      	ldr	r5, [r0, #32]
 80065ec:	f025 0510 	bic.w	r5, r5, #16
 80065f0:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065f2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80065f4:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80065f6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80065fa:	ea44 2402 	orr.w	r4, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065fe:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006602:	031b      	lsls	r3, r3, #12
 8006604:	b29b      	uxth	r3, r3
 8006606:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006608:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800660c:	0109      	lsls	r1, r1, #4
 800660e:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8006612:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006614:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006616:	6201      	str	r1, [r0, #32]
}
 8006618:	bc30      	pop	{r4, r5}
 800661a:	4770      	bx	lr

0800661c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800661c:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800661e:	6a05      	ldr	r5, [r0, #32]
 8006620:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8006624:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006626:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8006628:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800662a:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 800662e:	4314      	orrs	r4, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006630:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	b2db      	uxtb	r3, r3
 8006638:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800663a:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800663e:	0209      	lsls	r1, r1, #8
 8006640:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8006644:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006646:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8006648:	6201      	str	r1, [r0, #32]
}
 800664a:	bc30      	pop	{r4, r5}
 800664c:	4770      	bx	lr

0800664e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800664e:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006650:	6a05      	ldr	r5, [r0, #32]
 8006652:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8006656:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006658:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 800665a:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800665c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006660:	ea44 2402 	orr.w	r4, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006664:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006668:	031b      	lsls	r3, r3, #12
 800666a:	b29b      	uxth	r3, r3
 800666c:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800666e:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006672:	0309      	lsls	r1, r1, #12
 8006674:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8006678:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800667a:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 800667c:	6201      	str	r1, [r0, #32]
}
 800667e:	bc30      	pop	{r4, r5}
 8006680:	4770      	bx	lr

08006682 <HAL_TIM_IC_MspInit>:
}
 8006682:	4770      	bx	lr

08006684 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006684:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006686:	4a2c      	ldr	r2, [pc, #176]	; (8006738 <TIM_Base_SetConfig+0xb4>)
 8006688:	4290      	cmp	r0, r2
 800668a:	d00e      	beq.n	80066aa <TIM_Base_SetConfig+0x26>
 800668c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006690:	d00b      	beq.n	80066aa <TIM_Base_SetConfig+0x26>
 8006692:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006696:	4290      	cmp	r0, r2
 8006698:	d007      	beq.n	80066aa <TIM_Base_SetConfig+0x26>
 800669a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800669e:	4290      	cmp	r0, r2
 80066a0:	d003      	beq.n	80066aa <TIM_Base_SetConfig+0x26>
 80066a2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80066a6:	4290      	cmp	r0, r2
 80066a8:	d103      	bne.n	80066b2 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80066ae:	684a      	ldr	r2, [r1, #4]
 80066b0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066b2:	4a21      	ldr	r2, [pc, #132]	; (8006738 <TIM_Base_SetConfig+0xb4>)
 80066b4:	4290      	cmp	r0, r2
 80066b6:	d01a      	beq.n	80066ee <TIM_Base_SetConfig+0x6a>
 80066b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80066bc:	d017      	beq.n	80066ee <TIM_Base_SetConfig+0x6a>
 80066be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80066c2:	4290      	cmp	r0, r2
 80066c4:	d013      	beq.n	80066ee <TIM_Base_SetConfig+0x6a>
 80066c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066ca:	4290      	cmp	r0, r2
 80066cc:	d00f      	beq.n	80066ee <TIM_Base_SetConfig+0x6a>
 80066ce:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80066d2:	4290      	cmp	r0, r2
 80066d4:	d00b      	beq.n	80066ee <TIM_Base_SetConfig+0x6a>
 80066d6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80066da:	4290      	cmp	r0, r2
 80066dc:	d007      	beq.n	80066ee <TIM_Base_SetConfig+0x6a>
 80066de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066e2:	4290      	cmp	r0, r2
 80066e4:	d003      	beq.n	80066ee <TIM_Base_SetConfig+0x6a>
 80066e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066ea:	4290      	cmp	r0, r2
 80066ec:	d103      	bne.n	80066f6 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80066ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066f2:	68ca      	ldr	r2, [r1, #12]
 80066f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066fa:	694a      	ldr	r2, [r1, #20]
 80066fc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80066fe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006700:	688b      	ldr	r3, [r1, #8]
 8006702:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006704:	680b      	ldr	r3, [r1, #0]
 8006706:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006708:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <TIM_Base_SetConfig+0xb4>)
 800670a:	4298      	cmp	r0, r3
 800670c:	d00f      	beq.n	800672e <TIM_Base_SetConfig+0xaa>
 800670e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006712:	4298      	cmp	r0, r3
 8006714:	d00b      	beq.n	800672e <TIM_Base_SetConfig+0xaa>
 8006716:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800671a:	4298      	cmp	r0, r3
 800671c:	d007      	beq.n	800672e <TIM_Base_SetConfig+0xaa>
 800671e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006722:	4298      	cmp	r0, r3
 8006724:	d003      	beq.n	800672e <TIM_Base_SetConfig+0xaa>
 8006726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800672a:	4298      	cmp	r0, r3
 800672c:	d101      	bne.n	8006732 <TIM_Base_SetConfig+0xae>
    TIMx->RCR = Structure->RepetitionCounter;
 800672e:	690b      	ldr	r3, [r1, #16]
 8006730:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006732:	2301      	movs	r3, #1
 8006734:	6143      	str	r3, [r0, #20]
}
 8006736:	4770      	bx	lr
 8006738:	40012c00 	.word	0x40012c00

0800673c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800673c:	b360      	cbz	r0, 8006798 <HAL_TIM_Base_Init+0x5c>
{
 800673e:	b510      	push	{r4, lr}
 8006740:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006742:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006746:	b313      	cbz	r3, 800678e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006748:	2302      	movs	r3, #2
 800674a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800674e:	4621      	mov	r1, r4
 8006750:	f851 0b04 	ldr.w	r0, [r1], #4
 8006754:	f7ff ff96 	bl	8006684 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006758:	2301      	movs	r3, #1
 800675a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800675e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006762:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006766:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800676a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800676e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006776:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800677a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800677e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006782:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006786:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800678a:	2000      	movs	r0, #0
}
 800678c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800678e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006792:	f7fb f81d 	bl	80017d0 <HAL_TIM_Base_MspInit>
 8006796:	e7d7      	b.n	8006748 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006798:	2001      	movs	r0, #1
}
 800679a:	4770      	bx	lr

0800679c <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800679c:	b360      	cbz	r0, 80067f8 <HAL_TIM_IC_Init+0x5c>
{
 800679e:	b510      	push	{r4, lr}
 80067a0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80067a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80067a6:	b313      	cbz	r3, 80067ee <HAL_TIM_IC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80067a8:	2302      	movs	r3, #2
 80067aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067ae:	4621      	mov	r1, r4
 80067b0:	f851 0b04 	ldr.w	r0, [r1], #4
 80067b4:	f7ff ff66 	bl	8006684 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067b8:	2301      	movs	r3, #1
 80067ba:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80067c2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80067c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80067ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80067ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80067da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067de:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80067e2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80067e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80067ea:	2000      	movs	r0, #0
}
 80067ec:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80067ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80067f2:	f7ff ff46 	bl	8006682 <HAL_TIM_IC_MspInit>
 80067f6:	e7d7      	b.n	80067a8 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 80067f8:	2001      	movs	r0, #1
}
 80067fa:	4770      	bx	lr

080067fc <TIM_TI1_SetConfig>:
{
 80067fc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067fe:	6a04      	ldr	r4, [r0, #32]
 8006800:	f024 0401 	bic.w	r4, r4, #1
 8006804:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006806:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8006808:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800680a:	4d15      	ldr	r5, [pc, #84]	; (8006860 <TIM_TI1_SetConfig+0x64>)
 800680c:	42a8      	cmp	r0, r5
 800680e:	d015      	beq.n	800683c <TIM_TI1_SetConfig+0x40>
 8006810:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006814:	d012      	beq.n	800683c <TIM_TI1_SetConfig+0x40>
 8006816:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 800681a:	42a8      	cmp	r0, r5
 800681c:	d00e      	beq.n	800683c <TIM_TI1_SetConfig+0x40>
 800681e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006822:	42a8      	cmp	r0, r5
 8006824:	d00a      	beq.n	800683c <TIM_TI1_SetConfig+0x40>
 8006826:	f505 3596 	add.w	r5, r5, #76800	; 0x12c00
 800682a:	42a8      	cmp	r0, r5
 800682c:	d006      	beq.n	800683c <TIM_TI1_SetConfig+0x40>
 800682e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006832:	42a8      	cmp	r0, r5
 8006834:	d002      	beq.n	800683c <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006836:	f044 0201 	orr.w	r2, r4, #1
 800683a:	e002      	b.n	8006842 <TIM_TI1_SetConfig+0x46>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800683c:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8006840:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006842:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006846:	011b      	lsls	r3, r3, #4
 8006848:	b2db      	uxtb	r3, r3
 800684a:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800684c:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006850:	f001 010a 	and.w	r1, r1, #10
 8006854:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8006856:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006858:	6201      	str	r1, [r0, #32]
}
 800685a:	bc70      	pop	{r4, r5, r6}
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	40012c00 	.word	0x40012c00

08006864 <HAL_TIM_IC_ConfigChannel>:
{
 8006864:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006866:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800686a:	2b01      	cmp	r3, #1
 800686c:	d052      	beq.n	8006914 <HAL_TIM_IC_ConfigChannel+0xb0>
 800686e:	4604      	mov	r4, r0
 8006870:	460d      	mov	r5, r1
 8006872:	2301      	movs	r3, #1
 8006874:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8006878:	b1c2      	cbz	r2, 80068ac <HAL_TIM_IC_ConfigChannel+0x48>
  else if (Channel == TIM_CHANNEL_2)
 800687a:	2a04      	cmp	r2, #4
 800687c:	d027      	beq.n	80068ce <HAL_TIM_IC_ConfigChannel+0x6a>
  else if (Channel == TIM_CHANNEL_3)
 800687e:	2a08      	cmp	r2, #8
 8006880:	d037      	beq.n	80068f2 <HAL_TIM_IC_ConfigChannel+0x8e>
    TIM_TI4_SetConfig(htim->Instance,
 8006882:	68cb      	ldr	r3, [r1, #12]
 8006884:	684a      	ldr	r2, [r1, #4]
 8006886:	6809      	ldr	r1, [r1, #0]
 8006888:	6800      	ldr	r0, [r0, #0]
 800688a:	f7ff fee0 	bl	800664e <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800688e:	6822      	ldr	r2, [r4, #0]
 8006890:	69d3      	ldr	r3, [r2, #28]
 8006892:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006896:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006898:	6822      	ldr	r2, [r4, #0]
 800689a:	69d3      	ldr	r3, [r2, #28]
 800689c:	68a9      	ldr	r1, [r5, #8]
 800689e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80068a2:	61d3      	str	r3, [r2, #28]
  __HAL_UNLOCK(htim);
 80068a4:	2000      	movs	r0, #0
 80068a6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80068ac:	68cb      	ldr	r3, [r1, #12]
 80068ae:	684a      	ldr	r2, [r1, #4]
 80068b0:	6809      	ldr	r1, [r1, #0]
 80068b2:	6800      	ldr	r0, [r0, #0]
 80068b4:	f7ff ffa2 	bl	80067fc <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80068b8:	6822      	ldr	r2, [r4, #0]
 80068ba:	6993      	ldr	r3, [r2, #24]
 80068bc:	f023 030c 	bic.w	r3, r3, #12
 80068c0:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80068c2:	6822      	ldr	r2, [r4, #0]
 80068c4:	6993      	ldr	r3, [r2, #24]
 80068c6:	68a9      	ldr	r1, [r5, #8]
 80068c8:	430b      	orrs	r3, r1
 80068ca:	6193      	str	r3, [r2, #24]
 80068cc:	e7ea      	b.n	80068a4 <HAL_TIM_IC_ConfigChannel+0x40>
    TIM_TI2_SetConfig(htim->Instance,
 80068ce:	68cb      	ldr	r3, [r1, #12]
 80068d0:	684a      	ldr	r2, [r1, #4]
 80068d2:	6809      	ldr	r1, [r1, #0]
 80068d4:	6800      	ldr	r0, [r0, #0]
 80068d6:	f7ff fe87 	bl	80065e8 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80068da:	6822      	ldr	r2, [r4, #0]
 80068dc:	6993      	ldr	r3, [r2, #24]
 80068de:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80068e2:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80068e4:	6822      	ldr	r2, [r4, #0]
 80068e6:	6993      	ldr	r3, [r2, #24]
 80068e8:	68a9      	ldr	r1, [r5, #8]
 80068ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80068ee:	6193      	str	r3, [r2, #24]
 80068f0:	e7d8      	b.n	80068a4 <HAL_TIM_IC_ConfigChannel+0x40>
    TIM_TI3_SetConfig(htim->Instance,
 80068f2:	68cb      	ldr	r3, [r1, #12]
 80068f4:	684a      	ldr	r2, [r1, #4]
 80068f6:	6809      	ldr	r1, [r1, #0]
 80068f8:	6800      	ldr	r0, [r0, #0]
 80068fa:	f7ff fe8f 	bl	800661c <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80068fe:	6822      	ldr	r2, [r4, #0]
 8006900:	69d3      	ldr	r3, [r2, #28]
 8006902:	f023 030c 	bic.w	r3, r3, #12
 8006906:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006908:	6822      	ldr	r2, [r4, #0]
 800690a:	69d3      	ldr	r3, [r2, #28]
 800690c:	68a9      	ldr	r1, [r5, #8]
 800690e:	430b      	orrs	r3, r1
 8006910:	61d3      	str	r3, [r2, #28]
 8006912:	e7c7      	b.n	80068a4 <HAL_TIM_IC_ConfigChannel+0x40>
  __HAL_LOCK(htim);
 8006914:	2002      	movs	r0, #2
 8006916:	e7c8      	b.n	80068aa <HAL_TIM_IC_ConfigChannel+0x46>

08006918 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006918:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800691a:	f001 011f 	and.w	r1, r1, #31
 800691e:	2301      	movs	r3, #1
 8006920:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006924:	6a03      	ldr	r3, [r0, #32]
 8006926:	ea23 0304 	bic.w	r3, r3, r4
 800692a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800692c:	6a03      	ldr	r3, [r0, #32]
 800692e:	fa02 f101 	lsl.w	r1, r2, r1
 8006932:	430b      	orrs	r3, r1
 8006934:	6203      	str	r3, [r0, #32]
}
 8006936:	f85d 4b04 	ldr.w	r4, [sp], #4
 800693a:	4770      	bx	lr

0800693c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800693c:	6802      	ldr	r2, [r0, #0]
 800693e:	6813      	ldr	r3, [r2, #0]
 8006940:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006944:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006946:	6802      	ldr	r2, [r0, #0]
 8006948:	6893      	ldr	r3, [r2, #8]
 800694a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800694e:	6093      	str	r3, [r2, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006950:	2320      	movs	r3, #32
 8006952:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8006956:	4770      	bx	lr

08006958 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006958:	6802      	ldr	r2, [r0, #0]
 800695a:	6813      	ldr	r3, [r2, #0]
 800695c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006960:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006962:	6802      	ldr	r2, [r0, #0]
 8006964:	6893      	ldr	r3, [r2, #8]
 8006966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800696a:	f023 0301 	bic.w	r3, r3, #1
 800696e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006970:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006972:	2b01      	cmp	r3, #1
 8006974:	d006      	beq.n	8006984 <UART_EndRxTransfer+0x2c>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006976:	2320      	movs	r3, #32
 8006978:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697c:	2300      	movs	r3, #0
 800697e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006980:	6703      	str	r3, [r0, #112]	; 0x70
}
 8006982:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006984:	6802      	ldr	r2, [r0, #0]
 8006986:	6813      	ldr	r3, [r2, #0]
 8006988:	f023 0310 	bic.w	r3, r3, #16
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	e7f2      	b.n	8006976 <UART_EndRxTransfer+0x1e>

08006990 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8006990:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006994:	2b20      	cmp	r3, #32
 8006996:	d144      	bne.n	8006a22 <HAL_UART_Transmit_DMA+0x92>
{
 8006998:	b510      	push	{r4, lr}
 800699a:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800699c:	2900      	cmp	r1, #0
 800699e:	d042      	beq.n	8006a26 <HAL_UART_Transmit_DMA+0x96>
 80069a0:	2a00      	cmp	r2, #0
 80069a2:	d042      	beq.n	8006a2a <HAL_UART_Transmit_DMA+0x9a>
    __HAL_LOCK(huart);
 80069a4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d040      	beq.n	8006a2e <HAL_UART_Transmit_DMA+0x9e>
 80069ac:	2301      	movs	r3, #1
 80069ae:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 80069b2:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80069b4:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 80069b8:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069bc:	2300      	movs	r3, #0
 80069be:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069c2:	2321      	movs	r3, #33	; 0x21
 80069c4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 80069c8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80069ca:	b1f3      	cbz	r3, 8006a0a <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80069cc:	4919      	ldr	r1, [pc, #100]	; (8006a34 <HAL_UART_Transmit_DMA+0xa4>)
 80069ce:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80069d0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80069d2:	4919      	ldr	r1, [pc, #100]	; (8006a38 <HAL_UART_Transmit_DMA+0xa8>)
 80069d4:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80069d6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80069d8:	4918      	ldr	r1, [pc, #96]	; (8006a3c <HAL_UART_Transmit_DMA+0xac>)
 80069da:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80069dc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80069de:	2100      	movs	r1, #0
 80069e0:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80069e2:	6801      	ldr	r1, [r0, #0]
 80069e4:	4613      	mov	r3, r2
 80069e6:	f101 0228 	add.w	r2, r1, #40	; 0x28
 80069ea:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80069ec:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80069ee:	f7fe fb51 	bl	8005094 <HAL_DMA_Start_IT>
 80069f2:	b150      	cbz	r0, 8006a0a <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80069f4:	2310      	movs	r3, #16
 80069f6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80069fa:	2300      	movs	r3, #0
 80069fc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8006a00:	2320      	movs	r3, #32
 8006a02:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8006a06:	2001      	movs	r0, #1
 8006a08:	e00a      	b.n	8006a20 <HAL_UART_Transmit_DMA+0x90>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	2240      	movs	r2, #64	; 0x40
 8006a0e:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8006a10:	2000      	movs	r0, #0
 8006a12:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a16:	6822      	ldr	r2, [r4, #0]
 8006a18:	6893      	ldr	r3, [r2, #8]
 8006a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1e:	6093      	str	r3, [r2, #8]
}
 8006a20:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006a22:	2002      	movs	r0, #2
}
 8006a24:	4770      	bx	lr
      return HAL_ERROR;
 8006a26:	2001      	movs	r0, #1
 8006a28:	e7fa      	b.n	8006a20 <HAL_UART_Transmit_DMA+0x90>
 8006a2a:	2001      	movs	r0, #1
 8006a2c:	e7f8      	b.n	8006a20 <HAL_UART_Transmit_DMA+0x90>
    __HAL_LOCK(huart);
 8006a2e:	2002      	movs	r0, #2
 8006a30:	e7f6      	b.n	8006a20 <HAL_UART_Transmit_DMA+0x90>
 8006a32:	bf00      	nop
 8006a34:	08006a43 	.word	0x08006a43
 8006a38:	08006a93 	.word	0x08006a93
 8006a3c:	08006a9f 	.word	0x08006a9f

08006a40 <HAL_UART_TxCpltCallback>:
}
 8006a40:	4770      	bx	lr

08006a42 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a42:	b508      	push	{r3, lr}
 8006a44:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a46:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f013 0f20 	tst.w	r3, #32
 8006a50:	d10d      	bne.n	8006a6e <UART_DMATransmitCplt+0x2c>
  {
    huart->TxXferCount = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a58:	6802      	ldr	r2, [r0, #0]
 8006a5a:	6893      	ldr	r3, [r2, #8]
 8006a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a60:	6093      	str	r3, [r2, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a62:	6802      	ldr	r2, [r0, #0]
 8006a64:	6813      	ldr	r3, [r2, #0]
 8006a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a6a:	6013      	str	r3, [r2, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a6c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8006a6e:	f7ff ffe7 	bl	8006a40 <HAL_UART_TxCpltCallback>
}
 8006a72:	e7fb      	b.n	8006a6c <UART_DMATransmitCplt+0x2a>

08006a74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a74:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a76:	6801      	ldr	r1, [r0, #0]
 8006a78:	680a      	ldr	r2, [r1, #0]
 8006a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a7e:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a80:	2220      	movs	r2, #32
 8006a82:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a86:	2200      	movs	r2, #0
 8006a88:	6742      	str	r2, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a8a:	f7ff ffd9 	bl	8006a40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a8e:	bd08      	pop	{r3, pc}

08006a90 <HAL_UART_TxHalfCpltCallback>:
}
 8006a90:	4770      	bx	lr

08006a92 <UART_DMATxHalfCplt>:
{
 8006a92:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8006a94:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006a96:	f7ff fffb 	bl	8006a90 <HAL_UART_TxHalfCpltCallback>
}
 8006a9a:	bd08      	pop	{r3, pc}

08006a9c <HAL_UART_ErrorCallback>:
}
 8006a9c:	4770      	bx	lr

08006a9e <UART_DMAError>:
{
 8006a9e:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006aa0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006aa2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006aa6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ab2:	d001      	beq.n	8006ab8 <UART_DMAError+0x1a>
 8006ab4:	2a21      	cmp	r2, #33	; 0x21
 8006ab6:	d010      	beq.n	8006ada <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ac0:	d001      	beq.n	8006ac6 <UART_DMAError+0x28>
 8006ac2:	2d22      	cmp	r5, #34	; 0x22
 8006ac4:	d010      	beq.n	8006ae8 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ac6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006aca:	f043 0310 	orr.w	r3, r3, #16
 8006ace:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f7ff ffe2 	bl	8006a9c <HAL_UART_ErrorCallback>
}
 8006ad8:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f7ff ff2b 	bl	800693c <UART_EndTxTransfer>
 8006ae6:	e7e7      	b.n	8006ab8 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006aee:	4620      	mov	r0, r4
 8006af0:	f7ff ff32 	bl	8006958 <UART_EndRxTransfer>
 8006af4:	e7e7      	b.n	8006ac6 <UART_DMAError+0x28>

08006af6 <UART_DMAAbortOnError>:
{
 8006af6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006af8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b00:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8006b04:	f7ff ffca 	bl	8006a9c <HAL_UART_ErrorCallback>
}
 8006b08:	bd08      	pop	{r3, pc}

08006b0a <HAL_UARTEx_RxEventCallback>:
}
 8006b0a:	4770      	bx	lr

08006b0c <HAL_UART_IRQHandler>:
{
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b10:	6801      	ldr	r1, [r0, #0]
 8006b12:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b14:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b16:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b18:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8006b1c:	401a      	ands	r2, r3
 8006b1e:	d108      	bne.n	8006b32 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b20:	f013 0f20 	tst.w	r3, #32
 8006b24:	d005      	beq.n	8006b32 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b26:	f010 0f20 	tst.w	r0, #32
 8006b2a:	d134      	bne.n	8006b96 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b2c:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8006b30:	d131      	bne.n	8006b96 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8006b32:	b12a      	cbz	r2, 8006b40 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b34:	4aa8      	ldr	r2, [pc, #672]	; (8006dd8 <HAL_UART_IRQHandler+0x2cc>)
 8006b36:	402a      	ands	r2, r5
 8006b38:	d133      	bne.n	8006ba2 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b3a:	4ea8      	ldr	r6, [pc, #672]	; (8006ddc <HAL_UART_IRQHandler+0x2d0>)
 8006b3c:	4230      	tst	r0, r6
 8006b3e:	d130      	bne.n	8006ba2 <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b40:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006b42:	2a01      	cmp	r2, #1
 8006b44:	f000 80bb 	beq.w	8006cbe <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b48:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006b4c:	d003      	beq.n	8006b56 <HAL_UART_IRQHandler+0x4a>
 8006b4e:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8006b52:	f040 8127 	bne.w	8006da4 <HAL_UART_IRQHandler+0x298>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b56:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b5a:	d007      	beq.n	8006b6c <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b5c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006b60:	f040 8127 	bne.w	8006db2 <HAL_UART_IRQHandler+0x2a6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b64:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8006b68:	f040 8123 	bne.w	8006db2 <HAL_UART_IRQHandler+0x2a6>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b70:	d003      	beq.n	8006b7a <HAL_UART_IRQHandler+0x6e>
 8006b72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b76:	f040 8123 	bne.w	8006dc0 <HAL_UART_IRQHandler+0x2b4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b7a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006b7e:	d003      	beq.n	8006b88 <HAL_UART_IRQHandler+0x7c>
 8006b80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b84:	f040 8120 	bne.w	8006dc8 <HAL_UART_IRQHandler+0x2bc>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b88:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006b8c:	d002      	beq.n	8006b94 <HAL_UART_IRQHandler+0x88>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	f2c0 811e 	blt.w	8006dd0 <HAL_UART_IRQHandler+0x2c4>
}
 8006b94:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8006b96:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0fb      	beq.n	8006b94 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	4798      	blx	r3
      return;
 8006ba0:	e7f8      	b.n	8006b94 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ba2:	f013 0f01 	tst.w	r3, #1
 8006ba6:	d009      	beq.n	8006bbc <HAL_UART_IRQHandler+0xb0>
 8006ba8:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006bac:	d006      	beq.n	8006bbc <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bae:	2601      	movs	r6, #1
 8006bb0:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bb2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006bb6:	4331      	orrs	r1, r6
 8006bb8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bbc:	f013 0f02 	tst.w	r3, #2
 8006bc0:	d00b      	beq.n	8006bda <HAL_UART_IRQHandler+0xce>
 8006bc2:	f015 0f01 	tst.w	r5, #1
 8006bc6:	d008      	beq.n	8006bda <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bc8:	6821      	ldr	r1, [r4, #0]
 8006bca:	2602      	movs	r6, #2
 8006bcc:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bce:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006bd2:	f041 0104 	orr.w	r1, r1, #4
 8006bd6:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bda:	f013 0f04 	tst.w	r3, #4
 8006bde:	d00b      	beq.n	8006bf8 <HAL_UART_IRQHandler+0xec>
 8006be0:	f015 0f01 	tst.w	r5, #1
 8006be4:	d008      	beq.n	8006bf8 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006be6:	6821      	ldr	r1, [r4, #0]
 8006be8:	2604      	movs	r6, #4
 8006bea:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bec:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006bf0:	f041 0102 	orr.w	r1, r1, #2
 8006bf4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bf8:	f013 0f08 	tst.w	r3, #8
 8006bfc:	d00b      	beq.n	8006c16 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bfe:	f010 0f20 	tst.w	r0, #32
 8006c02:	d100      	bne.n	8006c06 <HAL_UART_IRQHandler+0xfa>
 8006c04:	b13a      	cbz	r2, 8006c16 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c06:	6822      	ldr	r2, [r4, #0]
 8006c08:	2108      	movs	r1, #8
 8006c0a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c0c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006c10:	430a      	orrs	r2, r1
 8006c12:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c16:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006c1a:	d00c      	beq.n	8006c36 <HAL_UART_IRQHandler+0x12a>
 8006c1c:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8006c20:	d009      	beq.n	8006c36 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c28:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c2a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006c2e:	f042 0220 	orr.w	r2, r2, #32
 8006c32:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c36:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006c3a:	2a00      	cmp	r2, #0
 8006c3c:	d0aa      	beq.n	8006b94 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c3e:	f013 0f20 	tst.w	r3, #32
 8006c42:	d009      	beq.n	8006c58 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c44:	f010 0f20 	tst.w	r0, #32
 8006c48:	d102      	bne.n	8006c50 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c4a:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8006c4e:	d003      	beq.n	8006c58 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8006c50:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006c52:	b10b      	cbz	r3, 8006c58 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8006c54:	4620      	mov	r0, r4
 8006c56:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8006c58:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c64:	d102      	bne.n	8006c6c <HAL_UART_IRQHandler+0x160>
 8006c66:	f012 0f28 	tst.w	r2, #40	; 0x28
 8006c6a:	d021      	beq.n	8006cb0 <HAL_UART_IRQHandler+0x1a4>
        UART_EndRxTransfer(huart);
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f7ff fe73 	bl	8006958 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	689a      	ldr	r2, [r3, #8]
 8006c76:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006c7a:	d015      	beq.n	8006ca8 <HAL_UART_IRQHandler+0x19c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c7c:	689a      	ldr	r2, [r3, #8]
 8006c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c82:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006c84:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006c86:	b15b      	cbz	r3, 8006ca0 <HAL_UART_IRQHandler+0x194>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c88:	4a55      	ldr	r2, [pc, #340]	; (8006de0 <HAL_UART_IRQHandler+0x2d4>)
 8006c8a:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c8c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006c8e:	f7fe fa81 	bl	8005194 <HAL_DMA_Abort_IT>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	f43f af7e 	beq.w	8006b94 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c98:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006c9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006c9c:	4798      	blx	r3
 8006c9e:	e779      	b.n	8006b94 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f7ff fefb 	bl	8006a9c <HAL_UART_ErrorCallback>
 8006ca6:	e775      	b.n	8006b94 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f7ff fef7 	bl	8006a9c <HAL_UART_ErrorCallback>
 8006cae:	e771      	b.n	8006b94 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f7ff fef3 	bl	8006a9c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8006cbc:	e76a      	b.n	8006b94 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cbe:	f013 0f10 	tst.w	r3, #16
 8006cc2:	f43f af41 	beq.w	8006b48 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cc6:	f010 0f10 	tst.w	r0, #16
 8006cca:	f43f af3d 	beq.w	8006b48 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cce:	2310      	movs	r3, #16
 8006cd0:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd2:	6822      	ldr	r2, [r4, #0]
 8006cd4:	6893      	ldr	r3, [r2, #8]
 8006cd6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006cda:	d039      	beq.n	8006d50 <HAL_UART_IRQHandler+0x244>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cdc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8006cde:	680b      	ldr	r3, [r1, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f43f af55 	beq.w	8006b94 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cea:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8006cee:	4298      	cmp	r0, r3
 8006cf0:	f67f af50 	bls.w	8006b94 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8006cf4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006cf8:	680b      	ldr	r3, [r1, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f013 0f20 	tst.w	r3, #32
 8006d00:	d00a      	beq.n	8006d18 <HAL_UART_IRQHandler+0x20c>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d02:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006d06:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	1ac9      	subs	r1, r1, r3
 8006d0e:	b289      	uxth	r1, r1
 8006d10:	4620      	mov	r0, r4
 8006d12:	f7ff fefa 	bl	8006b0a <HAL_UARTEx_RxEventCallback>
      return;
 8006d16:	e73d      	b.n	8006b94 <HAL_UART_IRQHandler+0x88>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d18:	6813      	ldr	r3, [r2, #0]
 8006d1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d1e:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d20:	6822      	ldr	r2, [r4, #0]
 8006d22:	6893      	ldr	r3, [r2, #8]
 8006d24:	f023 0301 	bic.w	r3, r3, #1
 8006d28:	6093      	str	r3, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d2a:	6822      	ldr	r2, [r4, #0]
 8006d2c:	6893      	ldr	r3, [r2, #8]
 8006d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d32:	6093      	str	r3, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8006d34:	2320      	movs	r3, #32
 8006d36:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	66e3      	str	r3, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	6813      	ldr	r3, [r2, #0]
 8006d42:	f023 0310 	bic.w	r3, r3, #16
 8006d46:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d48:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006d4a:	f7fe f9ed 	bl	8005128 <HAL_DMA_Abort>
 8006d4e:	e7d8      	b.n	8006d02 <HAL_UART_IRQHandler+0x1f6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d50:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006d54:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	1ac9      	subs	r1, r1, r3
 8006d5c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8006d5e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f43f af15 	beq.w	8006b94 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 8006d6a:	2900      	cmp	r1, #0
 8006d6c:	f43f af12 	beq.w	8006b94 <HAL_UART_IRQHandler+0x88>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d70:	6813      	ldr	r3, [r2, #0]
 8006d72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d76:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d78:	6822      	ldr	r2, [r4, #0]
 8006d7a:	6893      	ldr	r3, [r2, #8]
 8006d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d80:	f023 0301 	bic.w	r3, r3, #1
 8006d84:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8006d86:	2320      	movs	r3, #32
 8006d88:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8006d90:	6723      	str	r3, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d92:	6822      	ldr	r2, [r4, #0]
 8006d94:	6813      	ldr	r3, [r2, #0]
 8006d96:	f023 0310 	bic.w	r3, r3, #16
 8006d9a:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f7ff feb4 	bl	8006b0a <HAL_UARTEx_RxEventCallback>
      return;
 8006da2:	e6f7      	b.n	8006b94 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006da4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006da8:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 fb14 	bl	80073d8 <HAL_UARTEx_WakeupCallback>
    return;
 8006db0:	e6f0      	b.n	8006b94 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8006db2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f43f aeed 	beq.w	8006b94 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8006dba:	4620      	mov	r0, r4
 8006dbc:	4798      	blx	r3
    return;
 8006dbe:	e6e9      	b.n	8006b94 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f7ff fe57 	bl	8006a74 <UART_EndTransmit_IT>
    return;
 8006dc6:	e6e5      	b.n	8006b94 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 fb07 	bl	80073dc <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8006dce:	e6e1      	b.n	8006b94 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fb02 	bl	80073da <HAL_UARTEx_RxFifoFullCallback>
    return;
 8006dd6:	e6dd      	b.n	8006b94 <HAL_UART_IRQHandler+0x88>
 8006dd8:	10000001 	.word	0x10000001
 8006ddc:	04000120 	.word	0x04000120
 8006de0:	08006af7 	.word	0x08006af7

08006de4 <UART_SetConfig>:
{
 8006de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de8:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dea:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dec:	6883      	ldr	r3, [r0, #8]
 8006dee:	6902      	ldr	r2, [r0, #16]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	6942      	ldr	r2, [r0, #20]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	69c2      	ldr	r2, [r0, #28]
 8006df8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dfa:	6808      	ldr	r0, [r1, #0]
 8006dfc:	4a9d      	ldr	r2, [pc, #628]	; (8007074 <UART_SetConfig+0x290>)
 8006dfe:	4002      	ands	r2, r0
 8006e00:	4313      	orrs	r3, r2
 8006e02:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e04:	6822      	ldr	r2, [r4, #0]
 8006e06:	6853      	ldr	r3, [r2, #4]
 8006e08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e0c:	68e1      	ldr	r1, [r4, #12]
 8006e0e:	430b      	orrs	r3, r1
 8006e10:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e12:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e14:	6822      	ldr	r2, [r4, #0]
 8006e16:	4b98      	ldr	r3, [pc, #608]	; (8007078 <UART_SetConfig+0x294>)
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d001      	beq.n	8006e20 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8006e1c:	6a23      	ldr	r3, [r4, #32]
 8006e1e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e20:	6893      	ldr	r3, [r2, #8]
 8006e22:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006e26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006e2a:	430b      	orrs	r3, r1
 8006e2c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e2e:	6822      	ldr	r2, [r4, #0]
 8006e30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006e32:	f023 030f 	bic.w	r3, r3, #15
 8006e36:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e38:	430b      	orrs	r3, r1
 8006e3a:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e3c:	6822      	ldr	r2, [r4, #0]
 8006e3e:	4b8f      	ldr	r3, [pc, #572]	; (800707c <UART_SetConfig+0x298>)
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d023      	beq.n	8006e8c <UART_SetConfig+0xa8>
 8006e44:	4b8e      	ldr	r3, [pc, #568]	; (8007080 <UART_SetConfig+0x29c>)
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d034      	beq.n	8006eb4 <UART_SetConfig+0xd0>
 8006e4a:	4b8e      	ldr	r3, [pc, #568]	; (8007084 <UART_SetConfig+0x2a0>)
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d04a      	beq.n	8006ee6 <UART_SetConfig+0x102>
 8006e50:	4b8d      	ldr	r3, [pc, #564]	; (8007088 <UART_SetConfig+0x2a4>)
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d059      	beq.n	8006f0a <UART_SetConfig+0x126>
 8006e56:	4b88      	ldr	r3, [pc, #544]	; (8007078 <UART_SetConfig+0x294>)
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d068      	beq.n	8006f2e <UART_SetConfig+0x14a>
 8006e5c:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e5e:	4986      	ldr	r1, [pc, #536]	; (8007078 <UART_SetConfig+0x294>)
 8006e60:	428a      	cmp	r2, r1
 8006e62:	f000 8095 	beq.w	8006f90 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e66:	69e0      	ldr	r0, [r4, #28]
 8006e68:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006e6c:	f000 80d4 	beq.w	8007018 <UART_SetConfig+0x234>
    switch (clocksource)
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	f200 8152 	bhi.w	800711a <UART_SetConfig+0x336>
 8006e76:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006e7a:	0114      	.short	0x0114
 8006e7c:	01120137 	.word	0x01120137
 8006e80:	013a0150 	.word	0x013a0150
 8006e84:	01500150 	.word	0x01500150
 8006e88:	013d0150 	.word	0x013d0150
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e8c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8006e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e94:	f003 0303 	and.w	r3, r3, #3
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d809      	bhi.n	8006eb0 <UART_SetConfig+0xcc>
 8006e9c:	e8df f003 	tbb	[pc, r3]
 8006ea0:	065c0402 	.word	0x065c0402
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e7da      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	e7d8      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006eac:	2308      	movs	r3, #8
 8006eae:	e7d6      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	e7d4      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006eb4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8006eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ebc:	f003 030c 	and.w	r3, r3, #12
 8006ec0:	2b0c      	cmp	r3, #12
 8006ec2:	d80e      	bhi.n	8006ee2 <UART_SetConfig+0xfe>
 8006ec4:	e8df f003 	tbb	[pc, r3]
 8006ec8:	0d0d0d07 	.word	0x0d0d0d07
 8006ecc:	0d0d0d09 	.word	0x0d0d0d09
 8006ed0:	0d0d0d4a 	.word	0x0d0d0d4a
 8006ed4:	0b          	.byte	0x0b
 8006ed5:	00          	.byte	0x00
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e7c1      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006eda:	2304      	movs	r3, #4
 8006edc:	e7bf      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006ede:	2308      	movs	r3, #8
 8006ee0:	e7bd      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006ee2:	2310      	movs	r3, #16
 8006ee4:	e7bb      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006ee6:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8006eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	d034      	beq.n	8006f60 <UART_SetConfig+0x17c>
 8006ef6:	d804      	bhi.n	8006f02 <UART_SetConfig+0x11e>
 8006ef8:	b3a3      	cbz	r3, 8006f64 <UART_SetConfig+0x180>
 8006efa:	2b10      	cmp	r3, #16
 8006efc:	d134      	bne.n	8006f68 <UART_SetConfig+0x184>
 8006efe:	2304      	movs	r3, #4
 8006f00:	e7ad      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f02:	2b30      	cmp	r3, #48	; 0x30
 8006f04:	d132      	bne.n	8006f6c <UART_SetConfig+0x188>
 8006f06:	2308      	movs	r3, #8
 8006f08:	e7a9      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f0a:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8006f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f16:	2b80      	cmp	r3, #128	; 0x80
 8006f18:	d02a      	beq.n	8006f70 <UART_SetConfig+0x18c>
 8006f1a:	d804      	bhi.n	8006f26 <UART_SetConfig+0x142>
 8006f1c:	b353      	cbz	r3, 8006f74 <UART_SetConfig+0x190>
 8006f1e:	2b40      	cmp	r3, #64	; 0x40
 8006f20:	d12a      	bne.n	8006f78 <UART_SetConfig+0x194>
 8006f22:	2304      	movs	r3, #4
 8006f24:	e79b      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f26:	2bc0      	cmp	r3, #192	; 0xc0
 8006f28:	d128      	bne.n	8006f7c <UART_SetConfig+0x198>
 8006f2a:	2308      	movs	r3, #8
 8006f2c:	e797      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f2e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8006f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f3e:	d01f      	beq.n	8006f80 <UART_SetConfig+0x19c>
 8006f40:	d805      	bhi.n	8006f4e <UART_SetConfig+0x16a>
 8006f42:	b1fb      	cbz	r3, 8006f84 <UART_SetConfig+0x1a0>
 8006f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f48:	d11e      	bne.n	8006f88 <UART_SetConfig+0x1a4>
 8006f4a:	2304      	movs	r3, #4
 8006f4c:	e787      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f52:	d11b      	bne.n	8006f8c <UART_SetConfig+0x1a8>
 8006f54:	2308      	movs	r3, #8
 8006f56:	e782      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	e780      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e77e      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f60:	2302      	movs	r3, #2
 8006f62:	e77c      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f64:	2300      	movs	r3, #0
 8006f66:	e77a      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f68:	2310      	movs	r3, #16
 8006f6a:	e778      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f6c:	2310      	movs	r3, #16
 8006f6e:	e776      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e774      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f74:	2300      	movs	r3, #0
 8006f76:	e772      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f78:	2310      	movs	r3, #16
 8006f7a:	e770      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f7c:	2310      	movs	r3, #16
 8006f7e:	e76e      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f80:	2302      	movs	r3, #2
 8006f82:	e76c      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f84:	2300      	movs	r3, #0
 8006f86:	e76a      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f88:	2310      	movs	r3, #16
 8006f8a:	e768      	b.n	8006e5e <UART_SetConfig+0x7a>
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	e766      	b.n	8006e5e <UART_SetConfig+0x7a>
    switch (clocksource)
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	f200 80b2 	bhi.w	80070fa <UART_SetConfig+0x316>
 8006f96:	e8df f003 	tbb	[pc, r3]
 8006f9a:	b008      	.short	0xb008
 8006f9c:	b03ab03d 	.word	0xb03ab03d
 8006fa0:	b0b0      	.short	0xb0b0
 8006fa2:	05          	.byte	0x05
 8006fa3:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fa4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006fa8:	e004      	b.n	8006fb4 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006faa:	f7ff f987 	bl	80062bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	f000 80a5 	beq.w	80070fe <UART_SetConfig+0x31a>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006fb4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006fb6:	4b35      	ldr	r3, [pc, #212]	; (800708c <UART_SetConfig+0x2a8>)
 8006fb8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006fbc:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fc0:	6865      	ldr	r5, [r4, #4]
 8006fc2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006fc6:	4299      	cmp	r1, r3
 8006fc8:	f200 809b 	bhi.w	8007102 <UART_SetConfig+0x31e>
 8006fcc:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006fd0:	f200 8099 	bhi.w	8007106 <UART_SetConfig+0x322>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fd4:	f04f 0800 	mov.w	r8, #0
 8006fd8:	b292      	uxth	r2, r2
 8006fda:	2300      	movs	r3, #0
 8006fdc:	4641      	mov	r1, r8
 8006fde:	f7f9 fe2b 	bl	8000c38 <__aeabi_uldivmod>
 8006fe2:	020f      	lsls	r7, r1, #8
 8006fe4:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8006fe8:	0206      	lsls	r6, r0, #8
 8006fea:	0868      	lsrs	r0, r5, #1
 8006fec:	462a      	mov	r2, r5
 8006fee:	4643      	mov	r3, r8
 8006ff0:	1830      	adds	r0, r6, r0
 8006ff2:	f147 0100 	adc.w	r1, r7, #0
 8006ff6:	f7f9 fe1f 	bl	8000c38 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ffa:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006ffe:	4b24      	ldr	r3, [pc, #144]	; (8007090 <UART_SetConfig+0x2ac>)
 8007000:	429a      	cmp	r2, r3
 8007002:	f200 8082 	bhi.w	800710a <UART_SetConfig+0x326>
          huart->Instance->BRR = usartdiv;
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	60d8      	str	r0, [r3, #12]
 800700a:	4640      	mov	r0, r8
 800700c:	e062      	b.n	80070d4 <UART_SetConfig+0x2f0>
        pclk = HAL_RCC_GetSysClockFreq();
 800700e:	f7ff f80f 	bl	8006030 <HAL_RCC_GetSysClockFreq>
        break;
 8007012:	e7cc      	b.n	8006fae <UART_SetConfig+0x1ca>
        pclk = (uint32_t) HSI_VALUE;
 8007014:	481f      	ldr	r0, [pc, #124]	; (8007094 <UART_SetConfig+0x2b0>)
 8007016:	e7cd      	b.n	8006fb4 <UART_SetConfig+0x1d0>
    switch (clocksource)
 8007018:	2b08      	cmp	r3, #8
 800701a:	d878      	bhi.n	800710e <UART_SetConfig+0x32a>
 800701c:	e8df f003 	tbb	[pc, r3]
 8007020:	77052707 	.word	0x77052707
 8007024:	7777773c 	.word	0x7777773c
 8007028:	0b          	.byte	0x0b
 8007029:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800702a:	481a      	ldr	r0, [pc, #104]	; (8007094 <UART_SetConfig+0x2b0>)
 800702c:	e003      	b.n	8007036 <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetPCLK1Freq();
 800702e:	f7ff f945 	bl	80062bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007032:	2800      	cmp	r0, #0
 8007034:	d06d      	beq.n	8007112 <UART_SetConfig+0x32e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007036:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007038:	4b14      	ldr	r3, [pc, #80]	; (800708c <UART_SetConfig+0x2a8>)
 800703a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800703e:	fbb0 f0f3 	udiv	r0, r0, r3
 8007042:	6862      	ldr	r2, [r4, #4]
 8007044:	0853      	lsrs	r3, r2, #1
 8007046:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800704a:	fbb0 f0f2 	udiv	r0, r0, r2
 800704e:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007050:	f1a0 0210 	sub.w	r2, r0, #16
 8007054:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007058:	429a      	cmp	r2, r3
 800705a:	d85c      	bhi.n	8007116 <UART_SetConfig+0x332>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800705c:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007060:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8007064:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	60d8      	str	r0, [r3, #12]
 800706a:	2000      	movs	r0, #0
 800706c:	e032      	b.n	80070d4 <UART_SetConfig+0x2f0>
        pclk = HAL_RCC_GetPCLK2Freq();
 800706e:	f7ff f937 	bl	80062e0 <HAL_RCC_GetPCLK2Freq>
        break;
 8007072:	e7de      	b.n	8007032 <UART_SetConfig+0x24e>
 8007074:	cfff69f3 	.word	0xcfff69f3
 8007078:	40008000 	.word	0x40008000
 800707c:	40013800 	.word	0x40013800
 8007080:	40004400 	.word	0x40004400
 8007084:	40004800 	.word	0x40004800
 8007088:	40004c00 	.word	0x40004c00
 800708c:	0800b810 	.word	0x0800b810
 8007090:	000ffcff 	.word	0x000ffcff
 8007094:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetSysClockFreq();
 8007098:	f7fe ffca 	bl	8006030 <HAL_RCC_GetSysClockFreq>
        break;
 800709c:	e7c9      	b.n	8007032 <UART_SetConfig+0x24e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800709e:	4822      	ldr	r0, [pc, #136]	; (8007128 <UART_SetConfig+0x344>)
 80070a0:	e003      	b.n	80070aa <UART_SetConfig+0x2c6>
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a2:	f7ff f90b 	bl	80062bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d039      	beq.n	800711e <UART_SetConfig+0x33a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80070ac:	4b1f      	ldr	r3, [pc, #124]	; (800712c <UART_SetConfig+0x348>)
 80070ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80070b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80070b6:	6863      	ldr	r3, [r4, #4]
 80070b8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80070bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80070c0:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070c2:	f1a0 0210 	sub.w	r2, r0, #16
 80070c6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d829      	bhi.n	8007122 <UART_SetConfig+0x33e>
        huart->Instance->BRR = usartdiv;
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	60d8      	str	r0, [r3, #12]
 80070d2:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80070d4:	2301      	movs	r3, #1
 80070d6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80070da:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80070de:	2300      	movs	r3, #0
 80070e0:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 80070e2:	6763      	str	r3, [r4, #116]	; 0x74
}
 80070e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80070e8:	f7ff f8fa 	bl	80062e0 <HAL_RCC_GetPCLK2Freq>
        break;
 80070ec:	e7db      	b.n	80070a6 <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetSysClockFreq();
 80070ee:	f7fe ff9f 	bl	8006030 <HAL_RCC_GetSysClockFreq>
        break;
 80070f2:	e7d8      	b.n	80070a6 <UART_SetConfig+0x2c2>
        pclk = (uint32_t) LSE_VALUE;
 80070f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80070f8:	e7d7      	b.n	80070aa <UART_SetConfig+0x2c6>
  if (UART_INSTANCE_LOWPOWER(huart))
 80070fa:	2001      	movs	r0, #1
 80070fc:	e7ea      	b.n	80070d4 <UART_SetConfig+0x2f0>
 80070fe:	2000      	movs	r0, #0
 8007100:	e7e8      	b.n	80070d4 <UART_SetConfig+0x2f0>
        ret = HAL_ERROR;
 8007102:	2001      	movs	r0, #1
 8007104:	e7e6      	b.n	80070d4 <UART_SetConfig+0x2f0>
 8007106:	2001      	movs	r0, #1
 8007108:	e7e4      	b.n	80070d4 <UART_SetConfig+0x2f0>
          ret = HAL_ERROR;
 800710a:	2001      	movs	r0, #1
 800710c:	e7e2      	b.n	80070d4 <UART_SetConfig+0x2f0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800710e:	2001      	movs	r0, #1
 8007110:	e7e0      	b.n	80070d4 <UART_SetConfig+0x2f0>
 8007112:	2000      	movs	r0, #0
 8007114:	e7de      	b.n	80070d4 <UART_SetConfig+0x2f0>
        ret = HAL_ERROR;
 8007116:	2001      	movs	r0, #1
 8007118:	e7dc      	b.n	80070d4 <UART_SetConfig+0x2f0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800711a:	2001      	movs	r0, #1
 800711c:	e7da      	b.n	80070d4 <UART_SetConfig+0x2f0>
 800711e:	2000      	movs	r0, #0
 8007120:	e7d8      	b.n	80070d4 <UART_SetConfig+0x2f0>
        ret = HAL_ERROR;
 8007122:	2001      	movs	r0, #1
 8007124:	e7d6      	b.n	80070d4 <UART_SetConfig+0x2f0>
 8007126:	bf00      	nop
 8007128:	00f42400 	.word	0x00f42400
 800712c:	0800b810 	.word	0x0800b810

08007130 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007130:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007132:	f013 0f01 	tst.w	r3, #1
 8007136:	d006      	beq.n	8007146 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007138:	6802      	ldr	r2, [r0, #0]
 800713a:	6853      	ldr	r3, [r2, #4]
 800713c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007140:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007142:	430b      	orrs	r3, r1
 8007144:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007146:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007148:	f013 0f02 	tst.w	r3, #2
 800714c:	d006      	beq.n	800715c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800714e:	6802      	ldr	r2, [r0, #0]
 8007150:	6853      	ldr	r3, [r2, #4]
 8007152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007156:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007158:	430b      	orrs	r3, r1
 800715a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800715c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800715e:	f013 0f04 	tst.w	r3, #4
 8007162:	d006      	beq.n	8007172 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007164:	6802      	ldr	r2, [r0, #0]
 8007166:	6853      	ldr	r3, [r2, #4]
 8007168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800716c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800716e:	430b      	orrs	r3, r1
 8007170:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007172:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007174:	f013 0f08 	tst.w	r3, #8
 8007178:	d006      	beq.n	8007188 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800717a:	6802      	ldr	r2, [r0, #0]
 800717c:	6853      	ldr	r3, [r2, #4]
 800717e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007182:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007184:	430b      	orrs	r3, r1
 8007186:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007188:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800718a:	f013 0f10 	tst.w	r3, #16
 800718e:	d006      	beq.n	800719e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007190:	6802      	ldr	r2, [r0, #0]
 8007192:	6893      	ldr	r3, [r2, #8]
 8007194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007198:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800719a:	430b      	orrs	r3, r1
 800719c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800719e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80071a0:	f013 0f20 	tst.w	r3, #32
 80071a4:	d006      	beq.n	80071b4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071a6:	6802      	ldr	r2, [r0, #0]
 80071a8:	6893      	ldr	r3, [r2, #8]
 80071aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071ae:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80071b0:	430b      	orrs	r3, r1
 80071b2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80071b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80071ba:	d00a      	beq.n	80071d2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071bc:	6802      	ldr	r2, [r0, #0]
 80071be:	6853      	ldr	r3, [r2, #4]
 80071c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80071c4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80071c6:	430b      	orrs	r3, r1
 80071c8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80071cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d0:	d00b      	beq.n	80071ea <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80071d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80071d8:	d006      	beq.n	80071e8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071da:	6802      	ldr	r2, [r0, #0]
 80071dc:	6853      	ldr	r3, [r2, #4]
 80071de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80071e2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80071e4:	430b      	orrs	r3, r1
 80071e6:	6053      	str	r3, [r2, #4]
}
 80071e8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071ea:	6802      	ldr	r2, [r0, #0]
 80071ec:	6853      	ldr	r3, [r2, #4]
 80071ee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80071f2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80071f4:	430b      	orrs	r3, r1
 80071f6:	6053      	str	r3, [r2, #4]
 80071f8:	e7eb      	b.n	80071d2 <UART_AdvFeatureConfig+0xa2>

080071fa <UART_WaitOnFlagUntilTimeout>:
{
 80071fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071fe:	4605      	mov	r5, r0
 8007200:	460f      	mov	r7, r1
 8007202:	4616      	mov	r6, r2
 8007204:	4699      	mov	r9, r3
 8007206:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800720a:	682c      	ldr	r4, [r5, #0]
 800720c:	69e4      	ldr	r4, [r4, #28]
 800720e:	ea37 0304 	bics.w	r3, r7, r4
 8007212:	bf0c      	ite	eq
 8007214:	2401      	moveq	r4, #1
 8007216:	2400      	movne	r4, #0
 8007218:	42b4      	cmp	r4, r6
 800721a:	d141      	bne.n	80072a0 <UART_WaitOnFlagUntilTimeout+0xa6>
    if (Timeout != HAL_MAX_DELAY)
 800721c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007220:	d0f3      	beq.n	800720a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007222:	f7fd fddd 	bl	8004de0 <HAL_GetTick>
 8007226:	eba0 0009 	sub.w	r0, r0, r9
 800722a:	4540      	cmp	r0, r8
 800722c:	d824      	bhi.n	8007278 <UART_WaitOnFlagUntilTimeout+0x7e>
 800722e:	f1b8 0f00 	cmp.w	r8, #0
 8007232:	d021      	beq.n	8007278 <UART_WaitOnFlagUntilTimeout+0x7e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	f012 0f04 	tst.w	r2, #4
 800723c:	d0e5      	beq.n	800720a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800723e:	69da      	ldr	r2, [r3, #28]
 8007240:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007244:	d0e1      	beq.n	800720a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007246:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800724a:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800724c:	682a      	ldr	r2, [r5, #0]
 800724e:	6813      	ldr	r3, [r2, #0]
 8007250:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007254:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007256:	682a      	ldr	r2, [r5, #0]
 8007258:	6893      	ldr	r3, [r2, #8]
 800725a:	f023 0301 	bic.w	r3, r3, #1
 800725e:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8007260:	2320      	movs	r3, #32
 8007262:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007266:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800726a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800726e:	2300      	movs	r3, #0
 8007270:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8007274:	2003      	movs	r0, #3
 8007276:	e014      	b.n	80072a2 <UART_WaitOnFlagUntilTimeout+0xa8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007278:	682a      	ldr	r2, [r5, #0]
 800727a:	6813      	ldr	r3, [r2, #0]
 800727c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007280:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007282:	682a      	ldr	r2, [r5, #0]
 8007284:	6893      	ldr	r3, [r2, #8]
 8007286:	f023 0301 	bic.w	r3, r3, #1
 800728a:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800728c:	2320      	movs	r3, #32
 800728e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007292:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8007296:	2300      	movs	r3, #0
 8007298:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 800729c:	2003      	movs	r0, #3
 800729e:	e000      	b.n	80072a2 <UART_WaitOnFlagUntilTimeout+0xa8>
  return HAL_OK;
 80072a0:	2000      	movs	r0, #0
}
 80072a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080072a6 <UART_CheckIdleState>:
{
 80072a6:	b530      	push	{r4, r5, lr}
 80072a8:	b083      	sub	sp, #12
 80072aa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ac:	2300      	movs	r3, #0
 80072ae:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80072b2:	f7fd fd95 	bl	8004de0 <HAL_GetTick>
 80072b6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f013 0f08 	tst.w	r3, #8
 80072c0:	d10f      	bne.n	80072e2 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f013 0f04 	tst.w	r3, #4
 80072ca:	d118      	bne.n	80072fe <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80072cc:	2320      	movs	r3, #32
 80072ce:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80072d2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d6:	2000      	movs	r0, #0
 80072d8:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80072da:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80072de:	b003      	add	sp, #12
 80072e0:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	4603      	mov	r3, r0
 80072ea:	2200      	movs	r2, #0
 80072ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072f0:	4620      	mov	r0, r4
 80072f2:	f7ff ff82 	bl	80071fa <UART_WaitOnFlagUntilTimeout>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d0e3      	beq.n	80072c2 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80072fa:	2003      	movs	r0, #3
 80072fc:	e7ef      	b.n	80072de <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	462b      	mov	r3, r5
 8007306:	2200      	movs	r2, #0
 8007308:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800730c:	4620      	mov	r0, r4
 800730e:	f7ff ff74 	bl	80071fa <UART_WaitOnFlagUntilTimeout>
 8007312:	2800      	cmp	r0, #0
 8007314:	d0da      	beq.n	80072cc <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8007316:	2003      	movs	r0, #3
 8007318:	e7e1      	b.n	80072de <UART_CheckIdleState+0x38>

0800731a <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 800731a:	2800      	cmp	r0, #0
 800731c:	d034      	beq.n	8007388 <HAL_HalfDuplex_Init+0x6e>
{
 800731e:	b510      	push	{r4, lr}
 8007320:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007322:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8007326:	b333      	cbz	r3, 8007376 <HAL_HalfDuplex_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 8007328:	2324      	movs	r3, #36	; 0x24
 800732a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800732e:	6822      	ldr	r2, [r4, #0]
 8007330:	6813      	ldr	r3, [r2, #0]
 8007332:	f023 0301 	bic.w	r3, r3, #1
 8007336:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007338:	4620      	mov	r0, r4
 800733a:	f7ff fd53 	bl	8006de4 <UART_SetConfig>
 800733e:	2801      	cmp	r0, #1
 8007340:	d018      	beq.n	8007374 <HAL_HalfDuplex_Init+0x5a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007342:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007344:	b9e3      	cbnz	r3, 8007380 <HAL_HalfDuplex_Init+0x66>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007346:	6822      	ldr	r2, [r4, #0]
 8007348:	6853      	ldr	r3, [r2, #4]
 800734a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800734e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007350:	6822      	ldr	r2, [r4, #0]
 8007352:	6893      	ldr	r3, [r2, #8]
 8007354:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007358:	6093      	str	r3, [r2, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800735a:	6822      	ldr	r2, [r4, #0]
 800735c:	6893      	ldr	r3, [r2, #8]
 800735e:	f043 0308 	orr.w	r3, r3, #8
 8007362:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007364:	6822      	ldr	r2, [r4, #0]
 8007366:	6813      	ldr	r3, [r2, #0]
 8007368:	f043 0301 	orr.w	r3, r3, #1
 800736c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800736e:	4620      	mov	r0, r4
 8007370:	f7ff ff99 	bl	80072a6 <UART_CheckIdleState>
}
 8007374:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007376:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800737a:	f7fa fa7b 	bl	8001874 <HAL_UART_MspInit>
 800737e:	e7d3      	b.n	8007328 <HAL_HalfDuplex_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8007380:	4620      	mov	r0, r4
 8007382:	f7ff fed5 	bl	8007130 <UART_AdvFeatureConfig>
 8007386:	e7de      	b.n	8007346 <HAL_HalfDuplex_Init+0x2c>
    return HAL_ERROR;
 8007388:	2001      	movs	r0, #1
}
 800738a:	4770      	bx	lr

0800738c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800738c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800738e:	b92b      	cbnz	r3, 800739c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8007390:	2301      	movs	r3, #1
 8007392:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007396:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800739a:	4770      	bx	lr
{
 800739c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800739e:	6803      	ldr	r3, [r0, #0]
 80073a0:	689a      	ldr	r2, [r3, #8]
 80073a2:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073a6:	6899      	ldr	r1, [r3, #8]
 80073a8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073aa:	4d09      	ldr	r5, [pc, #36]	; (80073d0 <UARTEx_SetNbDataToProcess+0x44>)
 80073ac:	5c6b      	ldrb	r3, [r5, r1]
 80073ae:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80073b0:	4c08      	ldr	r4, [pc, #32]	; (80073d4 <UARTEx_SetNbDataToProcess+0x48>)
 80073b2:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073b4:	fb93 f3f1 	sdiv	r3, r3, r1
 80073b8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073bc:	5cab      	ldrb	r3, [r5, r2]
 80073be:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073c0:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80073c6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80073ca:	bc30      	pop	{r4, r5}
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	0800b830 	.word	0x0800b830
 80073d4:	0800b828 	.word	0x0800b828

080073d8 <HAL_UARTEx_WakeupCallback>:
}
 80073d8:	4770      	bx	lr

080073da <HAL_UARTEx_RxFifoFullCallback>:
}
 80073da:	4770      	bx	lr

080073dc <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80073dc:	4770      	bx	lr

080073de <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80073de:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d018      	beq.n	8007418 <HAL_UARTEx_DisableFifoMode+0x3a>
 80073e6:	2301      	movs	r3, #1
 80073e8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80073ec:	2324      	movs	r3, #36	; 0x24
 80073ee:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073f2:	6803      	ldr	r3, [r0, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80073f6:	6819      	ldr	r1, [r3, #0]
 80073f8:	f021 0101 	bic.w	r1, r1, #1
 80073fc:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073fe:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007402:	2300      	movs	r3, #0
 8007404:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007406:	6801      	ldr	r1, [r0, #0]
 8007408:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800740a:	2220      	movs	r2, #32
 800740c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007410:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8007414:	4618      	mov	r0, r3
 8007416:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007418:	2002      	movs	r0, #2
}
 800741a:	4770      	bx	lr

0800741c <HAL_UARTEx_SetTxFifoThreshold>:
{
 800741c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800741e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007422:	2b01      	cmp	r3, #1
 8007424:	d01d      	beq.n	8007462 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007426:	4604      	mov	r4, r0
 8007428:	2301      	movs	r3, #1
 800742a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800742e:	2324      	movs	r3, #36	; 0x24
 8007430:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007434:	6803      	ldr	r3, [r0, #0]
 8007436:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	f022 0201 	bic.w	r2, r2, #1
 800743e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007440:	6802      	ldr	r2, [r0, #0]
 8007442:	6893      	ldr	r3, [r2, #8]
 8007444:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8007448:	4319      	orrs	r1, r3
 800744a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800744c:	f7ff ff9e 	bl	800738c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007454:	2320      	movs	r3, #32
 8007456:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800745a:	2000      	movs	r0, #0
 800745c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007460:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007462:	2002      	movs	r0, #2
 8007464:	e7fc      	b.n	8007460 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08007466 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007466:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007468:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800746c:	2b01      	cmp	r3, #1
 800746e:	d01d      	beq.n	80074ac <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007470:	4604      	mov	r4, r0
 8007472:	2301      	movs	r3, #1
 8007474:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007478:	2324      	movs	r3, #36	; 0x24
 800747a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800747e:	6803      	ldr	r3, [r0, #0]
 8007480:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	f022 0201 	bic.w	r2, r2, #1
 8007488:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800748a:	6802      	ldr	r2, [r0, #0]
 800748c:	6893      	ldr	r3, [r2, #8]
 800748e:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8007492:	4319      	orrs	r1, r3
 8007494:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007496:	f7ff ff79 	bl	800738c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800749e:	2320      	movs	r3, #32
 80074a0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80074a4:	2000      	movs	r0, #0
 80074a6:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80074ac:	2002      	movs	r0, #2
 80074ae:	e7fc      	b.n	80074aa <HAL_UARTEx_SetRxFifoThreshold+0x44>

080074b0 <__errno>:
 80074b0:	4b01      	ldr	r3, [pc, #4]	; (80074b8 <__errno+0x8>)
 80074b2:	6818      	ldr	r0, [r3, #0]
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	20001e3c 	.word	0x20001e3c

080074bc <__libc_init_array>:
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	4d0d      	ldr	r5, [pc, #52]	; (80074f4 <__libc_init_array+0x38>)
 80074c0:	4c0d      	ldr	r4, [pc, #52]	; (80074f8 <__libc_init_array+0x3c>)
 80074c2:	1b64      	subs	r4, r4, r5
 80074c4:	10a4      	asrs	r4, r4, #2
 80074c6:	2600      	movs	r6, #0
 80074c8:	42a6      	cmp	r6, r4
 80074ca:	d109      	bne.n	80074e0 <__libc_init_array+0x24>
 80074cc:	4d0b      	ldr	r5, [pc, #44]	; (80074fc <__libc_init_array+0x40>)
 80074ce:	4c0c      	ldr	r4, [pc, #48]	; (8007500 <__libc_init_array+0x44>)
 80074d0:	f003 fdc4 	bl	800b05c <_init>
 80074d4:	1b64      	subs	r4, r4, r5
 80074d6:	10a4      	asrs	r4, r4, #2
 80074d8:	2600      	movs	r6, #0
 80074da:	42a6      	cmp	r6, r4
 80074dc:	d105      	bne.n	80074ea <__libc_init_array+0x2e>
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074e4:	4798      	blx	r3
 80074e6:	3601      	adds	r6, #1
 80074e8:	e7ee      	b.n	80074c8 <__libc_init_array+0xc>
 80074ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ee:	4798      	blx	r3
 80074f0:	3601      	adds	r6, #1
 80074f2:	e7f2      	b.n	80074da <__libc_init_array+0x1e>
 80074f4:	0800bc68 	.word	0x0800bc68
 80074f8:	0800bc68 	.word	0x0800bc68
 80074fc:	0800bc68 	.word	0x0800bc68
 8007500:	0800bc6c 	.word	0x0800bc6c

08007504 <malloc>:
 8007504:	4b02      	ldr	r3, [pc, #8]	; (8007510 <malloc+0xc>)
 8007506:	4601      	mov	r1, r0
 8007508:	6818      	ldr	r0, [r3, #0]
 800750a:	f000 b869 	b.w	80075e0 <_malloc_r>
 800750e:	bf00      	nop
 8007510:	20001e3c 	.word	0x20001e3c

08007514 <memcpy>:
 8007514:	440a      	add	r2, r1
 8007516:	4291      	cmp	r1, r2
 8007518:	f100 33ff 	add.w	r3, r0, #4294967295
 800751c:	d100      	bne.n	8007520 <memcpy+0xc>
 800751e:	4770      	bx	lr
 8007520:	b510      	push	{r4, lr}
 8007522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800752a:	4291      	cmp	r1, r2
 800752c:	d1f9      	bne.n	8007522 <memcpy+0xe>
 800752e:	bd10      	pop	{r4, pc}

08007530 <memset>:
 8007530:	4402      	add	r2, r0
 8007532:	4603      	mov	r3, r0
 8007534:	4293      	cmp	r3, r2
 8007536:	d100      	bne.n	800753a <memset+0xa>
 8007538:	4770      	bx	lr
 800753a:	f803 1b01 	strb.w	r1, [r3], #1
 800753e:	e7f9      	b.n	8007534 <memset+0x4>

08007540 <_free_r>:
 8007540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007542:	2900      	cmp	r1, #0
 8007544:	d048      	beq.n	80075d8 <_free_r+0x98>
 8007546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800754a:	9001      	str	r0, [sp, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f1a1 0404 	sub.w	r4, r1, #4
 8007552:	bfb8      	it	lt
 8007554:	18e4      	addlt	r4, r4, r3
 8007556:	f001 ff17 	bl	8009388 <__malloc_lock>
 800755a:	4a20      	ldr	r2, [pc, #128]	; (80075dc <_free_r+0x9c>)
 800755c:	9801      	ldr	r0, [sp, #4]
 800755e:	6813      	ldr	r3, [r2, #0]
 8007560:	4615      	mov	r5, r2
 8007562:	b933      	cbnz	r3, 8007572 <_free_r+0x32>
 8007564:	6063      	str	r3, [r4, #4]
 8007566:	6014      	str	r4, [r2, #0]
 8007568:	b003      	add	sp, #12
 800756a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800756e:	f001 bf11 	b.w	8009394 <__malloc_unlock>
 8007572:	42a3      	cmp	r3, r4
 8007574:	d90b      	bls.n	800758e <_free_r+0x4e>
 8007576:	6821      	ldr	r1, [r4, #0]
 8007578:	1862      	adds	r2, r4, r1
 800757a:	4293      	cmp	r3, r2
 800757c:	bf04      	itt	eq
 800757e:	681a      	ldreq	r2, [r3, #0]
 8007580:	685b      	ldreq	r3, [r3, #4]
 8007582:	6063      	str	r3, [r4, #4]
 8007584:	bf04      	itt	eq
 8007586:	1852      	addeq	r2, r2, r1
 8007588:	6022      	streq	r2, [r4, #0]
 800758a:	602c      	str	r4, [r5, #0]
 800758c:	e7ec      	b.n	8007568 <_free_r+0x28>
 800758e:	461a      	mov	r2, r3
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	b10b      	cbz	r3, 8007598 <_free_r+0x58>
 8007594:	42a3      	cmp	r3, r4
 8007596:	d9fa      	bls.n	800758e <_free_r+0x4e>
 8007598:	6811      	ldr	r1, [r2, #0]
 800759a:	1855      	adds	r5, r2, r1
 800759c:	42a5      	cmp	r5, r4
 800759e:	d10b      	bne.n	80075b8 <_free_r+0x78>
 80075a0:	6824      	ldr	r4, [r4, #0]
 80075a2:	4421      	add	r1, r4
 80075a4:	1854      	adds	r4, r2, r1
 80075a6:	42a3      	cmp	r3, r4
 80075a8:	6011      	str	r1, [r2, #0]
 80075aa:	d1dd      	bne.n	8007568 <_free_r+0x28>
 80075ac:	681c      	ldr	r4, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	6053      	str	r3, [r2, #4]
 80075b2:	4421      	add	r1, r4
 80075b4:	6011      	str	r1, [r2, #0]
 80075b6:	e7d7      	b.n	8007568 <_free_r+0x28>
 80075b8:	d902      	bls.n	80075c0 <_free_r+0x80>
 80075ba:	230c      	movs	r3, #12
 80075bc:	6003      	str	r3, [r0, #0]
 80075be:	e7d3      	b.n	8007568 <_free_r+0x28>
 80075c0:	6825      	ldr	r5, [r4, #0]
 80075c2:	1961      	adds	r1, r4, r5
 80075c4:	428b      	cmp	r3, r1
 80075c6:	bf04      	itt	eq
 80075c8:	6819      	ldreq	r1, [r3, #0]
 80075ca:	685b      	ldreq	r3, [r3, #4]
 80075cc:	6063      	str	r3, [r4, #4]
 80075ce:	bf04      	itt	eq
 80075d0:	1949      	addeq	r1, r1, r5
 80075d2:	6021      	streq	r1, [r4, #0]
 80075d4:	6054      	str	r4, [r2, #4]
 80075d6:	e7c7      	b.n	8007568 <_free_r+0x28>
 80075d8:	b003      	add	sp, #12
 80075da:	bd30      	pop	{r4, r5, pc}
 80075dc:	200020b8 	.word	0x200020b8

080075e0 <_malloc_r>:
 80075e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e2:	1ccd      	adds	r5, r1, #3
 80075e4:	f025 0503 	bic.w	r5, r5, #3
 80075e8:	3508      	adds	r5, #8
 80075ea:	2d0c      	cmp	r5, #12
 80075ec:	bf38      	it	cc
 80075ee:	250c      	movcc	r5, #12
 80075f0:	2d00      	cmp	r5, #0
 80075f2:	4606      	mov	r6, r0
 80075f4:	db01      	blt.n	80075fa <_malloc_r+0x1a>
 80075f6:	42a9      	cmp	r1, r5
 80075f8:	d903      	bls.n	8007602 <_malloc_r+0x22>
 80075fa:	230c      	movs	r3, #12
 80075fc:	6033      	str	r3, [r6, #0]
 80075fe:	2000      	movs	r0, #0
 8007600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007602:	f001 fec1 	bl	8009388 <__malloc_lock>
 8007606:	4921      	ldr	r1, [pc, #132]	; (800768c <_malloc_r+0xac>)
 8007608:	680a      	ldr	r2, [r1, #0]
 800760a:	4614      	mov	r4, r2
 800760c:	b99c      	cbnz	r4, 8007636 <_malloc_r+0x56>
 800760e:	4f20      	ldr	r7, [pc, #128]	; (8007690 <_malloc_r+0xb0>)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	b923      	cbnz	r3, 800761e <_malloc_r+0x3e>
 8007614:	4621      	mov	r1, r4
 8007616:	4630      	mov	r0, r6
 8007618:	f000 fd4a 	bl	80080b0 <_sbrk_r>
 800761c:	6038      	str	r0, [r7, #0]
 800761e:	4629      	mov	r1, r5
 8007620:	4630      	mov	r0, r6
 8007622:	f000 fd45 	bl	80080b0 <_sbrk_r>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	d123      	bne.n	8007672 <_malloc_r+0x92>
 800762a:	230c      	movs	r3, #12
 800762c:	6033      	str	r3, [r6, #0]
 800762e:	4630      	mov	r0, r6
 8007630:	f001 feb0 	bl	8009394 <__malloc_unlock>
 8007634:	e7e3      	b.n	80075fe <_malloc_r+0x1e>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	1b5b      	subs	r3, r3, r5
 800763a:	d417      	bmi.n	800766c <_malloc_r+0x8c>
 800763c:	2b0b      	cmp	r3, #11
 800763e:	d903      	bls.n	8007648 <_malloc_r+0x68>
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	441c      	add	r4, r3
 8007644:	6025      	str	r5, [r4, #0]
 8007646:	e004      	b.n	8007652 <_malloc_r+0x72>
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	42a2      	cmp	r2, r4
 800764c:	bf0c      	ite	eq
 800764e:	600b      	streq	r3, [r1, #0]
 8007650:	6053      	strne	r3, [r2, #4]
 8007652:	4630      	mov	r0, r6
 8007654:	f001 fe9e 	bl	8009394 <__malloc_unlock>
 8007658:	f104 000b 	add.w	r0, r4, #11
 800765c:	1d23      	adds	r3, r4, #4
 800765e:	f020 0007 	bic.w	r0, r0, #7
 8007662:	1ac2      	subs	r2, r0, r3
 8007664:	d0cc      	beq.n	8007600 <_malloc_r+0x20>
 8007666:	1a1b      	subs	r3, r3, r0
 8007668:	50a3      	str	r3, [r4, r2]
 800766a:	e7c9      	b.n	8007600 <_malloc_r+0x20>
 800766c:	4622      	mov	r2, r4
 800766e:	6864      	ldr	r4, [r4, #4]
 8007670:	e7cc      	b.n	800760c <_malloc_r+0x2c>
 8007672:	1cc4      	adds	r4, r0, #3
 8007674:	f024 0403 	bic.w	r4, r4, #3
 8007678:	42a0      	cmp	r0, r4
 800767a:	d0e3      	beq.n	8007644 <_malloc_r+0x64>
 800767c:	1a21      	subs	r1, r4, r0
 800767e:	4630      	mov	r0, r6
 8007680:	f000 fd16 	bl	80080b0 <_sbrk_r>
 8007684:	3001      	adds	r0, #1
 8007686:	d1dd      	bne.n	8007644 <_malloc_r+0x64>
 8007688:	e7cf      	b.n	800762a <_malloc_r+0x4a>
 800768a:	bf00      	nop
 800768c:	200020b8 	.word	0x200020b8
 8007690:	200020bc 	.word	0x200020bc

08007694 <__cvt>:
 8007694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007698:	ec55 4b10 	vmov	r4, r5, d0
 800769c:	2d00      	cmp	r5, #0
 800769e:	460e      	mov	r6, r1
 80076a0:	4619      	mov	r1, r3
 80076a2:	462b      	mov	r3, r5
 80076a4:	bfbb      	ittet	lt
 80076a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80076aa:	461d      	movlt	r5, r3
 80076ac:	2300      	movge	r3, #0
 80076ae:	232d      	movlt	r3, #45	; 0x2d
 80076b0:	700b      	strb	r3, [r1, #0]
 80076b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076b8:	4691      	mov	r9, r2
 80076ba:	f023 0820 	bic.w	r8, r3, #32
 80076be:	bfbc      	itt	lt
 80076c0:	4622      	movlt	r2, r4
 80076c2:	4614      	movlt	r4, r2
 80076c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076c8:	d005      	beq.n	80076d6 <__cvt+0x42>
 80076ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076ce:	d100      	bne.n	80076d2 <__cvt+0x3e>
 80076d0:	3601      	adds	r6, #1
 80076d2:	2102      	movs	r1, #2
 80076d4:	e000      	b.n	80076d8 <__cvt+0x44>
 80076d6:	2103      	movs	r1, #3
 80076d8:	ab03      	add	r3, sp, #12
 80076da:	9301      	str	r3, [sp, #4]
 80076dc:	ab02      	add	r3, sp, #8
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	ec45 4b10 	vmov	d0, r4, r5
 80076e4:	4653      	mov	r3, sl
 80076e6:	4632      	mov	r2, r6
 80076e8:	f000 fe3e 	bl	8008368 <_dtoa_r>
 80076ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80076f0:	4607      	mov	r7, r0
 80076f2:	d102      	bne.n	80076fa <__cvt+0x66>
 80076f4:	f019 0f01 	tst.w	r9, #1
 80076f8:	d022      	beq.n	8007740 <__cvt+0xac>
 80076fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076fe:	eb07 0906 	add.w	r9, r7, r6
 8007702:	d110      	bne.n	8007726 <__cvt+0x92>
 8007704:	783b      	ldrb	r3, [r7, #0]
 8007706:	2b30      	cmp	r3, #48	; 0x30
 8007708:	d10a      	bne.n	8007720 <__cvt+0x8c>
 800770a:	2200      	movs	r2, #0
 800770c:	2300      	movs	r3, #0
 800770e:	4620      	mov	r0, r4
 8007710:	4629      	mov	r1, r5
 8007712:	f7f9 fa01 	bl	8000b18 <__aeabi_dcmpeq>
 8007716:	b918      	cbnz	r0, 8007720 <__cvt+0x8c>
 8007718:	f1c6 0601 	rsb	r6, r6, #1
 800771c:	f8ca 6000 	str.w	r6, [sl]
 8007720:	f8da 3000 	ldr.w	r3, [sl]
 8007724:	4499      	add	r9, r3
 8007726:	2200      	movs	r2, #0
 8007728:	2300      	movs	r3, #0
 800772a:	4620      	mov	r0, r4
 800772c:	4629      	mov	r1, r5
 800772e:	f7f9 f9f3 	bl	8000b18 <__aeabi_dcmpeq>
 8007732:	b108      	cbz	r0, 8007738 <__cvt+0xa4>
 8007734:	f8cd 900c 	str.w	r9, [sp, #12]
 8007738:	2230      	movs	r2, #48	; 0x30
 800773a:	9b03      	ldr	r3, [sp, #12]
 800773c:	454b      	cmp	r3, r9
 800773e:	d307      	bcc.n	8007750 <__cvt+0xbc>
 8007740:	9b03      	ldr	r3, [sp, #12]
 8007742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007744:	1bdb      	subs	r3, r3, r7
 8007746:	4638      	mov	r0, r7
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	b004      	add	sp, #16
 800774c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007750:	1c59      	adds	r1, r3, #1
 8007752:	9103      	str	r1, [sp, #12]
 8007754:	701a      	strb	r2, [r3, #0]
 8007756:	e7f0      	b.n	800773a <__cvt+0xa6>

08007758 <__exponent>:
 8007758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800775a:	4603      	mov	r3, r0
 800775c:	2900      	cmp	r1, #0
 800775e:	bfb8      	it	lt
 8007760:	4249      	neglt	r1, r1
 8007762:	f803 2b02 	strb.w	r2, [r3], #2
 8007766:	bfb4      	ite	lt
 8007768:	222d      	movlt	r2, #45	; 0x2d
 800776a:	222b      	movge	r2, #43	; 0x2b
 800776c:	2909      	cmp	r1, #9
 800776e:	7042      	strb	r2, [r0, #1]
 8007770:	dd2a      	ble.n	80077c8 <__exponent+0x70>
 8007772:	f10d 0407 	add.w	r4, sp, #7
 8007776:	46a4      	mov	ip, r4
 8007778:	270a      	movs	r7, #10
 800777a:	46a6      	mov	lr, r4
 800777c:	460a      	mov	r2, r1
 800777e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007782:	fb07 1516 	mls	r5, r7, r6, r1
 8007786:	3530      	adds	r5, #48	; 0x30
 8007788:	2a63      	cmp	r2, #99	; 0x63
 800778a:	f104 34ff 	add.w	r4, r4, #4294967295
 800778e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007792:	4631      	mov	r1, r6
 8007794:	dcf1      	bgt.n	800777a <__exponent+0x22>
 8007796:	3130      	adds	r1, #48	; 0x30
 8007798:	f1ae 0502 	sub.w	r5, lr, #2
 800779c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077a0:	1c44      	adds	r4, r0, #1
 80077a2:	4629      	mov	r1, r5
 80077a4:	4561      	cmp	r1, ip
 80077a6:	d30a      	bcc.n	80077be <__exponent+0x66>
 80077a8:	f10d 0209 	add.w	r2, sp, #9
 80077ac:	eba2 020e 	sub.w	r2, r2, lr
 80077b0:	4565      	cmp	r5, ip
 80077b2:	bf88      	it	hi
 80077b4:	2200      	movhi	r2, #0
 80077b6:	4413      	add	r3, r2
 80077b8:	1a18      	subs	r0, r3, r0
 80077ba:	b003      	add	sp, #12
 80077bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80077c6:	e7ed      	b.n	80077a4 <__exponent+0x4c>
 80077c8:	2330      	movs	r3, #48	; 0x30
 80077ca:	3130      	adds	r1, #48	; 0x30
 80077cc:	7083      	strb	r3, [r0, #2]
 80077ce:	70c1      	strb	r1, [r0, #3]
 80077d0:	1d03      	adds	r3, r0, #4
 80077d2:	e7f1      	b.n	80077b8 <__exponent+0x60>

080077d4 <_printf_float>:
 80077d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d8:	ed2d 8b02 	vpush	{d8}
 80077dc:	b08d      	sub	sp, #52	; 0x34
 80077de:	460c      	mov	r4, r1
 80077e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077e4:	4616      	mov	r6, r2
 80077e6:	461f      	mov	r7, r3
 80077e8:	4605      	mov	r5, r0
 80077ea:	f001 fd61 	bl	80092b0 <_localeconv_r>
 80077ee:	f8d0 a000 	ldr.w	sl, [r0]
 80077f2:	4650      	mov	r0, sl
 80077f4:	f7f8 fd14 	bl	8000220 <strlen>
 80077f8:	2300      	movs	r3, #0
 80077fa:	930a      	str	r3, [sp, #40]	; 0x28
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	9305      	str	r3, [sp, #20]
 8007800:	f8d8 3000 	ldr.w	r3, [r8]
 8007804:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007808:	3307      	adds	r3, #7
 800780a:	f023 0307 	bic.w	r3, r3, #7
 800780e:	f103 0208 	add.w	r2, r3, #8
 8007812:	f8c8 2000 	str.w	r2, [r8]
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800781e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007822:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007826:	9307      	str	r3, [sp, #28]
 8007828:	f8cd 8018 	str.w	r8, [sp, #24]
 800782c:	ee08 0a10 	vmov	s16, r0
 8007830:	4b9f      	ldr	r3, [pc, #636]	; (8007ab0 <_printf_float+0x2dc>)
 8007832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007836:	f04f 32ff 	mov.w	r2, #4294967295
 800783a:	f7f9 f99f 	bl	8000b7c <__aeabi_dcmpun>
 800783e:	bb88      	cbnz	r0, 80078a4 <_printf_float+0xd0>
 8007840:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007844:	4b9a      	ldr	r3, [pc, #616]	; (8007ab0 <_printf_float+0x2dc>)
 8007846:	f04f 32ff 	mov.w	r2, #4294967295
 800784a:	f7f9 f979 	bl	8000b40 <__aeabi_dcmple>
 800784e:	bb48      	cbnz	r0, 80078a4 <_printf_float+0xd0>
 8007850:	2200      	movs	r2, #0
 8007852:	2300      	movs	r3, #0
 8007854:	4640      	mov	r0, r8
 8007856:	4649      	mov	r1, r9
 8007858:	f7f9 f968 	bl	8000b2c <__aeabi_dcmplt>
 800785c:	b110      	cbz	r0, 8007864 <_printf_float+0x90>
 800785e:	232d      	movs	r3, #45	; 0x2d
 8007860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007864:	4b93      	ldr	r3, [pc, #588]	; (8007ab4 <_printf_float+0x2e0>)
 8007866:	4894      	ldr	r0, [pc, #592]	; (8007ab8 <_printf_float+0x2e4>)
 8007868:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800786c:	bf94      	ite	ls
 800786e:	4698      	movls	r8, r3
 8007870:	4680      	movhi	r8, r0
 8007872:	2303      	movs	r3, #3
 8007874:	6123      	str	r3, [r4, #16]
 8007876:	9b05      	ldr	r3, [sp, #20]
 8007878:	f023 0204 	bic.w	r2, r3, #4
 800787c:	6022      	str	r2, [r4, #0]
 800787e:	f04f 0900 	mov.w	r9, #0
 8007882:	9700      	str	r7, [sp, #0]
 8007884:	4633      	mov	r3, r6
 8007886:	aa0b      	add	r2, sp, #44	; 0x2c
 8007888:	4621      	mov	r1, r4
 800788a:	4628      	mov	r0, r5
 800788c:	f000 f9d8 	bl	8007c40 <_printf_common>
 8007890:	3001      	adds	r0, #1
 8007892:	f040 8090 	bne.w	80079b6 <_printf_float+0x1e2>
 8007896:	f04f 30ff 	mov.w	r0, #4294967295
 800789a:	b00d      	add	sp, #52	; 0x34
 800789c:	ecbd 8b02 	vpop	{d8}
 80078a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a4:	4642      	mov	r2, r8
 80078a6:	464b      	mov	r3, r9
 80078a8:	4640      	mov	r0, r8
 80078aa:	4649      	mov	r1, r9
 80078ac:	f7f9 f966 	bl	8000b7c <__aeabi_dcmpun>
 80078b0:	b140      	cbz	r0, 80078c4 <_printf_float+0xf0>
 80078b2:	464b      	mov	r3, r9
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bfbc      	itt	lt
 80078b8:	232d      	movlt	r3, #45	; 0x2d
 80078ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078be:	487f      	ldr	r0, [pc, #508]	; (8007abc <_printf_float+0x2e8>)
 80078c0:	4b7f      	ldr	r3, [pc, #508]	; (8007ac0 <_printf_float+0x2ec>)
 80078c2:	e7d1      	b.n	8007868 <_printf_float+0x94>
 80078c4:	6863      	ldr	r3, [r4, #4]
 80078c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078ca:	9206      	str	r2, [sp, #24]
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	d13f      	bne.n	8007950 <_printf_float+0x17c>
 80078d0:	2306      	movs	r3, #6
 80078d2:	6063      	str	r3, [r4, #4]
 80078d4:	9b05      	ldr	r3, [sp, #20]
 80078d6:	6861      	ldr	r1, [r4, #4]
 80078d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078dc:	2300      	movs	r3, #0
 80078de:	9303      	str	r3, [sp, #12]
 80078e0:	ab0a      	add	r3, sp, #40	; 0x28
 80078e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078e6:	ab09      	add	r3, sp, #36	; 0x24
 80078e8:	ec49 8b10 	vmov	d0, r8, r9
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	6022      	str	r2, [r4, #0]
 80078f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078f4:	4628      	mov	r0, r5
 80078f6:	f7ff fecd 	bl	8007694 <__cvt>
 80078fa:	9b06      	ldr	r3, [sp, #24]
 80078fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078fe:	2b47      	cmp	r3, #71	; 0x47
 8007900:	4680      	mov	r8, r0
 8007902:	d108      	bne.n	8007916 <_printf_float+0x142>
 8007904:	1cc8      	adds	r0, r1, #3
 8007906:	db02      	blt.n	800790e <_printf_float+0x13a>
 8007908:	6863      	ldr	r3, [r4, #4]
 800790a:	4299      	cmp	r1, r3
 800790c:	dd41      	ble.n	8007992 <_printf_float+0x1be>
 800790e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007912:	fa5f fb8b 	uxtb.w	fp, fp
 8007916:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800791a:	d820      	bhi.n	800795e <_printf_float+0x18a>
 800791c:	3901      	subs	r1, #1
 800791e:	465a      	mov	r2, fp
 8007920:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007924:	9109      	str	r1, [sp, #36]	; 0x24
 8007926:	f7ff ff17 	bl	8007758 <__exponent>
 800792a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800792c:	1813      	adds	r3, r2, r0
 800792e:	2a01      	cmp	r2, #1
 8007930:	4681      	mov	r9, r0
 8007932:	6123      	str	r3, [r4, #16]
 8007934:	dc02      	bgt.n	800793c <_printf_float+0x168>
 8007936:	6822      	ldr	r2, [r4, #0]
 8007938:	07d2      	lsls	r2, r2, #31
 800793a:	d501      	bpl.n	8007940 <_printf_float+0x16c>
 800793c:	3301      	adds	r3, #1
 800793e:	6123      	str	r3, [r4, #16]
 8007940:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007944:	2b00      	cmp	r3, #0
 8007946:	d09c      	beq.n	8007882 <_printf_float+0xae>
 8007948:	232d      	movs	r3, #45	; 0x2d
 800794a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800794e:	e798      	b.n	8007882 <_printf_float+0xae>
 8007950:	9a06      	ldr	r2, [sp, #24]
 8007952:	2a47      	cmp	r2, #71	; 0x47
 8007954:	d1be      	bne.n	80078d4 <_printf_float+0x100>
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1bc      	bne.n	80078d4 <_printf_float+0x100>
 800795a:	2301      	movs	r3, #1
 800795c:	e7b9      	b.n	80078d2 <_printf_float+0xfe>
 800795e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007962:	d118      	bne.n	8007996 <_printf_float+0x1c2>
 8007964:	2900      	cmp	r1, #0
 8007966:	6863      	ldr	r3, [r4, #4]
 8007968:	dd0b      	ble.n	8007982 <_printf_float+0x1ae>
 800796a:	6121      	str	r1, [r4, #16]
 800796c:	b913      	cbnz	r3, 8007974 <_printf_float+0x1a0>
 800796e:	6822      	ldr	r2, [r4, #0]
 8007970:	07d0      	lsls	r0, r2, #31
 8007972:	d502      	bpl.n	800797a <_printf_float+0x1a6>
 8007974:	3301      	adds	r3, #1
 8007976:	440b      	add	r3, r1
 8007978:	6123      	str	r3, [r4, #16]
 800797a:	65a1      	str	r1, [r4, #88]	; 0x58
 800797c:	f04f 0900 	mov.w	r9, #0
 8007980:	e7de      	b.n	8007940 <_printf_float+0x16c>
 8007982:	b913      	cbnz	r3, 800798a <_printf_float+0x1b6>
 8007984:	6822      	ldr	r2, [r4, #0]
 8007986:	07d2      	lsls	r2, r2, #31
 8007988:	d501      	bpl.n	800798e <_printf_float+0x1ba>
 800798a:	3302      	adds	r3, #2
 800798c:	e7f4      	b.n	8007978 <_printf_float+0x1a4>
 800798e:	2301      	movs	r3, #1
 8007990:	e7f2      	b.n	8007978 <_printf_float+0x1a4>
 8007992:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007998:	4299      	cmp	r1, r3
 800799a:	db05      	blt.n	80079a8 <_printf_float+0x1d4>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	6121      	str	r1, [r4, #16]
 80079a0:	07d8      	lsls	r0, r3, #31
 80079a2:	d5ea      	bpl.n	800797a <_printf_float+0x1a6>
 80079a4:	1c4b      	adds	r3, r1, #1
 80079a6:	e7e7      	b.n	8007978 <_printf_float+0x1a4>
 80079a8:	2900      	cmp	r1, #0
 80079aa:	bfd4      	ite	le
 80079ac:	f1c1 0202 	rsble	r2, r1, #2
 80079b0:	2201      	movgt	r2, #1
 80079b2:	4413      	add	r3, r2
 80079b4:	e7e0      	b.n	8007978 <_printf_float+0x1a4>
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	055a      	lsls	r2, r3, #21
 80079ba:	d407      	bmi.n	80079cc <_printf_float+0x1f8>
 80079bc:	6923      	ldr	r3, [r4, #16]
 80079be:	4642      	mov	r2, r8
 80079c0:	4631      	mov	r1, r6
 80079c2:	4628      	mov	r0, r5
 80079c4:	47b8      	blx	r7
 80079c6:	3001      	adds	r0, #1
 80079c8:	d12c      	bne.n	8007a24 <_printf_float+0x250>
 80079ca:	e764      	b.n	8007896 <_printf_float+0xc2>
 80079cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079d0:	f240 80e0 	bls.w	8007b94 <_printf_float+0x3c0>
 80079d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079d8:	2200      	movs	r2, #0
 80079da:	2300      	movs	r3, #0
 80079dc:	f7f9 f89c 	bl	8000b18 <__aeabi_dcmpeq>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d034      	beq.n	8007a4e <_printf_float+0x27a>
 80079e4:	4a37      	ldr	r2, [pc, #220]	; (8007ac4 <_printf_float+0x2f0>)
 80079e6:	2301      	movs	r3, #1
 80079e8:	4631      	mov	r1, r6
 80079ea:	4628      	mov	r0, r5
 80079ec:	47b8      	blx	r7
 80079ee:	3001      	adds	r0, #1
 80079f0:	f43f af51 	beq.w	8007896 <_printf_float+0xc2>
 80079f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079f8:	429a      	cmp	r2, r3
 80079fa:	db02      	blt.n	8007a02 <_printf_float+0x22e>
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	07d8      	lsls	r0, r3, #31
 8007a00:	d510      	bpl.n	8007a24 <_printf_float+0x250>
 8007a02:	ee18 3a10 	vmov	r3, s16
 8007a06:	4652      	mov	r2, sl
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	47b8      	blx	r7
 8007a0e:	3001      	adds	r0, #1
 8007a10:	f43f af41 	beq.w	8007896 <_printf_float+0xc2>
 8007a14:	f04f 0800 	mov.w	r8, #0
 8007a18:	f104 091a 	add.w	r9, r4, #26
 8007a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	4543      	cmp	r3, r8
 8007a22:	dc09      	bgt.n	8007a38 <_printf_float+0x264>
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	079b      	lsls	r3, r3, #30
 8007a28:	f100 8105 	bmi.w	8007c36 <_printf_float+0x462>
 8007a2c:	68e0      	ldr	r0, [r4, #12]
 8007a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a30:	4298      	cmp	r0, r3
 8007a32:	bfb8      	it	lt
 8007a34:	4618      	movlt	r0, r3
 8007a36:	e730      	b.n	800789a <_printf_float+0xc6>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	464a      	mov	r2, r9
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	4628      	mov	r0, r5
 8007a40:	47b8      	blx	r7
 8007a42:	3001      	adds	r0, #1
 8007a44:	f43f af27 	beq.w	8007896 <_printf_float+0xc2>
 8007a48:	f108 0801 	add.w	r8, r8, #1
 8007a4c:	e7e6      	b.n	8007a1c <_printf_float+0x248>
 8007a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	dc39      	bgt.n	8007ac8 <_printf_float+0x2f4>
 8007a54:	4a1b      	ldr	r2, [pc, #108]	; (8007ac4 <_printf_float+0x2f0>)
 8007a56:	2301      	movs	r3, #1
 8007a58:	4631      	mov	r1, r6
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	47b8      	blx	r7
 8007a5e:	3001      	adds	r0, #1
 8007a60:	f43f af19 	beq.w	8007896 <_printf_float+0xc2>
 8007a64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	d102      	bne.n	8007a72 <_printf_float+0x29e>
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	07d9      	lsls	r1, r3, #31
 8007a70:	d5d8      	bpl.n	8007a24 <_printf_float+0x250>
 8007a72:	ee18 3a10 	vmov	r3, s16
 8007a76:	4652      	mov	r2, sl
 8007a78:	4631      	mov	r1, r6
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	47b8      	blx	r7
 8007a7e:	3001      	adds	r0, #1
 8007a80:	f43f af09 	beq.w	8007896 <_printf_float+0xc2>
 8007a84:	f04f 0900 	mov.w	r9, #0
 8007a88:	f104 0a1a 	add.w	sl, r4, #26
 8007a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8e:	425b      	negs	r3, r3
 8007a90:	454b      	cmp	r3, r9
 8007a92:	dc01      	bgt.n	8007a98 <_printf_float+0x2c4>
 8007a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a96:	e792      	b.n	80079be <_printf_float+0x1ea>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	4652      	mov	r2, sl
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	47b8      	blx	r7
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	f43f aef7 	beq.w	8007896 <_printf_float+0xc2>
 8007aa8:	f109 0901 	add.w	r9, r9, #1
 8007aac:	e7ee      	b.n	8007a8c <_printf_float+0x2b8>
 8007aae:	bf00      	nop
 8007ab0:	7fefffff 	.word	0x7fefffff
 8007ab4:	0800b83c 	.word	0x0800b83c
 8007ab8:	0800b840 	.word	0x0800b840
 8007abc:	0800b848 	.word	0x0800b848
 8007ac0:	0800b844 	.word	0x0800b844
 8007ac4:	0800b84c 	.word	0x0800b84c
 8007ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007acc:	429a      	cmp	r2, r3
 8007ace:	bfa8      	it	ge
 8007ad0:	461a      	movge	r2, r3
 8007ad2:	2a00      	cmp	r2, #0
 8007ad4:	4691      	mov	r9, r2
 8007ad6:	dc37      	bgt.n	8007b48 <_printf_float+0x374>
 8007ad8:	f04f 0b00 	mov.w	fp, #0
 8007adc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ae0:	f104 021a 	add.w	r2, r4, #26
 8007ae4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ae6:	9305      	str	r3, [sp, #20]
 8007ae8:	eba3 0309 	sub.w	r3, r3, r9
 8007aec:	455b      	cmp	r3, fp
 8007aee:	dc33      	bgt.n	8007b58 <_printf_float+0x384>
 8007af0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007af4:	429a      	cmp	r2, r3
 8007af6:	db3b      	blt.n	8007b70 <_printf_float+0x39c>
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	07da      	lsls	r2, r3, #31
 8007afc:	d438      	bmi.n	8007b70 <_printf_float+0x39c>
 8007afe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b00:	9b05      	ldr	r3, [sp, #20]
 8007b02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	eba2 0901 	sub.w	r9, r2, r1
 8007b0a:	4599      	cmp	r9, r3
 8007b0c:	bfa8      	it	ge
 8007b0e:	4699      	movge	r9, r3
 8007b10:	f1b9 0f00 	cmp.w	r9, #0
 8007b14:	dc35      	bgt.n	8007b82 <_printf_float+0x3ae>
 8007b16:	f04f 0800 	mov.w	r8, #0
 8007b1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b1e:	f104 0a1a 	add.w	sl, r4, #26
 8007b22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b26:	1a9b      	subs	r3, r3, r2
 8007b28:	eba3 0309 	sub.w	r3, r3, r9
 8007b2c:	4543      	cmp	r3, r8
 8007b2e:	f77f af79 	ble.w	8007a24 <_printf_float+0x250>
 8007b32:	2301      	movs	r3, #1
 8007b34:	4652      	mov	r2, sl
 8007b36:	4631      	mov	r1, r6
 8007b38:	4628      	mov	r0, r5
 8007b3a:	47b8      	blx	r7
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	f43f aeaa 	beq.w	8007896 <_printf_float+0xc2>
 8007b42:	f108 0801 	add.w	r8, r8, #1
 8007b46:	e7ec      	b.n	8007b22 <_printf_float+0x34e>
 8007b48:	4613      	mov	r3, r2
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	4642      	mov	r2, r8
 8007b4e:	4628      	mov	r0, r5
 8007b50:	47b8      	blx	r7
 8007b52:	3001      	adds	r0, #1
 8007b54:	d1c0      	bne.n	8007ad8 <_printf_float+0x304>
 8007b56:	e69e      	b.n	8007896 <_printf_float+0xc2>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	9205      	str	r2, [sp, #20]
 8007b60:	47b8      	blx	r7
 8007b62:	3001      	adds	r0, #1
 8007b64:	f43f ae97 	beq.w	8007896 <_printf_float+0xc2>
 8007b68:	9a05      	ldr	r2, [sp, #20]
 8007b6a:	f10b 0b01 	add.w	fp, fp, #1
 8007b6e:	e7b9      	b.n	8007ae4 <_printf_float+0x310>
 8007b70:	ee18 3a10 	vmov	r3, s16
 8007b74:	4652      	mov	r2, sl
 8007b76:	4631      	mov	r1, r6
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b8      	blx	r7
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d1be      	bne.n	8007afe <_printf_float+0x32a>
 8007b80:	e689      	b.n	8007896 <_printf_float+0xc2>
 8007b82:	9a05      	ldr	r2, [sp, #20]
 8007b84:	464b      	mov	r3, r9
 8007b86:	4442      	add	r2, r8
 8007b88:	4631      	mov	r1, r6
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	47b8      	blx	r7
 8007b8e:	3001      	adds	r0, #1
 8007b90:	d1c1      	bne.n	8007b16 <_printf_float+0x342>
 8007b92:	e680      	b.n	8007896 <_printf_float+0xc2>
 8007b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b96:	2a01      	cmp	r2, #1
 8007b98:	dc01      	bgt.n	8007b9e <_printf_float+0x3ca>
 8007b9a:	07db      	lsls	r3, r3, #31
 8007b9c:	d538      	bpl.n	8007c10 <_printf_float+0x43c>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	4642      	mov	r2, r8
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	47b8      	blx	r7
 8007ba8:	3001      	adds	r0, #1
 8007baa:	f43f ae74 	beq.w	8007896 <_printf_float+0xc2>
 8007bae:	ee18 3a10 	vmov	r3, s16
 8007bb2:	4652      	mov	r2, sl
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	47b8      	blx	r7
 8007bba:	3001      	adds	r0, #1
 8007bbc:	f43f ae6b 	beq.w	8007896 <_printf_float+0xc2>
 8007bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f7f8 ffa6 	bl	8000b18 <__aeabi_dcmpeq>
 8007bcc:	b9d8      	cbnz	r0, 8007c06 <_printf_float+0x432>
 8007bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd0:	f108 0201 	add.w	r2, r8, #1
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	4628      	mov	r0, r5
 8007bda:	47b8      	blx	r7
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d10e      	bne.n	8007bfe <_printf_float+0x42a>
 8007be0:	e659      	b.n	8007896 <_printf_float+0xc2>
 8007be2:	2301      	movs	r3, #1
 8007be4:	4652      	mov	r2, sl
 8007be6:	4631      	mov	r1, r6
 8007be8:	4628      	mov	r0, r5
 8007bea:	47b8      	blx	r7
 8007bec:	3001      	adds	r0, #1
 8007bee:	f43f ae52 	beq.w	8007896 <_printf_float+0xc2>
 8007bf2:	f108 0801 	add.w	r8, r8, #1
 8007bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	4543      	cmp	r3, r8
 8007bfc:	dcf1      	bgt.n	8007be2 <_printf_float+0x40e>
 8007bfe:	464b      	mov	r3, r9
 8007c00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c04:	e6dc      	b.n	80079c0 <_printf_float+0x1ec>
 8007c06:	f04f 0800 	mov.w	r8, #0
 8007c0a:	f104 0a1a 	add.w	sl, r4, #26
 8007c0e:	e7f2      	b.n	8007bf6 <_printf_float+0x422>
 8007c10:	2301      	movs	r3, #1
 8007c12:	4642      	mov	r2, r8
 8007c14:	e7df      	b.n	8007bd6 <_printf_float+0x402>
 8007c16:	2301      	movs	r3, #1
 8007c18:	464a      	mov	r2, r9
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	47b8      	blx	r7
 8007c20:	3001      	adds	r0, #1
 8007c22:	f43f ae38 	beq.w	8007896 <_printf_float+0xc2>
 8007c26:	f108 0801 	add.w	r8, r8, #1
 8007c2a:	68e3      	ldr	r3, [r4, #12]
 8007c2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c2e:	1a5b      	subs	r3, r3, r1
 8007c30:	4543      	cmp	r3, r8
 8007c32:	dcf0      	bgt.n	8007c16 <_printf_float+0x442>
 8007c34:	e6fa      	b.n	8007a2c <_printf_float+0x258>
 8007c36:	f04f 0800 	mov.w	r8, #0
 8007c3a:	f104 0919 	add.w	r9, r4, #25
 8007c3e:	e7f4      	b.n	8007c2a <_printf_float+0x456>

08007c40 <_printf_common>:
 8007c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c44:	4616      	mov	r6, r2
 8007c46:	4699      	mov	r9, r3
 8007c48:	688a      	ldr	r2, [r1, #8]
 8007c4a:	690b      	ldr	r3, [r1, #16]
 8007c4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c50:	4293      	cmp	r3, r2
 8007c52:	bfb8      	it	lt
 8007c54:	4613      	movlt	r3, r2
 8007c56:	6033      	str	r3, [r6, #0]
 8007c58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	460c      	mov	r4, r1
 8007c60:	b10a      	cbz	r2, 8007c66 <_printf_common+0x26>
 8007c62:	3301      	adds	r3, #1
 8007c64:	6033      	str	r3, [r6, #0]
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	0699      	lsls	r1, r3, #26
 8007c6a:	bf42      	ittt	mi
 8007c6c:	6833      	ldrmi	r3, [r6, #0]
 8007c6e:	3302      	addmi	r3, #2
 8007c70:	6033      	strmi	r3, [r6, #0]
 8007c72:	6825      	ldr	r5, [r4, #0]
 8007c74:	f015 0506 	ands.w	r5, r5, #6
 8007c78:	d106      	bne.n	8007c88 <_printf_common+0x48>
 8007c7a:	f104 0a19 	add.w	sl, r4, #25
 8007c7e:	68e3      	ldr	r3, [r4, #12]
 8007c80:	6832      	ldr	r2, [r6, #0]
 8007c82:	1a9b      	subs	r3, r3, r2
 8007c84:	42ab      	cmp	r3, r5
 8007c86:	dc26      	bgt.n	8007cd6 <_printf_common+0x96>
 8007c88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c8c:	1e13      	subs	r3, r2, #0
 8007c8e:	6822      	ldr	r2, [r4, #0]
 8007c90:	bf18      	it	ne
 8007c92:	2301      	movne	r3, #1
 8007c94:	0692      	lsls	r2, r2, #26
 8007c96:	d42b      	bmi.n	8007cf0 <_printf_common+0xb0>
 8007c98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	47c0      	blx	r8
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	d01e      	beq.n	8007ce4 <_printf_common+0xa4>
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	68e5      	ldr	r5, [r4, #12]
 8007caa:	6832      	ldr	r2, [r6, #0]
 8007cac:	f003 0306 	and.w	r3, r3, #6
 8007cb0:	2b04      	cmp	r3, #4
 8007cb2:	bf08      	it	eq
 8007cb4:	1aad      	subeq	r5, r5, r2
 8007cb6:	68a3      	ldr	r3, [r4, #8]
 8007cb8:	6922      	ldr	r2, [r4, #16]
 8007cba:	bf0c      	ite	eq
 8007cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cc0:	2500      	movne	r5, #0
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	bfc4      	itt	gt
 8007cc6:	1a9b      	subgt	r3, r3, r2
 8007cc8:	18ed      	addgt	r5, r5, r3
 8007cca:	2600      	movs	r6, #0
 8007ccc:	341a      	adds	r4, #26
 8007cce:	42b5      	cmp	r5, r6
 8007cd0:	d11a      	bne.n	8007d08 <_printf_common+0xc8>
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	e008      	b.n	8007ce8 <_printf_common+0xa8>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	4652      	mov	r2, sl
 8007cda:	4649      	mov	r1, r9
 8007cdc:	4638      	mov	r0, r7
 8007cde:	47c0      	blx	r8
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d103      	bne.n	8007cec <_printf_common+0xac>
 8007ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cec:	3501      	adds	r5, #1
 8007cee:	e7c6      	b.n	8007c7e <_printf_common+0x3e>
 8007cf0:	18e1      	adds	r1, r4, r3
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	2030      	movs	r0, #48	; 0x30
 8007cf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cfa:	4422      	add	r2, r4
 8007cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d04:	3302      	adds	r3, #2
 8007d06:	e7c7      	b.n	8007c98 <_printf_common+0x58>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	4622      	mov	r2, r4
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	4638      	mov	r0, r7
 8007d10:	47c0      	blx	r8
 8007d12:	3001      	adds	r0, #1
 8007d14:	d0e6      	beq.n	8007ce4 <_printf_common+0xa4>
 8007d16:	3601      	adds	r6, #1
 8007d18:	e7d9      	b.n	8007cce <_printf_common+0x8e>
	...

08007d1c <_printf_i>:
 8007d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d20:	460c      	mov	r4, r1
 8007d22:	4691      	mov	r9, r2
 8007d24:	7e27      	ldrb	r7, [r4, #24]
 8007d26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d28:	2f78      	cmp	r7, #120	; 0x78
 8007d2a:	4680      	mov	r8, r0
 8007d2c:	469a      	mov	sl, r3
 8007d2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d32:	d807      	bhi.n	8007d44 <_printf_i+0x28>
 8007d34:	2f62      	cmp	r7, #98	; 0x62
 8007d36:	d80a      	bhi.n	8007d4e <_printf_i+0x32>
 8007d38:	2f00      	cmp	r7, #0
 8007d3a:	f000 80d8 	beq.w	8007eee <_printf_i+0x1d2>
 8007d3e:	2f58      	cmp	r7, #88	; 0x58
 8007d40:	f000 80a3 	beq.w	8007e8a <_printf_i+0x16e>
 8007d44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d4c:	e03a      	b.n	8007dc4 <_printf_i+0xa8>
 8007d4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d52:	2b15      	cmp	r3, #21
 8007d54:	d8f6      	bhi.n	8007d44 <_printf_i+0x28>
 8007d56:	a001      	add	r0, pc, #4	; (adr r0, 8007d5c <_printf_i+0x40>)
 8007d58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007d5c:	08007db5 	.word	0x08007db5
 8007d60:	08007dc9 	.word	0x08007dc9
 8007d64:	08007d45 	.word	0x08007d45
 8007d68:	08007d45 	.word	0x08007d45
 8007d6c:	08007d45 	.word	0x08007d45
 8007d70:	08007d45 	.word	0x08007d45
 8007d74:	08007dc9 	.word	0x08007dc9
 8007d78:	08007d45 	.word	0x08007d45
 8007d7c:	08007d45 	.word	0x08007d45
 8007d80:	08007d45 	.word	0x08007d45
 8007d84:	08007d45 	.word	0x08007d45
 8007d88:	08007ed5 	.word	0x08007ed5
 8007d8c:	08007df9 	.word	0x08007df9
 8007d90:	08007eb7 	.word	0x08007eb7
 8007d94:	08007d45 	.word	0x08007d45
 8007d98:	08007d45 	.word	0x08007d45
 8007d9c:	08007ef7 	.word	0x08007ef7
 8007da0:	08007d45 	.word	0x08007d45
 8007da4:	08007df9 	.word	0x08007df9
 8007da8:	08007d45 	.word	0x08007d45
 8007dac:	08007d45 	.word	0x08007d45
 8007db0:	08007ebf 	.word	0x08007ebf
 8007db4:	680b      	ldr	r3, [r1, #0]
 8007db6:	1d1a      	adds	r2, r3, #4
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	600a      	str	r2, [r1, #0]
 8007dbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e0a3      	b.n	8007f10 <_printf_i+0x1f4>
 8007dc8:	6825      	ldr	r5, [r4, #0]
 8007dca:	6808      	ldr	r0, [r1, #0]
 8007dcc:	062e      	lsls	r6, r5, #24
 8007dce:	f100 0304 	add.w	r3, r0, #4
 8007dd2:	d50a      	bpl.n	8007dea <_printf_i+0xce>
 8007dd4:	6805      	ldr	r5, [r0, #0]
 8007dd6:	600b      	str	r3, [r1, #0]
 8007dd8:	2d00      	cmp	r5, #0
 8007dda:	da03      	bge.n	8007de4 <_printf_i+0xc8>
 8007ddc:	232d      	movs	r3, #45	; 0x2d
 8007dde:	426d      	negs	r5, r5
 8007de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007de4:	485e      	ldr	r0, [pc, #376]	; (8007f60 <_printf_i+0x244>)
 8007de6:	230a      	movs	r3, #10
 8007de8:	e019      	b.n	8007e1e <_printf_i+0x102>
 8007dea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007dee:	6805      	ldr	r5, [r0, #0]
 8007df0:	600b      	str	r3, [r1, #0]
 8007df2:	bf18      	it	ne
 8007df4:	b22d      	sxthne	r5, r5
 8007df6:	e7ef      	b.n	8007dd8 <_printf_i+0xbc>
 8007df8:	680b      	ldr	r3, [r1, #0]
 8007dfa:	6825      	ldr	r5, [r4, #0]
 8007dfc:	1d18      	adds	r0, r3, #4
 8007dfe:	6008      	str	r0, [r1, #0]
 8007e00:	0628      	lsls	r0, r5, #24
 8007e02:	d501      	bpl.n	8007e08 <_printf_i+0xec>
 8007e04:	681d      	ldr	r5, [r3, #0]
 8007e06:	e002      	b.n	8007e0e <_printf_i+0xf2>
 8007e08:	0669      	lsls	r1, r5, #25
 8007e0a:	d5fb      	bpl.n	8007e04 <_printf_i+0xe8>
 8007e0c:	881d      	ldrh	r5, [r3, #0]
 8007e0e:	4854      	ldr	r0, [pc, #336]	; (8007f60 <_printf_i+0x244>)
 8007e10:	2f6f      	cmp	r7, #111	; 0x6f
 8007e12:	bf0c      	ite	eq
 8007e14:	2308      	moveq	r3, #8
 8007e16:	230a      	movne	r3, #10
 8007e18:	2100      	movs	r1, #0
 8007e1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e1e:	6866      	ldr	r6, [r4, #4]
 8007e20:	60a6      	str	r6, [r4, #8]
 8007e22:	2e00      	cmp	r6, #0
 8007e24:	bfa2      	ittt	ge
 8007e26:	6821      	ldrge	r1, [r4, #0]
 8007e28:	f021 0104 	bicge.w	r1, r1, #4
 8007e2c:	6021      	strge	r1, [r4, #0]
 8007e2e:	b90d      	cbnz	r5, 8007e34 <_printf_i+0x118>
 8007e30:	2e00      	cmp	r6, #0
 8007e32:	d04d      	beq.n	8007ed0 <_printf_i+0x1b4>
 8007e34:	4616      	mov	r6, r2
 8007e36:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e3a:	fb03 5711 	mls	r7, r3, r1, r5
 8007e3e:	5dc7      	ldrb	r7, [r0, r7]
 8007e40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e44:	462f      	mov	r7, r5
 8007e46:	42bb      	cmp	r3, r7
 8007e48:	460d      	mov	r5, r1
 8007e4a:	d9f4      	bls.n	8007e36 <_printf_i+0x11a>
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d10b      	bne.n	8007e68 <_printf_i+0x14c>
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	07df      	lsls	r7, r3, #31
 8007e54:	d508      	bpl.n	8007e68 <_printf_i+0x14c>
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	6861      	ldr	r1, [r4, #4]
 8007e5a:	4299      	cmp	r1, r3
 8007e5c:	bfde      	ittt	le
 8007e5e:	2330      	movle	r3, #48	; 0x30
 8007e60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e68:	1b92      	subs	r2, r2, r6
 8007e6a:	6122      	str	r2, [r4, #16]
 8007e6c:	f8cd a000 	str.w	sl, [sp]
 8007e70:	464b      	mov	r3, r9
 8007e72:	aa03      	add	r2, sp, #12
 8007e74:	4621      	mov	r1, r4
 8007e76:	4640      	mov	r0, r8
 8007e78:	f7ff fee2 	bl	8007c40 <_printf_common>
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d14c      	bne.n	8007f1a <_printf_i+0x1fe>
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295
 8007e84:	b004      	add	sp, #16
 8007e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e8a:	4835      	ldr	r0, [pc, #212]	; (8007f60 <_printf_i+0x244>)
 8007e8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	680e      	ldr	r6, [r1, #0]
 8007e94:	061f      	lsls	r7, r3, #24
 8007e96:	f856 5b04 	ldr.w	r5, [r6], #4
 8007e9a:	600e      	str	r6, [r1, #0]
 8007e9c:	d514      	bpl.n	8007ec8 <_printf_i+0x1ac>
 8007e9e:	07d9      	lsls	r1, r3, #31
 8007ea0:	bf44      	itt	mi
 8007ea2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ea6:	6023      	strmi	r3, [r4, #0]
 8007ea8:	b91d      	cbnz	r5, 8007eb2 <_printf_i+0x196>
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	f023 0320 	bic.w	r3, r3, #32
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	2310      	movs	r3, #16
 8007eb4:	e7b0      	b.n	8007e18 <_printf_i+0xfc>
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	f043 0320 	orr.w	r3, r3, #32
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	2378      	movs	r3, #120	; 0x78
 8007ec0:	4828      	ldr	r0, [pc, #160]	; (8007f64 <_printf_i+0x248>)
 8007ec2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ec6:	e7e3      	b.n	8007e90 <_printf_i+0x174>
 8007ec8:	065e      	lsls	r6, r3, #25
 8007eca:	bf48      	it	mi
 8007ecc:	b2ad      	uxthmi	r5, r5
 8007ece:	e7e6      	b.n	8007e9e <_printf_i+0x182>
 8007ed0:	4616      	mov	r6, r2
 8007ed2:	e7bb      	b.n	8007e4c <_printf_i+0x130>
 8007ed4:	680b      	ldr	r3, [r1, #0]
 8007ed6:	6826      	ldr	r6, [r4, #0]
 8007ed8:	6960      	ldr	r0, [r4, #20]
 8007eda:	1d1d      	adds	r5, r3, #4
 8007edc:	600d      	str	r5, [r1, #0]
 8007ede:	0635      	lsls	r5, r6, #24
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	d501      	bpl.n	8007ee8 <_printf_i+0x1cc>
 8007ee4:	6018      	str	r0, [r3, #0]
 8007ee6:	e002      	b.n	8007eee <_printf_i+0x1d2>
 8007ee8:	0671      	lsls	r1, r6, #25
 8007eea:	d5fb      	bpl.n	8007ee4 <_printf_i+0x1c8>
 8007eec:	8018      	strh	r0, [r3, #0]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	6123      	str	r3, [r4, #16]
 8007ef2:	4616      	mov	r6, r2
 8007ef4:	e7ba      	b.n	8007e6c <_printf_i+0x150>
 8007ef6:	680b      	ldr	r3, [r1, #0]
 8007ef8:	1d1a      	adds	r2, r3, #4
 8007efa:	600a      	str	r2, [r1, #0]
 8007efc:	681e      	ldr	r6, [r3, #0]
 8007efe:	6862      	ldr	r2, [r4, #4]
 8007f00:	2100      	movs	r1, #0
 8007f02:	4630      	mov	r0, r6
 8007f04:	f7f8 f994 	bl	8000230 <memchr>
 8007f08:	b108      	cbz	r0, 8007f0e <_printf_i+0x1f2>
 8007f0a:	1b80      	subs	r0, r0, r6
 8007f0c:	6060      	str	r0, [r4, #4]
 8007f0e:	6863      	ldr	r3, [r4, #4]
 8007f10:	6123      	str	r3, [r4, #16]
 8007f12:	2300      	movs	r3, #0
 8007f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f18:	e7a8      	b.n	8007e6c <_printf_i+0x150>
 8007f1a:	6923      	ldr	r3, [r4, #16]
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	4649      	mov	r1, r9
 8007f20:	4640      	mov	r0, r8
 8007f22:	47d0      	blx	sl
 8007f24:	3001      	adds	r0, #1
 8007f26:	d0ab      	beq.n	8007e80 <_printf_i+0x164>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	079b      	lsls	r3, r3, #30
 8007f2c:	d413      	bmi.n	8007f56 <_printf_i+0x23a>
 8007f2e:	68e0      	ldr	r0, [r4, #12]
 8007f30:	9b03      	ldr	r3, [sp, #12]
 8007f32:	4298      	cmp	r0, r3
 8007f34:	bfb8      	it	lt
 8007f36:	4618      	movlt	r0, r3
 8007f38:	e7a4      	b.n	8007e84 <_printf_i+0x168>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	4632      	mov	r2, r6
 8007f3e:	4649      	mov	r1, r9
 8007f40:	4640      	mov	r0, r8
 8007f42:	47d0      	blx	sl
 8007f44:	3001      	adds	r0, #1
 8007f46:	d09b      	beq.n	8007e80 <_printf_i+0x164>
 8007f48:	3501      	adds	r5, #1
 8007f4a:	68e3      	ldr	r3, [r4, #12]
 8007f4c:	9903      	ldr	r1, [sp, #12]
 8007f4e:	1a5b      	subs	r3, r3, r1
 8007f50:	42ab      	cmp	r3, r5
 8007f52:	dcf2      	bgt.n	8007f3a <_printf_i+0x21e>
 8007f54:	e7eb      	b.n	8007f2e <_printf_i+0x212>
 8007f56:	2500      	movs	r5, #0
 8007f58:	f104 0619 	add.w	r6, r4, #25
 8007f5c:	e7f5      	b.n	8007f4a <_printf_i+0x22e>
 8007f5e:	bf00      	nop
 8007f60:	0800b84e 	.word	0x0800b84e
 8007f64:	0800b85f 	.word	0x0800b85f

08007f68 <iprintf>:
 8007f68:	b40f      	push	{r0, r1, r2, r3}
 8007f6a:	4b0a      	ldr	r3, [pc, #40]	; (8007f94 <iprintf+0x2c>)
 8007f6c:	b513      	push	{r0, r1, r4, lr}
 8007f6e:	681c      	ldr	r4, [r3, #0]
 8007f70:	b124      	cbz	r4, 8007f7c <iprintf+0x14>
 8007f72:	69a3      	ldr	r3, [r4, #24]
 8007f74:	b913      	cbnz	r3, 8007f7c <iprintf+0x14>
 8007f76:	4620      	mov	r0, r4
 8007f78:	f001 f8fc 	bl	8009174 <__sinit>
 8007f7c:	ab05      	add	r3, sp, #20
 8007f7e:	9a04      	ldr	r2, [sp, #16]
 8007f80:	68a1      	ldr	r1, [r4, #8]
 8007f82:	9301      	str	r3, [sp, #4]
 8007f84:	4620      	mov	r0, r4
 8007f86:	f001 fdc1 	bl	8009b0c <_vfiprintf_r>
 8007f8a:	b002      	add	sp, #8
 8007f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f90:	b004      	add	sp, #16
 8007f92:	4770      	bx	lr
 8007f94:	20001e3c 	.word	0x20001e3c

08007f98 <putchar>:
 8007f98:	4b09      	ldr	r3, [pc, #36]	; (8007fc0 <putchar+0x28>)
 8007f9a:	b513      	push	{r0, r1, r4, lr}
 8007f9c:	681c      	ldr	r4, [r3, #0]
 8007f9e:	4601      	mov	r1, r0
 8007fa0:	b134      	cbz	r4, 8007fb0 <putchar+0x18>
 8007fa2:	69a3      	ldr	r3, [r4, #24]
 8007fa4:	b923      	cbnz	r3, 8007fb0 <putchar+0x18>
 8007fa6:	9001      	str	r0, [sp, #4]
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f001 f8e3 	bl	8009174 <__sinit>
 8007fae:	9901      	ldr	r1, [sp, #4]
 8007fb0:	68a2      	ldr	r2, [r4, #8]
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	b002      	add	sp, #8
 8007fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fba:	f001 bed7 	b.w	8009d6c <_putc_r>
 8007fbe:	bf00      	nop
 8007fc0:	20001e3c 	.word	0x20001e3c

08007fc4 <_puts_r>:
 8007fc4:	b570      	push	{r4, r5, r6, lr}
 8007fc6:	460e      	mov	r6, r1
 8007fc8:	4605      	mov	r5, r0
 8007fca:	b118      	cbz	r0, 8007fd4 <_puts_r+0x10>
 8007fcc:	6983      	ldr	r3, [r0, #24]
 8007fce:	b90b      	cbnz	r3, 8007fd4 <_puts_r+0x10>
 8007fd0:	f001 f8d0 	bl	8009174 <__sinit>
 8007fd4:	69ab      	ldr	r3, [r5, #24]
 8007fd6:	68ac      	ldr	r4, [r5, #8]
 8007fd8:	b913      	cbnz	r3, 8007fe0 <_puts_r+0x1c>
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f001 f8ca 	bl	8009174 <__sinit>
 8007fe0:	4b2c      	ldr	r3, [pc, #176]	; (8008094 <_puts_r+0xd0>)
 8007fe2:	429c      	cmp	r4, r3
 8007fe4:	d120      	bne.n	8008028 <_puts_r+0x64>
 8007fe6:	686c      	ldr	r4, [r5, #4]
 8007fe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fea:	07db      	lsls	r3, r3, #31
 8007fec:	d405      	bmi.n	8007ffa <_puts_r+0x36>
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	0598      	lsls	r0, r3, #22
 8007ff2:	d402      	bmi.n	8007ffa <_puts_r+0x36>
 8007ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ff6:	f001 f960 	bl	80092ba <__retarget_lock_acquire_recursive>
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	0719      	lsls	r1, r3, #28
 8007ffe:	d51d      	bpl.n	800803c <_puts_r+0x78>
 8008000:	6923      	ldr	r3, [r4, #16]
 8008002:	b1db      	cbz	r3, 800803c <_puts_r+0x78>
 8008004:	3e01      	subs	r6, #1
 8008006:	68a3      	ldr	r3, [r4, #8]
 8008008:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800800c:	3b01      	subs	r3, #1
 800800e:	60a3      	str	r3, [r4, #8]
 8008010:	bb39      	cbnz	r1, 8008062 <_puts_r+0x9e>
 8008012:	2b00      	cmp	r3, #0
 8008014:	da38      	bge.n	8008088 <_puts_r+0xc4>
 8008016:	4622      	mov	r2, r4
 8008018:	210a      	movs	r1, #10
 800801a:	4628      	mov	r0, r5
 800801c:	f000 f858 	bl	80080d0 <__swbuf_r>
 8008020:	3001      	adds	r0, #1
 8008022:	d011      	beq.n	8008048 <_puts_r+0x84>
 8008024:	250a      	movs	r5, #10
 8008026:	e011      	b.n	800804c <_puts_r+0x88>
 8008028:	4b1b      	ldr	r3, [pc, #108]	; (8008098 <_puts_r+0xd4>)
 800802a:	429c      	cmp	r4, r3
 800802c:	d101      	bne.n	8008032 <_puts_r+0x6e>
 800802e:	68ac      	ldr	r4, [r5, #8]
 8008030:	e7da      	b.n	8007fe8 <_puts_r+0x24>
 8008032:	4b1a      	ldr	r3, [pc, #104]	; (800809c <_puts_r+0xd8>)
 8008034:	429c      	cmp	r4, r3
 8008036:	bf08      	it	eq
 8008038:	68ec      	ldreq	r4, [r5, #12]
 800803a:	e7d5      	b.n	8007fe8 <_puts_r+0x24>
 800803c:	4621      	mov	r1, r4
 800803e:	4628      	mov	r0, r5
 8008040:	f000 f898 	bl	8008174 <__swsetup_r>
 8008044:	2800      	cmp	r0, #0
 8008046:	d0dd      	beq.n	8008004 <_puts_r+0x40>
 8008048:	f04f 35ff 	mov.w	r5, #4294967295
 800804c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800804e:	07da      	lsls	r2, r3, #31
 8008050:	d405      	bmi.n	800805e <_puts_r+0x9a>
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	059b      	lsls	r3, r3, #22
 8008056:	d402      	bmi.n	800805e <_puts_r+0x9a>
 8008058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800805a:	f001 f92f 	bl	80092bc <__retarget_lock_release_recursive>
 800805e:	4628      	mov	r0, r5
 8008060:	bd70      	pop	{r4, r5, r6, pc}
 8008062:	2b00      	cmp	r3, #0
 8008064:	da04      	bge.n	8008070 <_puts_r+0xac>
 8008066:	69a2      	ldr	r2, [r4, #24]
 8008068:	429a      	cmp	r2, r3
 800806a:	dc06      	bgt.n	800807a <_puts_r+0xb6>
 800806c:	290a      	cmp	r1, #10
 800806e:	d004      	beq.n	800807a <_puts_r+0xb6>
 8008070:	6823      	ldr	r3, [r4, #0]
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	6022      	str	r2, [r4, #0]
 8008076:	7019      	strb	r1, [r3, #0]
 8008078:	e7c5      	b.n	8008006 <_puts_r+0x42>
 800807a:	4622      	mov	r2, r4
 800807c:	4628      	mov	r0, r5
 800807e:	f000 f827 	bl	80080d0 <__swbuf_r>
 8008082:	3001      	adds	r0, #1
 8008084:	d1bf      	bne.n	8008006 <_puts_r+0x42>
 8008086:	e7df      	b.n	8008048 <_puts_r+0x84>
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	250a      	movs	r5, #10
 800808c:	1c5a      	adds	r2, r3, #1
 800808e:	6022      	str	r2, [r4, #0]
 8008090:	701d      	strb	r5, [r3, #0]
 8008092:	e7db      	b.n	800804c <_puts_r+0x88>
 8008094:	0800b924 	.word	0x0800b924
 8008098:	0800b944 	.word	0x0800b944
 800809c:	0800b904 	.word	0x0800b904

080080a0 <puts>:
 80080a0:	4b02      	ldr	r3, [pc, #8]	; (80080ac <puts+0xc>)
 80080a2:	4601      	mov	r1, r0
 80080a4:	6818      	ldr	r0, [r3, #0]
 80080a6:	f7ff bf8d 	b.w	8007fc4 <_puts_r>
 80080aa:	bf00      	nop
 80080ac:	20001e3c 	.word	0x20001e3c

080080b0 <_sbrk_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	4d06      	ldr	r5, [pc, #24]	; (80080cc <_sbrk_r+0x1c>)
 80080b4:	2300      	movs	r3, #0
 80080b6:	4604      	mov	r4, r0
 80080b8:	4608      	mov	r0, r1
 80080ba:	602b      	str	r3, [r5, #0]
 80080bc:	f7f9 fc9c 	bl	80019f8 <_sbrk>
 80080c0:	1c43      	adds	r3, r0, #1
 80080c2:	d102      	bne.n	80080ca <_sbrk_r+0x1a>
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	b103      	cbz	r3, 80080ca <_sbrk_r+0x1a>
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	bd38      	pop	{r3, r4, r5, pc}
 80080cc:	20002ab4 	.word	0x20002ab4

080080d0 <__swbuf_r>:
 80080d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d2:	460e      	mov	r6, r1
 80080d4:	4614      	mov	r4, r2
 80080d6:	4605      	mov	r5, r0
 80080d8:	b118      	cbz	r0, 80080e2 <__swbuf_r+0x12>
 80080da:	6983      	ldr	r3, [r0, #24]
 80080dc:	b90b      	cbnz	r3, 80080e2 <__swbuf_r+0x12>
 80080de:	f001 f849 	bl	8009174 <__sinit>
 80080e2:	4b21      	ldr	r3, [pc, #132]	; (8008168 <__swbuf_r+0x98>)
 80080e4:	429c      	cmp	r4, r3
 80080e6:	d12b      	bne.n	8008140 <__swbuf_r+0x70>
 80080e8:	686c      	ldr	r4, [r5, #4]
 80080ea:	69a3      	ldr	r3, [r4, #24]
 80080ec:	60a3      	str	r3, [r4, #8]
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	071a      	lsls	r2, r3, #28
 80080f2:	d52f      	bpl.n	8008154 <__swbuf_r+0x84>
 80080f4:	6923      	ldr	r3, [r4, #16]
 80080f6:	b36b      	cbz	r3, 8008154 <__swbuf_r+0x84>
 80080f8:	6923      	ldr	r3, [r4, #16]
 80080fa:	6820      	ldr	r0, [r4, #0]
 80080fc:	1ac0      	subs	r0, r0, r3
 80080fe:	6963      	ldr	r3, [r4, #20]
 8008100:	b2f6      	uxtb	r6, r6
 8008102:	4283      	cmp	r3, r0
 8008104:	4637      	mov	r7, r6
 8008106:	dc04      	bgt.n	8008112 <__swbuf_r+0x42>
 8008108:	4621      	mov	r1, r4
 800810a:	4628      	mov	r0, r5
 800810c:	f000 ff9e 	bl	800904c <_fflush_r>
 8008110:	bb30      	cbnz	r0, 8008160 <__swbuf_r+0x90>
 8008112:	68a3      	ldr	r3, [r4, #8]
 8008114:	3b01      	subs	r3, #1
 8008116:	60a3      	str	r3, [r4, #8]
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	6022      	str	r2, [r4, #0]
 800811e:	701e      	strb	r6, [r3, #0]
 8008120:	6963      	ldr	r3, [r4, #20]
 8008122:	3001      	adds	r0, #1
 8008124:	4283      	cmp	r3, r0
 8008126:	d004      	beq.n	8008132 <__swbuf_r+0x62>
 8008128:	89a3      	ldrh	r3, [r4, #12]
 800812a:	07db      	lsls	r3, r3, #31
 800812c:	d506      	bpl.n	800813c <__swbuf_r+0x6c>
 800812e:	2e0a      	cmp	r6, #10
 8008130:	d104      	bne.n	800813c <__swbuf_r+0x6c>
 8008132:	4621      	mov	r1, r4
 8008134:	4628      	mov	r0, r5
 8008136:	f000 ff89 	bl	800904c <_fflush_r>
 800813a:	b988      	cbnz	r0, 8008160 <__swbuf_r+0x90>
 800813c:	4638      	mov	r0, r7
 800813e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008140:	4b0a      	ldr	r3, [pc, #40]	; (800816c <__swbuf_r+0x9c>)
 8008142:	429c      	cmp	r4, r3
 8008144:	d101      	bne.n	800814a <__swbuf_r+0x7a>
 8008146:	68ac      	ldr	r4, [r5, #8]
 8008148:	e7cf      	b.n	80080ea <__swbuf_r+0x1a>
 800814a:	4b09      	ldr	r3, [pc, #36]	; (8008170 <__swbuf_r+0xa0>)
 800814c:	429c      	cmp	r4, r3
 800814e:	bf08      	it	eq
 8008150:	68ec      	ldreq	r4, [r5, #12]
 8008152:	e7ca      	b.n	80080ea <__swbuf_r+0x1a>
 8008154:	4621      	mov	r1, r4
 8008156:	4628      	mov	r0, r5
 8008158:	f000 f80c 	bl	8008174 <__swsetup_r>
 800815c:	2800      	cmp	r0, #0
 800815e:	d0cb      	beq.n	80080f8 <__swbuf_r+0x28>
 8008160:	f04f 37ff 	mov.w	r7, #4294967295
 8008164:	e7ea      	b.n	800813c <__swbuf_r+0x6c>
 8008166:	bf00      	nop
 8008168:	0800b924 	.word	0x0800b924
 800816c:	0800b944 	.word	0x0800b944
 8008170:	0800b904 	.word	0x0800b904

08008174 <__swsetup_r>:
 8008174:	4b32      	ldr	r3, [pc, #200]	; (8008240 <__swsetup_r+0xcc>)
 8008176:	b570      	push	{r4, r5, r6, lr}
 8008178:	681d      	ldr	r5, [r3, #0]
 800817a:	4606      	mov	r6, r0
 800817c:	460c      	mov	r4, r1
 800817e:	b125      	cbz	r5, 800818a <__swsetup_r+0x16>
 8008180:	69ab      	ldr	r3, [r5, #24]
 8008182:	b913      	cbnz	r3, 800818a <__swsetup_r+0x16>
 8008184:	4628      	mov	r0, r5
 8008186:	f000 fff5 	bl	8009174 <__sinit>
 800818a:	4b2e      	ldr	r3, [pc, #184]	; (8008244 <__swsetup_r+0xd0>)
 800818c:	429c      	cmp	r4, r3
 800818e:	d10f      	bne.n	80081b0 <__swsetup_r+0x3c>
 8008190:	686c      	ldr	r4, [r5, #4]
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008198:	0719      	lsls	r1, r3, #28
 800819a:	d42c      	bmi.n	80081f6 <__swsetup_r+0x82>
 800819c:	06dd      	lsls	r5, r3, #27
 800819e:	d411      	bmi.n	80081c4 <__swsetup_r+0x50>
 80081a0:	2309      	movs	r3, #9
 80081a2:	6033      	str	r3, [r6, #0]
 80081a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081a8:	81a3      	strh	r3, [r4, #12]
 80081aa:	f04f 30ff 	mov.w	r0, #4294967295
 80081ae:	e03e      	b.n	800822e <__swsetup_r+0xba>
 80081b0:	4b25      	ldr	r3, [pc, #148]	; (8008248 <__swsetup_r+0xd4>)
 80081b2:	429c      	cmp	r4, r3
 80081b4:	d101      	bne.n	80081ba <__swsetup_r+0x46>
 80081b6:	68ac      	ldr	r4, [r5, #8]
 80081b8:	e7eb      	b.n	8008192 <__swsetup_r+0x1e>
 80081ba:	4b24      	ldr	r3, [pc, #144]	; (800824c <__swsetup_r+0xd8>)
 80081bc:	429c      	cmp	r4, r3
 80081be:	bf08      	it	eq
 80081c0:	68ec      	ldreq	r4, [r5, #12]
 80081c2:	e7e6      	b.n	8008192 <__swsetup_r+0x1e>
 80081c4:	0758      	lsls	r0, r3, #29
 80081c6:	d512      	bpl.n	80081ee <__swsetup_r+0x7a>
 80081c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081ca:	b141      	cbz	r1, 80081de <__swsetup_r+0x6a>
 80081cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081d0:	4299      	cmp	r1, r3
 80081d2:	d002      	beq.n	80081da <__swsetup_r+0x66>
 80081d4:	4630      	mov	r0, r6
 80081d6:	f7ff f9b3 	bl	8007540 <_free_r>
 80081da:	2300      	movs	r3, #0
 80081dc:	6363      	str	r3, [r4, #52]	; 0x34
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081e4:	81a3      	strh	r3, [r4, #12]
 80081e6:	2300      	movs	r3, #0
 80081e8:	6063      	str	r3, [r4, #4]
 80081ea:	6923      	ldr	r3, [r4, #16]
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	89a3      	ldrh	r3, [r4, #12]
 80081f0:	f043 0308 	orr.w	r3, r3, #8
 80081f4:	81a3      	strh	r3, [r4, #12]
 80081f6:	6923      	ldr	r3, [r4, #16]
 80081f8:	b94b      	cbnz	r3, 800820e <__swsetup_r+0x9a>
 80081fa:	89a3      	ldrh	r3, [r4, #12]
 80081fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008204:	d003      	beq.n	800820e <__swsetup_r+0x9a>
 8008206:	4621      	mov	r1, r4
 8008208:	4630      	mov	r0, r6
 800820a:	f001 f87d 	bl	8009308 <__smakebuf_r>
 800820e:	89a0      	ldrh	r0, [r4, #12]
 8008210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008214:	f010 0301 	ands.w	r3, r0, #1
 8008218:	d00a      	beq.n	8008230 <__swsetup_r+0xbc>
 800821a:	2300      	movs	r3, #0
 800821c:	60a3      	str	r3, [r4, #8]
 800821e:	6963      	ldr	r3, [r4, #20]
 8008220:	425b      	negs	r3, r3
 8008222:	61a3      	str	r3, [r4, #24]
 8008224:	6923      	ldr	r3, [r4, #16]
 8008226:	b943      	cbnz	r3, 800823a <__swsetup_r+0xc6>
 8008228:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800822c:	d1ba      	bne.n	80081a4 <__swsetup_r+0x30>
 800822e:	bd70      	pop	{r4, r5, r6, pc}
 8008230:	0781      	lsls	r1, r0, #30
 8008232:	bf58      	it	pl
 8008234:	6963      	ldrpl	r3, [r4, #20]
 8008236:	60a3      	str	r3, [r4, #8]
 8008238:	e7f4      	b.n	8008224 <__swsetup_r+0xb0>
 800823a:	2000      	movs	r0, #0
 800823c:	e7f7      	b.n	800822e <__swsetup_r+0xba>
 800823e:	bf00      	nop
 8008240:	20001e3c 	.word	0x20001e3c
 8008244:	0800b924 	.word	0x0800b924
 8008248:	0800b944 	.word	0x0800b944
 800824c:	0800b904 	.word	0x0800b904

08008250 <quorem>:
 8008250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	6903      	ldr	r3, [r0, #16]
 8008256:	690c      	ldr	r4, [r1, #16]
 8008258:	42a3      	cmp	r3, r4
 800825a:	4607      	mov	r7, r0
 800825c:	f2c0 8081 	blt.w	8008362 <quorem+0x112>
 8008260:	3c01      	subs	r4, #1
 8008262:	f101 0814 	add.w	r8, r1, #20
 8008266:	f100 0514 	add.w	r5, r0, #20
 800826a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800826e:	9301      	str	r3, [sp, #4]
 8008270:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008274:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008278:	3301      	adds	r3, #1
 800827a:	429a      	cmp	r2, r3
 800827c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008280:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008284:	fbb2 f6f3 	udiv	r6, r2, r3
 8008288:	d331      	bcc.n	80082ee <quorem+0x9e>
 800828a:	f04f 0e00 	mov.w	lr, #0
 800828e:	4640      	mov	r0, r8
 8008290:	46ac      	mov	ip, r5
 8008292:	46f2      	mov	sl, lr
 8008294:	f850 2b04 	ldr.w	r2, [r0], #4
 8008298:	b293      	uxth	r3, r2
 800829a:	fb06 e303 	mla	r3, r6, r3, lr
 800829e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	ebaa 0303 	sub.w	r3, sl, r3
 80082a8:	0c12      	lsrs	r2, r2, #16
 80082aa:	f8dc a000 	ldr.w	sl, [ip]
 80082ae:	fb06 e202 	mla	r2, r6, r2, lr
 80082b2:	fa13 f38a 	uxtah	r3, r3, sl
 80082b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082ba:	fa1f fa82 	uxth.w	sl, r2
 80082be:	f8dc 2000 	ldr.w	r2, [ip]
 80082c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80082c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082d0:	4581      	cmp	r9, r0
 80082d2:	f84c 3b04 	str.w	r3, [ip], #4
 80082d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082da:	d2db      	bcs.n	8008294 <quorem+0x44>
 80082dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80082e0:	b92b      	cbnz	r3, 80082ee <quorem+0x9e>
 80082e2:	9b01      	ldr	r3, [sp, #4]
 80082e4:	3b04      	subs	r3, #4
 80082e6:	429d      	cmp	r5, r3
 80082e8:	461a      	mov	r2, r3
 80082ea:	d32e      	bcc.n	800834a <quorem+0xfa>
 80082ec:	613c      	str	r4, [r7, #16]
 80082ee:	4638      	mov	r0, r7
 80082f0:	f001 fad4 	bl	800989c <__mcmp>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	db24      	blt.n	8008342 <quorem+0xf2>
 80082f8:	3601      	adds	r6, #1
 80082fa:	4628      	mov	r0, r5
 80082fc:	f04f 0c00 	mov.w	ip, #0
 8008300:	f858 2b04 	ldr.w	r2, [r8], #4
 8008304:	f8d0 e000 	ldr.w	lr, [r0]
 8008308:	b293      	uxth	r3, r2
 800830a:	ebac 0303 	sub.w	r3, ip, r3
 800830e:	0c12      	lsrs	r2, r2, #16
 8008310:	fa13 f38e 	uxtah	r3, r3, lr
 8008314:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008318:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800831c:	b29b      	uxth	r3, r3
 800831e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008322:	45c1      	cmp	r9, r8
 8008324:	f840 3b04 	str.w	r3, [r0], #4
 8008328:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800832c:	d2e8      	bcs.n	8008300 <quorem+0xb0>
 800832e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008336:	b922      	cbnz	r2, 8008342 <quorem+0xf2>
 8008338:	3b04      	subs	r3, #4
 800833a:	429d      	cmp	r5, r3
 800833c:	461a      	mov	r2, r3
 800833e:	d30a      	bcc.n	8008356 <quorem+0x106>
 8008340:	613c      	str	r4, [r7, #16]
 8008342:	4630      	mov	r0, r6
 8008344:	b003      	add	sp, #12
 8008346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834a:	6812      	ldr	r2, [r2, #0]
 800834c:	3b04      	subs	r3, #4
 800834e:	2a00      	cmp	r2, #0
 8008350:	d1cc      	bne.n	80082ec <quorem+0x9c>
 8008352:	3c01      	subs	r4, #1
 8008354:	e7c7      	b.n	80082e6 <quorem+0x96>
 8008356:	6812      	ldr	r2, [r2, #0]
 8008358:	3b04      	subs	r3, #4
 800835a:	2a00      	cmp	r2, #0
 800835c:	d1f0      	bne.n	8008340 <quorem+0xf0>
 800835e:	3c01      	subs	r4, #1
 8008360:	e7eb      	b.n	800833a <quorem+0xea>
 8008362:	2000      	movs	r0, #0
 8008364:	e7ee      	b.n	8008344 <quorem+0xf4>
	...

08008368 <_dtoa_r>:
 8008368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836c:	ed2d 8b02 	vpush	{d8}
 8008370:	ec57 6b10 	vmov	r6, r7, d0
 8008374:	b095      	sub	sp, #84	; 0x54
 8008376:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008378:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800837c:	9105      	str	r1, [sp, #20]
 800837e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008382:	4604      	mov	r4, r0
 8008384:	9209      	str	r2, [sp, #36]	; 0x24
 8008386:	930f      	str	r3, [sp, #60]	; 0x3c
 8008388:	b975      	cbnz	r5, 80083a8 <_dtoa_r+0x40>
 800838a:	2010      	movs	r0, #16
 800838c:	f7ff f8ba 	bl	8007504 <malloc>
 8008390:	4602      	mov	r2, r0
 8008392:	6260      	str	r0, [r4, #36]	; 0x24
 8008394:	b920      	cbnz	r0, 80083a0 <_dtoa_r+0x38>
 8008396:	4bb2      	ldr	r3, [pc, #712]	; (8008660 <_dtoa_r+0x2f8>)
 8008398:	21ea      	movs	r1, #234	; 0xea
 800839a:	48b2      	ldr	r0, [pc, #712]	; (8008664 <_dtoa_r+0x2fc>)
 800839c:	f001 fd84 	bl	8009ea8 <__assert_func>
 80083a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083a4:	6005      	str	r5, [r0, #0]
 80083a6:	60c5      	str	r5, [r0, #12]
 80083a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083aa:	6819      	ldr	r1, [r3, #0]
 80083ac:	b151      	cbz	r1, 80083c4 <_dtoa_r+0x5c>
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	604a      	str	r2, [r1, #4]
 80083b2:	2301      	movs	r3, #1
 80083b4:	4093      	lsls	r3, r2
 80083b6:	608b      	str	r3, [r1, #8]
 80083b8:	4620      	mov	r0, r4
 80083ba:	f001 f831 	bl	8009420 <_Bfree>
 80083be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083c0:	2200      	movs	r2, #0
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	1e3b      	subs	r3, r7, #0
 80083c6:	bfb9      	ittee	lt
 80083c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083cc:	9303      	strlt	r3, [sp, #12]
 80083ce:	2300      	movge	r3, #0
 80083d0:	f8c8 3000 	strge.w	r3, [r8]
 80083d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80083d8:	4ba3      	ldr	r3, [pc, #652]	; (8008668 <_dtoa_r+0x300>)
 80083da:	bfbc      	itt	lt
 80083dc:	2201      	movlt	r2, #1
 80083de:	f8c8 2000 	strlt.w	r2, [r8]
 80083e2:	ea33 0309 	bics.w	r3, r3, r9
 80083e6:	d11b      	bne.n	8008420 <_dtoa_r+0xb8>
 80083e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083f4:	4333      	orrs	r3, r6
 80083f6:	f000 857a 	beq.w	8008eee <_dtoa_r+0xb86>
 80083fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083fc:	b963      	cbnz	r3, 8008418 <_dtoa_r+0xb0>
 80083fe:	4b9b      	ldr	r3, [pc, #620]	; (800866c <_dtoa_r+0x304>)
 8008400:	e024      	b.n	800844c <_dtoa_r+0xe4>
 8008402:	4b9b      	ldr	r3, [pc, #620]	; (8008670 <_dtoa_r+0x308>)
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	3308      	adds	r3, #8
 8008408:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	9800      	ldr	r0, [sp, #0]
 800840e:	b015      	add	sp, #84	; 0x54
 8008410:	ecbd 8b02 	vpop	{d8}
 8008414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008418:	4b94      	ldr	r3, [pc, #592]	; (800866c <_dtoa_r+0x304>)
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	3303      	adds	r3, #3
 800841e:	e7f3      	b.n	8008408 <_dtoa_r+0xa0>
 8008420:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008424:	2200      	movs	r2, #0
 8008426:	ec51 0b17 	vmov	r0, r1, d7
 800842a:	2300      	movs	r3, #0
 800842c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008430:	f7f8 fb72 	bl	8000b18 <__aeabi_dcmpeq>
 8008434:	4680      	mov	r8, r0
 8008436:	b158      	cbz	r0, 8008450 <_dtoa_r+0xe8>
 8008438:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800843a:	2301      	movs	r3, #1
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 8551 	beq.w	8008ee8 <_dtoa_r+0xb80>
 8008446:	488b      	ldr	r0, [pc, #556]	; (8008674 <_dtoa_r+0x30c>)
 8008448:	6018      	str	r0, [r3, #0]
 800844a:	1e43      	subs	r3, r0, #1
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	e7dd      	b.n	800840c <_dtoa_r+0xa4>
 8008450:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008454:	aa12      	add	r2, sp, #72	; 0x48
 8008456:	a913      	add	r1, sp, #76	; 0x4c
 8008458:	4620      	mov	r0, r4
 800845a:	f001 fac3 	bl	80099e4 <__d2b>
 800845e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008462:	4683      	mov	fp, r0
 8008464:	2d00      	cmp	r5, #0
 8008466:	d07c      	beq.n	8008562 <_dtoa_r+0x1fa>
 8008468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800846a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800846e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008472:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008476:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800847a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800847e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008482:	4b7d      	ldr	r3, [pc, #500]	; (8008678 <_dtoa_r+0x310>)
 8008484:	2200      	movs	r2, #0
 8008486:	4630      	mov	r0, r6
 8008488:	4639      	mov	r1, r7
 800848a:	f7f7 ff25 	bl	80002d8 <__aeabi_dsub>
 800848e:	a36e      	add	r3, pc, #440	; (adr r3, 8008648 <_dtoa_r+0x2e0>)
 8008490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008494:	f7f8 f8d8 	bl	8000648 <__aeabi_dmul>
 8008498:	a36d      	add	r3, pc, #436	; (adr r3, 8008650 <_dtoa_r+0x2e8>)
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	f7f7 ff1d 	bl	80002dc <__adddf3>
 80084a2:	4606      	mov	r6, r0
 80084a4:	4628      	mov	r0, r5
 80084a6:	460f      	mov	r7, r1
 80084a8:	f7f8 f864 	bl	8000574 <__aeabi_i2d>
 80084ac:	a36a      	add	r3, pc, #424	; (adr r3, 8008658 <_dtoa_r+0x2f0>)
 80084ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b2:	f7f8 f8c9 	bl	8000648 <__aeabi_dmul>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	4630      	mov	r0, r6
 80084bc:	4639      	mov	r1, r7
 80084be:	f7f7 ff0d 	bl	80002dc <__adddf3>
 80084c2:	4606      	mov	r6, r0
 80084c4:	460f      	mov	r7, r1
 80084c6:	f7f8 fb6f 	bl	8000ba8 <__aeabi_d2iz>
 80084ca:	2200      	movs	r2, #0
 80084cc:	4682      	mov	sl, r0
 80084ce:	2300      	movs	r3, #0
 80084d0:	4630      	mov	r0, r6
 80084d2:	4639      	mov	r1, r7
 80084d4:	f7f8 fb2a 	bl	8000b2c <__aeabi_dcmplt>
 80084d8:	b148      	cbz	r0, 80084ee <_dtoa_r+0x186>
 80084da:	4650      	mov	r0, sl
 80084dc:	f7f8 f84a 	bl	8000574 <__aeabi_i2d>
 80084e0:	4632      	mov	r2, r6
 80084e2:	463b      	mov	r3, r7
 80084e4:	f7f8 fb18 	bl	8000b18 <__aeabi_dcmpeq>
 80084e8:	b908      	cbnz	r0, 80084ee <_dtoa_r+0x186>
 80084ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084ee:	f1ba 0f16 	cmp.w	sl, #22
 80084f2:	d854      	bhi.n	800859e <_dtoa_r+0x236>
 80084f4:	4b61      	ldr	r3, [pc, #388]	; (800867c <_dtoa_r+0x314>)
 80084f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80084fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008502:	f7f8 fb13 	bl	8000b2c <__aeabi_dcmplt>
 8008506:	2800      	cmp	r0, #0
 8008508:	d04b      	beq.n	80085a2 <_dtoa_r+0x23a>
 800850a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800850e:	2300      	movs	r3, #0
 8008510:	930e      	str	r3, [sp, #56]	; 0x38
 8008512:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008514:	1b5d      	subs	r5, r3, r5
 8008516:	1e6b      	subs	r3, r5, #1
 8008518:	9304      	str	r3, [sp, #16]
 800851a:	bf43      	ittte	mi
 800851c:	2300      	movmi	r3, #0
 800851e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008522:	9304      	strmi	r3, [sp, #16]
 8008524:	f04f 0800 	movpl.w	r8, #0
 8008528:	f1ba 0f00 	cmp.w	sl, #0
 800852c:	db3b      	blt.n	80085a6 <_dtoa_r+0x23e>
 800852e:	9b04      	ldr	r3, [sp, #16]
 8008530:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008534:	4453      	add	r3, sl
 8008536:	9304      	str	r3, [sp, #16]
 8008538:	2300      	movs	r3, #0
 800853a:	9306      	str	r3, [sp, #24]
 800853c:	9b05      	ldr	r3, [sp, #20]
 800853e:	2b09      	cmp	r3, #9
 8008540:	d869      	bhi.n	8008616 <_dtoa_r+0x2ae>
 8008542:	2b05      	cmp	r3, #5
 8008544:	bfc4      	itt	gt
 8008546:	3b04      	subgt	r3, #4
 8008548:	9305      	strgt	r3, [sp, #20]
 800854a:	9b05      	ldr	r3, [sp, #20]
 800854c:	f1a3 0302 	sub.w	r3, r3, #2
 8008550:	bfcc      	ite	gt
 8008552:	2500      	movgt	r5, #0
 8008554:	2501      	movle	r5, #1
 8008556:	2b03      	cmp	r3, #3
 8008558:	d869      	bhi.n	800862e <_dtoa_r+0x2c6>
 800855a:	e8df f003 	tbb	[pc, r3]
 800855e:	4e2c      	.short	0x4e2c
 8008560:	5a4c      	.short	0x5a4c
 8008562:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008566:	441d      	add	r5, r3
 8008568:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800856c:	2b20      	cmp	r3, #32
 800856e:	bfc1      	itttt	gt
 8008570:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008574:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008578:	fa09 f303 	lslgt.w	r3, r9, r3
 800857c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008580:	bfda      	itte	le
 8008582:	f1c3 0320 	rsble	r3, r3, #32
 8008586:	fa06 f003 	lslle.w	r0, r6, r3
 800858a:	4318      	orrgt	r0, r3
 800858c:	f7f7 ffe2 	bl	8000554 <__aeabi_ui2d>
 8008590:	2301      	movs	r3, #1
 8008592:	4606      	mov	r6, r0
 8008594:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008598:	3d01      	subs	r5, #1
 800859a:	9310      	str	r3, [sp, #64]	; 0x40
 800859c:	e771      	b.n	8008482 <_dtoa_r+0x11a>
 800859e:	2301      	movs	r3, #1
 80085a0:	e7b6      	b.n	8008510 <_dtoa_r+0x1a8>
 80085a2:	900e      	str	r0, [sp, #56]	; 0x38
 80085a4:	e7b5      	b.n	8008512 <_dtoa_r+0x1aa>
 80085a6:	f1ca 0300 	rsb	r3, sl, #0
 80085aa:	9306      	str	r3, [sp, #24]
 80085ac:	2300      	movs	r3, #0
 80085ae:	eba8 080a 	sub.w	r8, r8, sl
 80085b2:	930d      	str	r3, [sp, #52]	; 0x34
 80085b4:	e7c2      	b.n	800853c <_dtoa_r+0x1d4>
 80085b6:	2300      	movs	r3, #0
 80085b8:	9308      	str	r3, [sp, #32]
 80085ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dc39      	bgt.n	8008634 <_dtoa_r+0x2cc>
 80085c0:	f04f 0901 	mov.w	r9, #1
 80085c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80085c8:	464b      	mov	r3, r9
 80085ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80085ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80085d0:	2200      	movs	r2, #0
 80085d2:	6042      	str	r2, [r0, #4]
 80085d4:	2204      	movs	r2, #4
 80085d6:	f102 0614 	add.w	r6, r2, #20
 80085da:	429e      	cmp	r6, r3
 80085dc:	6841      	ldr	r1, [r0, #4]
 80085de:	d92f      	bls.n	8008640 <_dtoa_r+0x2d8>
 80085e0:	4620      	mov	r0, r4
 80085e2:	f000 fedd 	bl	80093a0 <_Balloc>
 80085e6:	9000      	str	r0, [sp, #0]
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d14b      	bne.n	8008684 <_dtoa_r+0x31c>
 80085ec:	4b24      	ldr	r3, [pc, #144]	; (8008680 <_dtoa_r+0x318>)
 80085ee:	4602      	mov	r2, r0
 80085f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80085f4:	e6d1      	b.n	800839a <_dtoa_r+0x32>
 80085f6:	2301      	movs	r3, #1
 80085f8:	e7de      	b.n	80085b8 <_dtoa_r+0x250>
 80085fa:	2300      	movs	r3, #0
 80085fc:	9308      	str	r3, [sp, #32]
 80085fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008600:	eb0a 0903 	add.w	r9, sl, r3
 8008604:	f109 0301 	add.w	r3, r9, #1
 8008608:	2b01      	cmp	r3, #1
 800860a:	9301      	str	r3, [sp, #4]
 800860c:	bfb8      	it	lt
 800860e:	2301      	movlt	r3, #1
 8008610:	e7dd      	b.n	80085ce <_dtoa_r+0x266>
 8008612:	2301      	movs	r3, #1
 8008614:	e7f2      	b.n	80085fc <_dtoa_r+0x294>
 8008616:	2501      	movs	r5, #1
 8008618:	2300      	movs	r3, #0
 800861a:	9305      	str	r3, [sp, #20]
 800861c:	9508      	str	r5, [sp, #32]
 800861e:	f04f 39ff 	mov.w	r9, #4294967295
 8008622:	2200      	movs	r2, #0
 8008624:	f8cd 9004 	str.w	r9, [sp, #4]
 8008628:	2312      	movs	r3, #18
 800862a:	9209      	str	r2, [sp, #36]	; 0x24
 800862c:	e7cf      	b.n	80085ce <_dtoa_r+0x266>
 800862e:	2301      	movs	r3, #1
 8008630:	9308      	str	r3, [sp, #32]
 8008632:	e7f4      	b.n	800861e <_dtoa_r+0x2b6>
 8008634:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008638:	f8cd 9004 	str.w	r9, [sp, #4]
 800863c:	464b      	mov	r3, r9
 800863e:	e7c6      	b.n	80085ce <_dtoa_r+0x266>
 8008640:	3101      	adds	r1, #1
 8008642:	6041      	str	r1, [r0, #4]
 8008644:	0052      	lsls	r2, r2, #1
 8008646:	e7c6      	b.n	80085d6 <_dtoa_r+0x26e>
 8008648:	636f4361 	.word	0x636f4361
 800864c:	3fd287a7 	.word	0x3fd287a7
 8008650:	8b60c8b3 	.word	0x8b60c8b3
 8008654:	3fc68a28 	.word	0x3fc68a28
 8008658:	509f79fb 	.word	0x509f79fb
 800865c:	3fd34413 	.word	0x3fd34413
 8008660:	0800b87d 	.word	0x0800b87d
 8008664:	0800b894 	.word	0x0800b894
 8008668:	7ff00000 	.word	0x7ff00000
 800866c:	0800b879 	.word	0x0800b879
 8008670:	0800b870 	.word	0x0800b870
 8008674:	0800b84d 	.word	0x0800b84d
 8008678:	3ff80000 	.word	0x3ff80000
 800867c:	0800b9f0 	.word	0x0800b9f0
 8008680:	0800b8f3 	.word	0x0800b8f3
 8008684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008686:	9a00      	ldr	r2, [sp, #0]
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	9b01      	ldr	r3, [sp, #4]
 800868c:	2b0e      	cmp	r3, #14
 800868e:	f200 80ad 	bhi.w	80087ec <_dtoa_r+0x484>
 8008692:	2d00      	cmp	r5, #0
 8008694:	f000 80aa 	beq.w	80087ec <_dtoa_r+0x484>
 8008698:	f1ba 0f00 	cmp.w	sl, #0
 800869c:	dd36      	ble.n	800870c <_dtoa_r+0x3a4>
 800869e:	4ac3      	ldr	r2, [pc, #780]	; (80089ac <_dtoa_r+0x644>)
 80086a0:	f00a 030f 	and.w	r3, sl, #15
 80086a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086a8:	ed93 7b00 	vldr	d7, [r3]
 80086ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80086b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80086b4:	eeb0 8a47 	vmov.f32	s16, s14
 80086b8:	eef0 8a67 	vmov.f32	s17, s15
 80086bc:	d016      	beq.n	80086ec <_dtoa_r+0x384>
 80086be:	4bbc      	ldr	r3, [pc, #752]	; (80089b0 <_dtoa_r+0x648>)
 80086c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80086c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086c8:	f7f8 f8e8 	bl	800089c <__aeabi_ddiv>
 80086cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086d0:	f007 070f 	and.w	r7, r7, #15
 80086d4:	2503      	movs	r5, #3
 80086d6:	4eb6      	ldr	r6, [pc, #728]	; (80089b0 <_dtoa_r+0x648>)
 80086d8:	b957      	cbnz	r7, 80086f0 <_dtoa_r+0x388>
 80086da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086de:	ec53 2b18 	vmov	r2, r3, d8
 80086e2:	f7f8 f8db 	bl	800089c <__aeabi_ddiv>
 80086e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086ea:	e029      	b.n	8008740 <_dtoa_r+0x3d8>
 80086ec:	2502      	movs	r5, #2
 80086ee:	e7f2      	b.n	80086d6 <_dtoa_r+0x36e>
 80086f0:	07f9      	lsls	r1, r7, #31
 80086f2:	d508      	bpl.n	8008706 <_dtoa_r+0x39e>
 80086f4:	ec51 0b18 	vmov	r0, r1, d8
 80086f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086fc:	f7f7 ffa4 	bl	8000648 <__aeabi_dmul>
 8008700:	ec41 0b18 	vmov	d8, r0, r1
 8008704:	3501      	adds	r5, #1
 8008706:	107f      	asrs	r7, r7, #1
 8008708:	3608      	adds	r6, #8
 800870a:	e7e5      	b.n	80086d8 <_dtoa_r+0x370>
 800870c:	f000 80a6 	beq.w	800885c <_dtoa_r+0x4f4>
 8008710:	f1ca 0600 	rsb	r6, sl, #0
 8008714:	4ba5      	ldr	r3, [pc, #660]	; (80089ac <_dtoa_r+0x644>)
 8008716:	4fa6      	ldr	r7, [pc, #664]	; (80089b0 <_dtoa_r+0x648>)
 8008718:	f006 020f 	and.w	r2, r6, #15
 800871c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008728:	f7f7 ff8e 	bl	8000648 <__aeabi_dmul>
 800872c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008730:	1136      	asrs	r6, r6, #4
 8008732:	2300      	movs	r3, #0
 8008734:	2502      	movs	r5, #2
 8008736:	2e00      	cmp	r6, #0
 8008738:	f040 8085 	bne.w	8008846 <_dtoa_r+0x4de>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1d2      	bne.n	80086e6 <_dtoa_r+0x37e>
 8008740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 808c 	beq.w	8008860 <_dtoa_r+0x4f8>
 8008748:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800874c:	4b99      	ldr	r3, [pc, #612]	; (80089b4 <_dtoa_r+0x64c>)
 800874e:	2200      	movs	r2, #0
 8008750:	4630      	mov	r0, r6
 8008752:	4639      	mov	r1, r7
 8008754:	f7f8 f9ea 	bl	8000b2c <__aeabi_dcmplt>
 8008758:	2800      	cmp	r0, #0
 800875a:	f000 8081 	beq.w	8008860 <_dtoa_r+0x4f8>
 800875e:	9b01      	ldr	r3, [sp, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d07d      	beq.n	8008860 <_dtoa_r+0x4f8>
 8008764:	f1b9 0f00 	cmp.w	r9, #0
 8008768:	dd3c      	ble.n	80087e4 <_dtoa_r+0x47c>
 800876a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800876e:	9307      	str	r3, [sp, #28]
 8008770:	2200      	movs	r2, #0
 8008772:	4b91      	ldr	r3, [pc, #580]	; (80089b8 <_dtoa_r+0x650>)
 8008774:	4630      	mov	r0, r6
 8008776:	4639      	mov	r1, r7
 8008778:	f7f7 ff66 	bl	8000648 <__aeabi_dmul>
 800877c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008780:	3501      	adds	r5, #1
 8008782:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008786:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800878a:	4628      	mov	r0, r5
 800878c:	f7f7 fef2 	bl	8000574 <__aeabi_i2d>
 8008790:	4632      	mov	r2, r6
 8008792:	463b      	mov	r3, r7
 8008794:	f7f7 ff58 	bl	8000648 <__aeabi_dmul>
 8008798:	4b88      	ldr	r3, [pc, #544]	; (80089bc <_dtoa_r+0x654>)
 800879a:	2200      	movs	r2, #0
 800879c:	f7f7 fd9e 	bl	80002dc <__adddf3>
 80087a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80087a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087a8:	9303      	str	r3, [sp, #12]
 80087aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d15c      	bne.n	800886a <_dtoa_r+0x502>
 80087b0:	4b83      	ldr	r3, [pc, #524]	; (80089c0 <_dtoa_r+0x658>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	4630      	mov	r0, r6
 80087b6:	4639      	mov	r1, r7
 80087b8:	f7f7 fd8e 	bl	80002d8 <__aeabi_dsub>
 80087bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087c0:	4606      	mov	r6, r0
 80087c2:	460f      	mov	r7, r1
 80087c4:	f7f8 f9d0 	bl	8000b68 <__aeabi_dcmpgt>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	f040 8296 	bne.w	8008cfa <_dtoa_r+0x992>
 80087ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80087d2:	4630      	mov	r0, r6
 80087d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087d8:	4639      	mov	r1, r7
 80087da:	f7f8 f9a7 	bl	8000b2c <__aeabi_dcmplt>
 80087de:	2800      	cmp	r0, #0
 80087e0:	f040 8288 	bne.w	8008cf4 <_dtoa_r+0x98c>
 80087e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f2c0 8158 	blt.w	8008aa4 <_dtoa_r+0x73c>
 80087f4:	f1ba 0f0e 	cmp.w	sl, #14
 80087f8:	f300 8154 	bgt.w	8008aa4 <_dtoa_r+0x73c>
 80087fc:	4b6b      	ldr	r3, [pc, #428]	; (80089ac <_dtoa_r+0x644>)
 80087fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008802:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008808:	2b00      	cmp	r3, #0
 800880a:	f280 80e3 	bge.w	80089d4 <_dtoa_r+0x66c>
 800880e:	9b01      	ldr	r3, [sp, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	f300 80df 	bgt.w	80089d4 <_dtoa_r+0x66c>
 8008816:	f040 826d 	bne.w	8008cf4 <_dtoa_r+0x98c>
 800881a:	4b69      	ldr	r3, [pc, #420]	; (80089c0 <_dtoa_r+0x658>)
 800881c:	2200      	movs	r2, #0
 800881e:	4640      	mov	r0, r8
 8008820:	4649      	mov	r1, r9
 8008822:	f7f7 ff11 	bl	8000648 <__aeabi_dmul>
 8008826:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800882a:	f7f8 f993 	bl	8000b54 <__aeabi_dcmpge>
 800882e:	9e01      	ldr	r6, [sp, #4]
 8008830:	4637      	mov	r7, r6
 8008832:	2800      	cmp	r0, #0
 8008834:	f040 8243 	bne.w	8008cbe <_dtoa_r+0x956>
 8008838:	9d00      	ldr	r5, [sp, #0]
 800883a:	2331      	movs	r3, #49	; 0x31
 800883c:	f805 3b01 	strb.w	r3, [r5], #1
 8008840:	f10a 0a01 	add.w	sl, sl, #1
 8008844:	e23f      	b.n	8008cc6 <_dtoa_r+0x95e>
 8008846:	07f2      	lsls	r2, r6, #31
 8008848:	d505      	bpl.n	8008856 <_dtoa_r+0x4ee>
 800884a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800884e:	f7f7 fefb 	bl	8000648 <__aeabi_dmul>
 8008852:	3501      	adds	r5, #1
 8008854:	2301      	movs	r3, #1
 8008856:	1076      	asrs	r6, r6, #1
 8008858:	3708      	adds	r7, #8
 800885a:	e76c      	b.n	8008736 <_dtoa_r+0x3ce>
 800885c:	2502      	movs	r5, #2
 800885e:	e76f      	b.n	8008740 <_dtoa_r+0x3d8>
 8008860:	9b01      	ldr	r3, [sp, #4]
 8008862:	f8cd a01c 	str.w	sl, [sp, #28]
 8008866:	930c      	str	r3, [sp, #48]	; 0x30
 8008868:	e78d      	b.n	8008786 <_dtoa_r+0x41e>
 800886a:	9900      	ldr	r1, [sp, #0]
 800886c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800886e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008870:	4b4e      	ldr	r3, [pc, #312]	; (80089ac <_dtoa_r+0x644>)
 8008872:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008876:	4401      	add	r1, r0
 8008878:	9102      	str	r1, [sp, #8]
 800887a:	9908      	ldr	r1, [sp, #32]
 800887c:	eeb0 8a47 	vmov.f32	s16, s14
 8008880:	eef0 8a67 	vmov.f32	s17, s15
 8008884:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008888:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800888c:	2900      	cmp	r1, #0
 800888e:	d045      	beq.n	800891c <_dtoa_r+0x5b4>
 8008890:	494c      	ldr	r1, [pc, #304]	; (80089c4 <_dtoa_r+0x65c>)
 8008892:	2000      	movs	r0, #0
 8008894:	f7f8 f802 	bl	800089c <__aeabi_ddiv>
 8008898:	ec53 2b18 	vmov	r2, r3, d8
 800889c:	f7f7 fd1c 	bl	80002d8 <__aeabi_dsub>
 80088a0:	9d00      	ldr	r5, [sp, #0]
 80088a2:	ec41 0b18 	vmov	d8, r0, r1
 80088a6:	4639      	mov	r1, r7
 80088a8:	4630      	mov	r0, r6
 80088aa:	f7f8 f97d 	bl	8000ba8 <__aeabi_d2iz>
 80088ae:	900c      	str	r0, [sp, #48]	; 0x30
 80088b0:	f7f7 fe60 	bl	8000574 <__aeabi_i2d>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	4630      	mov	r0, r6
 80088ba:	4639      	mov	r1, r7
 80088bc:	f7f7 fd0c 	bl	80002d8 <__aeabi_dsub>
 80088c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088c2:	3330      	adds	r3, #48	; 0x30
 80088c4:	f805 3b01 	strb.w	r3, [r5], #1
 80088c8:	ec53 2b18 	vmov	r2, r3, d8
 80088cc:	4606      	mov	r6, r0
 80088ce:	460f      	mov	r7, r1
 80088d0:	f7f8 f92c 	bl	8000b2c <__aeabi_dcmplt>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d165      	bne.n	80089a4 <_dtoa_r+0x63c>
 80088d8:	4632      	mov	r2, r6
 80088da:	463b      	mov	r3, r7
 80088dc:	4935      	ldr	r1, [pc, #212]	; (80089b4 <_dtoa_r+0x64c>)
 80088de:	2000      	movs	r0, #0
 80088e0:	f7f7 fcfa 	bl	80002d8 <__aeabi_dsub>
 80088e4:	ec53 2b18 	vmov	r2, r3, d8
 80088e8:	f7f8 f920 	bl	8000b2c <__aeabi_dcmplt>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	f040 80b9 	bne.w	8008a64 <_dtoa_r+0x6fc>
 80088f2:	9b02      	ldr	r3, [sp, #8]
 80088f4:	429d      	cmp	r5, r3
 80088f6:	f43f af75 	beq.w	80087e4 <_dtoa_r+0x47c>
 80088fa:	4b2f      	ldr	r3, [pc, #188]	; (80089b8 <_dtoa_r+0x650>)
 80088fc:	ec51 0b18 	vmov	r0, r1, d8
 8008900:	2200      	movs	r2, #0
 8008902:	f7f7 fea1 	bl	8000648 <__aeabi_dmul>
 8008906:	4b2c      	ldr	r3, [pc, #176]	; (80089b8 <_dtoa_r+0x650>)
 8008908:	ec41 0b18 	vmov	d8, r0, r1
 800890c:	2200      	movs	r2, #0
 800890e:	4630      	mov	r0, r6
 8008910:	4639      	mov	r1, r7
 8008912:	f7f7 fe99 	bl	8000648 <__aeabi_dmul>
 8008916:	4606      	mov	r6, r0
 8008918:	460f      	mov	r7, r1
 800891a:	e7c4      	b.n	80088a6 <_dtoa_r+0x53e>
 800891c:	ec51 0b17 	vmov	r0, r1, d7
 8008920:	f7f7 fe92 	bl	8000648 <__aeabi_dmul>
 8008924:	9b02      	ldr	r3, [sp, #8]
 8008926:	9d00      	ldr	r5, [sp, #0]
 8008928:	930c      	str	r3, [sp, #48]	; 0x30
 800892a:	ec41 0b18 	vmov	d8, r0, r1
 800892e:	4639      	mov	r1, r7
 8008930:	4630      	mov	r0, r6
 8008932:	f7f8 f939 	bl	8000ba8 <__aeabi_d2iz>
 8008936:	9011      	str	r0, [sp, #68]	; 0x44
 8008938:	f7f7 fe1c 	bl	8000574 <__aeabi_i2d>
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	4630      	mov	r0, r6
 8008942:	4639      	mov	r1, r7
 8008944:	f7f7 fcc8 	bl	80002d8 <__aeabi_dsub>
 8008948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800894a:	3330      	adds	r3, #48	; 0x30
 800894c:	f805 3b01 	strb.w	r3, [r5], #1
 8008950:	9b02      	ldr	r3, [sp, #8]
 8008952:	429d      	cmp	r5, r3
 8008954:	4606      	mov	r6, r0
 8008956:	460f      	mov	r7, r1
 8008958:	f04f 0200 	mov.w	r2, #0
 800895c:	d134      	bne.n	80089c8 <_dtoa_r+0x660>
 800895e:	4b19      	ldr	r3, [pc, #100]	; (80089c4 <_dtoa_r+0x65c>)
 8008960:	ec51 0b18 	vmov	r0, r1, d8
 8008964:	f7f7 fcba 	bl	80002dc <__adddf3>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4630      	mov	r0, r6
 800896e:	4639      	mov	r1, r7
 8008970:	f7f8 f8fa 	bl	8000b68 <__aeabi_dcmpgt>
 8008974:	2800      	cmp	r0, #0
 8008976:	d175      	bne.n	8008a64 <_dtoa_r+0x6fc>
 8008978:	ec53 2b18 	vmov	r2, r3, d8
 800897c:	4911      	ldr	r1, [pc, #68]	; (80089c4 <_dtoa_r+0x65c>)
 800897e:	2000      	movs	r0, #0
 8008980:	f7f7 fcaa 	bl	80002d8 <__aeabi_dsub>
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	4630      	mov	r0, r6
 800898a:	4639      	mov	r1, r7
 800898c:	f7f8 f8ce 	bl	8000b2c <__aeabi_dcmplt>
 8008990:	2800      	cmp	r0, #0
 8008992:	f43f af27 	beq.w	80087e4 <_dtoa_r+0x47c>
 8008996:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008998:	1e6b      	subs	r3, r5, #1
 800899a:	930c      	str	r3, [sp, #48]	; 0x30
 800899c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089a0:	2b30      	cmp	r3, #48	; 0x30
 80089a2:	d0f8      	beq.n	8008996 <_dtoa_r+0x62e>
 80089a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80089a8:	e04a      	b.n	8008a40 <_dtoa_r+0x6d8>
 80089aa:	bf00      	nop
 80089ac:	0800b9f0 	.word	0x0800b9f0
 80089b0:	0800b9c8 	.word	0x0800b9c8
 80089b4:	3ff00000 	.word	0x3ff00000
 80089b8:	40240000 	.word	0x40240000
 80089bc:	401c0000 	.word	0x401c0000
 80089c0:	40140000 	.word	0x40140000
 80089c4:	3fe00000 	.word	0x3fe00000
 80089c8:	4baf      	ldr	r3, [pc, #700]	; (8008c88 <_dtoa_r+0x920>)
 80089ca:	f7f7 fe3d 	bl	8000648 <__aeabi_dmul>
 80089ce:	4606      	mov	r6, r0
 80089d0:	460f      	mov	r7, r1
 80089d2:	e7ac      	b.n	800892e <_dtoa_r+0x5c6>
 80089d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80089d8:	9d00      	ldr	r5, [sp, #0]
 80089da:	4642      	mov	r2, r8
 80089dc:	464b      	mov	r3, r9
 80089de:	4630      	mov	r0, r6
 80089e0:	4639      	mov	r1, r7
 80089e2:	f7f7 ff5b 	bl	800089c <__aeabi_ddiv>
 80089e6:	f7f8 f8df 	bl	8000ba8 <__aeabi_d2iz>
 80089ea:	9002      	str	r0, [sp, #8]
 80089ec:	f7f7 fdc2 	bl	8000574 <__aeabi_i2d>
 80089f0:	4642      	mov	r2, r8
 80089f2:	464b      	mov	r3, r9
 80089f4:	f7f7 fe28 	bl	8000648 <__aeabi_dmul>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4630      	mov	r0, r6
 80089fe:	4639      	mov	r1, r7
 8008a00:	f7f7 fc6a 	bl	80002d8 <__aeabi_dsub>
 8008a04:	9e02      	ldr	r6, [sp, #8]
 8008a06:	9f01      	ldr	r7, [sp, #4]
 8008a08:	3630      	adds	r6, #48	; 0x30
 8008a0a:	f805 6b01 	strb.w	r6, [r5], #1
 8008a0e:	9e00      	ldr	r6, [sp, #0]
 8008a10:	1bae      	subs	r6, r5, r6
 8008a12:	42b7      	cmp	r7, r6
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	d137      	bne.n	8008a8a <_dtoa_r+0x722>
 8008a1a:	f7f7 fc5f 	bl	80002dc <__adddf3>
 8008a1e:	4642      	mov	r2, r8
 8008a20:	464b      	mov	r3, r9
 8008a22:	4606      	mov	r6, r0
 8008a24:	460f      	mov	r7, r1
 8008a26:	f7f8 f89f 	bl	8000b68 <__aeabi_dcmpgt>
 8008a2a:	b9c8      	cbnz	r0, 8008a60 <_dtoa_r+0x6f8>
 8008a2c:	4642      	mov	r2, r8
 8008a2e:	464b      	mov	r3, r9
 8008a30:	4630      	mov	r0, r6
 8008a32:	4639      	mov	r1, r7
 8008a34:	f7f8 f870 	bl	8000b18 <__aeabi_dcmpeq>
 8008a38:	b110      	cbz	r0, 8008a40 <_dtoa_r+0x6d8>
 8008a3a:	9b02      	ldr	r3, [sp, #8]
 8008a3c:	07d9      	lsls	r1, r3, #31
 8008a3e:	d40f      	bmi.n	8008a60 <_dtoa_r+0x6f8>
 8008a40:	4620      	mov	r0, r4
 8008a42:	4659      	mov	r1, fp
 8008a44:	f000 fcec 	bl	8009420 <_Bfree>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	702b      	strb	r3, [r5, #0]
 8008a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a4e:	f10a 0001 	add.w	r0, sl, #1
 8008a52:	6018      	str	r0, [r3, #0]
 8008a54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f43f acd8 	beq.w	800840c <_dtoa_r+0xa4>
 8008a5c:	601d      	str	r5, [r3, #0]
 8008a5e:	e4d5      	b.n	800840c <_dtoa_r+0xa4>
 8008a60:	f8cd a01c 	str.w	sl, [sp, #28]
 8008a64:	462b      	mov	r3, r5
 8008a66:	461d      	mov	r5, r3
 8008a68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a6c:	2a39      	cmp	r2, #57	; 0x39
 8008a6e:	d108      	bne.n	8008a82 <_dtoa_r+0x71a>
 8008a70:	9a00      	ldr	r2, [sp, #0]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d1f7      	bne.n	8008a66 <_dtoa_r+0x6fe>
 8008a76:	9a07      	ldr	r2, [sp, #28]
 8008a78:	9900      	ldr	r1, [sp, #0]
 8008a7a:	3201      	adds	r2, #1
 8008a7c:	9207      	str	r2, [sp, #28]
 8008a7e:	2230      	movs	r2, #48	; 0x30
 8008a80:	700a      	strb	r2, [r1, #0]
 8008a82:	781a      	ldrb	r2, [r3, #0]
 8008a84:	3201      	adds	r2, #1
 8008a86:	701a      	strb	r2, [r3, #0]
 8008a88:	e78c      	b.n	80089a4 <_dtoa_r+0x63c>
 8008a8a:	4b7f      	ldr	r3, [pc, #508]	; (8008c88 <_dtoa_r+0x920>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f7f7 fddb 	bl	8000648 <__aeabi_dmul>
 8008a92:	2200      	movs	r2, #0
 8008a94:	2300      	movs	r3, #0
 8008a96:	4606      	mov	r6, r0
 8008a98:	460f      	mov	r7, r1
 8008a9a:	f7f8 f83d 	bl	8000b18 <__aeabi_dcmpeq>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d09b      	beq.n	80089da <_dtoa_r+0x672>
 8008aa2:	e7cd      	b.n	8008a40 <_dtoa_r+0x6d8>
 8008aa4:	9a08      	ldr	r2, [sp, #32]
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	f000 80c4 	beq.w	8008c34 <_dtoa_r+0x8cc>
 8008aac:	9a05      	ldr	r2, [sp, #20]
 8008aae:	2a01      	cmp	r2, #1
 8008ab0:	f300 80a8 	bgt.w	8008c04 <_dtoa_r+0x89c>
 8008ab4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ab6:	2a00      	cmp	r2, #0
 8008ab8:	f000 80a0 	beq.w	8008bfc <_dtoa_r+0x894>
 8008abc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ac0:	9e06      	ldr	r6, [sp, #24]
 8008ac2:	4645      	mov	r5, r8
 8008ac4:	9a04      	ldr	r2, [sp, #16]
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	441a      	add	r2, r3
 8008aca:	4620      	mov	r0, r4
 8008acc:	4498      	add	r8, r3
 8008ace:	9204      	str	r2, [sp, #16]
 8008ad0:	f000 fd62 	bl	8009598 <__i2b>
 8008ad4:	4607      	mov	r7, r0
 8008ad6:	2d00      	cmp	r5, #0
 8008ad8:	dd0b      	ble.n	8008af2 <_dtoa_r+0x78a>
 8008ada:	9b04      	ldr	r3, [sp, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	dd08      	ble.n	8008af2 <_dtoa_r+0x78a>
 8008ae0:	42ab      	cmp	r3, r5
 8008ae2:	9a04      	ldr	r2, [sp, #16]
 8008ae4:	bfa8      	it	ge
 8008ae6:	462b      	movge	r3, r5
 8008ae8:	eba8 0803 	sub.w	r8, r8, r3
 8008aec:	1aed      	subs	r5, r5, r3
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	9304      	str	r3, [sp, #16]
 8008af2:	9b06      	ldr	r3, [sp, #24]
 8008af4:	b1fb      	cbz	r3, 8008b36 <_dtoa_r+0x7ce>
 8008af6:	9b08      	ldr	r3, [sp, #32]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 809f 	beq.w	8008c3c <_dtoa_r+0x8d4>
 8008afe:	2e00      	cmp	r6, #0
 8008b00:	dd11      	ble.n	8008b26 <_dtoa_r+0x7be>
 8008b02:	4639      	mov	r1, r7
 8008b04:	4632      	mov	r2, r6
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 fe02 	bl	8009710 <__pow5mult>
 8008b0c:	465a      	mov	r2, fp
 8008b0e:	4601      	mov	r1, r0
 8008b10:	4607      	mov	r7, r0
 8008b12:	4620      	mov	r0, r4
 8008b14:	f000 fd56 	bl	80095c4 <__multiply>
 8008b18:	4659      	mov	r1, fp
 8008b1a:	9007      	str	r0, [sp, #28]
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f000 fc7f 	bl	8009420 <_Bfree>
 8008b22:	9b07      	ldr	r3, [sp, #28]
 8008b24:	469b      	mov	fp, r3
 8008b26:	9b06      	ldr	r3, [sp, #24]
 8008b28:	1b9a      	subs	r2, r3, r6
 8008b2a:	d004      	beq.n	8008b36 <_dtoa_r+0x7ce>
 8008b2c:	4659      	mov	r1, fp
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 fdee 	bl	8009710 <__pow5mult>
 8008b34:	4683      	mov	fp, r0
 8008b36:	2101      	movs	r1, #1
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 fd2d 	bl	8009598 <__i2b>
 8008b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	4606      	mov	r6, r0
 8008b44:	dd7c      	ble.n	8008c40 <_dtoa_r+0x8d8>
 8008b46:	461a      	mov	r2, r3
 8008b48:	4601      	mov	r1, r0
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f000 fde0 	bl	8009710 <__pow5mult>
 8008b50:	9b05      	ldr	r3, [sp, #20]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	4606      	mov	r6, r0
 8008b56:	dd76      	ble.n	8008c46 <_dtoa_r+0x8de>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	9306      	str	r3, [sp, #24]
 8008b5c:	6933      	ldr	r3, [r6, #16]
 8008b5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b62:	6918      	ldr	r0, [r3, #16]
 8008b64:	f000 fcc8 	bl	80094f8 <__hi0bits>
 8008b68:	f1c0 0020 	rsb	r0, r0, #32
 8008b6c:	9b04      	ldr	r3, [sp, #16]
 8008b6e:	4418      	add	r0, r3
 8008b70:	f010 001f 	ands.w	r0, r0, #31
 8008b74:	f000 8086 	beq.w	8008c84 <_dtoa_r+0x91c>
 8008b78:	f1c0 0320 	rsb	r3, r0, #32
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	dd7f      	ble.n	8008c80 <_dtoa_r+0x918>
 8008b80:	f1c0 001c 	rsb	r0, r0, #28
 8008b84:	9b04      	ldr	r3, [sp, #16]
 8008b86:	4403      	add	r3, r0
 8008b88:	4480      	add	r8, r0
 8008b8a:	4405      	add	r5, r0
 8008b8c:	9304      	str	r3, [sp, #16]
 8008b8e:	f1b8 0f00 	cmp.w	r8, #0
 8008b92:	dd05      	ble.n	8008ba0 <_dtoa_r+0x838>
 8008b94:	4659      	mov	r1, fp
 8008b96:	4642      	mov	r2, r8
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f000 fe13 	bl	80097c4 <__lshift>
 8008b9e:	4683      	mov	fp, r0
 8008ba0:	9b04      	ldr	r3, [sp, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	dd05      	ble.n	8008bb2 <_dtoa_r+0x84a>
 8008ba6:	4631      	mov	r1, r6
 8008ba8:	461a      	mov	r2, r3
 8008baa:	4620      	mov	r0, r4
 8008bac:	f000 fe0a 	bl	80097c4 <__lshift>
 8008bb0:	4606      	mov	r6, r0
 8008bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d069      	beq.n	8008c8c <_dtoa_r+0x924>
 8008bb8:	4631      	mov	r1, r6
 8008bba:	4658      	mov	r0, fp
 8008bbc:	f000 fe6e 	bl	800989c <__mcmp>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	da63      	bge.n	8008c8c <_dtoa_r+0x924>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	4659      	mov	r1, fp
 8008bc8:	220a      	movs	r2, #10
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f000 fc4a 	bl	8009464 <__multadd>
 8008bd0:	9b08      	ldr	r3, [sp, #32]
 8008bd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008bd6:	4683      	mov	fp, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 818f 	beq.w	8008efc <_dtoa_r+0xb94>
 8008bde:	4639      	mov	r1, r7
 8008be0:	2300      	movs	r3, #0
 8008be2:	220a      	movs	r2, #10
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 fc3d 	bl	8009464 <__multadd>
 8008bea:	f1b9 0f00 	cmp.w	r9, #0
 8008bee:	4607      	mov	r7, r0
 8008bf0:	f300 808e 	bgt.w	8008d10 <_dtoa_r+0x9a8>
 8008bf4:	9b05      	ldr	r3, [sp, #20]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	dc50      	bgt.n	8008c9c <_dtoa_r+0x934>
 8008bfa:	e089      	b.n	8008d10 <_dtoa_r+0x9a8>
 8008bfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c02:	e75d      	b.n	8008ac0 <_dtoa_r+0x758>
 8008c04:	9b01      	ldr	r3, [sp, #4]
 8008c06:	1e5e      	subs	r6, r3, #1
 8008c08:	9b06      	ldr	r3, [sp, #24]
 8008c0a:	42b3      	cmp	r3, r6
 8008c0c:	bfbf      	itttt	lt
 8008c0e:	9b06      	ldrlt	r3, [sp, #24]
 8008c10:	9606      	strlt	r6, [sp, #24]
 8008c12:	1af2      	sublt	r2, r6, r3
 8008c14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008c16:	bfb6      	itet	lt
 8008c18:	189b      	addlt	r3, r3, r2
 8008c1a:	1b9e      	subge	r6, r3, r6
 8008c1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008c1e:	9b01      	ldr	r3, [sp, #4]
 8008c20:	bfb8      	it	lt
 8008c22:	2600      	movlt	r6, #0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	bfb5      	itete	lt
 8008c28:	eba8 0503 	sublt.w	r5, r8, r3
 8008c2c:	9b01      	ldrge	r3, [sp, #4]
 8008c2e:	2300      	movlt	r3, #0
 8008c30:	4645      	movge	r5, r8
 8008c32:	e747      	b.n	8008ac4 <_dtoa_r+0x75c>
 8008c34:	9e06      	ldr	r6, [sp, #24]
 8008c36:	9f08      	ldr	r7, [sp, #32]
 8008c38:	4645      	mov	r5, r8
 8008c3a:	e74c      	b.n	8008ad6 <_dtoa_r+0x76e>
 8008c3c:	9a06      	ldr	r2, [sp, #24]
 8008c3e:	e775      	b.n	8008b2c <_dtoa_r+0x7c4>
 8008c40:	9b05      	ldr	r3, [sp, #20]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	dc18      	bgt.n	8008c78 <_dtoa_r+0x910>
 8008c46:	9b02      	ldr	r3, [sp, #8]
 8008c48:	b9b3      	cbnz	r3, 8008c78 <_dtoa_r+0x910>
 8008c4a:	9b03      	ldr	r3, [sp, #12]
 8008c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c50:	b9a3      	cbnz	r3, 8008c7c <_dtoa_r+0x914>
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c58:	0d1b      	lsrs	r3, r3, #20
 8008c5a:	051b      	lsls	r3, r3, #20
 8008c5c:	b12b      	cbz	r3, 8008c6a <_dtoa_r+0x902>
 8008c5e:	9b04      	ldr	r3, [sp, #16]
 8008c60:	3301      	adds	r3, #1
 8008c62:	9304      	str	r3, [sp, #16]
 8008c64:	f108 0801 	add.w	r8, r8, #1
 8008c68:	2301      	movs	r3, #1
 8008c6a:	9306      	str	r3, [sp, #24]
 8008c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f47f af74 	bne.w	8008b5c <_dtoa_r+0x7f4>
 8008c74:	2001      	movs	r0, #1
 8008c76:	e779      	b.n	8008b6c <_dtoa_r+0x804>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	e7f6      	b.n	8008c6a <_dtoa_r+0x902>
 8008c7c:	9b02      	ldr	r3, [sp, #8]
 8008c7e:	e7f4      	b.n	8008c6a <_dtoa_r+0x902>
 8008c80:	d085      	beq.n	8008b8e <_dtoa_r+0x826>
 8008c82:	4618      	mov	r0, r3
 8008c84:	301c      	adds	r0, #28
 8008c86:	e77d      	b.n	8008b84 <_dtoa_r+0x81c>
 8008c88:	40240000 	.word	0x40240000
 8008c8c:	9b01      	ldr	r3, [sp, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	dc38      	bgt.n	8008d04 <_dtoa_r+0x99c>
 8008c92:	9b05      	ldr	r3, [sp, #20]
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	dd35      	ble.n	8008d04 <_dtoa_r+0x99c>
 8008c98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008c9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ca0:	d10d      	bne.n	8008cbe <_dtoa_r+0x956>
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	464b      	mov	r3, r9
 8008ca6:	2205      	movs	r2, #5
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 fbdb 	bl	8009464 <__multadd>
 8008cae:	4601      	mov	r1, r0
 8008cb0:	4606      	mov	r6, r0
 8008cb2:	4658      	mov	r0, fp
 8008cb4:	f000 fdf2 	bl	800989c <__mcmp>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	f73f adbd 	bgt.w	8008838 <_dtoa_r+0x4d0>
 8008cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc0:	9d00      	ldr	r5, [sp, #0]
 8008cc2:	ea6f 0a03 	mvn.w	sl, r3
 8008cc6:	f04f 0800 	mov.w	r8, #0
 8008cca:	4631      	mov	r1, r6
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f000 fba7 	bl	8009420 <_Bfree>
 8008cd2:	2f00      	cmp	r7, #0
 8008cd4:	f43f aeb4 	beq.w	8008a40 <_dtoa_r+0x6d8>
 8008cd8:	f1b8 0f00 	cmp.w	r8, #0
 8008cdc:	d005      	beq.n	8008cea <_dtoa_r+0x982>
 8008cde:	45b8      	cmp	r8, r7
 8008ce0:	d003      	beq.n	8008cea <_dtoa_r+0x982>
 8008ce2:	4641      	mov	r1, r8
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f000 fb9b 	bl	8009420 <_Bfree>
 8008cea:	4639      	mov	r1, r7
 8008cec:	4620      	mov	r0, r4
 8008cee:	f000 fb97 	bl	8009420 <_Bfree>
 8008cf2:	e6a5      	b.n	8008a40 <_dtoa_r+0x6d8>
 8008cf4:	2600      	movs	r6, #0
 8008cf6:	4637      	mov	r7, r6
 8008cf8:	e7e1      	b.n	8008cbe <_dtoa_r+0x956>
 8008cfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008cfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008d00:	4637      	mov	r7, r6
 8008d02:	e599      	b.n	8008838 <_dtoa_r+0x4d0>
 8008d04:	9b08      	ldr	r3, [sp, #32]
 8008d06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f000 80fd 	beq.w	8008f0a <_dtoa_r+0xba2>
 8008d10:	2d00      	cmp	r5, #0
 8008d12:	dd05      	ble.n	8008d20 <_dtoa_r+0x9b8>
 8008d14:	4639      	mov	r1, r7
 8008d16:	462a      	mov	r2, r5
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f000 fd53 	bl	80097c4 <__lshift>
 8008d1e:	4607      	mov	r7, r0
 8008d20:	9b06      	ldr	r3, [sp, #24]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d05c      	beq.n	8008de0 <_dtoa_r+0xa78>
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f000 fb39 	bl	80093a0 <_Balloc>
 8008d2e:	4605      	mov	r5, r0
 8008d30:	b928      	cbnz	r0, 8008d3e <_dtoa_r+0x9d6>
 8008d32:	4b80      	ldr	r3, [pc, #512]	; (8008f34 <_dtoa_r+0xbcc>)
 8008d34:	4602      	mov	r2, r0
 8008d36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d3a:	f7ff bb2e 	b.w	800839a <_dtoa_r+0x32>
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	3202      	adds	r2, #2
 8008d42:	0092      	lsls	r2, r2, #2
 8008d44:	f107 010c 	add.w	r1, r7, #12
 8008d48:	300c      	adds	r0, #12
 8008d4a:	f7fe fbe3 	bl	8007514 <memcpy>
 8008d4e:	2201      	movs	r2, #1
 8008d50:	4629      	mov	r1, r5
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 fd36 	bl	80097c4 <__lshift>
 8008d58:	9b00      	ldr	r3, [sp, #0]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	9301      	str	r3, [sp, #4]
 8008d5e:	9b00      	ldr	r3, [sp, #0]
 8008d60:	444b      	add	r3, r9
 8008d62:	9307      	str	r3, [sp, #28]
 8008d64:	9b02      	ldr	r3, [sp, #8]
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	46b8      	mov	r8, r7
 8008d6c:	9306      	str	r3, [sp, #24]
 8008d6e:	4607      	mov	r7, r0
 8008d70:	9b01      	ldr	r3, [sp, #4]
 8008d72:	4631      	mov	r1, r6
 8008d74:	3b01      	subs	r3, #1
 8008d76:	4658      	mov	r0, fp
 8008d78:	9302      	str	r3, [sp, #8]
 8008d7a:	f7ff fa69 	bl	8008250 <quorem>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	3330      	adds	r3, #48	; 0x30
 8008d82:	9004      	str	r0, [sp, #16]
 8008d84:	4641      	mov	r1, r8
 8008d86:	4658      	mov	r0, fp
 8008d88:	9308      	str	r3, [sp, #32]
 8008d8a:	f000 fd87 	bl	800989c <__mcmp>
 8008d8e:	463a      	mov	r2, r7
 8008d90:	4681      	mov	r9, r0
 8008d92:	4631      	mov	r1, r6
 8008d94:	4620      	mov	r0, r4
 8008d96:	f000 fd9d 	bl	80098d4 <__mdiff>
 8008d9a:	68c2      	ldr	r2, [r0, #12]
 8008d9c:	9b08      	ldr	r3, [sp, #32]
 8008d9e:	4605      	mov	r5, r0
 8008da0:	bb02      	cbnz	r2, 8008de4 <_dtoa_r+0xa7c>
 8008da2:	4601      	mov	r1, r0
 8008da4:	4658      	mov	r0, fp
 8008da6:	f000 fd79 	bl	800989c <__mcmp>
 8008daa:	9b08      	ldr	r3, [sp, #32]
 8008dac:	4602      	mov	r2, r0
 8008dae:	4629      	mov	r1, r5
 8008db0:	4620      	mov	r0, r4
 8008db2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008db6:	f000 fb33 	bl	8009420 <_Bfree>
 8008dba:	9b05      	ldr	r3, [sp, #20]
 8008dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dbe:	9d01      	ldr	r5, [sp, #4]
 8008dc0:	ea43 0102 	orr.w	r1, r3, r2
 8008dc4:	9b06      	ldr	r3, [sp, #24]
 8008dc6:	430b      	orrs	r3, r1
 8008dc8:	9b08      	ldr	r3, [sp, #32]
 8008dca:	d10d      	bne.n	8008de8 <_dtoa_r+0xa80>
 8008dcc:	2b39      	cmp	r3, #57	; 0x39
 8008dce:	d029      	beq.n	8008e24 <_dtoa_r+0xabc>
 8008dd0:	f1b9 0f00 	cmp.w	r9, #0
 8008dd4:	dd01      	ble.n	8008dda <_dtoa_r+0xa72>
 8008dd6:	9b04      	ldr	r3, [sp, #16]
 8008dd8:	3331      	adds	r3, #49	; 0x31
 8008dda:	9a02      	ldr	r2, [sp, #8]
 8008ddc:	7013      	strb	r3, [r2, #0]
 8008dde:	e774      	b.n	8008cca <_dtoa_r+0x962>
 8008de0:	4638      	mov	r0, r7
 8008de2:	e7b9      	b.n	8008d58 <_dtoa_r+0x9f0>
 8008de4:	2201      	movs	r2, #1
 8008de6:	e7e2      	b.n	8008dae <_dtoa_r+0xa46>
 8008de8:	f1b9 0f00 	cmp.w	r9, #0
 8008dec:	db06      	blt.n	8008dfc <_dtoa_r+0xa94>
 8008dee:	9905      	ldr	r1, [sp, #20]
 8008df0:	ea41 0909 	orr.w	r9, r1, r9
 8008df4:	9906      	ldr	r1, [sp, #24]
 8008df6:	ea59 0101 	orrs.w	r1, r9, r1
 8008dfa:	d120      	bne.n	8008e3e <_dtoa_r+0xad6>
 8008dfc:	2a00      	cmp	r2, #0
 8008dfe:	ddec      	ble.n	8008dda <_dtoa_r+0xa72>
 8008e00:	4659      	mov	r1, fp
 8008e02:	2201      	movs	r2, #1
 8008e04:	4620      	mov	r0, r4
 8008e06:	9301      	str	r3, [sp, #4]
 8008e08:	f000 fcdc 	bl	80097c4 <__lshift>
 8008e0c:	4631      	mov	r1, r6
 8008e0e:	4683      	mov	fp, r0
 8008e10:	f000 fd44 	bl	800989c <__mcmp>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	dc02      	bgt.n	8008e20 <_dtoa_r+0xab8>
 8008e1a:	d1de      	bne.n	8008dda <_dtoa_r+0xa72>
 8008e1c:	07da      	lsls	r2, r3, #31
 8008e1e:	d5dc      	bpl.n	8008dda <_dtoa_r+0xa72>
 8008e20:	2b39      	cmp	r3, #57	; 0x39
 8008e22:	d1d8      	bne.n	8008dd6 <_dtoa_r+0xa6e>
 8008e24:	9a02      	ldr	r2, [sp, #8]
 8008e26:	2339      	movs	r3, #57	; 0x39
 8008e28:	7013      	strb	r3, [r2, #0]
 8008e2a:	462b      	mov	r3, r5
 8008e2c:	461d      	mov	r5, r3
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e34:	2a39      	cmp	r2, #57	; 0x39
 8008e36:	d050      	beq.n	8008eda <_dtoa_r+0xb72>
 8008e38:	3201      	adds	r2, #1
 8008e3a:	701a      	strb	r2, [r3, #0]
 8008e3c:	e745      	b.n	8008cca <_dtoa_r+0x962>
 8008e3e:	2a00      	cmp	r2, #0
 8008e40:	dd03      	ble.n	8008e4a <_dtoa_r+0xae2>
 8008e42:	2b39      	cmp	r3, #57	; 0x39
 8008e44:	d0ee      	beq.n	8008e24 <_dtoa_r+0xabc>
 8008e46:	3301      	adds	r3, #1
 8008e48:	e7c7      	b.n	8008dda <_dtoa_r+0xa72>
 8008e4a:	9a01      	ldr	r2, [sp, #4]
 8008e4c:	9907      	ldr	r1, [sp, #28]
 8008e4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e52:	428a      	cmp	r2, r1
 8008e54:	d02a      	beq.n	8008eac <_dtoa_r+0xb44>
 8008e56:	4659      	mov	r1, fp
 8008e58:	2300      	movs	r3, #0
 8008e5a:	220a      	movs	r2, #10
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f000 fb01 	bl	8009464 <__multadd>
 8008e62:	45b8      	cmp	r8, r7
 8008e64:	4683      	mov	fp, r0
 8008e66:	f04f 0300 	mov.w	r3, #0
 8008e6a:	f04f 020a 	mov.w	r2, #10
 8008e6e:	4641      	mov	r1, r8
 8008e70:	4620      	mov	r0, r4
 8008e72:	d107      	bne.n	8008e84 <_dtoa_r+0xb1c>
 8008e74:	f000 faf6 	bl	8009464 <__multadd>
 8008e78:	4680      	mov	r8, r0
 8008e7a:	4607      	mov	r7, r0
 8008e7c:	9b01      	ldr	r3, [sp, #4]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	9301      	str	r3, [sp, #4]
 8008e82:	e775      	b.n	8008d70 <_dtoa_r+0xa08>
 8008e84:	f000 faee 	bl	8009464 <__multadd>
 8008e88:	4639      	mov	r1, r7
 8008e8a:	4680      	mov	r8, r0
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	220a      	movs	r2, #10
 8008e90:	4620      	mov	r0, r4
 8008e92:	f000 fae7 	bl	8009464 <__multadd>
 8008e96:	4607      	mov	r7, r0
 8008e98:	e7f0      	b.n	8008e7c <_dtoa_r+0xb14>
 8008e9a:	f1b9 0f00 	cmp.w	r9, #0
 8008e9e:	9a00      	ldr	r2, [sp, #0]
 8008ea0:	bfcc      	ite	gt
 8008ea2:	464d      	movgt	r5, r9
 8008ea4:	2501      	movle	r5, #1
 8008ea6:	4415      	add	r5, r2
 8008ea8:	f04f 0800 	mov.w	r8, #0
 8008eac:	4659      	mov	r1, fp
 8008eae:	2201      	movs	r2, #1
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	9301      	str	r3, [sp, #4]
 8008eb4:	f000 fc86 	bl	80097c4 <__lshift>
 8008eb8:	4631      	mov	r1, r6
 8008eba:	4683      	mov	fp, r0
 8008ebc:	f000 fcee 	bl	800989c <__mcmp>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	dcb2      	bgt.n	8008e2a <_dtoa_r+0xac2>
 8008ec4:	d102      	bne.n	8008ecc <_dtoa_r+0xb64>
 8008ec6:	9b01      	ldr	r3, [sp, #4]
 8008ec8:	07db      	lsls	r3, r3, #31
 8008eca:	d4ae      	bmi.n	8008e2a <_dtoa_r+0xac2>
 8008ecc:	462b      	mov	r3, r5
 8008ece:	461d      	mov	r5, r3
 8008ed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ed4:	2a30      	cmp	r2, #48	; 0x30
 8008ed6:	d0fa      	beq.n	8008ece <_dtoa_r+0xb66>
 8008ed8:	e6f7      	b.n	8008cca <_dtoa_r+0x962>
 8008eda:	9a00      	ldr	r2, [sp, #0]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d1a5      	bne.n	8008e2c <_dtoa_r+0xac4>
 8008ee0:	f10a 0a01 	add.w	sl, sl, #1
 8008ee4:	2331      	movs	r3, #49	; 0x31
 8008ee6:	e779      	b.n	8008ddc <_dtoa_r+0xa74>
 8008ee8:	4b13      	ldr	r3, [pc, #76]	; (8008f38 <_dtoa_r+0xbd0>)
 8008eea:	f7ff baaf 	b.w	800844c <_dtoa_r+0xe4>
 8008eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f47f aa86 	bne.w	8008402 <_dtoa_r+0x9a>
 8008ef6:	4b11      	ldr	r3, [pc, #68]	; (8008f3c <_dtoa_r+0xbd4>)
 8008ef8:	f7ff baa8 	b.w	800844c <_dtoa_r+0xe4>
 8008efc:	f1b9 0f00 	cmp.w	r9, #0
 8008f00:	dc03      	bgt.n	8008f0a <_dtoa_r+0xba2>
 8008f02:	9b05      	ldr	r3, [sp, #20]
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	f73f aec9 	bgt.w	8008c9c <_dtoa_r+0x934>
 8008f0a:	9d00      	ldr	r5, [sp, #0]
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	4658      	mov	r0, fp
 8008f10:	f7ff f99e 	bl	8008250 <quorem>
 8008f14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008f18:	f805 3b01 	strb.w	r3, [r5], #1
 8008f1c:	9a00      	ldr	r2, [sp, #0]
 8008f1e:	1aaa      	subs	r2, r5, r2
 8008f20:	4591      	cmp	r9, r2
 8008f22:	ddba      	ble.n	8008e9a <_dtoa_r+0xb32>
 8008f24:	4659      	mov	r1, fp
 8008f26:	2300      	movs	r3, #0
 8008f28:	220a      	movs	r2, #10
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 fa9a 	bl	8009464 <__multadd>
 8008f30:	4683      	mov	fp, r0
 8008f32:	e7eb      	b.n	8008f0c <_dtoa_r+0xba4>
 8008f34:	0800b8f3 	.word	0x0800b8f3
 8008f38:	0800b84c 	.word	0x0800b84c
 8008f3c:	0800b870 	.word	0x0800b870

08008f40 <__sflush_r>:
 8008f40:	898a      	ldrh	r2, [r1, #12]
 8008f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f46:	4605      	mov	r5, r0
 8008f48:	0710      	lsls	r0, r2, #28
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	d458      	bmi.n	8009000 <__sflush_r+0xc0>
 8008f4e:	684b      	ldr	r3, [r1, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	dc05      	bgt.n	8008f60 <__sflush_r+0x20>
 8008f54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	dc02      	bgt.n	8008f60 <__sflush_r+0x20>
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f62:	2e00      	cmp	r6, #0
 8008f64:	d0f9      	beq.n	8008f5a <__sflush_r+0x1a>
 8008f66:	2300      	movs	r3, #0
 8008f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f6c:	682f      	ldr	r7, [r5, #0]
 8008f6e:	602b      	str	r3, [r5, #0]
 8008f70:	d032      	beq.n	8008fd8 <__sflush_r+0x98>
 8008f72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	075a      	lsls	r2, r3, #29
 8008f78:	d505      	bpl.n	8008f86 <__sflush_r+0x46>
 8008f7a:	6863      	ldr	r3, [r4, #4]
 8008f7c:	1ac0      	subs	r0, r0, r3
 8008f7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f80:	b10b      	cbz	r3, 8008f86 <__sflush_r+0x46>
 8008f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f84:	1ac0      	subs	r0, r0, r3
 8008f86:	2300      	movs	r3, #0
 8008f88:	4602      	mov	r2, r0
 8008f8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f8c:	6a21      	ldr	r1, [r4, #32]
 8008f8e:	4628      	mov	r0, r5
 8008f90:	47b0      	blx	r6
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	d106      	bne.n	8008fa6 <__sflush_r+0x66>
 8008f98:	6829      	ldr	r1, [r5, #0]
 8008f9a:	291d      	cmp	r1, #29
 8008f9c:	d82c      	bhi.n	8008ff8 <__sflush_r+0xb8>
 8008f9e:	4a2a      	ldr	r2, [pc, #168]	; (8009048 <__sflush_r+0x108>)
 8008fa0:	40ca      	lsrs	r2, r1
 8008fa2:	07d6      	lsls	r6, r2, #31
 8008fa4:	d528      	bpl.n	8008ff8 <__sflush_r+0xb8>
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	6062      	str	r2, [r4, #4]
 8008faa:	04d9      	lsls	r1, r3, #19
 8008fac:	6922      	ldr	r2, [r4, #16]
 8008fae:	6022      	str	r2, [r4, #0]
 8008fb0:	d504      	bpl.n	8008fbc <__sflush_r+0x7c>
 8008fb2:	1c42      	adds	r2, r0, #1
 8008fb4:	d101      	bne.n	8008fba <__sflush_r+0x7a>
 8008fb6:	682b      	ldr	r3, [r5, #0]
 8008fb8:	b903      	cbnz	r3, 8008fbc <__sflush_r+0x7c>
 8008fba:	6560      	str	r0, [r4, #84]	; 0x54
 8008fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fbe:	602f      	str	r7, [r5, #0]
 8008fc0:	2900      	cmp	r1, #0
 8008fc2:	d0ca      	beq.n	8008f5a <__sflush_r+0x1a>
 8008fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fc8:	4299      	cmp	r1, r3
 8008fca:	d002      	beq.n	8008fd2 <__sflush_r+0x92>
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f7fe fab7 	bl	8007540 <_free_r>
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	6360      	str	r0, [r4, #52]	; 0x34
 8008fd6:	e7c1      	b.n	8008f5c <__sflush_r+0x1c>
 8008fd8:	6a21      	ldr	r1, [r4, #32]
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4628      	mov	r0, r5
 8008fde:	47b0      	blx	r6
 8008fe0:	1c41      	adds	r1, r0, #1
 8008fe2:	d1c7      	bne.n	8008f74 <__sflush_r+0x34>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0c4      	beq.n	8008f74 <__sflush_r+0x34>
 8008fea:	2b1d      	cmp	r3, #29
 8008fec:	d001      	beq.n	8008ff2 <__sflush_r+0xb2>
 8008fee:	2b16      	cmp	r3, #22
 8008ff0:	d101      	bne.n	8008ff6 <__sflush_r+0xb6>
 8008ff2:	602f      	str	r7, [r5, #0]
 8008ff4:	e7b1      	b.n	8008f5a <__sflush_r+0x1a>
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	e7ad      	b.n	8008f5c <__sflush_r+0x1c>
 8009000:	690f      	ldr	r7, [r1, #16]
 8009002:	2f00      	cmp	r7, #0
 8009004:	d0a9      	beq.n	8008f5a <__sflush_r+0x1a>
 8009006:	0793      	lsls	r3, r2, #30
 8009008:	680e      	ldr	r6, [r1, #0]
 800900a:	bf08      	it	eq
 800900c:	694b      	ldreq	r3, [r1, #20]
 800900e:	600f      	str	r7, [r1, #0]
 8009010:	bf18      	it	ne
 8009012:	2300      	movne	r3, #0
 8009014:	eba6 0807 	sub.w	r8, r6, r7
 8009018:	608b      	str	r3, [r1, #8]
 800901a:	f1b8 0f00 	cmp.w	r8, #0
 800901e:	dd9c      	ble.n	8008f5a <__sflush_r+0x1a>
 8009020:	6a21      	ldr	r1, [r4, #32]
 8009022:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009024:	4643      	mov	r3, r8
 8009026:	463a      	mov	r2, r7
 8009028:	4628      	mov	r0, r5
 800902a:	47b0      	blx	r6
 800902c:	2800      	cmp	r0, #0
 800902e:	dc06      	bgt.n	800903e <__sflush_r+0xfe>
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009036:	81a3      	strh	r3, [r4, #12]
 8009038:	f04f 30ff 	mov.w	r0, #4294967295
 800903c:	e78e      	b.n	8008f5c <__sflush_r+0x1c>
 800903e:	4407      	add	r7, r0
 8009040:	eba8 0800 	sub.w	r8, r8, r0
 8009044:	e7e9      	b.n	800901a <__sflush_r+0xda>
 8009046:	bf00      	nop
 8009048:	20400001 	.word	0x20400001

0800904c <_fflush_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	690b      	ldr	r3, [r1, #16]
 8009050:	4605      	mov	r5, r0
 8009052:	460c      	mov	r4, r1
 8009054:	b913      	cbnz	r3, 800905c <_fflush_r+0x10>
 8009056:	2500      	movs	r5, #0
 8009058:	4628      	mov	r0, r5
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	b118      	cbz	r0, 8009066 <_fflush_r+0x1a>
 800905e:	6983      	ldr	r3, [r0, #24]
 8009060:	b90b      	cbnz	r3, 8009066 <_fflush_r+0x1a>
 8009062:	f000 f887 	bl	8009174 <__sinit>
 8009066:	4b14      	ldr	r3, [pc, #80]	; (80090b8 <_fflush_r+0x6c>)
 8009068:	429c      	cmp	r4, r3
 800906a:	d11b      	bne.n	80090a4 <_fflush_r+0x58>
 800906c:	686c      	ldr	r4, [r5, #4]
 800906e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d0ef      	beq.n	8009056 <_fflush_r+0xa>
 8009076:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009078:	07d0      	lsls	r0, r2, #31
 800907a:	d404      	bmi.n	8009086 <_fflush_r+0x3a>
 800907c:	0599      	lsls	r1, r3, #22
 800907e:	d402      	bmi.n	8009086 <_fflush_r+0x3a>
 8009080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009082:	f000 f91a 	bl	80092ba <__retarget_lock_acquire_recursive>
 8009086:	4628      	mov	r0, r5
 8009088:	4621      	mov	r1, r4
 800908a:	f7ff ff59 	bl	8008f40 <__sflush_r>
 800908e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009090:	07da      	lsls	r2, r3, #31
 8009092:	4605      	mov	r5, r0
 8009094:	d4e0      	bmi.n	8009058 <_fflush_r+0xc>
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	059b      	lsls	r3, r3, #22
 800909a:	d4dd      	bmi.n	8009058 <_fflush_r+0xc>
 800909c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800909e:	f000 f90d 	bl	80092bc <__retarget_lock_release_recursive>
 80090a2:	e7d9      	b.n	8009058 <_fflush_r+0xc>
 80090a4:	4b05      	ldr	r3, [pc, #20]	; (80090bc <_fflush_r+0x70>)
 80090a6:	429c      	cmp	r4, r3
 80090a8:	d101      	bne.n	80090ae <_fflush_r+0x62>
 80090aa:	68ac      	ldr	r4, [r5, #8]
 80090ac:	e7df      	b.n	800906e <_fflush_r+0x22>
 80090ae:	4b04      	ldr	r3, [pc, #16]	; (80090c0 <_fflush_r+0x74>)
 80090b0:	429c      	cmp	r4, r3
 80090b2:	bf08      	it	eq
 80090b4:	68ec      	ldreq	r4, [r5, #12]
 80090b6:	e7da      	b.n	800906e <_fflush_r+0x22>
 80090b8:	0800b924 	.word	0x0800b924
 80090bc:	0800b944 	.word	0x0800b944
 80090c0:	0800b904 	.word	0x0800b904

080090c4 <std>:
 80090c4:	2300      	movs	r3, #0
 80090c6:	b510      	push	{r4, lr}
 80090c8:	4604      	mov	r4, r0
 80090ca:	e9c0 3300 	strd	r3, r3, [r0]
 80090ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090d2:	6083      	str	r3, [r0, #8]
 80090d4:	8181      	strh	r1, [r0, #12]
 80090d6:	6643      	str	r3, [r0, #100]	; 0x64
 80090d8:	81c2      	strh	r2, [r0, #14]
 80090da:	6183      	str	r3, [r0, #24]
 80090dc:	4619      	mov	r1, r3
 80090de:	2208      	movs	r2, #8
 80090e0:	305c      	adds	r0, #92	; 0x5c
 80090e2:	f7fe fa25 	bl	8007530 <memset>
 80090e6:	4b05      	ldr	r3, [pc, #20]	; (80090fc <std+0x38>)
 80090e8:	6263      	str	r3, [r4, #36]	; 0x24
 80090ea:	4b05      	ldr	r3, [pc, #20]	; (8009100 <std+0x3c>)
 80090ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80090ee:	4b05      	ldr	r3, [pc, #20]	; (8009104 <std+0x40>)
 80090f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090f2:	4b05      	ldr	r3, [pc, #20]	; (8009108 <std+0x44>)
 80090f4:	6224      	str	r4, [r4, #32]
 80090f6:	6323      	str	r3, [r4, #48]	; 0x30
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	bf00      	nop
 80090fc:	08009dfd 	.word	0x08009dfd
 8009100:	08009e1f 	.word	0x08009e1f
 8009104:	08009e57 	.word	0x08009e57
 8009108:	08009e7b 	.word	0x08009e7b

0800910c <_cleanup_r>:
 800910c:	4901      	ldr	r1, [pc, #4]	; (8009114 <_cleanup_r+0x8>)
 800910e:	f000 b8af 	b.w	8009270 <_fwalk_reent>
 8009112:	bf00      	nop
 8009114:	0800904d 	.word	0x0800904d

08009118 <__sfmoreglue>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	1e4a      	subs	r2, r1, #1
 800911c:	2568      	movs	r5, #104	; 0x68
 800911e:	4355      	muls	r5, r2
 8009120:	460e      	mov	r6, r1
 8009122:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009126:	f7fe fa5b 	bl	80075e0 <_malloc_r>
 800912a:	4604      	mov	r4, r0
 800912c:	b140      	cbz	r0, 8009140 <__sfmoreglue+0x28>
 800912e:	2100      	movs	r1, #0
 8009130:	e9c0 1600 	strd	r1, r6, [r0]
 8009134:	300c      	adds	r0, #12
 8009136:	60a0      	str	r0, [r4, #8]
 8009138:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800913c:	f7fe f9f8 	bl	8007530 <memset>
 8009140:	4620      	mov	r0, r4
 8009142:	bd70      	pop	{r4, r5, r6, pc}

08009144 <__sfp_lock_acquire>:
 8009144:	4801      	ldr	r0, [pc, #4]	; (800914c <__sfp_lock_acquire+0x8>)
 8009146:	f000 b8b8 	b.w	80092ba <__retarget_lock_acquire_recursive>
 800914a:	bf00      	nop
 800914c:	20002ab0 	.word	0x20002ab0

08009150 <__sfp_lock_release>:
 8009150:	4801      	ldr	r0, [pc, #4]	; (8009158 <__sfp_lock_release+0x8>)
 8009152:	f000 b8b3 	b.w	80092bc <__retarget_lock_release_recursive>
 8009156:	bf00      	nop
 8009158:	20002ab0 	.word	0x20002ab0

0800915c <__sinit_lock_acquire>:
 800915c:	4801      	ldr	r0, [pc, #4]	; (8009164 <__sinit_lock_acquire+0x8>)
 800915e:	f000 b8ac 	b.w	80092ba <__retarget_lock_acquire_recursive>
 8009162:	bf00      	nop
 8009164:	20002aab 	.word	0x20002aab

08009168 <__sinit_lock_release>:
 8009168:	4801      	ldr	r0, [pc, #4]	; (8009170 <__sinit_lock_release+0x8>)
 800916a:	f000 b8a7 	b.w	80092bc <__retarget_lock_release_recursive>
 800916e:	bf00      	nop
 8009170:	20002aab 	.word	0x20002aab

08009174 <__sinit>:
 8009174:	b510      	push	{r4, lr}
 8009176:	4604      	mov	r4, r0
 8009178:	f7ff fff0 	bl	800915c <__sinit_lock_acquire>
 800917c:	69a3      	ldr	r3, [r4, #24]
 800917e:	b11b      	cbz	r3, 8009188 <__sinit+0x14>
 8009180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009184:	f7ff bff0 	b.w	8009168 <__sinit_lock_release>
 8009188:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800918c:	6523      	str	r3, [r4, #80]	; 0x50
 800918e:	4b13      	ldr	r3, [pc, #76]	; (80091dc <__sinit+0x68>)
 8009190:	4a13      	ldr	r2, [pc, #76]	; (80091e0 <__sinit+0x6c>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	62a2      	str	r2, [r4, #40]	; 0x28
 8009196:	42a3      	cmp	r3, r4
 8009198:	bf04      	itt	eq
 800919a:	2301      	moveq	r3, #1
 800919c:	61a3      	streq	r3, [r4, #24]
 800919e:	4620      	mov	r0, r4
 80091a0:	f000 f820 	bl	80091e4 <__sfp>
 80091a4:	6060      	str	r0, [r4, #4]
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 f81c 	bl	80091e4 <__sfp>
 80091ac:	60a0      	str	r0, [r4, #8]
 80091ae:	4620      	mov	r0, r4
 80091b0:	f000 f818 	bl	80091e4 <__sfp>
 80091b4:	2200      	movs	r2, #0
 80091b6:	60e0      	str	r0, [r4, #12]
 80091b8:	2104      	movs	r1, #4
 80091ba:	6860      	ldr	r0, [r4, #4]
 80091bc:	f7ff ff82 	bl	80090c4 <std>
 80091c0:	68a0      	ldr	r0, [r4, #8]
 80091c2:	2201      	movs	r2, #1
 80091c4:	2109      	movs	r1, #9
 80091c6:	f7ff ff7d 	bl	80090c4 <std>
 80091ca:	68e0      	ldr	r0, [r4, #12]
 80091cc:	2202      	movs	r2, #2
 80091ce:	2112      	movs	r1, #18
 80091d0:	f7ff ff78 	bl	80090c4 <std>
 80091d4:	2301      	movs	r3, #1
 80091d6:	61a3      	str	r3, [r4, #24]
 80091d8:	e7d2      	b.n	8009180 <__sinit+0xc>
 80091da:	bf00      	nop
 80091dc:	0800b838 	.word	0x0800b838
 80091e0:	0800910d 	.word	0x0800910d

080091e4 <__sfp>:
 80091e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e6:	4607      	mov	r7, r0
 80091e8:	f7ff ffac 	bl	8009144 <__sfp_lock_acquire>
 80091ec:	4b1e      	ldr	r3, [pc, #120]	; (8009268 <__sfp+0x84>)
 80091ee:	681e      	ldr	r6, [r3, #0]
 80091f0:	69b3      	ldr	r3, [r6, #24]
 80091f2:	b913      	cbnz	r3, 80091fa <__sfp+0x16>
 80091f4:	4630      	mov	r0, r6
 80091f6:	f7ff ffbd 	bl	8009174 <__sinit>
 80091fa:	3648      	adds	r6, #72	; 0x48
 80091fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009200:	3b01      	subs	r3, #1
 8009202:	d503      	bpl.n	800920c <__sfp+0x28>
 8009204:	6833      	ldr	r3, [r6, #0]
 8009206:	b30b      	cbz	r3, 800924c <__sfp+0x68>
 8009208:	6836      	ldr	r6, [r6, #0]
 800920a:	e7f7      	b.n	80091fc <__sfp+0x18>
 800920c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009210:	b9d5      	cbnz	r5, 8009248 <__sfp+0x64>
 8009212:	4b16      	ldr	r3, [pc, #88]	; (800926c <__sfp+0x88>)
 8009214:	60e3      	str	r3, [r4, #12]
 8009216:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800921a:	6665      	str	r5, [r4, #100]	; 0x64
 800921c:	f000 f84c 	bl	80092b8 <__retarget_lock_init_recursive>
 8009220:	f7ff ff96 	bl	8009150 <__sfp_lock_release>
 8009224:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009228:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800922c:	6025      	str	r5, [r4, #0]
 800922e:	61a5      	str	r5, [r4, #24]
 8009230:	2208      	movs	r2, #8
 8009232:	4629      	mov	r1, r5
 8009234:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009238:	f7fe f97a 	bl	8007530 <memset>
 800923c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009240:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009244:	4620      	mov	r0, r4
 8009246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009248:	3468      	adds	r4, #104	; 0x68
 800924a:	e7d9      	b.n	8009200 <__sfp+0x1c>
 800924c:	2104      	movs	r1, #4
 800924e:	4638      	mov	r0, r7
 8009250:	f7ff ff62 	bl	8009118 <__sfmoreglue>
 8009254:	4604      	mov	r4, r0
 8009256:	6030      	str	r0, [r6, #0]
 8009258:	2800      	cmp	r0, #0
 800925a:	d1d5      	bne.n	8009208 <__sfp+0x24>
 800925c:	f7ff ff78 	bl	8009150 <__sfp_lock_release>
 8009260:	230c      	movs	r3, #12
 8009262:	603b      	str	r3, [r7, #0]
 8009264:	e7ee      	b.n	8009244 <__sfp+0x60>
 8009266:	bf00      	nop
 8009268:	0800b838 	.word	0x0800b838
 800926c:	ffff0001 	.word	0xffff0001

08009270 <_fwalk_reent>:
 8009270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009274:	4606      	mov	r6, r0
 8009276:	4688      	mov	r8, r1
 8009278:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800927c:	2700      	movs	r7, #0
 800927e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009282:	f1b9 0901 	subs.w	r9, r9, #1
 8009286:	d505      	bpl.n	8009294 <_fwalk_reent+0x24>
 8009288:	6824      	ldr	r4, [r4, #0]
 800928a:	2c00      	cmp	r4, #0
 800928c:	d1f7      	bne.n	800927e <_fwalk_reent+0xe>
 800928e:	4638      	mov	r0, r7
 8009290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009294:	89ab      	ldrh	r3, [r5, #12]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d907      	bls.n	80092aa <_fwalk_reent+0x3a>
 800929a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800929e:	3301      	adds	r3, #1
 80092a0:	d003      	beq.n	80092aa <_fwalk_reent+0x3a>
 80092a2:	4629      	mov	r1, r5
 80092a4:	4630      	mov	r0, r6
 80092a6:	47c0      	blx	r8
 80092a8:	4307      	orrs	r7, r0
 80092aa:	3568      	adds	r5, #104	; 0x68
 80092ac:	e7e9      	b.n	8009282 <_fwalk_reent+0x12>
	...

080092b0 <_localeconv_r>:
 80092b0:	4800      	ldr	r0, [pc, #0]	; (80092b4 <_localeconv_r+0x4>)
 80092b2:	4770      	bx	lr
 80092b4:	20001f90 	.word	0x20001f90

080092b8 <__retarget_lock_init_recursive>:
 80092b8:	4770      	bx	lr

080092ba <__retarget_lock_acquire_recursive>:
 80092ba:	4770      	bx	lr

080092bc <__retarget_lock_release_recursive>:
 80092bc:	4770      	bx	lr

080092be <__swhatbuf_r>:
 80092be:	b570      	push	{r4, r5, r6, lr}
 80092c0:	460e      	mov	r6, r1
 80092c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c6:	2900      	cmp	r1, #0
 80092c8:	b096      	sub	sp, #88	; 0x58
 80092ca:	4614      	mov	r4, r2
 80092cc:	461d      	mov	r5, r3
 80092ce:	da07      	bge.n	80092e0 <__swhatbuf_r+0x22>
 80092d0:	2300      	movs	r3, #0
 80092d2:	602b      	str	r3, [r5, #0]
 80092d4:	89b3      	ldrh	r3, [r6, #12]
 80092d6:	061a      	lsls	r2, r3, #24
 80092d8:	d410      	bmi.n	80092fc <__swhatbuf_r+0x3e>
 80092da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092de:	e00e      	b.n	80092fe <__swhatbuf_r+0x40>
 80092e0:	466a      	mov	r2, sp
 80092e2:	f000 fe21 	bl	8009f28 <_fstat_r>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	dbf2      	blt.n	80092d0 <__swhatbuf_r+0x12>
 80092ea:	9a01      	ldr	r2, [sp, #4]
 80092ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092f4:	425a      	negs	r2, r3
 80092f6:	415a      	adcs	r2, r3
 80092f8:	602a      	str	r2, [r5, #0]
 80092fa:	e7ee      	b.n	80092da <__swhatbuf_r+0x1c>
 80092fc:	2340      	movs	r3, #64	; 0x40
 80092fe:	2000      	movs	r0, #0
 8009300:	6023      	str	r3, [r4, #0]
 8009302:	b016      	add	sp, #88	; 0x58
 8009304:	bd70      	pop	{r4, r5, r6, pc}
	...

08009308 <__smakebuf_r>:
 8009308:	898b      	ldrh	r3, [r1, #12]
 800930a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800930c:	079d      	lsls	r5, r3, #30
 800930e:	4606      	mov	r6, r0
 8009310:	460c      	mov	r4, r1
 8009312:	d507      	bpl.n	8009324 <__smakebuf_r+0x1c>
 8009314:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009318:	6023      	str	r3, [r4, #0]
 800931a:	6123      	str	r3, [r4, #16]
 800931c:	2301      	movs	r3, #1
 800931e:	6163      	str	r3, [r4, #20]
 8009320:	b002      	add	sp, #8
 8009322:	bd70      	pop	{r4, r5, r6, pc}
 8009324:	ab01      	add	r3, sp, #4
 8009326:	466a      	mov	r2, sp
 8009328:	f7ff ffc9 	bl	80092be <__swhatbuf_r>
 800932c:	9900      	ldr	r1, [sp, #0]
 800932e:	4605      	mov	r5, r0
 8009330:	4630      	mov	r0, r6
 8009332:	f7fe f955 	bl	80075e0 <_malloc_r>
 8009336:	b948      	cbnz	r0, 800934c <__smakebuf_r+0x44>
 8009338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800933c:	059a      	lsls	r2, r3, #22
 800933e:	d4ef      	bmi.n	8009320 <__smakebuf_r+0x18>
 8009340:	f023 0303 	bic.w	r3, r3, #3
 8009344:	f043 0302 	orr.w	r3, r3, #2
 8009348:	81a3      	strh	r3, [r4, #12]
 800934a:	e7e3      	b.n	8009314 <__smakebuf_r+0xc>
 800934c:	4b0d      	ldr	r3, [pc, #52]	; (8009384 <__smakebuf_r+0x7c>)
 800934e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	6020      	str	r0, [r4, #0]
 8009354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009358:	81a3      	strh	r3, [r4, #12]
 800935a:	9b00      	ldr	r3, [sp, #0]
 800935c:	6163      	str	r3, [r4, #20]
 800935e:	9b01      	ldr	r3, [sp, #4]
 8009360:	6120      	str	r0, [r4, #16]
 8009362:	b15b      	cbz	r3, 800937c <__smakebuf_r+0x74>
 8009364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009368:	4630      	mov	r0, r6
 800936a:	f000 fdef 	bl	8009f4c <_isatty_r>
 800936e:	b128      	cbz	r0, 800937c <__smakebuf_r+0x74>
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	f023 0303 	bic.w	r3, r3, #3
 8009376:	f043 0301 	orr.w	r3, r3, #1
 800937a:	81a3      	strh	r3, [r4, #12]
 800937c:	89a0      	ldrh	r0, [r4, #12]
 800937e:	4305      	orrs	r5, r0
 8009380:	81a5      	strh	r5, [r4, #12]
 8009382:	e7cd      	b.n	8009320 <__smakebuf_r+0x18>
 8009384:	0800910d 	.word	0x0800910d

08009388 <__malloc_lock>:
 8009388:	4801      	ldr	r0, [pc, #4]	; (8009390 <__malloc_lock+0x8>)
 800938a:	f7ff bf96 	b.w	80092ba <__retarget_lock_acquire_recursive>
 800938e:	bf00      	nop
 8009390:	20002aac 	.word	0x20002aac

08009394 <__malloc_unlock>:
 8009394:	4801      	ldr	r0, [pc, #4]	; (800939c <__malloc_unlock+0x8>)
 8009396:	f7ff bf91 	b.w	80092bc <__retarget_lock_release_recursive>
 800939a:	bf00      	nop
 800939c:	20002aac 	.word	0x20002aac

080093a0 <_Balloc>:
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093a4:	4604      	mov	r4, r0
 80093a6:	460d      	mov	r5, r1
 80093a8:	b976      	cbnz	r6, 80093c8 <_Balloc+0x28>
 80093aa:	2010      	movs	r0, #16
 80093ac:	f7fe f8aa 	bl	8007504 <malloc>
 80093b0:	4602      	mov	r2, r0
 80093b2:	6260      	str	r0, [r4, #36]	; 0x24
 80093b4:	b920      	cbnz	r0, 80093c0 <_Balloc+0x20>
 80093b6:	4b18      	ldr	r3, [pc, #96]	; (8009418 <_Balloc+0x78>)
 80093b8:	4818      	ldr	r0, [pc, #96]	; (800941c <_Balloc+0x7c>)
 80093ba:	2166      	movs	r1, #102	; 0x66
 80093bc:	f000 fd74 	bl	8009ea8 <__assert_func>
 80093c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093c4:	6006      	str	r6, [r0, #0]
 80093c6:	60c6      	str	r6, [r0, #12]
 80093c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80093ca:	68f3      	ldr	r3, [r6, #12]
 80093cc:	b183      	cbz	r3, 80093f0 <_Balloc+0x50>
 80093ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093d6:	b9b8      	cbnz	r0, 8009408 <_Balloc+0x68>
 80093d8:	2101      	movs	r1, #1
 80093da:	fa01 f605 	lsl.w	r6, r1, r5
 80093de:	1d72      	adds	r2, r6, #5
 80093e0:	0092      	lsls	r2, r2, #2
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 fb5a 	bl	8009a9c <_calloc_r>
 80093e8:	b160      	cbz	r0, 8009404 <_Balloc+0x64>
 80093ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093ee:	e00e      	b.n	800940e <_Balloc+0x6e>
 80093f0:	2221      	movs	r2, #33	; 0x21
 80093f2:	2104      	movs	r1, #4
 80093f4:	4620      	mov	r0, r4
 80093f6:	f000 fb51 	bl	8009a9c <_calloc_r>
 80093fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093fc:	60f0      	str	r0, [r6, #12]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1e4      	bne.n	80093ce <_Balloc+0x2e>
 8009404:	2000      	movs	r0, #0
 8009406:	bd70      	pop	{r4, r5, r6, pc}
 8009408:	6802      	ldr	r2, [r0, #0]
 800940a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800940e:	2300      	movs	r3, #0
 8009410:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009414:	e7f7      	b.n	8009406 <_Balloc+0x66>
 8009416:	bf00      	nop
 8009418:	0800b87d 	.word	0x0800b87d
 800941c:	0800b964 	.word	0x0800b964

08009420 <_Bfree>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009424:	4605      	mov	r5, r0
 8009426:	460c      	mov	r4, r1
 8009428:	b976      	cbnz	r6, 8009448 <_Bfree+0x28>
 800942a:	2010      	movs	r0, #16
 800942c:	f7fe f86a 	bl	8007504 <malloc>
 8009430:	4602      	mov	r2, r0
 8009432:	6268      	str	r0, [r5, #36]	; 0x24
 8009434:	b920      	cbnz	r0, 8009440 <_Bfree+0x20>
 8009436:	4b09      	ldr	r3, [pc, #36]	; (800945c <_Bfree+0x3c>)
 8009438:	4809      	ldr	r0, [pc, #36]	; (8009460 <_Bfree+0x40>)
 800943a:	218a      	movs	r1, #138	; 0x8a
 800943c:	f000 fd34 	bl	8009ea8 <__assert_func>
 8009440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009444:	6006      	str	r6, [r0, #0]
 8009446:	60c6      	str	r6, [r0, #12]
 8009448:	b13c      	cbz	r4, 800945a <_Bfree+0x3a>
 800944a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800944c:	6862      	ldr	r2, [r4, #4]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009454:	6021      	str	r1, [r4, #0]
 8009456:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	0800b87d 	.word	0x0800b87d
 8009460:	0800b964 	.word	0x0800b964

08009464 <__multadd>:
 8009464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009468:	690e      	ldr	r6, [r1, #16]
 800946a:	4607      	mov	r7, r0
 800946c:	4698      	mov	r8, r3
 800946e:	460c      	mov	r4, r1
 8009470:	f101 0014 	add.w	r0, r1, #20
 8009474:	2300      	movs	r3, #0
 8009476:	6805      	ldr	r5, [r0, #0]
 8009478:	b2a9      	uxth	r1, r5
 800947a:	fb02 8101 	mla	r1, r2, r1, r8
 800947e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009482:	0c2d      	lsrs	r5, r5, #16
 8009484:	fb02 c505 	mla	r5, r2, r5, ip
 8009488:	b289      	uxth	r1, r1
 800948a:	3301      	adds	r3, #1
 800948c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009490:	429e      	cmp	r6, r3
 8009492:	f840 1b04 	str.w	r1, [r0], #4
 8009496:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800949a:	dcec      	bgt.n	8009476 <__multadd+0x12>
 800949c:	f1b8 0f00 	cmp.w	r8, #0
 80094a0:	d022      	beq.n	80094e8 <__multadd+0x84>
 80094a2:	68a3      	ldr	r3, [r4, #8]
 80094a4:	42b3      	cmp	r3, r6
 80094a6:	dc19      	bgt.n	80094dc <__multadd+0x78>
 80094a8:	6861      	ldr	r1, [r4, #4]
 80094aa:	4638      	mov	r0, r7
 80094ac:	3101      	adds	r1, #1
 80094ae:	f7ff ff77 	bl	80093a0 <_Balloc>
 80094b2:	4605      	mov	r5, r0
 80094b4:	b928      	cbnz	r0, 80094c2 <__multadd+0x5e>
 80094b6:	4602      	mov	r2, r0
 80094b8:	4b0d      	ldr	r3, [pc, #52]	; (80094f0 <__multadd+0x8c>)
 80094ba:	480e      	ldr	r0, [pc, #56]	; (80094f4 <__multadd+0x90>)
 80094bc:	21b5      	movs	r1, #181	; 0xb5
 80094be:	f000 fcf3 	bl	8009ea8 <__assert_func>
 80094c2:	6922      	ldr	r2, [r4, #16]
 80094c4:	3202      	adds	r2, #2
 80094c6:	f104 010c 	add.w	r1, r4, #12
 80094ca:	0092      	lsls	r2, r2, #2
 80094cc:	300c      	adds	r0, #12
 80094ce:	f7fe f821 	bl	8007514 <memcpy>
 80094d2:	4621      	mov	r1, r4
 80094d4:	4638      	mov	r0, r7
 80094d6:	f7ff ffa3 	bl	8009420 <_Bfree>
 80094da:	462c      	mov	r4, r5
 80094dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80094e0:	3601      	adds	r6, #1
 80094e2:	f8c3 8014 	str.w	r8, [r3, #20]
 80094e6:	6126      	str	r6, [r4, #16]
 80094e8:	4620      	mov	r0, r4
 80094ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094ee:	bf00      	nop
 80094f0:	0800b8f3 	.word	0x0800b8f3
 80094f4:	0800b964 	.word	0x0800b964

080094f8 <__hi0bits>:
 80094f8:	0c03      	lsrs	r3, r0, #16
 80094fa:	041b      	lsls	r3, r3, #16
 80094fc:	b9d3      	cbnz	r3, 8009534 <__hi0bits+0x3c>
 80094fe:	0400      	lsls	r0, r0, #16
 8009500:	2310      	movs	r3, #16
 8009502:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009506:	bf04      	itt	eq
 8009508:	0200      	lsleq	r0, r0, #8
 800950a:	3308      	addeq	r3, #8
 800950c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009510:	bf04      	itt	eq
 8009512:	0100      	lsleq	r0, r0, #4
 8009514:	3304      	addeq	r3, #4
 8009516:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800951a:	bf04      	itt	eq
 800951c:	0080      	lsleq	r0, r0, #2
 800951e:	3302      	addeq	r3, #2
 8009520:	2800      	cmp	r0, #0
 8009522:	db05      	blt.n	8009530 <__hi0bits+0x38>
 8009524:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009528:	f103 0301 	add.w	r3, r3, #1
 800952c:	bf08      	it	eq
 800952e:	2320      	moveq	r3, #32
 8009530:	4618      	mov	r0, r3
 8009532:	4770      	bx	lr
 8009534:	2300      	movs	r3, #0
 8009536:	e7e4      	b.n	8009502 <__hi0bits+0xa>

08009538 <__lo0bits>:
 8009538:	6803      	ldr	r3, [r0, #0]
 800953a:	f013 0207 	ands.w	r2, r3, #7
 800953e:	4601      	mov	r1, r0
 8009540:	d00b      	beq.n	800955a <__lo0bits+0x22>
 8009542:	07da      	lsls	r2, r3, #31
 8009544:	d424      	bmi.n	8009590 <__lo0bits+0x58>
 8009546:	0798      	lsls	r0, r3, #30
 8009548:	bf49      	itett	mi
 800954a:	085b      	lsrmi	r3, r3, #1
 800954c:	089b      	lsrpl	r3, r3, #2
 800954e:	2001      	movmi	r0, #1
 8009550:	600b      	strmi	r3, [r1, #0]
 8009552:	bf5c      	itt	pl
 8009554:	600b      	strpl	r3, [r1, #0]
 8009556:	2002      	movpl	r0, #2
 8009558:	4770      	bx	lr
 800955a:	b298      	uxth	r0, r3
 800955c:	b9b0      	cbnz	r0, 800958c <__lo0bits+0x54>
 800955e:	0c1b      	lsrs	r3, r3, #16
 8009560:	2010      	movs	r0, #16
 8009562:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009566:	bf04      	itt	eq
 8009568:	0a1b      	lsreq	r3, r3, #8
 800956a:	3008      	addeq	r0, #8
 800956c:	071a      	lsls	r2, r3, #28
 800956e:	bf04      	itt	eq
 8009570:	091b      	lsreq	r3, r3, #4
 8009572:	3004      	addeq	r0, #4
 8009574:	079a      	lsls	r2, r3, #30
 8009576:	bf04      	itt	eq
 8009578:	089b      	lsreq	r3, r3, #2
 800957a:	3002      	addeq	r0, #2
 800957c:	07da      	lsls	r2, r3, #31
 800957e:	d403      	bmi.n	8009588 <__lo0bits+0x50>
 8009580:	085b      	lsrs	r3, r3, #1
 8009582:	f100 0001 	add.w	r0, r0, #1
 8009586:	d005      	beq.n	8009594 <__lo0bits+0x5c>
 8009588:	600b      	str	r3, [r1, #0]
 800958a:	4770      	bx	lr
 800958c:	4610      	mov	r0, r2
 800958e:	e7e8      	b.n	8009562 <__lo0bits+0x2a>
 8009590:	2000      	movs	r0, #0
 8009592:	4770      	bx	lr
 8009594:	2020      	movs	r0, #32
 8009596:	4770      	bx	lr

08009598 <__i2b>:
 8009598:	b510      	push	{r4, lr}
 800959a:	460c      	mov	r4, r1
 800959c:	2101      	movs	r1, #1
 800959e:	f7ff feff 	bl	80093a0 <_Balloc>
 80095a2:	4602      	mov	r2, r0
 80095a4:	b928      	cbnz	r0, 80095b2 <__i2b+0x1a>
 80095a6:	4b05      	ldr	r3, [pc, #20]	; (80095bc <__i2b+0x24>)
 80095a8:	4805      	ldr	r0, [pc, #20]	; (80095c0 <__i2b+0x28>)
 80095aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80095ae:	f000 fc7b 	bl	8009ea8 <__assert_func>
 80095b2:	2301      	movs	r3, #1
 80095b4:	6144      	str	r4, [r0, #20]
 80095b6:	6103      	str	r3, [r0, #16]
 80095b8:	bd10      	pop	{r4, pc}
 80095ba:	bf00      	nop
 80095bc:	0800b8f3 	.word	0x0800b8f3
 80095c0:	0800b964 	.word	0x0800b964

080095c4 <__multiply>:
 80095c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c8:	4614      	mov	r4, r2
 80095ca:	690a      	ldr	r2, [r1, #16]
 80095cc:	6923      	ldr	r3, [r4, #16]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	bfb8      	it	lt
 80095d2:	460b      	movlt	r3, r1
 80095d4:	460d      	mov	r5, r1
 80095d6:	bfbc      	itt	lt
 80095d8:	4625      	movlt	r5, r4
 80095da:	461c      	movlt	r4, r3
 80095dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80095e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80095e4:	68ab      	ldr	r3, [r5, #8]
 80095e6:	6869      	ldr	r1, [r5, #4]
 80095e8:	eb0a 0709 	add.w	r7, sl, r9
 80095ec:	42bb      	cmp	r3, r7
 80095ee:	b085      	sub	sp, #20
 80095f0:	bfb8      	it	lt
 80095f2:	3101      	addlt	r1, #1
 80095f4:	f7ff fed4 	bl	80093a0 <_Balloc>
 80095f8:	b930      	cbnz	r0, 8009608 <__multiply+0x44>
 80095fa:	4602      	mov	r2, r0
 80095fc:	4b42      	ldr	r3, [pc, #264]	; (8009708 <__multiply+0x144>)
 80095fe:	4843      	ldr	r0, [pc, #268]	; (800970c <__multiply+0x148>)
 8009600:	f240 115d 	movw	r1, #349	; 0x15d
 8009604:	f000 fc50 	bl	8009ea8 <__assert_func>
 8009608:	f100 0614 	add.w	r6, r0, #20
 800960c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009610:	4633      	mov	r3, r6
 8009612:	2200      	movs	r2, #0
 8009614:	4543      	cmp	r3, r8
 8009616:	d31e      	bcc.n	8009656 <__multiply+0x92>
 8009618:	f105 0c14 	add.w	ip, r5, #20
 800961c:	f104 0314 	add.w	r3, r4, #20
 8009620:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009624:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009628:	9202      	str	r2, [sp, #8]
 800962a:	ebac 0205 	sub.w	r2, ip, r5
 800962e:	3a15      	subs	r2, #21
 8009630:	f022 0203 	bic.w	r2, r2, #3
 8009634:	3204      	adds	r2, #4
 8009636:	f105 0115 	add.w	r1, r5, #21
 800963a:	458c      	cmp	ip, r1
 800963c:	bf38      	it	cc
 800963e:	2204      	movcc	r2, #4
 8009640:	9201      	str	r2, [sp, #4]
 8009642:	9a02      	ldr	r2, [sp, #8]
 8009644:	9303      	str	r3, [sp, #12]
 8009646:	429a      	cmp	r2, r3
 8009648:	d808      	bhi.n	800965c <__multiply+0x98>
 800964a:	2f00      	cmp	r7, #0
 800964c:	dc55      	bgt.n	80096fa <__multiply+0x136>
 800964e:	6107      	str	r7, [r0, #16]
 8009650:	b005      	add	sp, #20
 8009652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009656:	f843 2b04 	str.w	r2, [r3], #4
 800965a:	e7db      	b.n	8009614 <__multiply+0x50>
 800965c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009660:	f1ba 0f00 	cmp.w	sl, #0
 8009664:	d020      	beq.n	80096a8 <__multiply+0xe4>
 8009666:	f105 0e14 	add.w	lr, r5, #20
 800966a:	46b1      	mov	r9, r6
 800966c:	2200      	movs	r2, #0
 800966e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009672:	f8d9 b000 	ldr.w	fp, [r9]
 8009676:	b2a1      	uxth	r1, r4
 8009678:	fa1f fb8b 	uxth.w	fp, fp
 800967c:	fb0a b101 	mla	r1, sl, r1, fp
 8009680:	4411      	add	r1, r2
 8009682:	f8d9 2000 	ldr.w	r2, [r9]
 8009686:	0c24      	lsrs	r4, r4, #16
 8009688:	0c12      	lsrs	r2, r2, #16
 800968a:	fb0a 2404 	mla	r4, sl, r4, r2
 800968e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009692:	b289      	uxth	r1, r1
 8009694:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009698:	45f4      	cmp	ip, lr
 800969a:	f849 1b04 	str.w	r1, [r9], #4
 800969e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80096a2:	d8e4      	bhi.n	800966e <__multiply+0xaa>
 80096a4:	9901      	ldr	r1, [sp, #4]
 80096a6:	5072      	str	r2, [r6, r1]
 80096a8:	9a03      	ldr	r2, [sp, #12]
 80096aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80096ae:	3304      	adds	r3, #4
 80096b0:	f1b9 0f00 	cmp.w	r9, #0
 80096b4:	d01f      	beq.n	80096f6 <__multiply+0x132>
 80096b6:	6834      	ldr	r4, [r6, #0]
 80096b8:	f105 0114 	add.w	r1, r5, #20
 80096bc:	46b6      	mov	lr, r6
 80096be:	f04f 0a00 	mov.w	sl, #0
 80096c2:	880a      	ldrh	r2, [r1, #0]
 80096c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80096c8:	fb09 b202 	mla	r2, r9, r2, fp
 80096cc:	4492      	add	sl, r2
 80096ce:	b2a4      	uxth	r4, r4
 80096d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80096d4:	f84e 4b04 	str.w	r4, [lr], #4
 80096d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80096dc:	f8be 2000 	ldrh.w	r2, [lr]
 80096e0:	0c24      	lsrs	r4, r4, #16
 80096e2:	fb09 2404 	mla	r4, r9, r4, r2
 80096e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80096ea:	458c      	cmp	ip, r1
 80096ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80096f0:	d8e7      	bhi.n	80096c2 <__multiply+0xfe>
 80096f2:	9a01      	ldr	r2, [sp, #4]
 80096f4:	50b4      	str	r4, [r6, r2]
 80096f6:	3604      	adds	r6, #4
 80096f8:	e7a3      	b.n	8009642 <__multiply+0x7e>
 80096fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1a5      	bne.n	800964e <__multiply+0x8a>
 8009702:	3f01      	subs	r7, #1
 8009704:	e7a1      	b.n	800964a <__multiply+0x86>
 8009706:	bf00      	nop
 8009708:	0800b8f3 	.word	0x0800b8f3
 800970c:	0800b964 	.word	0x0800b964

08009710 <__pow5mult>:
 8009710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009714:	4615      	mov	r5, r2
 8009716:	f012 0203 	ands.w	r2, r2, #3
 800971a:	4606      	mov	r6, r0
 800971c:	460f      	mov	r7, r1
 800971e:	d007      	beq.n	8009730 <__pow5mult+0x20>
 8009720:	4c25      	ldr	r4, [pc, #148]	; (80097b8 <__pow5mult+0xa8>)
 8009722:	3a01      	subs	r2, #1
 8009724:	2300      	movs	r3, #0
 8009726:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800972a:	f7ff fe9b 	bl	8009464 <__multadd>
 800972e:	4607      	mov	r7, r0
 8009730:	10ad      	asrs	r5, r5, #2
 8009732:	d03d      	beq.n	80097b0 <__pow5mult+0xa0>
 8009734:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009736:	b97c      	cbnz	r4, 8009758 <__pow5mult+0x48>
 8009738:	2010      	movs	r0, #16
 800973a:	f7fd fee3 	bl	8007504 <malloc>
 800973e:	4602      	mov	r2, r0
 8009740:	6270      	str	r0, [r6, #36]	; 0x24
 8009742:	b928      	cbnz	r0, 8009750 <__pow5mult+0x40>
 8009744:	4b1d      	ldr	r3, [pc, #116]	; (80097bc <__pow5mult+0xac>)
 8009746:	481e      	ldr	r0, [pc, #120]	; (80097c0 <__pow5mult+0xb0>)
 8009748:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800974c:	f000 fbac 	bl	8009ea8 <__assert_func>
 8009750:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009754:	6004      	str	r4, [r0, #0]
 8009756:	60c4      	str	r4, [r0, #12]
 8009758:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800975c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009760:	b94c      	cbnz	r4, 8009776 <__pow5mult+0x66>
 8009762:	f240 2171 	movw	r1, #625	; 0x271
 8009766:	4630      	mov	r0, r6
 8009768:	f7ff ff16 	bl	8009598 <__i2b>
 800976c:	2300      	movs	r3, #0
 800976e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009772:	4604      	mov	r4, r0
 8009774:	6003      	str	r3, [r0, #0]
 8009776:	f04f 0900 	mov.w	r9, #0
 800977a:	07eb      	lsls	r3, r5, #31
 800977c:	d50a      	bpl.n	8009794 <__pow5mult+0x84>
 800977e:	4639      	mov	r1, r7
 8009780:	4622      	mov	r2, r4
 8009782:	4630      	mov	r0, r6
 8009784:	f7ff ff1e 	bl	80095c4 <__multiply>
 8009788:	4639      	mov	r1, r7
 800978a:	4680      	mov	r8, r0
 800978c:	4630      	mov	r0, r6
 800978e:	f7ff fe47 	bl	8009420 <_Bfree>
 8009792:	4647      	mov	r7, r8
 8009794:	106d      	asrs	r5, r5, #1
 8009796:	d00b      	beq.n	80097b0 <__pow5mult+0xa0>
 8009798:	6820      	ldr	r0, [r4, #0]
 800979a:	b938      	cbnz	r0, 80097ac <__pow5mult+0x9c>
 800979c:	4622      	mov	r2, r4
 800979e:	4621      	mov	r1, r4
 80097a0:	4630      	mov	r0, r6
 80097a2:	f7ff ff0f 	bl	80095c4 <__multiply>
 80097a6:	6020      	str	r0, [r4, #0]
 80097a8:	f8c0 9000 	str.w	r9, [r0]
 80097ac:	4604      	mov	r4, r0
 80097ae:	e7e4      	b.n	800977a <__pow5mult+0x6a>
 80097b0:	4638      	mov	r0, r7
 80097b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097b6:	bf00      	nop
 80097b8:	0800bab8 	.word	0x0800bab8
 80097bc:	0800b87d 	.word	0x0800b87d
 80097c0:	0800b964 	.word	0x0800b964

080097c4 <__lshift>:
 80097c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c8:	460c      	mov	r4, r1
 80097ca:	6849      	ldr	r1, [r1, #4]
 80097cc:	6923      	ldr	r3, [r4, #16]
 80097ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097d2:	68a3      	ldr	r3, [r4, #8]
 80097d4:	4607      	mov	r7, r0
 80097d6:	4691      	mov	r9, r2
 80097d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097dc:	f108 0601 	add.w	r6, r8, #1
 80097e0:	42b3      	cmp	r3, r6
 80097e2:	db0b      	blt.n	80097fc <__lshift+0x38>
 80097e4:	4638      	mov	r0, r7
 80097e6:	f7ff fddb 	bl	80093a0 <_Balloc>
 80097ea:	4605      	mov	r5, r0
 80097ec:	b948      	cbnz	r0, 8009802 <__lshift+0x3e>
 80097ee:	4602      	mov	r2, r0
 80097f0:	4b28      	ldr	r3, [pc, #160]	; (8009894 <__lshift+0xd0>)
 80097f2:	4829      	ldr	r0, [pc, #164]	; (8009898 <__lshift+0xd4>)
 80097f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80097f8:	f000 fb56 	bl	8009ea8 <__assert_func>
 80097fc:	3101      	adds	r1, #1
 80097fe:	005b      	lsls	r3, r3, #1
 8009800:	e7ee      	b.n	80097e0 <__lshift+0x1c>
 8009802:	2300      	movs	r3, #0
 8009804:	f100 0114 	add.w	r1, r0, #20
 8009808:	f100 0210 	add.w	r2, r0, #16
 800980c:	4618      	mov	r0, r3
 800980e:	4553      	cmp	r3, sl
 8009810:	db33      	blt.n	800987a <__lshift+0xb6>
 8009812:	6920      	ldr	r0, [r4, #16]
 8009814:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009818:	f104 0314 	add.w	r3, r4, #20
 800981c:	f019 091f 	ands.w	r9, r9, #31
 8009820:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009824:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009828:	d02b      	beq.n	8009882 <__lshift+0xbe>
 800982a:	f1c9 0e20 	rsb	lr, r9, #32
 800982e:	468a      	mov	sl, r1
 8009830:	2200      	movs	r2, #0
 8009832:	6818      	ldr	r0, [r3, #0]
 8009834:	fa00 f009 	lsl.w	r0, r0, r9
 8009838:	4302      	orrs	r2, r0
 800983a:	f84a 2b04 	str.w	r2, [sl], #4
 800983e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009842:	459c      	cmp	ip, r3
 8009844:	fa22 f20e 	lsr.w	r2, r2, lr
 8009848:	d8f3      	bhi.n	8009832 <__lshift+0x6e>
 800984a:	ebac 0304 	sub.w	r3, ip, r4
 800984e:	3b15      	subs	r3, #21
 8009850:	f023 0303 	bic.w	r3, r3, #3
 8009854:	3304      	adds	r3, #4
 8009856:	f104 0015 	add.w	r0, r4, #21
 800985a:	4584      	cmp	ip, r0
 800985c:	bf38      	it	cc
 800985e:	2304      	movcc	r3, #4
 8009860:	50ca      	str	r2, [r1, r3]
 8009862:	b10a      	cbz	r2, 8009868 <__lshift+0xa4>
 8009864:	f108 0602 	add.w	r6, r8, #2
 8009868:	3e01      	subs	r6, #1
 800986a:	4638      	mov	r0, r7
 800986c:	612e      	str	r6, [r5, #16]
 800986e:	4621      	mov	r1, r4
 8009870:	f7ff fdd6 	bl	8009420 <_Bfree>
 8009874:	4628      	mov	r0, r5
 8009876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800987a:	f842 0f04 	str.w	r0, [r2, #4]!
 800987e:	3301      	adds	r3, #1
 8009880:	e7c5      	b.n	800980e <__lshift+0x4a>
 8009882:	3904      	subs	r1, #4
 8009884:	f853 2b04 	ldr.w	r2, [r3], #4
 8009888:	f841 2f04 	str.w	r2, [r1, #4]!
 800988c:	459c      	cmp	ip, r3
 800988e:	d8f9      	bhi.n	8009884 <__lshift+0xc0>
 8009890:	e7ea      	b.n	8009868 <__lshift+0xa4>
 8009892:	bf00      	nop
 8009894:	0800b8f3 	.word	0x0800b8f3
 8009898:	0800b964 	.word	0x0800b964

0800989c <__mcmp>:
 800989c:	b530      	push	{r4, r5, lr}
 800989e:	6902      	ldr	r2, [r0, #16]
 80098a0:	690c      	ldr	r4, [r1, #16]
 80098a2:	1b12      	subs	r2, r2, r4
 80098a4:	d10e      	bne.n	80098c4 <__mcmp+0x28>
 80098a6:	f100 0314 	add.w	r3, r0, #20
 80098aa:	3114      	adds	r1, #20
 80098ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80098b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80098b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80098b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80098bc:	42a5      	cmp	r5, r4
 80098be:	d003      	beq.n	80098c8 <__mcmp+0x2c>
 80098c0:	d305      	bcc.n	80098ce <__mcmp+0x32>
 80098c2:	2201      	movs	r2, #1
 80098c4:	4610      	mov	r0, r2
 80098c6:	bd30      	pop	{r4, r5, pc}
 80098c8:	4283      	cmp	r3, r0
 80098ca:	d3f3      	bcc.n	80098b4 <__mcmp+0x18>
 80098cc:	e7fa      	b.n	80098c4 <__mcmp+0x28>
 80098ce:	f04f 32ff 	mov.w	r2, #4294967295
 80098d2:	e7f7      	b.n	80098c4 <__mcmp+0x28>

080098d4 <__mdiff>:
 80098d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d8:	460c      	mov	r4, r1
 80098da:	4606      	mov	r6, r0
 80098dc:	4611      	mov	r1, r2
 80098de:	4620      	mov	r0, r4
 80098e0:	4617      	mov	r7, r2
 80098e2:	f7ff ffdb 	bl	800989c <__mcmp>
 80098e6:	1e05      	subs	r5, r0, #0
 80098e8:	d110      	bne.n	800990c <__mdiff+0x38>
 80098ea:	4629      	mov	r1, r5
 80098ec:	4630      	mov	r0, r6
 80098ee:	f7ff fd57 	bl	80093a0 <_Balloc>
 80098f2:	b930      	cbnz	r0, 8009902 <__mdiff+0x2e>
 80098f4:	4b39      	ldr	r3, [pc, #228]	; (80099dc <__mdiff+0x108>)
 80098f6:	4602      	mov	r2, r0
 80098f8:	f240 2132 	movw	r1, #562	; 0x232
 80098fc:	4838      	ldr	r0, [pc, #224]	; (80099e0 <__mdiff+0x10c>)
 80098fe:	f000 fad3 	bl	8009ea8 <__assert_func>
 8009902:	2301      	movs	r3, #1
 8009904:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990c:	bfa4      	itt	ge
 800990e:	463b      	movge	r3, r7
 8009910:	4627      	movge	r7, r4
 8009912:	4630      	mov	r0, r6
 8009914:	6879      	ldr	r1, [r7, #4]
 8009916:	bfa6      	itte	ge
 8009918:	461c      	movge	r4, r3
 800991a:	2500      	movge	r5, #0
 800991c:	2501      	movlt	r5, #1
 800991e:	f7ff fd3f 	bl	80093a0 <_Balloc>
 8009922:	b920      	cbnz	r0, 800992e <__mdiff+0x5a>
 8009924:	4b2d      	ldr	r3, [pc, #180]	; (80099dc <__mdiff+0x108>)
 8009926:	4602      	mov	r2, r0
 8009928:	f44f 7110 	mov.w	r1, #576	; 0x240
 800992c:	e7e6      	b.n	80098fc <__mdiff+0x28>
 800992e:	693e      	ldr	r6, [r7, #16]
 8009930:	60c5      	str	r5, [r0, #12]
 8009932:	6925      	ldr	r5, [r4, #16]
 8009934:	f107 0114 	add.w	r1, r7, #20
 8009938:	f104 0914 	add.w	r9, r4, #20
 800993c:	f100 0e14 	add.w	lr, r0, #20
 8009940:	f107 0210 	add.w	r2, r7, #16
 8009944:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009948:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800994c:	46f2      	mov	sl, lr
 800994e:	2700      	movs	r7, #0
 8009950:	f859 3b04 	ldr.w	r3, [r9], #4
 8009954:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009958:	fa1f f883 	uxth.w	r8, r3
 800995c:	fa17 f78b 	uxtah	r7, r7, fp
 8009960:	0c1b      	lsrs	r3, r3, #16
 8009962:	eba7 0808 	sub.w	r8, r7, r8
 8009966:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800996a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800996e:	fa1f f888 	uxth.w	r8, r8
 8009972:	141f      	asrs	r7, r3, #16
 8009974:	454d      	cmp	r5, r9
 8009976:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800997a:	f84a 3b04 	str.w	r3, [sl], #4
 800997e:	d8e7      	bhi.n	8009950 <__mdiff+0x7c>
 8009980:	1b2b      	subs	r3, r5, r4
 8009982:	3b15      	subs	r3, #21
 8009984:	f023 0303 	bic.w	r3, r3, #3
 8009988:	3304      	adds	r3, #4
 800998a:	3415      	adds	r4, #21
 800998c:	42a5      	cmp	r5, r4
 800998e:	bf38      	it	cc
 8009990:	2304      	movcc	r3, #4
 8009992:	4419      	add	r1, r3
 8009994:	4473      	add	r3, lr
 8009996:	469e      	mov	lr, r3
 8009998:	460d      	mov	r5, r1
 800999a:	4565      	cmp	r5, ip
 800999c:	d30e      	bcc.n	80099bc <__mdiff+0xe8>
 800999e:	f10c 0203 	add.w	r2, ip, #3
 80099a2:	1a52      	subs	r2, r2, r1
 80099a4:	f022 0203 	bic.w	r2, r2, #3
 80099a8:	3903      	subs	r1, #3
 80099aa:	458c      	cmp	ip, r1
 80099ac:	bf38      	it	cc
 80099ae:	2200      	movcc	r2, #0
 80099b0:	441a      	add	r2, r3
 80099b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80099b6:	b17b      	cbz	r3, 80099d8 <__mdiff+0x104>
 80099b8:	6106      	str	r6, [r0, #16]
 80099ba:	e7a5      	b.n	8009908 <__mdiff+0x34>
 80099bc:	f855 8b04 	ldr.w	r8, [r5], #4
 80099c0:	fa17 f488 	uxtah	r4, r7, r8
 80099c4:	1422      	asrs	r2, r4, #16
 80099c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80099ca:	b2a4      	uxth	r4, r4
 80099cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80099d0:	f84e 4b04 	str.w	r4, [lr], #4
 80099d4:	1417      	asrs	r7, r2, #16
 80099d6:	e7e0      	b.n	800999a <__mdiff+0xc6>
 80099d8:	3e01      	subs	r6, #1
 80099da:	e7ea      	b.n	80099b2 <__mdiff+0xde>
 80099dc:	0800b8f3 	.word	0x0800b8f3
 80099e0:	0800b964 	.word	0x0800b964

080099e4 <__d2b>:
 80099e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099e8:	4689      	mov	r9, r1
 80099ea:	2101      	movs	r1, #1
 80099ec:	ec57 6b10 	vmov	r6, r7, d0
 80099f0:	4690      	mov	r8, r2
 80099f2:	f7ff fcd5 	bl	80093a0 <_Balloc>
 80099f6:	4604      	mov	r4, r0
 80099f8:	b930      	cbnz	r0, 8009a08 <__d2b+0x24>
 80099fa:	4602      	mov	r2, r0
 80099fc:	4b25      	ldr	r3, [pc, #148]	; (8009a94 <__d2b+0xb0>)
 80099fe:	4826      	ldr	r0, [pc, #152]	; (8009a98 <__d2b+0xb4>)
 8009a00:	f240 310a 	movw	r1, #778	; 0x30a
 8009a04:	f000 fa50 	bl	8009ea8 <__assert_func>
 8009a08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a10:	bb35      	cbnz	r5, 8009a60 <__d2b+0x7c>
 8009a12:	2e00      	cmp	r6, #0
 8009a14:	9301      	str	r3, [sp, #4]
 8009a16:	d028      	beq.n	8009a6a <__d2b+0x86>
 8009a18:	4668      	mov	r0, sp
 8009a1a:	9600      	str	r6, [sp, #0]
 8009a1c:	f7ff fd8c 	bl	8009538 <__lo0bits>
 8009a20:	9900      	ldr	r1, [sp, #0]
 8009a22:	b300      	cbz	r0, 8009a66 <__d2b+0x82>
 8009a24:	9a01      	ldr	r2, [sp, #4]
 8009a26:	f1c0 0320 	rsb	r3, r0, #32
 8009a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2e:	430b      	orrs	r3, r1
 8009a30:	40c2      	lsrs	r2, r0
 8009a32:	6163      	str	r3, [r4, #20]
 8009a34:	9201      	str	r2, [sp, #4]
 8009a36:	9b01      	ldr	r3, [sp, #4]
 8009a38:	61a3      	str	r3, [r4, #24]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	bf14      	ite	ne
 8009a3e:	2202      	movne	r2, #2
 8009a40:	2201      	moveq	r2, #1
 8009a42:	6122      	str	r2, [r4, #16]
 8009a44:	b1d5      	cbz	r5, 8009a7c <__d2b+0x98>
 8009a46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a4a:	4405      	add	r5, r0
 8009a4c:	f8c9 5000 	str.w	r5, [r9]
 8009a50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a54:	f8c8 0000 	str.w	r0, [r8]
 8009a58:	4620      	mov	r0, r4
 8009a5a:	b003      	add	sp, #12
 8009a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a64:	e7d5      	b.n	8009a12 <__d2b+0x2e>
 8009a66:	6161      	str	r1, [r4, #20]
 8009a68:	e7e5      	b.n	8009a36 <__d2b+0x52>
 8009a6a:	a801      	add	r0, sp, #4
 8009a6c:	f7ff fd64 	bl	8009538 <__lo0bits>
 8009a70:	9b01      	ldr	r3, [sp, #4]
 8009a72:	6163      	str	r3, [r4, #20]
 8009a74:	2201      	movs	r2, #1
 8009a76:	6122      	str	r2, [r4, #16]
 8009a78:	3020      	adds	r0, #32
 8009a7a:	e7e3      	b.n	8009a44 <__d2b+0x60>
 8009a7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a84:	f8c9 0000 	str.w	r0, [r9]
 8009a88:	6918      	ldr	r0, [r3, #16]
 8009a8a:	f7ff fd35 	bl	80094f8 <__hi0bits>
 8009a8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a92:	e7df      	b.n	8009a54 <__d2b+0x70>
 8009a94:	0800b8f3 	.word	0x0800b8f3
 8009a98:	0800b964 	.word	0x0800b964

08009a9c <_calloc_r>:
 8009a9c:	b513      	push	{r0, r1, r4, lr}
 8009a9e:	434a      	muls	r2, r1
 8009aa0:	4611      	mov	r1, r2
 8009aa2:	9201      	str	r2, [sp, #4]
 8009aa4:	f7fd fd9c 	bl	80075e0 <_malloc_r>
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	b118      	cbz	r0, 8009ab4 <_calloc_r+0x18>
 8009aac:	9a01      	ldr	r2, [sp, #4]
 8009aae:	2100      	movs	r1, #0
 8009ab0:	f7fd fd3e 	bl	8007530 <memset>
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	b002      	add	sp, #8
 8009ab8:	bd10      	pop	{r4, pc}

08009aba <__sfputc_r>:
 8009aba:	6893      	ldr	r3, [r2, #8]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	b410      	push	{r4}
 8009ac2:	6093      	str	r3, [r2, #8]
 8009ac4:	da08      	bge.n	8009ad8 <__sfputc_r+0x1e>
 8009ac6:	6994      	ldr	r4, [r2, #24]
 8009ac8:	42a3      	cmp	r3, r4
 8009aca:	db01      	blt.n	8009ad0 <__sfputc_r+0x16>
 8009acc:	290a      	cmp	r1, #10
 8009ace:	d103      	bne.n	8009ad8 <__sfputc_r+0x1e>
 8009ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ad4:	f7fe bafc 	b.w	80080d0 <__swbuf_r>
 8009ad8:	6813      	ldr	r3, [r2, #0]
 8009ada:	1c58      	adds	r0, r3, #1
 8009adc:	6010      	str	r0, [r2, #0]
 8009ade:	7019      	strb	r1, [r3, #0]
 8009ae0:	4608      	mov	r0, r1
 8009ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <__sfputs_r>:
 8009ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aea:	4606      	mov	r6, r0
 8009aec:	460f      	mov	r7, r1
 8009aee:	4614      	mov	r4, r2
 8009af0:	18d5      	adds	r5, r2, r3
 8009af2:	42ac      	cmp	r4, r5
 8009af4:	d101      	bne.n	8009afa <__sfputs_r+0x12>
 8009af6:	2000      	movs	r0, #0
 8009af8:	e007      	b.n	8009b0a <__sfputs_r+0x22>
 8009afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009afe:	463a      	mov	r2, r7
 8009b00:	4630      	mov	r0, r6
 8009b02:	f7ff ffda 	bl	8009aba <__sfputc_r>
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	d1f3      	bne.n	8009af2 <__sfputs_r+0xa>
 8009b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b0c <_vfiprintf_r>:
 8009b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b10:	460d      	mov	r5, r1
 8009b12:	b09d      	sub	sp, #116	; 0x74
 8009b14:	4614      	mov	r4, r2
 8009b16:	4698      	mov	r8, r3
 8009b18:	4606      	mov	r6, r0
 8009b1a:	b118      	cbz	r0, 8009b24 <_vfiprintf_r+0x18>
 8009b1c:	6983      	ldr	r3, [r0, #24]
 8009b1e:	b90b      	cbnz	r3, 8009b24 <_vfiprintf_r+0x18>
 8009b20:	f7ff fb28 	bl	8009174 <__sinit>
 8009b24:	4b89      	ldr	r3, [pc, #548]	; (8009d4c <_vfiprintf_r+0x240>)
 8009b26:	429d      	cmp	r5, r3
 8009b28:	d11b      	bne.n	8009b62 <_vfiprintf_r+0x56>
 8009b2a:	6875      	ldr	r5, [r6, #4]
 8009b2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b2e:	07d9      	lsls	r1, r3, #31
 8009b30:	d405      	bmi.n	8009b3e <_vfiprintf_r+0x32>
 8009b32:	89ab      	ldrh	r3, [r5, #12]
 8009b34:	059a      	lsls	r2, r3, #22
 8009b36:	d402      	bmi.n	8009b3e <_vfiprintf_r+0x32>
 8009b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b3a:	f7ff fbbe 	bl	80092ba <__retarget_lock_acquire_recursive>
 8009b3e:	89ab      	ldrh	r3, [r5, #12]
 8009b40:	071b      	lsls	r3, r3, #28
 8009b42:	d501      	bpl.n	8009b48 <_vfiprintf_r+0x3c>
 8009b44:	692b      	ldr	r3, [r5, #16]
 8009b46:	b9eb      	cbnz	r3, 8009b84 <_vfiprintf_r+0x78>
 8009b48:	4629      	mov	r1, r5
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	f7fe fb12 	bl	8008174 <__swsetup_r>
 8009b50:	b1c0      	cbz	r0, 8009b84 <_vfiprintf_r+0x78>
 8009b52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b54:	07dc      	lsls	r4, r3, #31
 8009b56:	d50e      	bpl.n	8009b76 <_vfiprintf_r+0x6a>
 8009b58:	f04f 30ff 	mov.w	r0, #4294967295
 8009b5c:	b01d      	add	sp, #116	; 0x74
 8009b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b62:	4b7b      	ldr	r3, [pc, #492]	; (8009d50 <_vfiprintf_r+0x244>)
 8009b64:	429d      	cmp	r5, r3
 8009b66:	d101      	bne.n	8009b6c <_vfiprintf_r+0x60>
 8009b68:	68b5      	ldr	r5, [r6, #8]
 8009b6a:	e7df      	b.n	8009b2c <_vfiprintf_r+0x20>
 8009b6c:	4b79      	ldr	r3, [pc, #484]	; (8009d54 <_vfiprintf_r+0x248>)
 8009b6e:	429d      	cmp	r5, r3
 8009b70:	bf08      	it	eq
 8009b72:	68f5      	ldreq	r5, [r6, #12]
 8009b74:	e7da      	b.n	8009b2c <_vfiprintf_r+0x20>
 8009b76:	89ab      	ldrh	r3, [r5, #12]
 8009b78:	0598      	lsls	r0, r3, #22
 8009b7a:	d4ed      	bmi.n	8009b58 <_vfiprintf_r+0x4c>
 8009b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b7e:	f7ff fb9d 	bl	80092bc <__retarget_lock_release_recursive>
 8009b82:	e7e9      	b.n	8009b58 <_vfiprintf_r+0x4c>
 8009b84:	2300      	movs	r3, #0
 8009b86:	9309      	str	r3, [sp, #36]	; 0x24
 8009b88:	2320      	movs	r3, #32
 8009b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b92:	2330      	movs	r3, #48	; 0x30
 8009b94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d58 <_vfiprintf_r+0x24c>
 8009b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b9c:	f04f 0901 	mov.w	r9, #1
 8009ba0:	4623      	mov	r3, r4
 8009ba2:	469a      	mov	sl, r3
 8009ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ba8:	b10a      	cbz	r2, 8009bae <_vfiprintf_r+0xa2>
 8009baa:	2a25      	cmp	r2, #37	; 0x25
 8009bac:	d1f9      	bne.n	8009ba2 <_vfiprintf_r+0x96>
 8009bae:	ebba 0b04 	subs.w	fp, sl, r4
 8009bb2:	d00b      	beq.n	8009bcc <_vfiprintf_r+0xc0>
 8009bb4:	465b      	mov	r3, fp
 8009bb6:	4622      	mov	r2, r4
 8009bb8:	4629      	mov	r1, r5
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7ff ff94 	bl	8009ae8 <__sfputs_r>
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	f000 80aa 	beq.w	8009d1a <_vfiprintf_r+0x20e>
 8009bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bc8:	445a      	add	r2, fp
 8009bca:	9209      	str	r2, [sp, #36]	; 0x24
 8009bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f000 80a2 	beq.w	8009d1a <_vfiprintf_r+0x20e>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009be0:	f10a 0a01 	add.w	sl, sl, #1
 8009be4:	9304      	str	r3, [sp, #16]
 8009be6:	9307      	str	r3, [sp, #28]
 8009be8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bec:	931a      	str	r3, [sp, #104]	; 0x68
 8009bee:	4654      	mov	r4, sl
 8009bf0:	2205      	movs	r2, #5
 8009bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf6:	4858      	ldr	r0, [pc, #352]	; (8009d58 <_vfiprintf_r+0x24c>)
 8009bf8:	f7f6 fb1a 	bl	8000230 <memchr>
 8009bfc:	9a04      	ldr	r2, [sp, #16]
 8009bfe:	b9d8      	cbnz	r0, 8009c38 <_vfiprintf_r+0x12c>
 8009c00:	06d1      	lsls	r1, r2, #27
 8009c02:	bf44      	itt	mi
 8009c04:	2320      	movmi	r3, #32
 8009c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c0a:	0713      	lsls	r3, r2, #28
 8009c0c:	bf44      	itt	mi
 8009c0e:	232b      	movmi	r3, #43	; 0x2b
 8009c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c14:	f89a 3000 	ldrb.w	r3, [sl]
 8009c18:	2b2a      	cmp	r3, #42	; 0x2a
 8009c1a:	d015      	beq.n	8009c48 <_vfiprintf_r+0x13c>
 8009c1c:	9a07      	ldr	r2, [sp, #28]
 8009c1e:	4654      	mov	r4, sl
 8009c20:	2000      	movs	r0, #0
 8009c22:	f04f 0c0a 	mov.w	ip, #10
 8009c26:	4621      	mov	r1, r4
 8009c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c2c:	3b30      	subs	r3, #48	; 0x30
 8009c2e:	2b09      	cmp	r3, #9
 8009c30:	d94e      	bls.n	8009cd0 <_vfiprintf_r+0x1c4>
 8009c32:	b1b0      	cbz	r0, 8009c62 <_vfiprintf_r+0x156>
 8009c34:	9207      	str	r2, [sp, #28]
 8009c36:	e014      	b.n	8009c62 <_vfiprintf_r+0x156>
 8009c38:	eba0 0308 	sub.w	r3, r0, r8
 8009c3c:	fa09 f303 	lsl.w	r3, r9, r3
 8009c40:	4313      	orrs	r3, r2
 8009c42:	9304      	str	r3, [sp, #16]
 8009c44:	46a2      	mov	sl, r4
 8009c46:	e7d2      	b.n	8009bee <_vfiprintf_r+0xe2>
 8009c48:	9b03      	ldr	r3, [sp, #12]
 8009c4a:	1d19      	adds	r1, r3, #4
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	9103      	str	r1, [sp, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	bfbb      	ittet	lt
 8009c54:	425b      	neglt	r3, r3
 8009c56:	f042 0202 	orrlt.w	r2, r2, #2
 8009c5a:	9307      	strge	r3, [sp, #28]
 8009c5c:	9307      	strlt	r3, [sp, #28]
 8009c5e:	bfb8      	it	lt
 8009c60:	9204      	strlt	r2, [sp, #16]
 8009c62:	7823      	ldrb	r3, [r4, #0]
 8009c64:	2b2e      	cmp	r3, #46	; 0x2e
 8009c66:	d10c      	bne.n	8009c82 <_vfiprintf_r+0x176>
 8009c68:	7863      	ldrb	r3, [r4, #1]
 8009c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c6c:	d135      	bne.n	8009cda <_vfiprintf_r+0x1ce>
 8009c6e:	9b03      	ldr	r3, [sp, #12]
 8009c70:	1d1a      	adds	r2, r3, #4
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	9203      	str	r2, [sp, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	bfb8      	it	lt
 8009c7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c7e:	3402      	adds	r4, #2
 8009c80:	9305      	str	r3, [sp, #20]
 8009c82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d68 <_vfiprintf_r+0x25c>
 8009c86:	7821      	ldrb	r1, [r4, #0]
 8009c88:	2203      	movs	r2, #3
 8009c8a:	4650      	mov	r0, sl
 8009c8c:	f7f6 fad0 	bl	8000230 <memchr>
 8009c90:	b140      	cbz	r0, 8009ca4 <_vfiprintf_r+0x198>
 8009c92:	2340      	movs	r3, #64	; 0x40
 8009c94:	eba0 000a 	sub.w	r0, r0, sl
 8009c98:	fa03 f000 	lsl.w	r0, r3, r0
 8009c9c:	9b04      	ldr	r3, [sp, #16]
 8009c9e:	4303      	orrs	r3, r0
 8009ca0:	3401      	adds	r4, #1
 8009ca2:	9304      	str	r3, [sp, #16]
 8009ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ca8:	482c      	ldr	r0, [pc, #176]	; (8009d5c <_vfiprintf_r+0x250>)
 8009caa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cae:	2206      	movs	r2, #6
 8009cb0:	f7f6 fabe 	bl	8000230 <memchr>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d03f      	beq.n	8009d38 <_vfiprintf_r+0x22c>
 8009cb8:	4b29      	ldr	r3, [pc, #164]	; (8009d60 <_vfiprintf_r+0x254>)
 8009cba:	bb1b      	cbnz	r3, 8009d04 <_vfiprintf_r+0x1f8>
 8009cbc:	9b03      	ldr	r3, [sp, #12]
 8009cbe:	3307      	adds	r3, #7
 8009cc0:	f023 0307 	bic.w	r3, r3, #7
 8009cc4:	3308      	adds	r3, #8
 8009cc6:	9303      	str	r3, [sp, #12]
 8009cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cca:	443b      	add	r3, r7
 8009ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8009cce:	e767      	b.n	8009ba0 <_vfiprintf_r+0x94>
 8009cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	2001      	movs	r0, #1
 8009cd8:	e7a5      	b.n	8009c26 <_vfiprintf_r+0x11a>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	3401      	adds	r4, #1
 8009cde:	9305      	str	r3, [sp, #20]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	f04f 0c0a 	mov.w	ip, #10
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cec:	3a30      	subs	r2, #48	; 0x30
 8009cee:	2a09      	cmp	r2, #9
 8009cf0:	d903      	bls.n	8009cfa <_vfiprintf_r+0x1ee>
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0c5      	beq.n	8009c82 <_vfiprintf_r+0x176>
 8009cf6:	9105      	str	r1, [sp, #20]
 8009cf8:	e7c3      	b.n	8009c82 <_vfiprintf_r+0x176>
 8009cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cfe:	4604      	mov	r4, r0
 8009d00:	2301      	movs	r3, #1
 8009d02:	e7f0      	b.n	8009ce6 <_vfiprintf_r+0x1da>
 8009d04:	ab03      	add	r3, sp, #12
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	462a      	mov	r2, r5
 8009d0a:	4b16      	ldr	r3, [pc, #88]	; (8009d64 <_vfiprintf_r+0x258>)
 8009d0c:	a904      	add	r1, sp, #16
 8009d0e:	4630      	mov	r0, r6
 8009d10:	f7fd fd60 	bl	80077d4 <_printf_float>
 8009d14:	4607      	mov	r7, r0
 8009d16:	1c78      	adds	r0, r7, #1
 8009d18:	d1d6      	bne.n	8009cc8 <_vfiprintf_r+0x1bc>
 8009d1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d1c:	07d9      	lsls	r1, r3, #31
 8009d1e:	d405      	bmi.n	8009d2c <_vfiprintf_r+0x220>
 8009d20:	89ab      	ldrh	r3, [r5, #12]
 8009d22:	059a      	lsls	r2, r3, #22
 8009d24:	d402      	bmi.n	8009d2c <_vfiprintf_r+0x220>
 8009d26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d28:	f7ff fac8 	bl	80092bc <__retarget_lock_release_recursive>
 8009d2c:	89ab      	ldrh	r3, [r5, #12]
 8009d2e:	065b      	lsls	r3, r3, #25
 8009d30:	f53f af12 	bmi.w	8009b58 <_vfiprintf_r+0x4c>
 8009d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d36:	e711      	b.n	8009b5c <_vfiprintf_r+0x50>
 8009d38:	ab03      	add	r3, sp, #12
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	462a      	mov	r2, r5
 8009d3e:	4b09      	ldr	r3, [pc, #36]	; (8009d64 <_vfiprintf_r+0x258>)
 8009d40:	a904      	add	r1, sp, #16
 8009d42:	4630      	mov	r0, r6
 8009d44:	f7fd ffea 	bl	8007d1c <_printf_i>
 8009d48:	e7e4      	b.n	8009d14 <_vfiprintf_r+0x208>
 8009d4a:	bf00      	nop
 8009d4c:	0800b924 	.word	0x0800b924
 8009d50:	0800b944 	.word	0x0800b944
 8009d54:	0800b904 	.word	0x0800b904
 8009d58:	0800bac4 	.word	0x0800bac4
 8009d5c:	0800bace 	.word	0x0800bace
 8009d60:	080077d5 	.word	0x080077d5
 8009d64:	08009ae9 	.word	0x08009ae9
 8009d68:	0800baca 	.word	0x0800baca

08009d6c <_putc_r>:
 8009d6c:	b570      	push	{r4, r5, r6, lr}
 8009d6e:	460d      	mov	r5, r1
 8009d70:	4614      	mov	r4, r2
 8009d72:	4606      	mov	r6, r0
 8009d74:	b118      	cbz	r0, 8009d7e <_putc_r+0x12>
 8009d76:	6983      	ldr	r3, [r0, #24]
 8009d78:	b90b      	cbnz	r3, 8009d7e <_putc_r+0x12>
 8009d7a:	f7ff f9fb 	bl	8009174 <__sinit>
 8009d7e:	4b1c      	ldr	r3, [pc, #112]	; (8009df0 <_putc_r+0x84>)
 8009d80:	429c      	cmp	r4, r3
 8009d82:	d124      	bne.n	8009dce <_putc_r+0x62>
 8009d84:	6874      	ldr	r4, [r6, #4]
 8009d86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d88:	07d8      	lsls	r0, r3, #31
 8009d8a:	d405      	bmi.n	8009d98 <_putc_r+0x2c>
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	0599      	lsls	r1, r3, #22
 8009d90:	d402      	bmi.n	8009d98 <_putc_r+0x2c>
 8009d92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d94:	f7ff fa91 	bl	80092ba <__retarget_lock_acquire_recursive>
 8009d98:	68a3      	ldr	r3, [r4, #8]
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	60a3      	str	r3, [r4, #8]
 8009da0:	da05      	bge.n	8009dae <_putc_r+0x42>
 8009da2:	69a2      	ldr	r2, [r4, #24]
 8009da4:	4293      	cmp	r3, r2
 8009da6:	db1c      	blt.n	8009de2 <_putc_r+0x76>
 8009da8:	b2eb      	uxtb	r3, r5
 8009daa:	2b0a      	cmp	r3, #10
 8009dac:	d019      	beq.n	8009de2 <_putc_r+0x76>
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	6022      	str	r2, [r4, #0]
 8009db4:	701d      	strb	r5, [r3, #0]
 8009db6:	b2ed      	uxtb	r5, r5
 8009db8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dba:	07da      	lsls	r2, r3, #31
 8009dbc:	d405      	bmi.n	8009dca <_putc_r+0x5e>
 8009dbe:	89a3      	ldrh	r3, [r4, #12]
 8009dc0:	059b      	lsls	r3, r3, #22
 8009dc2:	d402      	bmi.n	8009dca <_putc_r+0x5e>
 8009dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dc6:	f7ff fa79 	bl	80092bc <__retarget_lock_release_recursive>
 8009dca:	4628      	mov	r0, r5
 8009dcc:	bd70      	pop	{r4, r5, r6, pc}
 8009dce:	4b09      	ldr	r3, [pc, #36]	; (8009df4 <_putc_r+0x88>)
 8009dd0:	429c      	cmp	r4, r3
 8009dd2:	d101      	bne.n	8009dd8 <_putc_r+0x6c>
 8009dd4:	68b4      	ldr	r4, [r6, #8]
 8009dd6:	e7d6      	b.n	8009d86 <_putc_r+0x1a>
 8009dd8:	4b07      	ldr	r3, [pc, #28]	; (8009df8 <_putc_r+0x8c>)
 8009dda:	429c      	cmp	r4, r3
 8009ddc:	bf08      	it	eq
 8009dde:	68f4      	ldreq	r4, [r6, #12]
 8009de0:	e7d1      	b.n	8009d86 <_putc_r+0x1a>
 8009de2:	4629      	mov	r1, r5
 8009de4:	4622      	mov	r2, r4
 8009de6:	4630      	mov	r0, r6
 8009de8:	f7fe f972 	bl	80080d0 <__swbuf_r>
 8009dec:	4605      	mov	r5, r0
 8009dee:	e7e3      	b.n	8009db8 <_putc_r+0x4c>
 8009df0:	0800b924 	.word	0x0800b924
 8009df4:	0800b944 	.word	0x0800b944
 8009df8:	0800b904 	.word	0x0800b904

08009dfc <__sread>:
 8009dfc:	b510      	push	{r4, lr}
 8009dfe:	460c      	mov	r4, r1
 8009e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e04:	f000 f8d6 	bl	8009fb4 <_read_r>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	bfab      	itete	ge
 8009e0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e0e:	89a3      	ldrhlt	r3, [r4, #12]
 8009e10:	181b      	addge	r3, r3, r0
 8009e12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e16:	bfac      	ite	ge
 8009e18:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e1a:	81a3      	strhlt	r3, [r4, #12]
 8009e1c:	bd10      	pop	{r4, pc}

08009e1e <__swrite>:
 8009e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e22:	461f      	mov	r7, r3
 8009e24:	898b      	ldrh	r3, [r1, #12]
 8009e26:	05db      	lsls	r3, r3, #23
 8009e28:	4605      	mov	r5, r0
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	4616      	mov	r6, r2
 8009e2e:	d505      	bpl.n	8009e3c <__swrite+0x1e>
 8009e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e34:	2302      	movs	r3, #2
 8009e36:	2200      	movs	r2, #0
 8009e38:	f000 f898 	bl	8009f6c <_lseek_r>
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e46:	81a3      	strh	r3, [r4, #12]
 8009e48:	4632      	mov	r2, r6
 8009e4a:	463b      	mov	r3, r7
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e52:	f000 b817 	b.w	8009e84 <_write_r>

08009e56 <__sseek>:
 8009e56:	b510      	push	{r4, lr}
 8009e58:	460c      	mov	r4, r1
 8009e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5e:	f000 f885 	bl	8009f6c <_lseek_r>
 8009e62:	1c43      	adds	r3, r0, #1
 8009e64:	89a3      	ldrh	r3, [r4, #12]
 8009e66:	bf15      	itete	ne
 8009e68:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e72:	81a3      	strheq	r3, [r4, #12]
 8009e74:	bf18      	it	ne
 8009e76:	81a3      	strhne	r3, [r4, #12]
 8009e78:	bd10      	pop	{r4, pc}

08009e7a <__sclose>:
 8009e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7e:	f000 b831 	b.w	8009ee4 <_close_r>
	...

08009e84 <_write_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4d07      	ldr	r5, [pc, #28]	; (8009ea4 <_write_r+0x20>)
 8009e88:	4604      	mov	r4, r0
 8009e8a:	4608      	mov	r0, r1
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	2200      	movs	r2, #0
 8009e90:	602a      	str	r2, [r5, #0]
 8009e92:	461a      	mov	r2, r3
 8009e94:	f7f7 fb36 	bl	8001504 <_write>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d102      	bne.n	8009ea2 <_write_r+0x1e>
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	b103      	cbz	r3, 8009ea2 <_write_r+0x1e>
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	bd38      	pop	{r3, r4, r5, pc}
 8009ea4:	20002ab4 	.word	0x20002ab4

08009ea8 <__assert_func>:
 8009ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009eaa:	4614      	mov	r4, r2
 8009eac:	461a      	mov	r2, r3
 8009eae:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <__assert_func+0x2c>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	68d8      	ldr	r0, [r3, #12]
 8009eb6:	b14c      	cbz	r4, 8009ecc <__assert_func+0x24>
 8009eb8:	4b07      	ldr	r3, [pc, #28]	; (8009ed8 <__assert_func+0x30>)
 8009eba:	9100      	str	r1, [sp, #0]
 8009ebc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ec0:	4906      	ldr	r1, [pc, #24]	; (8009edc <__assert_func+0x34>)
 8009ec2:	462b      	mov	r3, r5
 8009ec4:	f000 f81e 	bl	8009f04 <fiprintf>
 8009ec8:	f000 f893 	bl	8009ff2 <abort>
 8009ecc:	4b04      	ldr	r3, [pc, #16]	; (8009ee0 <__assert_func+0x38>)
 8009ece:	461c      	mov	r4, r3
 8009ed0:	e7f3      	b.n	8009eba <__assert_func+0x12>
 8009ed2:	bf00      	nop
 8009ed4:	20001e3c 	.word	0x20001e3c
 8009ed8:	0800bad5 	.word	0x0800bad5
 8009edc:	0800bae2 	.word	0x0800bae2
 8009ee0:	0800bb10 	.word	0x0800bb10

08009ee4 <_close_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4d06      	ldr	r5, [pc, #24]	; (8009f00 <_close_r+0x1c>)
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4604      	mov	r4, r0
 8009eec:	4608      	mov	r0, r1
 8009eee:	602b      	str	r3, [r5, #0]
 8009ef0:	f7f7 fd76 	bl	80019e0 <_close>
 8009ef4:	1c43      	adds	r3, r0, #1
 8009ef6:	d102      	bne.n	8009efe <_close_r+0x1a>
 8009ef8:	682b      	ldr	r3, [r5, #0]
 8009efa:	b103      	cbz	r3, 8009efe <_close_r+0x1a>
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	bd38      	pop	{r3, r4, r5, pc}
 8009f00:	20002ab4 	.word	0x20002ab4

08009f04 <fiprintf>:
 8009f04:	b40e      	push	{r1, r2, r3}
 8009f06:	b503      	push	{r0, r1, lr}
 8009f08:	4601      	mov	r1, r0
 8009f0a:	ab03      	add	r3, sp, #12
 8009f0c:	4805      	ldr	r0, [pc, #20]	; (8009f24 <fiprintf+0x20>)
 8009f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f12:	6800      	ldr	r0, [r0, #0]
 8009f14:	9301      	str	r3, [sp, #4]
 8009f16:	f7ff fdf9 	bl	8009b0c <_vfiprintf_r>
 8009f1a:	b002      	add	sp, #8
 8009f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f20:	b003      	add	sp, #12
 8009f22:	4770      	bx	lr
 8009f24:	20001e3c 	.word	0x20001e3c

08009f28 <_fstat_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d07      	ldr	r5, [pc, #28]	; (8009f48 <_fstat_r+0x20>)
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	4604      	mov	r4, r0
 8009f30:	4608      	mov	r0, r1
 8009f32:	4611      	mov	r1, r2
 8009f34:	602b      	str	r3, [r5, #0]
 8009f36:	f7f7 fd56 	bl	80019e6 <_fstat>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	d102      	bne.n	8009f44 <_fstat_r+0x1c>
 8009f3e:	682b      	ldr	r3, [r5, #0]
 8009f40:	b103      	cbz	r3, 8009f44 <_fstat_r+0x1c>
 8009f42:	6023      	str	r3, [r4, #0]
 8009f44:	bd38      	pop	{r3, r4, r5, pc}
 8009f46:	bf00      	nop
 8009f48:	20002ab4 	.word	0x20002ab4

08009f4c <_isatty_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4d06      	ldr	r5, [pc, #24]	; (8009f68 <_isatty_r+0x1c>)
 8009f50:	2300      	movs	r3, #0
 8009f52:	4604      	mov	r4, r0
 8009f54:	4608      	mov	r0, r1
 8009f56:	602b      	str	r3, [r5, #0]
 8009f58:	f7f7 fd4a 	bl	80019f0 <_isatty>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d102      	bne.n	8009f66 <_isatty_r+0x1a>
 8009f60:	682b      	ldr	r3, [r5, #0]
 8009f62:	b103      	cbz	r3, 8009f66 <_isatty_r+0x1a>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
 8009f68:	20002ab4 	.word	0x20002ab4

08009f6c <_lseek_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4d07      	ldr	r5, [pc, #28]	; (8009f8c <_lseek_r+0x20>)
 8009f70:	4604      	mov	r4, r0
 8009f72:	4608      	mov	r0, r1
 8009f74:	4611      	mov	r1, r2
 8009f76:	2200      	movs	r2, #0
 8009f78:	602a      	str	r2, [r5, #0]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	f7f7 fd3a 	bl	80019f4 <_lseek>
 8009f80:	1c43      	adds	r3, r0, #1
 8009f82:	d102      	bne.n	8009f8a <_lseek_r+0x1e>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	b103      	cbz	r3, 8009f8a <_lseek_r+0x1e>
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	bd38      	pop	{r3, r4, r5, pc}
 8009f8c:	20002ab4 	.word	0x20002ab4

08009f90 <__ascii_mbtowc>:
 8009f90:	b082      	sub	sp, #8
 8009f92:	b901      	cbnz	r1, 8009f96 <__ascii_mbtowc+0x6>
 8009f94:	a901      	add	r1, sp, #4
 8009f96:	b142      	cbz	r2, 8009faa <__ascii_mbtowc+0x1a>
 8009f98:	b14b      	cbz	r3, 8009fae <__ascii_mbtowc+0x1e>
 8009f9a:	7813      	ldrb	r3, [r2, #0]
 8009f9c:	600b      	str	r3, [r1, #0]
 8009f9e:	7812      	ldrb	r2, [r2, #0]
 8009fa0:	1e10      	subs	r0, r2, #0
 8009fa2:	bf18      	it	ne
 8009fa4:	2001      	movne	r0, #1
 8009fa6:	b002      	add	sp, #8
 8009fa8:	4770      	bx	lr
 8009faa:	4610      	mov	r0, r2
 8009fac:	e7fb      	b.n	8009fa6 <__ascii_mbtowc+0x16>
 8009fae:	f06f 0001 	mvn.w	r0, #1
 8009fb2:	e7f8      	b.n	8009fa6 <__ascii_mbtowc+0x16>

08009fb4 <_read_r>:
 8009fb4:	b538      	push	{r3, r4, r5, lr}
 8009fb6:	4d07      	ldr	r5, [pc, #28]	; (8009fd4 <_read_r+0x20>)
 8009fb8:	4604      	mov	r4, r0
 8009fba:	4608      	mov	r0, r1
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	602a      	str	r2, [r5, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f7f7 fcfc 	bl	80019c0 <_read>
 8009fc8:	1c43      	adds	r3, r0, #1
 8009fca:	d102      	bne.n	8009fd2 <_read_r+0x1e>
 8009fcc:	682b      	ldr	r3, [r5, #0]
 8009fce:	b103      	cbz	r3, 8009fd2 <_read_r+0x1e>
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	bd38      	pop	{r3, r4, r5, pc}
 8009fd4:	20002ab4 	.word	0x20002ab4

08009fd8 <__ascii_wctomb>:
 8009fd8:	b149      	cbz	r1, 8009fee <__ascii_wctomb+0x16>
 8009fda:	2aff      	cmp	r2, #255	; 0xff
 8009fdc:	bf85      	ittet	hi
 8009fde:	238a      	movhi	r3, #138	; 0x8a
 8009fe0:	6003      	strhi	r3, [r0, #0]
 8009fe2:	700a      	strbls	r2, [r1, #0]
 8009fe4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009fe8:	bf98      	it	ls
 8009fea:	2001      	movls	r0, #1
 8009fec:	4770      	bx	lr
 8009fee:	4608      	mov	r0, r1
 8009ff0:	4770      	bx	lr

08009ff2 <abort>:
 8009ff2:	b508      	push	{r3, lr}
 8009ff4:	2006      	movs	r0, #6
 8009ff6:	f000 f82b 	bl	800a050 <raise>
 8009ffa:	2001      	movs	r0, #1
 8009ffc:	f7f7 fcda 	bl	80019b4 <_exit>

0800a000 <_raise_r>:
 800a000:	291f      	cmp	r1, #31
 800a002:	b538      	push	{r3, r4, r5, lr}
 800a004:	4604      	mov	r4, r0
 800a006:	460d      	mov	r5, r1
 800a008:	d904      	bls.n	800a014 <_raise_r+0x14>
 800a00a:	2316      	movs	r3, #22
 800a00c:	6003      	str	r3, [r0, #0]
 800a00e:	f04f 30ff 	mov.w	r0, #4294967295
 800a012:	bd38      	pop	{r3, r4, r5, pc}
 800a014:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a016:	b112      	cbz	r2, 800a01e <_raise_r+0x1e>
 800a018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a01c:	b94b      	cbnz	r3, 800a032 <_raise_r+0x32>
 800a01e:	4620      	mov	r0, r4
 800a020:	f000 f830 	bl	800a084 <_getpid_r>
 800a024:	462a      	mov	r2, r5
 800a026:	4601      	mov	r1, r0
 800a028:	4620      	mov	r0, r4
 800a02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a02e:	f000 b817 	b.w	800a060 <_kill_r>
 800a032:	2b01      	cmp	r3, #1
 800a034:	d00a      	beq.n	800a04c <_raise_r+0x4c>
 800a036:	1c59      	adds	r1, r3, #1
 800a038:	d103      	bne.n	800a042 <_raise_r+0x42>
 800a03a:	2316      	movs	r3, #22
 800a03c:	6003      	str	r3, [r0, #0]
 800a03e:	2001      	movs	r0, #1
 800a040:	e7e7      	b.n	800a012 <_raise_r+0x12>
 800a042:	2400      	movs	r4, #0
 800a044:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a048:	4628      	mov	r0, r5
 800a04a:	4798      	blx	r3
 800a04c:	2000      	movs	r0, #0
 800a04e:	e7e0      	b.n	800a012 <_raise_r+0x12>

0800a050 <raise>:
 800a050:	4b02      	ldr	r3, [pc, #8]	; (800a05c <raise+0xc>)
 800a052:	4601      	mov	r1, r0
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	f7ff bfd3 	b.w	800a000 <_raise_r>
 800a05a:	bf00      	nop
 800a05c:	20001e3c 	.word	0x20001e3c

0800a060 <_kill_r>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	4d07      	ldr	r5, [pc, #28]	; (800a080 <_kill_r+0x20>)
 800a064:	2300      	movs	r3, #0
 800a066:	4604      	mov	r4, r0
 800a068:	4608      	mov	r0, r1
 800a06a:	4611      	mov	r1, r2
 800a06c:	602b      	str	r3, [r5, #0]
 800a06e:	f7f7 fc99 	bl	80019a4 <_kill>
 800a072:	1c43      	adds	r3, r0, #1
 800a074:	d102      	bne.n	800a07c <_kill_r+0x1c>
 800a076:	682b      	ldr	r3, [r5, #0]
 800a078:	b103      	cbz	r3, 800a07c <_kill_r+0x1c>
 800a07a:	6023      	str	r3, [r4, #0]
 800a07c:	bd38      	pop	{r3, r4, r5, pc}
 800a07e:	bf00      	nop
 800a080:	20002ab4 	.word	0x20002ab4

0800a084 <_getpid_r>:
 800a084:	f7f7 bc8c 	b.w	80019a0 <_getpid>

0800a088 <pow>:
 800a088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a08c:	ec59 8b10 	vmov	r8, r9, d0
 800a090:	ec57 6b11 	vmov	r6, r7, d1
 800a094:	f000 f8dc 	bl	800a250 <__ieee754_pow>
 800a098:	4b4e      	ldr	r3, [pc, #312]	; (800a1d4 <pow+0x14c>)
 800a09a:	f993 3000 	ldrsb.w	r3, [r3]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	ec55 4b10 	vmov	r4, r5, d0
 800a0a4:	d015      	beq.n	800a0d2 <pow+0x4a>
 800a0a6:	4632      	mov	r2, r6
 800a0a8:	463b      	mov	r3, r7
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	4639      	mov	r1, r7
 800a0ae:	f7f6 fd65 	bl	8000b7c <__aeabi_dcmpun>
 800a0b2:	b970      	cbnz	r0, 800a0d2 <pow+0x4a>
 800a0b4:	4642      	mov	r2, r8
 800a0b6:	464b      	mov	r3, r9
 800a0b8:	4640      	mov	r0, r8
 800a0ba:	4649      	mov	r1, r9
 800a0bc:	f7f6 fd5e 	bl	8000b7c <__aeabi_dcmpun>
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	b148      	cbz	r0, 800a0da <pow+0x52>
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	4639      	mov	r1, r7
 800a0ca:	f7f6 fd25 	bl	8000b18 <__aeabi_dcmpeq>
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d17d      	bne.n	800a1ce <pow+0x146>
 800a0d2:	ec45 4b10 	vmov	d0, r4, r5
 800a0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0da:	4640      	mov	r0, r8
 800a0dc:	4649      	mov	r1, r9
 800a0de:	f7f6 fd1b 	bl	8000b18 <__aeabi_dcmpeq>
 800a0e2:	b1e0      	cbz	r0, 800a11e <pow+0x96>
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	4639      	mov	r1, r7
 800a0ec:	f7f6 fd14 	bl	8000b18 <__aeabi_dcmpeq>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d16c      	bne.n	800a1ce <pow+0x146>
 800a0f4:	ec47 6b10 	vmov	d0, r6, r7
 800a0f8:	f000 fe89 	bl	800ae0e <finite>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d0e8      	beq.n	800a0d2 <pow+0x4a>
 800a100:	2200      	movs	r2, #0
 800a102:	2300      	movs	r3, #0
 800a104:	4630      	mov	r0, r6
 800a106:	4639      	mov	r1, r7
 800a108:	f7f6 fd10 	bl	8000b2c <__aeabi_dcmplt>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d0e0      	beq.n	800a0d2 <pow+0x4a>
 800a110:	f7fd f9ce 	bl	80074b0 <__errno>
 800a114:	2321      	movs	r3, #33	; 0x21
 800a116:	6003      	str	r3, [r0, #0]
 800a118:	2400      	movs	r4, #0
 800a11a:	4d2f      	ldr	r5, [pc, #188]	; (800a1d8 <pow+0x150>)
 800a11c:	e7d9      	b.n	800a0d2 <pow+0x4a>
 800a11e:	ec45 4b10 	vmov	d0, r4, r5
 800a122:	f000 fe74 	bl	800ae0e <finite>
 800a126:	bbb8      	cbnz	r0, 800a198 <pow+0x110>
 800a128:	ec49 8b10 	vmov	d0, r8, r9
 800a12c:	f000 fe6f 	bl	800ae0e <finite>
 800a130:	b390      	cbz	r0, 800a198 <pow+0x110>
 800a132:	ec47 6b10 	vmov	d0, r6, r7
 800a136:	f000 fe6a 	bl	800ae0e <finite>
 800a13a:	b368      	cbz	r0, 800a198 <pow+0x110>
 800a13c:	4622      	mov	r2, r4
 800a13e:	462b      	mov	r3, r5
 800a140:	4620      	mov	r0, r4
 800a142:	4629      	mov	r1, r5
 800a144:	f7f6 fd1a 	bl	8000b7c <__aeabi_dcmpun>
 800a148:	b160      	cbz	r0, 800a164 <pow+0xdc>
 800a14a:	f7fd f9b1 	bl	80074b0 <__errno>
 800a14e:	2321      	movs	r3, #33	; 0x21
 800a150:	6003      	str	r3, [r0, #0]
 800a152:	2200      	movs	r2, #0
 800a154:	2300      	movs	r3, #0
 800a156:	4610      	mov	r0, r2
 800a158:	4619      	mov	r1, r3
 800a15a:	f7f6 fb9f 	bl	800089c <__aeabi_ddiv>
 800a15e:	4604      	mov	r4, r0
 800a160:	460d      	mov	r5, r1
 800a162:	e7b6      	b.n	800a0d2 <pow+0x4a>
 800a164:	f7fd f9a4 	bl	80074b0 <__errno>
 800a168:	2322      	movs	r3, #34	; 0x22
 800a16a:	6003      	str	r3, [r0, #0]
 800a16c:	2200      	movs	r2, #0
 800a16e:	2300      	movs	r3, #0
 800a170:	4640      	mov	r0, r8
 800a172:	4649      	mov	r1, r9
 800a174:	f7f6 fcda 	bl	8000b2c <__aeabi_dcmplt>
 800a178:	2400      	movs	r4, #0
 800a17a:	b158      	cbz	r0, 800a194 <pow+0x10c>
 800a17c:	ec47 6b10 	vmov	d0, r6, r7
 800a180:	f000 fe5a 	bl	800ae38 <rint>
 800a184:	4632      	mov	r2, r6
 800a186:	ec51 0b10 	vmov	r0, r1, d0
 800a18a:	463b      	mov	r3, r7
 800a18c:	f7f6 fcc4 	bl	8000b18 <__aeabi_dcmpeq>
 800a190:	2800      	cmp	r0, #0
 800a192:	d0c2      	beq.n	800a11a <pow+0x92>
 800a194:	4d11      	ldr	r5, [pc, #68]	; (800a1dc <pow+0x154>)
 800a196:	e79c      	b.n	800a0d2 <pow+0x4a>
 800a198:	2200      	movs	r2, #0
 800a19a:	2300      	movs	r3, #0
 800a19c:	4620      	mov	r0, r4
 800a19e:	4629      	mov	r1, r5
 800a1a0:	f7f6 fcba 	bl	8000b18 <__aeabi_dcmpeq>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d094      	beq.n	800a0d2 <pow+0x4a>
 800a1a8:	ec49 8b10 	vmov	d0, r8, r9
 800a1ac:	f000 fe2f 	bl	800ae0e <finite>
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d08e      	beq.n	800a0d2 <pow+0x4a>
 800a1b4:	ec47 6b10 	vmov	d0, r6, r7
 800a1b8:	f000 fe29 	bl	800ae0e <finite>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	d088      	beq.n	800a0d2 <pow+0x4a>
 800a1c0:	f7fd f976 	bl	80074b0 <__errno>
 800a1c4:	2322      	movs	r3, #34	; 0x22
 800a1c6:	6003      	str	r3, [r0, #0]
 800a1c8:	2400      	movs	r4, #0
 800a1ca:	2500      	movs	r5, #0
 800a1cc:	e781      	b.n	800a0d2 <pow+0x4a>
 800a1ce:	4d04      	ldr	r5, [pc, #16]	; (800a1e0 <pow+0x158>)
 800a1d0:	2400      	movs	r4, #0
 800a1d2:	e77e      	b.n	800a0d2 <pow+0x4a>
 800a1d4:	2000200c 	.word	0x2000200c
 800a1d8:	fff00000 	.word	0xfff00000
 800a1dc:	7ff00000 	.word	0x7ff00000
 800a1e0:	3ff00000 	.word	0x3ff00000

0800a1e4 <sqrt>:
 800a1e4:	b538      	push	{r3, r4, r5, lr}
 800a1e6:	ed2d 8b02 	vpush	{d8}
 800a1ea:	ec55 4b10 	vmov	r4, r5, d0
 800a1ee:	f000 fd51 	bl	800ac94 <__ieee754_sqrt>
 800a1f2:	4b15      	ldr	r3, [pc, #84]	; (800a248 <sqrt+0x64>)
 800a1f4:	eeb0 8a40 	vmov.f32	s16, s0
 800a1f8:	eef0 8a60 	vmov.f32	s17, s1
 800a1fc:	f993 3000 	ldrsb.w	r3, [r3]
 800a200:	3301      	adds	r3, #1
 800a202:	d019      	beq.n	800a238 <sqrt+0x54>
 800a204:	4622      	mov	r2, r4
 800a206:	462b      	mov	r3, r5
 800a208:	4620      	mov	r0, r4
 800a20a:	4629      	mov	r1, r5
 800a20c:	f7f6 fcb6 	bl	8000b7c <__aeabi_dcmpun>
 800a210:	b990      	cbnz	r0, 800a238 <sqrt+0x54>
 800a212:	2200      	movs	r2, #0
 800a214:	2300      	movs	r3, #0
 800a216:	4620      	mov	r0, r4
 800a218:	4629      	mov	r1, r5
 800a21a:	f7f6 fc87 	bl	8000b2c <__aeabi_dcmplt>
 800a21e:	b158      	cbz	r0, 800a238 <sqrt+0x54>
 800a220:	f7fd f946 	bl	80074b0 <__errno>
 800a224:	2321      	movs	r3, #33	; 0x21
 800a226:	6003      	str	r3, [r0, #0]
 800a228:	2200      	movs	r2, #0
 800a22a:	2300      	movs	r3, #0
 800a22c:	4610      	mov	r0, r2
 800a22e:	4619      	mov	r1, r3
 800a230:	f7f6 fb34 	bl	800089c <__aeabi_ddiv>
 800a234:	ec41 0b18 	vmov	d8, r0, r1
 800a238:	eeb0 0a48 	vmov.f32	s0, s16
 800a23c:	eef0 0a68 	vmov.f32	s1, s17
 800a240:	ecbd 8b02 	vpop	{d8}
 800a244:	bd38      	pop	{r3, r4, r5, pc}
 800a246:	bf00      	nop
 800a248:	2000200c 	.word	0x2000200c
 800a24c:	00000000 	.word	0x00000000

0800a250 <__ieee754_pow>:
 800a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	ed2d 8b06 	vpush	{d8-d10}
 800a258:	b08d      	sub	sp, #52	; 0x34
 800a25a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a25e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800a262:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800a266:	ea56 0100 	orrs.w	r1, r6, r0
 800a26a:	ec53 2b10 	vmov	r2, r3, d0
 800a26e:	f000 84d1 	beq.w	800ac14 <__ieee754_pow+0x9c4>
 800a272:	497f      	ldr	r1, [pc, #508]	; (800a470 <__ieee754_pow+0x220>)
 800a274:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800a278:	428c      	cmp	r4, r1
 800a27a:	ee10 8a10 	vmov	r8, s0
 800a27e:	4699      	mov	r9, r3
 800a280:	dc09      	bgt.n	800a296 <__ieee754_pow+0x46>
 800a282:	d103      	bne.n	800a28c <__ieee754_pow+0x3c>
 800a284:	b97a      	cbnz	r2, 800a2a6 <__ieee754_pow+0x56>
 800a286:	42a6      	cmp	r6, r4
 800a288:	dd02      	ble.n	800a290 <__ieee754_pow+0x40>
 800a28a:	e00c      	b.n	800a2a6 <__ieee754_pow+0x56>
 800a28c:	428e      	cmp	r6, r1
 800a28e:	dc02      	bgt.n	800a296 <__ieee754_pow+0x46>
 800a290:	428e      	cmp	r6, r1
 800a292:	d110      	bne.n	800a2b6 <__ieee754_pow+0x66>
 800a294:	b178      	cbz	r0, 800a2b6 <__ieee754_pow+0x66>
 800a296:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a29a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a29e:	ea54 0308 	orrs.w	r3, r4, r8
 800a2a2:	f000 84b7 	beq.w	800ac14 <__ieee754_pow+0x9c4>
 800a2a6:	4873      	ldr	r0, [pc, #460]	; (800a474 <__ieee754_pow+0x224>)
 800a2a8:	b00d      	add	sp, #52	; 0x34
 800a2aa:	ecbd 8b06 	vpop	{d8-d10}
 800a2ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b2:	f000 bdb9 	b.w	800ae28 <nan>
 800a2b6:	f1b9 0f00 	cmp.w	r9, #0
 800a2ba:	da36      	bge.n	800a32a <__ieee754_pow+0xda>
 800a2bc:	496e      	ldr	r1, [pc, #440]	; (800a478 <__ieee754_pow+0x228>)
 800a2be:	428e      	cmp	r6, r1
 800a2c0:	dc51      	bgt.n	800a366 <__ieee754_pow+0x116>
 800a2c2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800a2c6:	428e      	cmp	r6, r1
 800a2c8:	f340 84af 	ble.w	800ac2a <__ieee754_pow+0x9da>
 800a2cc:	1531      	asrs	r1, r6, #20
 800a2ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a2d2:	2914      	cmp	r1, #20
 800a2d4:	dd0f      	ble.n	800a2f6 <__ieee754_pow+0xa6>
 800a2d6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800a2da:	fa20 fc01 	lsr.w	ip, r0, r1
 800a2de:	fa0c f101 	lsl.w	r1, ip, r1
 800a2e2:	4281      	cmp	r1, r0
 800a2e4:	f040 84a1 	bne.w	800ac2a <__ieee754_pow+0x9da>
 800a2e8:	f00c 0c01 	and.w	ip, ip, #1
 800a2ec:	f1cc 0102 	rsb	r1, ip, #2
 800a2f0:	9100      	str	r1, [sp, #0]
 800a2f2:	b180      	cbz	r0, 800a316 <__ieee754_pow+0xc6>
 800a2f4:	e059      	b.n	800a3aa <__ieee754_pow+0x15a>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d155      	bne.n	800a3a6 <__ieee754_pow+0x156>
 800a2fa:	f1c1 0114 	rsb	r1, r1, #20
 800a2fe:	fa46 fc01 	asr.w	ip, r6, r1
 800a302:	fa0c f101 	lsl.w	r1, ip, r1
 800a306:	42b1      	cmp	r1, r6
 800a308:	f040 848c 	bne.w	800ac24 <__ieee754_pow+0x9d4>
 800a30c:	f00c 0c01 	and.w	ip, ip, #1
 800a310:	f1cc 0102 	rsb	r1, ip, #2
 800a314:	9100      	str	r1, [sp, #0]
 800a316:	4959      	ldr	r1, [pc, #356]	; (800a47c <__ieee754_pow+0x22c>)
 800a318:	428e      	cmp	r6, r1
 800a31a:	d12d      	bne.n	800a378 <__ieee754_pow+0x128>
 800a31c:	2f00      	cmp	r7, #0
 800a31e:	da79      	bge.n	800a414 <__ieee754_pow+0x1c4>
 800a320:	4956      	ldr	r1, [pc, #344]	; (800a47c <__ieee754_pow+0x22c>)
 800a322:	2000      	movs	r0, #0
 800a324:	f7f6 faba 	bl	800089c <__aeabi_ddiv>
 800a328:	e016      	b.n	800a358 <__ieee754_pow+0x108>
 800a32a:	2100      	movs	r1, #0
 800a32c:	9100      	str	r1, [sp, #0]
 800a32e:	2800      	cmp	r0, #0
 800a330:	d13b      	bne.n	800a3aa <__ieee754_pow+0x15a>
 800a332:	494f      	ldr	r1, [pc, #316]	; (800a470 <__ieee754_pow+0x220>)
 800a334:	428e      	cmp	r6, r1
 800a336:	d1ee      	bne.n	800a316 <__ieee754_pow+0xc6>
 800a338:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a33c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a340:	ea53 0308 	orrs.w	r3, r3, r8
 800a344:	f000 8466 	beq.w	800ac14 <__ieee754_pow+0x9c4>
 800a348:	4b4d      	ldr	r3, [pc, #308]	; (800a480 <__ieee754_pow+0x230>)
 800a34a:	429c      	cmp	r4, r3
 800a34c:	dd0d      	ble.n	800a36a <__ieee754_pow+0x11a>
 800a34e:	2f00      	cmp	r7, #0
 800a350:	f280 8464 	bge.w	800ac1c <__ieee754_pow+0x9cc>
 800a354:	2000      	movs	r0, #0
 800a356:	2100      	movs	r1, #0
 800a358:	ec41 0b10 	vmov	d0, r0, r1
 800a35c:	b00d      	add	sp, #52	; 0x34
 800a35e:	ecbd 8b06 	vpop	{d8-d10}
 800a362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a366:	2102      	movs	r1, #2
 800a368:	e7e0      	b.n	800a32c <__ieee754_pow+0xdc>
 800a36a:	2f00      	cmp	r7, #0
 800a36c:	daf2      	bge.n	800a354 <__ieee754_pow+0x104>
 800a36e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800a372:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a376:	e7ef      	b.n	800a358 <__ieee754_pow+0x108>
 800a378:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800a37c:	d104      	bne.n	800a388 <__ieee754_pow+0x138>
 800a37e:	4610      	mov	r0, r2
 800a380:	4619      	mov	r1, r3
 800a382:	f7f6 f961 	bl	8000648 <__aeabi_dmul>
 800a386:	e7e7      	b.n	800a358 <__ieee754_pow+0x108>
 800a388:	493e      	ldr	r1, [pc, #248]	; (800a484 <__ieee754_pow+0x234>)
 800a38a:	428f      	cmp	r7, r1
 800a38c:	d10d      	bne.n	800a3aa <__ieee754_pow+0x15a>
 800a38e:	f1b9 0f00 	cmp.w	r9, #0
 800a392:	db0a      	blt.n	800a3aa <__ieee754_pow+0x15a>
 800a394:	ec43 2b10 	vmov	d0, r2, r3
 800a398:	b00d      	add	sp, #52	; 0x34
 800a39a:	ecbd 8b06 	vpop	{d8-d10}
 800a39e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a2:	f000 bc77 	b.w	800ac94 <__ieee754_sqrt>
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	9100      	str	r1, [sp, #0]
 800a3aa:	ec43 2b10 	vmov	d0, r2, r3
 800a3ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3b2:	f000 fd23 	bl	800adfc <fabs>
 800a3b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3ba:	ec51 0b10 	vmov	r0, r1, d0
 800a3be:	f1b8 0f00 	cmp.w	r8, #0
 800a3c2:	d12a      	bne.n	800a41a <__ieee754_pow+0x1ca>
 800a3c4:	b12c      	cbz	r4, 800a3d2 <__ieee754_pow+0x182>
 800a3c6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800a47c <__ieee754_pow+0x22c>
 800a3ca:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800a3ce:	45e6      	cmp	lr, ip
 800a3d0:	d123      	bne.n	800a41a <__ieee754_pow+0x1ca>
 800a3d2:	2f00      	cmp	r7, #0
 800a3d4:	da05      	bge.n	800a3e2 <__ieee754_pow+0x192>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	460b      	mov	r3, r1
 800a3da:	2000      	movs	r0, #0
 800a3dc:	4927      	ldr	r1, [pc, #156]	; (800a47c <__ieee754_pow+0x22c>)
 800a3de:	f7f6 fa5d 	bl	800089c <__aeabi_ddiv>
 800a3e2:	f1b9 0f00 	cmp.w	r9, #0
 800a3e6:	dab7      	bge.n	800a358 <__ieee754_pow+0x108>
 800a3e8:	9b00      	ldr	r3, [sp, #0]
 800a3ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a3ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a3f2:	4323      	orrs	r3, r4
 800a3f4:	d108      	bne.n	800a408 <__ieee754_pow+0x1b8>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	f7f5 ff6b 	bl	80002d8 <__aeabi_dsub>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	e78d      	b.n	800a324 <__ieee754_pow+0xd4>
 800a408:	9b00      	ldr	r3, [sp, #0]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d1a4      	bne.n	800a358 <__ieee754_pow+0x108>
 800a40e:	4602      	mov	r2, r0
 800a410:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a414:	4610      	mov	r0, r2
 800a416:	4619      	mov	r1, r3
 800a418:	e79e      	b.n	800a358 <__ieee754_pow+0x108>
 800a41a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800a41e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800a422:	950a      	str	r5, [sp, #40]	; 0x28
 800a424:	9d00      	ldr	r5, [sp, #0]
 800a426:	46ac      	mov	ip, r5
 800a428:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a42a:	ea5c 0505 	orrs.w	r5, ip, r5
 800a42e:	d0e4      	beq.n	800a3fa <__ieee754_pow+0x1aa>
 800a430:	4b15      	ldr	r3, [pc, #84]	; (800a488 <__ieee754_pow+0x238>)
 800a432:	429e      	cmp	r6, r3
 800a434:	f340 80fc 	ble.w	800a630 <__ieee754_pow+0x3e0>
 800a438:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a43c:	429e      	cmp	r6, r3
 800a43e:	4b10      	ldr	r3, [pc, #64]	; (800a480 <__ieee754_pow+0x230>)
 800a440:	dd07      	ble.n	800a452 <__ieee754_pow+0x202>
 800a442:	429c      	cmp	r4, r3
 800a444:	dc0a      	bgt.n	800a45c <__ieee754_pow+0x20c>
 800a446:	2f00      	cmp	r7, #0
 800a448:	da84      	bge.n	800a354 <__ieee754_pow+0x104>
 800a44a:	a307      	add	r3, pc, #28	; (adr r3, 800a468 <__ieee754_pow+0x218>)
 800a44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a450:	e795      	b.n	800a37e <__ieee754_pow+0x12e>
 800a452:	429c      	cmp	r4, r3
 800a454:	dbf7      	blt.n	800a446 <__ieee754_pow+0x1f6>
 800a456:	4b09      	ldr	r3, [pc, #36]	; (800a47c <__ieee754_pow+0x22c>)
 800a458:	429c      	cmp	r4, r3
 800a45a:	dd17      	ble.n	800a48c <__ieee754_pow+0x23c>
 800a45c:	2f00      	cmp	r7, #0
 800a45e:	dcf4      	bgt.n	800a44a <__ieee754_pow+0x1fa>
 800a460:	e778      	b.n	800a354 <__ieee754_pow+0x104>
 800a462:	bf00      	nop
 800a464:	f3af 8000 	nop.w
 800a468:	8800759c 	.word	0x8800759c
 800a46c:	7e37e43c 	.word	0x7e37e43c
 800a470:	7ff00000 	.word	0x7ff00000
 800a474:	0800bb10 	.word	0x0800bb10
 800a478:	433fffff 	.word	0x433fffff
 800a47c:	3ff00000 	.word	0x3ff00000
 800a480:	3fefffff 	.word	0x3fefffff
 800a484:	3fe00000 	.word	0x3fe00000
 800a488:	41e00000 	.word	0x41e00000
 800a48c:	4b64      	ldr	r3, [pc, #400]	; (800a620 <__ieee754_pow+0x3d0>)
 800a48e:	2200      	movs	r2, #0
 800a490:	f7f5 ff22 	bl	80002d8 <__aeabi_dsub>
 800a494:	a356      	add	r3, pc, #344	; (adr r3, 800a5f0 <__ieee754_pow+0x3a0>)
 800a496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49a:	4604      	mov	r4, r0
 800a49c:	460d      	mov	r5, r1
 800a49e:	f7f6 f8d3 	bl	8000648 <__aeabi_dmul>
 800a4a2:	a355      	add	r3, pc, #340	; (adr r3, 800a5f8 <__ieee754_pow+0x3a8>)
 800a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a8:	4606      	mov	r6, r0
 800a4aa:	460f      	mov	r7, r1
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	f7f6 f8ca 	bl	8000648 <__aeabi_dmul>
 800a4b4:	4b5b      	ldr	r3, [pc, #364]	; (800a624 <__ieee754_pow+0x3d4>)
 800a4b6:	4682      	mov	sl, r0
 800a4b8:	468b      	mov	fp, r1
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	4620      	mov	r0, r4
 800a4be:	4629      	mov	r1, r5
 800a4c0:	f7f6 f8c2 	bl	8000648 <__aeabi_dmul>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	a14d      	add	r1, pc, #308	; (adr r1, 800a600 <__ieee754_pow+0x3b0>)
 800a4ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4ce:	f7f5 ff03 	bl	80002d8 <__aeabi_dsub>
 800a4d2:	4622      	mov	r2, r4
 800a4d4:	462b      	mov	r3, r5
 800a4d6:	f7f6 f8b7 	bl	8000648 <__aeabi_dmul>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	2000      	movs	r0, #0
 800a4e0:	4951      	ldr	r1, [pc, #324]	; (800a628 <__ieee754_pow+0x3d8>)
 800a4e2:	f7f5 fef9 	bl	80002d8 <__aeabi_dsub>
 800a4e6:	4622      	mov	r2, r4
 800a4e8:	4680      	mov	r8, r0
 800a4ea:	4689      	mov	r9, r1
 800a4ec:	462b      	mov	r3, r5
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	f7f6 f8a9 	bl	8000648 <__aeabi_dmul>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	4649      	mov	r1, r9
 800a4fe:	f7f6 f8a3 	bl	8000648 <__aeabi_dmul>
 800a502:	a341      	add	r3, pc, #260	; (adr r3, 800a608 <__ieee754_pow+0x3b8>)
 800a504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a508:	f7f6 f89e 	bl	8000648 <__aeabi_dmul>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	4650      	mov	r0, sl
 800a512:	4659      	mov	r1, fp
 800a514:	f7f5 fee0 	bl	80002d8 <__aeabi_dsub>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	4680      	mov	r8, r0
 800a51e:	4689      	mov	r9, r1
 800a520:	4630      	mov	r0, r6
 800a522:	4639      	mov	r1, r7
 800a524:	f7f5 feda 	bl	80002dc <__adddf3>
 800a528:	2400      	movs	r4, #0
 800a52a:	4632      	mov	r2, r6
 800a52c:	463b      	mov	r3, r7
 800a52e:	4620      	mov	r0, r4
 800a530:	460d      	mov	r5, r1
 800a532:	f7f5 fed1 	bl	80002d8 <__aeabi_dsub>
 800a536:	4602      	mov	r2, r0
 800a538:	460b      	mov	r3, r1
 800a53a:	4640      	mov	r0, r8
 800a53c:	4649      	mov	r1, r9
 800a53e:	f7f5 fecb 	bl	80002d8 <__aeabi_dsub>
 800a542:	9b00      	ldr	r3, [sp, #0]
 800a544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a546:	3b01      	subs	r3, #1
 800a548:	4313      	orrs	r3, r2
 800a54a:	4682      	mov	sl, r0
 800a54c:	468b      	mov	fp, r1
 800a54e:	f040 81f1 	bne.w	800a934 <__ieee754_pow+0x6e4>
 800a552:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a610 <__ieee754_pow+0x3c0>
 800a556:	eeb0 8a47 	vmov.f32	s16, s14
 800a55a:	eef0 8a67 	vmov.f32	s17, s15
 800a55e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a562:	2600      	movs	r6, #0
 800a564:	4632      	mov	r2, r6
 800a566:	463b      	mov	r3, r7
 800a568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a56c:	f7f5 feb4 	bl	80002d8 <__aeabi_dsub>
 800a570:	4622      	mov	r2, r4
 800a572:	462b      	mov	r3, r5
 800a574:	f7f6 f868 	bl	8000648 <__aeabi_dmul>
 800a578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a57c:	4680      	mov	r8, r0
 800a57e:	4689      	mov	r9, r1
 800a580:	4650      	mov	r0, sl
 800a582:	4659      	mov	r1, fp
 800a584:	f7f6 f860 	bl	8000648 <__aeabi_dmul>
 800a588:	4602      	mov	r2, r0
 800a58a:	460b      	mov	r3, r1
 800a58c:	4640      	mov	r0, r8
 800a58e:	4649      	mov	r1, r9
 800a590:	f7f5 fea4 	bl	80002dc <__adddf3>
 800a594:	4632      	mov	r2, r6
 800a596:	463b      	mov	r3, r7
 800a598:	4680      	mov	r8, r0
 800a59a:	4689      	mov	r9, r1
 800a59c:	4620      	mov	r0, r4
 800a59e:	4629      	mov	r1, r5
 800a5a0:	f7f6 f852 	bl	8000648 <__aeabi_dmul>
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	460d      	mov	r5, r1
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	4640      	mov	r0, r8
 800a5b0:	f7f5 fe94 	bl	80002dc <__adddf3>
 800a5b4:	4b1d      	ldr	r3, [pc, #116]	; (800a62c <__ieee754_pow+0x3dc>)
 800a5b6:	4299      	cmp	r1, r3
 800a5b8:	ec45 4b19 	vmov	d9, r4, r5
 800a5bc:	4606      	mov	r6, r0
 800a5be:	460f      	mov	r7, r1
 800a5c0:	468b      	mov	fp, r1
 800a5c2:	f340 82fe 	ble.w	800abc2 <__ieee754_pow+0x972>
 800a5c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a5ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a5ce:	4303      	orrs	r3, r0
 800a5d0:	f000 81f0 	beq.w	800a9b4 <__ieee754_pow+0x764>
 800a5d4:	a310      	add	r3, pc, #64	; (adr r3, 800a618 <__ieee754_pow+0x3c8>)
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	ec51 0b18 	vmov	r0, r1, d8
 800a5de:	f7f6 f833 	bl	8000648 <__aeabi_dmul>
 800a5e2:	a30d      	add	r3, pc, #52	; (adr r3, 800a618 <__ieee754_pow+0x3c8>)
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	e6cb      	b.n	800a382 <__ieee754_pow+0x132>
 800a5ea:	bf00      	nop
 800a5ec:	f3af 8000 	nop.w
 800a5f0:	60000000 	.word	0x60000000
 800a5f4:	3ff71547 	.word	0x3ff71547
 800a5f8:	f85ddf44 	.word	0xf85ddf44
 800a5fc:	3e54ae0b 	.word	0x3e54ae0b
 800a600:	55555555 	.word	0x55555555
 800a604:	3fd55555 	.word	0x3fd55555
 800a608:	652b82fe 	.word	0x652b82fe
 800a60c:	3ff71547 	.word	0x3ff71547
 800a610:	00000000 	.word	0x00000000
 800a614:	bff00000 	.word	0xbff00000
 800a618:	8800759c 	.word	0x8800759c
 800a61c:	7e37e43c 	.word	0x7e37e43c
 800a620:	3ff00000 	.word	0x3ff00000
 800a624:	3fd00000 	.word	0x3fd00000
 800a628:	3fe00000 	.word	0x3fe00000
 800a62c:	408fffff 	.word	0x408fffff
 800a630:	4bd7      	ldr	r3, [pc, #860]	; (800a990 <__ieee754_pow+0x740>)
 800a632:	ea03 0309 	and.w	r3, r3, r9
 800a636:	2200      	movs	r2, #0
 800a638:	b92b      	cbnz	r3, 800a646 <__ieee754_pow+0x3f6>
 800a63a:	4bd6      	ldr	r3, [pc, #856]	; (800a994 <__ieee754_pow+0x744>)
 800a63c:	f7f6 f804 	bl	8000648 <__aeabi_dmul>
 800a640:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a644:	460c      	mov	r4, r1
 800a646:	1523      	asrs	r3, r4, #20
 800a648:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a64c:	4413      	add	r3, r2
 800a64e:	9309      	str	r3, [sp, #36]	; 0x24
 800a650:	4bd1      	ldr	r3, [pc, #836]	; (800a998 <__ieee754_pow+0x748>)
 800a652:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a656:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a65a:	429c      	cmp	r4, r3
 800a65c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a660:	dd08      	ble.n	800a674 <__ieee754_pow+0x424>
 800a662:	4bce      	ldr	r3, [pc, #824]	; (800a99c <__ieee754_pow+0x74c>)
 800a664:	429c      	cmp	r4, r3
 800a666:	f340 8163 	ble.w	800a930 <__ieee754_pow+0x6e0>
 800a66a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a66c:	3301      	adds	r3, #1
 800a66e:	9309      	str	r3, [sp, #36]	; 0x24
 800a670:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a674:	2400      	movs	r4, #0
 800a676:	00e3      	lsls	r3, r4, #3
 800a678:	930b      	str	r3, [sp, #44]	; 0x2c
 800a67a:	4bc9      	ldr	r3, [pc, #804]	; (800a9a0 <__ieee754_pow+0x750>)
 800a67c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a680:	ed93 7b00 	vldr	d7, [r3]
 800a684:	4629      	mov	r1, r5
 800a686:	ec53 2b17 	vmov	r2, r3, d7
 800a68a:	eeb0 8a47 	vmov.f32	s16, s14
 800a68e:	eef0 8a67 	vmov.f32	s17, s15
 800a692:	4682      	mov	sl, r0
 800a694:	f7f5 fe20 	bl	80002d8 <__aeabi_dsub>
 800a698:	4652      	mov	r2, sl
 800a69a:	4606      	mov	r6, r0
 800a69c:	460f      	mov	r7, r1
 800a69e:	462b      	mov	r3, r5
 800a6a0:	ec51 0b18 	vmov	r0, r1, d8
 800a6a4:	f7f5 fe1a 	bl	80002dc <__adddf3>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	49bd      	ldr	r1, [pc, #756]	; (800a9a4 <__ieee754_pow+0x754>)
 800a6b0:	f7f6 f8f4 	bl	800089c <__aeabi_ddiv>
 800a6b4:	ec41 0b19 	vmov	d9, r0, r1
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	4630      	mov	r0, r6
 800a6be:	4639      	mov	r1, r7
 800a6c0:	f7f5 ffc2 	bl	8000648 <__aeabi_dmul>
 800a6c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a6c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	9304      	str	r3, [sp, #16]
 800a6d4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a6d8:	46ab      	mov	fp, r5
 800a6da:	106d      	asrs	r5, r5, #1
 800a6dc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a6e0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a6e4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	4640      	mov	r0, r8
 800a6ec:	4649      	mov	r1, r9
 800a6ee:	4614      	mov	r4, r2
 800a6f0:	461d      	mov	r5, r3
 800a6f2:	f7f5 ffa9 	bl	8000648 <__aeabi_dmul>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	4639      	mov	r1, r7
 800a6fe:	f7f5 fdeb 	bl	80002d8 <__aeabi_dsub>
 800a702:	ec53 2b18 	vmov	r2, r3, d8
 800a706:	4606      	mov	r6, r0
 800a708:	460f      	mov	r7, r1
 800a70a:	4620      	mov	r0, r4
 800a70c:	4629      	mov	r1, r5
 800a70e:	f7f5 fde3 	bl	80002d8 <__aeabi_dsub>
 800a712:	4602      	mov	r2, r0
 800a714:	460b      	mov	r3, r1
 800a716:	4650      	mov	r0, sl
 800a718:	4659      	mov	r1, fp
 800a71a:	f7f5 fddd 	bl	80002d8 <__aeabi_dsub>
 800a71e:	4642      	mov	r2, r8
 800a720:	464b      	mov	r3, r9
 800a722:	f7f5 ff91 	bl	8000648 <__aeabi_dmul>
 800a726:	4602      	mov	r2, r0
 800a728:	460b      	mov	r3, r1
 800a72a:	4630      	mov	r0, r6
 800a72c:	4639      	mov	r1, r7
 800a72e:	f7f5 fdd3 	bl	80002d8 <__aeabi_dsub>
 800a732:	ec53 2b19 	vmov	r2, r3, d9
 800a736:	f7f5 ff87 	bl	8000648 <__aeabi_dmul>
 800a73a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a73e:	ec41 0b18 	vmov	d8, r0, r1
 800a742:	4610      	mov	r0, r2
 800a744:	4619      	mov	r1, r3
 800a746:	f7f5 ff7f 	bl	8000648 <__aeabi_dmul>
 800a74a:	a37d      	add	r3, pc, #500	; (adr r3, 800a940 <__ieee754_pow+0x6f0>)
 800a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a750:	4604      	mov	r4, r0
 800a752:	460d      	mov	r5, r1
 800a754:	f7f5 ff78 	bl	8000648 <__aeabi_dmul>
 800a758:	a37b      	add	r3, pc, #492	; (adr r3, 800a948 <__ieee754_pow+0x6f8>)
 800a75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75e:	f7f5 fdbd 	bl	80002dc <__adddf3>
 800a762:	4622      	mov	r2, r4
 800a764:	462b      	mov	r3, r5
 800a766:	f7f5 ff6f 	bl	8000648 <__aeabi_dmul>
 800a76a:	a379      	add	r3, pc, #484	; (adr r3, 800a950 <__ieee754_pow+0x700>)
 800a76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a770:	f7f5 fdb4 	bl	80002dc <__adddf3>
 800a774:	4622      	mov	r2, r4
 800a776:	462b      	mov	r3, r5
 800a778:	f7f5 ff66 	bl	8000648 <__aeabi_dmul>
 800a77c:	a376      	add	r3, pc, #472	; (adr r3, 800a958 <__ieee754_pow+0x708>)
 800a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a782:	f7f5 fdab 	bl	80002dc <__adddf3>
 800a786:	4622      	mov	r2, r4
 800a788:	462b      	mov	r3, r5
 800a78a:	f7f5 ff5d 	bl	8000648 <__aeabi_dmul>
 800a78e:	a374      	add	r3, pc, #464	; (adr r3, 800a960 <__ieee754_pow+0x710>)
 800a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a794:	f7f5 fda2 	bl	80002dc <__adddf3>
 800a798:	4622      	mov	r2, r4
 800a79a:	462b      	mov	r3, r5
 800a79c:	f7f5 ff54 	bl	8000648 <__aeabi_dmul>
 800a7a0:	a371      	add	r3, pc, #452	; (adr r3, 800a968 <__ieee754_pow+0x718>)
 800a7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a6:	f7f5 fd99 	bl	80002dc <__adddf3>
 800a7aa:	4622      	mov	r2, r4
 800a7ac:	4606      	mov	r6, r0
 800a7ae:	460f      	mov	r7, r1
 800a7b0:	462b      	mov	r3, r5
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	f7f5 ff47 	bl	8000648 <__aeabi_dmul>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4630      	mov	r0, r6
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	f7f5 ff41 	bl	8000648 <__aeabi_dmul>
 800a7c6:	4642      	mov	r2, r8
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	460d      	mov	r5, r1
 800a7cc:	464b      	mov	r3, r9
 800a7ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7d2:	f7f5 fd83 	bl	80002dc <__adddf3>
 800a7d6:	ec53 2b18 	vmov	r2, r3, d8
 800a7da:	f7f5 ff35 	bl	8000648 <__aeabi_dmul>
 800a7de:	4622      	mov	r2, r4
 800a7e0:	462b      	mov	r3, r5
 800a7e2:	f7f5 fd7b 	bl	80002dc <__adddf3>
 800a7e6:	4642      	mov	r2, r8
 800a7e8:	4682      	mov	sl, r0
 800a7ea:	468b      	mov	fp, r1
 800a7ec:	464b      	mov	r3, r9
 800a7ee:	4640      	mov	r0, r8
 800a7f0:	4649      	mov	r1, r9
 800a7f2:	f7f5 ff29 	bl	8000648 <__aeabi_dmul>
 800a7f6:	4b6c      	ldr	r3, [pc, #432]	; (800a9a8 <__ieee754_pow+0x758>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	460f      	mov	r7, r1
 800a7fe:	f7f5 fd6d 	bl	80002dc <__adddf3>
 800a802:	4652      	mov	r2, sl
 800a804:	465b      	mov	r3, fp
 800a806:	f7f5 fd69 	bl	80002dc <__adddf3>
 800a80a:	9c04      	ldr	r4, [sp, #16]
 800a80c:	460d      	mov	r5, r1
 800a80e:	4622      	mov	r2, r4
 800a810:	460b      	mov	r3, r1
 800a812:	4640      	mov	r0, r8
 800a814:	4649      	mov	r1, r9
 800a816:	f7f5 ff17 	bl	8000648 <__aeabi_dmul>
 800a81a:	4b63      	ldr	r3, [pc, #396]	; (800a9a8 <__ieee754_pow+0x758>)
 800a81c:	4680      	mov	r8, r0
 800a81e:	4689      	mov	r9, r1
 800a820:	2200      	movs	r2, #0
 800a822:	4620      	mov	r0, r4
 800a824:	4629      	mov	r1, r5
 800a826:	f7f5 fd57 	bl	80002d8 <__aeabi_dsub>
 800a82a:	4632      	mov	r2, r6
 800a82c:	463b      	mov	r3, r7
 800a82e:	f7f5 fd53 	bl	80002d8 <__aeabi_dsub>
 800a832:	4602      	mov	r2, r0
 800a834:	460b      	mov	r3, r1
 800a836:	4650      	mov	r0, sl
 800a838:	4659      	mov	r1, fp
 800a83a:	f7f5 fd4d 	bl	80002d8 <__aeabi_dsub>
 800a83e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a842:	f7f5 ff01 	bl	8000648 <__aeabi_dmul>
 800a846:	4622      	mov	r2, r4
 800a848:	4606      	mov	r6, r0
 800a84a:	460f      	mov	r7, r1
 800a84c:	462b      	mov	r3, r5
 800a84e:	ec51 0b18 	vmov	r0, r1, d8
 800a852:	f7f5 fef9 	bl	8000648 <__aeabi_dmul>
 800a856:	4602      	mov	r2, r0
 800a858:	460b      	mov	r3, r1
 800a85a:	4630      	mov	r0, r6
 800a85c:	4639      	mov	r1, r7
 800a85e:	f7f5 fd3d 	bl	80002dc <__adddf3>
 800a862:	4606      	mov	r6, r0
 800a864:	460f      	mov	r7, r1
 800a866:	4602      	mov	r2, r0
 800a868:	460b      	mov	r3, r1
 800a86a:	4640      	mov	r0, r8
 800a86c:	4649      	mov	r1, r9
 800a86e:	f7f5 fd35 	bl	80002dc <__adddf3>
 800a872:	9c04      	ldr	r4, [sp, #16]
 800a874:	a33e      	add	r3, pc, #248	; (adr r3, 800a970 <__ieee754_pow+0x720>)
 800a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87a:	4620      	mov	r0, r4
 800a87c:	460d      	mov	r5, r1
 800a87e:	f7f5 fee3 	bl	8000648 <__aeabi_dmul>
 800a882:	4642      	mov	r2, r8
 800a884:	ec41 0b18 	vmov	d8, r0, r1
 800a888:	464b      	mov	r3, r9
 800a88a:	4620      	mov	r0, r4
 800a88c:	4629      	mov	r1, r5
 800a88e:	f7f5 fd23 	bl	80002d8 <__aeabi_dsub>
 800a892:	4602      	mov	r2, r0
 800a894:	460b      	mov	r3, r1
 800a896:	4630      	mov	r0, r6
 800a898:	4639      	mov	r1, r7
 800a89a:	f7f5 fd1d 	bl	80002d8 <__aeabi_dsub>
 800a89e:	a336      	add	r3, pc, #216	; (adr r3, 800a978 <__ieee754_pow+0x728>)
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	f7f5 fed0 	bl	8000648 <__aeabi_dmul>
 800a8a8:	a335      	add	r3, pc, #212	; (adr r3, 800a980 <__ieee754_pow+0x730>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	460f      	mov	r7, r1
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	f7f5 fec7 	bl	8000648 <__aeabi_dmul>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	460b      	mov	r3, r1
 800a8be:	4630      	mov	r0, r6
 800a8c0:	4639      	mov	r1, r7
 800a8c2:	f7f5 fd0b 	bl	80002dc <__adddf3>
 800a8c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8c8:	4b38      	ldr	r3, [pc, #224]	; (800a9ac <__ieee754_pow+0x75c>)
 800a8ca:	4413      	add	r3, r2
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	f7f5 fd04 	bl	80002dc <__adddf3>
 800a8d4:	4682      	mov	sl, r0
 800a8d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8d8:	468b      	mov	fp, r1
 800a8da:	f7f5 fe4b 	bl	8000574 <__aeabi_i2d>
 800a8de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8e0:	4b33      	ldr	r3, [pc, #204]	; (800a9b0 <__ieee754_pow+0x760>)
 800a8e2:	4413      	add	r3, r2
 800a8e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8e8:	4606      	mov	r6, r0
 800a8ea:	460f      	mov	r7, r1
 800a8ec:	4652      	mov	r2, sl
 800a8ee:	465b      	mov	r3, fp
 800a8f0:	ec51 0b18 	vmov	r0, r1, d8
 800a8f4:	f7f5 fcf2 	bl	80002dc <__adddf3>
 800a8f8:	4642      	mov	r2, r8
 800a8fa:	464b      	mov	r3, r9
 800a8fc:	f7f5 fcee 	bl	80002dc <__adddf3>
 800a900:	4632      	mov	r2, r6
 800a902:	463b      	mov	r3, r7
 800a904:	f7f5 fcea 	bl	80002dc <__adddf3>
 800a908:	9c04      	ldr	r4, [sp, #16]
 800a90a:	4632      	mov	r2, r6
 800a90c:	463b      	mov	r3, r7
 800a90e:	4620      	mov	r0, r4
 800a910:	460d      	mov	r5, r1
 800a912:	f7f5 fce1 	bl	80002d8 <__aeabi_dsub>
 800a916:	4642      	mov	r2, r8
 800a918:	464b      	mov	r3, r9
 800a91a:	f7f5 fcdd 	bl	80002d8 <__aeabi_dsub>
 800a91e:	ec53 2b18 	vmov	r2, r3, d8
 800a922:	f7f5 fcd9 	bl	80002d8 <__aeabi_dsub>
 800a926:	4602      	mov	r2, r0
 800a928:	460b      	mov	r3, r1
 800a92a:	4650      	mov	r0, sl
 800a92c:	4659      	mov	r1, fp
 800a92e:	e606      	b.n	800a53e <__ieee754_pow+0x2ee>
 800a930:	2401      	movs	r4, #1
 800a932:	e6a0      	b.n	800a676 <__ieee754_pow+0x426>
 800a934:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a988 <__ieee754_pow+0x738>
 800a938:	e60d      	b.n	800a556 <__ieee754_pow+0x306>
 800a93a:	bf00      	nop
 800a93c:	f3af 8000 	nop.w
 800a940:	4a454eef 	.word	0x4a454eef
 800a944:	3fca7e28 	.word	0x3fca7e28
 800a948:	93c9db65 	.word	0x93c9db65
 800a94c:	3fcd864a 	.word	0x3fcd864a
 800a950:	a91d4101 	.word	0xa91d4101
 800a954:	3fd17460 	.word	0x3fd17460
 800a958:	518f264d 	.word	0x518f264d
 800a95c:	3fd55555 	.word	0x3fd55555
 800a960:	db6fabff 	.word	0xdb6fabff
 800a964:	3fdb6db6 	.word	0x3fdb6db6
 800a968:	33333303 	.word	0x33333303
 800a96c:	3fe33333 	.word	0x3fe33333
 800a970:	e0000000 	.word	0xe0000000
 800a974:	3feec709 	.word	0x3feec709
 800a978:	dc3a03fd 	.word	0xdc3a03fd
 800a97c:	3feec709 	.word	0x3feec709
 800a980:	145b01f5 	.word	0x145b01f5
 800a984:	be3e2fe0 	.word	0xbe3e2fe0
 800a988:	00000000 	.word	0x00000000
 800a98c:	3ff00000 	.word	0x3ff00000
 800a990:	7ff00000 	.word	0x7ff00000
 800a994:	43400000 	.word	0x43400000
 800a998:	0003988e 	.word	0x0003988e
 800a99c:	000bb679 	.word	0x000bb679
 800a9a0:	0800bc20 	.word	0x0800bc20
 800a9a4:	3ff00000 	.word	0x3ff00000
 800a9a8:	40080000 	.word	0x40080000
 800a9ac:	0800bc40 	.word	0x0800bc40
 800a9b0:	0800bc30 	.word	0x0800bc30
 800a9b4:	a3b5      	add	r3, pc, #724	; (adr r3, 800ac8c <__ieee754_pow+0xa3c>)
 800a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ba:	4640      	mov	r0, r8
 800a9bc:	4649      	mov	r1, r9
 800a9be:	f7f5 fc8d 	bl	80002dc <__adddf3>
 800a9c2:	4622      	mov	r2, r4
 800a9c4:	ec41 0b1a 	vmov	d10, r0, r1
 800a9c8:	462b      	mov	r3, r5
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	4639      	mov	r1, r7
 800a9ce:	f7f5 fc83 	bl	80002d8 <__aeabi_dsub>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	ec51 0b1a 	vmov	r0, r1, d10
 800a9da:	f7f6 f8c5 	bl	8000b68 <__aeabi_dcmpgt>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	f47f adf8 	bne.w	800a5d4 <__ieee754_pow+0x384>
 800a9e4:	4aa4      	ldr	r2, [pc, #656]	; (800ac78 <__ieee754_pow+0xa28>)
 800a9e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	f340 810b 	ble.w	800ac06 <__ieee754_pow+0x9b6>
 800a9f0:	151b      	asrs	r3, r3, #20
 800a9f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a9f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a9fa:	fa4a f303 	asr.w	r3, sl, r3
 800a9fe:	445b      	add	r3, fp
 800aa00:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800aa04:	4e9d      	ldr	r6, [pc, #628]	; (800ac7c <__ieee754_pow+0xa2c>)
 800aa06:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800aa0a:	4116      	asrs	r6, r2
 800aa0c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800aa10:	2000      	movs	r0, #0
 800aa12:	ea23 0106 	bic.w	r1, r3, r6
 800aa16:	f1c2 0214 	rsb	r2, r2, #20
 800aa1a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800aa1e:	fa4a fa02 	asr.w	sl, sl, r2
 800aa22:	f1bb 0f00 	cmp.w	fp, #0
 800aa26:	4602      	mov	r2, r0
 800aa28:	460b      	mov	r3, r1
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	bfb8      	it	lt
 800aa30:	f1ca 0a00 	rsblt	sl, sl, #0
 800aa34:	f7f5 fc50 	bl	80002d8 <__aeabi_dsub>
 800aa38:	ec41 0b19 	vmov	d9, r0, r1
 800aa3c:	4642      	mov	r2, r8
 800aa3e:	464b      	mov	r3, r9
 800aa40:	ec51 0b19 	vmov	r0, r1, d9
 800aa44:	f7f5 fc4a 	bl	80002dc <__adddf3>
 800aa48:	2400      	movs	r4, #0
 800aa4a:	a379      	add	r3, pc, #484	; (adr r3, 800ac30 <__ieee754_pow+0x9e0>)
 800aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa50:	4620      	mov	r0, r4
 800aa52:	460d      	mov	r5, r1
 800aa54:	f7f5 fdf8 	bl	8000648 <__aeabi_dmul>
 800aa58:	ec53 2b19 	vmov	r2, r3, d9
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	460f      	mov	r7, r1
 800aa60:	4620      	mov	r0, r4
 800aa62:	4629      	mov	r1, r5
 800aa64:	f7f5 fc38 	bl	80002d8 <__aeabi_dsub>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	4640      	mov	r0, r8
 800aa6e:	4649      	mov	r1, r9
 800aa70:	f7f5 fc32 	bl	80002d8 <__aeabi_dsub>
 800aa74:	a370      	add	r3, pc, #448	; (adr r3, 800ac38 <__ieee754_pow+0x9e8>)
 800aa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7a:	f7f5 fde5 	bl	8000648 <__aeabi_dmul>
 800aa7e:	a370      	add	r3, pc, #448	; (adr r3, 800ac40 <__ieee754_pow+0x9f0>)
 800aa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa84:	4680      	mov	r8, r0
 800aa86:	4689      	mov	r9, r1
 800aa88:	4620      	mov	r0, r4
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	f7f5 fddc 	bl	8000648 <__aeabi_dmul>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	4640      	mov	r0, r8
 800aa96:	4649      	mov	r1, r9
 800aa98:	f7f5 fc20 	bl	80002dc <__adddf3>
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	460d      	mov	r5, r1
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	4639      	mov	r1, r7
 800aaa8:	f7f5 fc18 	bl	80002dc <__adddf3>
 800aaac:	4632      	mov	r2, r6
 800aaae:	463b      	mov	r3, r7
 800aab0:	4680      	mov	r8, r0
 800aab2:	4689      	mov	r9, r1
 800aab4:	f7f5 fc10 	bl	80002d8 <__aeabi_dsub>
 800aab8:	4602      	mov	r2, r0
 800aaba:	460b      	mov	r3, r1
 800aabc:	4620      	mov	r0, r4
 800aabe:	4629      	mov	r1, r5
 800aac0:	f7f5 fc0a 	bl	80002d8 <__aeabi_dsub>
 800aac4:	4642      	mov	r2, r8
 800aac6:	4606      	mov	r6, r0
 800aac8:	460f      	mov	r7, r1
 800aaca:	464b      	mov	r3, r9
 800aacc:	4640      	mov	r0, r8
 800aace:	4649      	mov	r1, r9
 800aad0:	f7f5 fdba 	bl	8000648 <__aeabi_dmul>
 800aad4:	a35c      	add	r3, pc, #368	; (adr r3, 800ac48 <__ieee754_pow+0x9f8>)
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	4604      	mov	r4, r0
 800aadc:	460d      	mov	r5, r1
 800aade:	f7f5 fdb3 	bl	8000648 <__aeabi_dmul>
 800aae2:	a35b      	add	r3, pc, #364	; (adr r3, 800ac50 <__ieee754_pow+0xa00>)
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	f7f5 fbf6 	bl	80002d8 <__aeabi_dsub>
 800aaec:	4622      	mov	r2, r4
 800aaee:	462b      	mov	r3, r5
 800aaf0:	f7f5 fdaa 	bl	8000648 <__aeabi_dmul>
 800aaf4:	a358      	add	r3, pc, #352	; (adr r3, 800ac58 <__ieee754_pow+0xa08>)
 800aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafa:	f7f5 fbef 	bl	80002dc <__adddf3>
 800aafe:	4622      	mov	r2, r4
 800ab00:	462b      	mov	r3, r5
 800ab02:	f7f5 fda1 	bl	8000648 <__aeabi_dmul>
 800ab06:	a356      	add	r3, pc, #344	; (adr r3, 800ac60 <__ieee754_pow+0xa10>)
 800ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0c:	f7f5 fbe4 	bl	80002d8 <__aeabi_dsub>
 800ab10:	4622      	mov	r2, r4
 800ab12:	462b      	mov	r3, r5
 800ab14:	f7f5 fd98 	bl	8000648 <__aeabi_dmul>
 800ab18:	a353      	add	r3, pc, #332	; (adr r3, 800ac68 <__ieee754_pow+0xa18>)
 800ab1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1e:	f7f5 fbdd 	bl	80002dc <__adddf3>
 800ab22:	4622      	mov	r2, r4
 800ab24:	462b      	mov	r3, r5
 800ab26:	f7f5 fd8f 	bl	8000648 <__aeabi_dmul>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4640      	mov	r0, r8
 800ab30:	4649      	mov	r1, r9
 800ab32:	f7f5 fbd1 	bl	80002d8 <__aeabi_dsub>
 800ab36:	4604      	mov	r4, r0
 800ab38:	460d      	mov	r5, r1
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	4640      	mov	r0, r8
 800ab40:	4649      	mov	r1, r9
 800ab42:	f7f5 fd81 	bl	8000648 <__aeabi_dmul>
 800ab46:	2200      	movs	r2, #0
 800ab48:	ec41 0b19 	vmov	d9, r0, r1
 800ab4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab50:	4620      	mov	r0, r4
 800ab52:	4629      	mov	r1, r5
 800ab54:	f7f5 fbc0 	bl	80002d8 <__aeabi_dsub>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	ec51 0b19 	vmov	r0, r1, d9
 800ab60:	f7f5 fe9c 	bl	800089c <__aeabi_ddiv>
 800ab64:	4632      	mov	r2, r6
 800ab66:	4604      	mov	r4, r0
 800ab68:	460d      	mov	r5, r1
 800ab6a:	463b      	mov	r3, r7
 800ab6c:	4640      	mov	r0, r8
 800ab6e:	4649      	mov	r1, r9
 800ab70:	f7f5 fd6a 	bl	8000648 <__aeabi_dmul>
 800ab74:	4632      	mov	r2, r6
 800ab76:	463b      	mov	r3, r7
 800ab78:	f7f5 fbb0 	bl	80002dc <__adddf3>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4620      	mov	r0, r4
 800ab82:	4629      	mov	r1, r5
 800ab84:	f7f5 fba8 	bl	80002d8 <__aeabi_dsub>
 800ab88:	4642      	mov	r2, r8
 800ab8a:	464b      	mov	r3, r9
 800ab8c:	f7f5 fba4 	bl	80002d8 <__aeabi_dsub>
 800ab90:	460b      	mov	r3, r1
 800ab92:	4602      	mov	r2, r0
 800ab94:	493a      	ldr	r1, [pc, #232]	; (800ac80 <__ieee754_pow+0xa30>)
 800ab96:	2000      	movs	r0, #0
 800ab98:	f7f5 fb9e 	bl	80002d8 <__aeabi_dsub>
 800ab9c:	e9cd 0100 	strd	r0, r1, [sp]
 800aba0:	9b01      	ldr	r3, [sp, #4]
 800aba2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800aba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abaa:	da2f      	bge.n	800ac0c <__ieee754_pow+0x9bc>
 800abac:	4650      	mov	r0, sl
 800abae:	ed9d 0b00 	vldr	d0, [sp]
 800abb2:	f000 f9cd 	bl	800af50 <scalbn>
 800abb6:	ec51 0b10 	vmov	r0, r1, d0
 800abba:	ec53 2b18 	vmov	r2, r3, d8
 800abbe:	f7ff bbe0 	b.w	800a382 <__ieee754_pow+0x132>
 800abc2:	4b30      	ldr	r3, [pc, #192]	; (800ac84 <__ieee754_pow+0xa34>)
 800abc4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800abc8:	429e      	cmp	r6, r3
 800abca:	f77f af0b 	ble.w	800a9e4 <__ieee754_pow+0x794>
 800abce:	4b2e      	ldr	r3, [pc, #184]	; (800ac88 <__ieee754_pow+0xa38>)
 800abd0:	440b      	add	r3, r1
 800abd2:	4303      	orrs	r3, r0
 800abd4:	d00b      	beq.n	800abee <__ieee754_pow+0x99e>
 800abd6:	a326      	add	r3, pc, #152	; (adr r3, 800ac70 <__ieee754_pow+0xa20>)
 800abd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abdc:	ec51 0b18 	vmov	r0, r1, d8
 800abe0:	f7f5 fd32 	bl	8000648 <__aeabi_dmul>
 800abe4:	a322      	add	r3, pc, #136	; (adr r3, 800ac70 <__ieee754_pow+0xa20>)
 800abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abea:	f7ff bbca 	b.w	800a382 <__ieee754_pow+0x132>
 800abee:	4622      	mov	r2, r4
 800abf0:	462b      	mov	r3, r5
 800abf2:	f7f5 fb71 	bl	80002d8 <__aeabi_dsub>
 800abf6:	4642      	mov	r2, r8
 800abf8:	464b      	mov	r3, r9
 800abfa:	f7f5 ffab 	bl	8000b54 <__aeabi_dcmpge>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	f43f aef0 	beq.w	800a9e4 <__ieee754_pow+0x794>
 800ac04:	e7e7      	b.n	800abd6 <__ieee754_pow+0x986>
 800ac06:	f04f 0a00 	mov.w	sl, #0
 800ac0a:	e717      	b.n	800aa3c <__ieee754_pow+0x7ec>
 800ac0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac10:	4619      	mov	r1, r3
 800ac12:	e7d2      	b.n	800abba <__ieee754_pow+0x96a>
 800ac14:	491a      	ldr	r1, [pc, #104]	; (800ac80 <__ieee754_pow+0xa30>)
 800ac16:	2000      	movs	r0, #0
 800ac18:	f7ff bb9e 	b.w	800a358 <__ieee754_pow+0x108>
 800ac1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac20:	f7ff bb9a 	b.w	800a358 <__ieee754_pow+0x108>
 800ac24:	9000      	str	r0, [sp, #0]
 800ac26:	f7ff bb76 	b.w	800a316 <__ieee754_pow+0xc6>
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	f7ff bb60 	b.w	800a2f0 <__ieee754_pow+0xa0>
 800ac30:	00000000 	.word	0x00000000
 800ac34:	3fe62e43 	.word	0x3fe62e43
 800ac38:	fefa39ef 	.word	0xfefa39ef
 800ac3c:	3fe62e42 	.word	0x3fe62e42
 800ac40:	0ca86c39 	.word	0x0ca86c39
 800ac44:	be205c61 	.word	0xbe205c61
 800ac48:	72bea4d0 	.word	0x72bea4d0
 800ac4c:	3e663769 	.word	0x3e663769
 800ac50:	c5d26bf1 	.word	0xc5d26bf1
 800ac54:	3ebbbd41 	.word	0x3ebbbd41
 800ac58:	af25de2c 	.word	0xaf25de2c
 800ac5c:	3f11566a 	.word	0x3f11566a
 800ac60:	16bebd93 	.word	0x16bebd93
 800ac64:	3f66c16c 	.word	0x3f66c16c
 800ac68:	5555553e 	.word	0x5555553e
 800ac6c:	3fc55555 	.word	0x3fc55555
 800ac70:	c2f8f359 	.word	0xc2f8f359
 800ac74:	01a56e1f 	.word	0x01a56e1f
 800ac78:	3fe00000 	.word	0x3fe00000
 800ac7c:	000fffff 	.word	0x000fffff
 800ac80:	3ff00000 	.word	0x3ff00000
 800ac84:	4090cbff 	.word	0x4090cbff
 800ac88:	3f6f3400 	.word	0x3f6f3400
 800ac8c:	652b82fe 	.word	0x652b82fe
 800ac90:	3c971547 	.word	0x3c971547

0800ac94 <__ieee754_sqrt>:
 800ac94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac98:	ec55 4b10 	vmov	r4, r5, d0
 800ac9c:	4e56      	ldr	r6, [pc, #344]	; (800adf8 <__ieee754_sqrt+0x164>)
 800ac9e:	43ae      	bics	r6, r5
 800aca0:	ee10 0a10 	vmov	r0, s0
 800aca4:	ee10 3a10 	vmov	r3, s0
 800aca8:	4629      	mov	r1, r5
 800acaa:	462a      	mov	r2, r5
 800acac:	d110      	bne.n	800acd0 <__ieee754_sqrt+0x3c>
 800acae:	ee10 2a10 	vmov	r2, s0
 800acb2:	462b      	mov	r3, r5
 800acb4:	f7f5 fcc8 	bl	8000648 <__aeabi_dmul>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	4620      	mov	r0, r4
 800acbe:	4629      	mov	r1, r5
 800acc0:	f7f5 fb0c 	bl	80002dc <__adddf3>
 800acc4:	4604      	mov	r4, r0
 800acc6:	460d      	mov	r5, r1
 800acc8:	ec45 4b10 	vmov	d0, r4, r5
 800accc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd0:	2d00      	cmp	r5, #0
 800acd2:	dc10      	bgt.n	800acf6 <__ieee754_sqrt+0x62>
 800acd4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800acd8:	4330      	orrs	r0, r6
 800acda:	d0f5      	beq.n	800acc8 <__ieee754_sqrt+0x34>
 800acdc:	b15d      	cbz	r5, 800acf6 <__ieee754_sqrt+0x62>
 800acde:	ee10 2a10 	vmov	r2, s0
 800ace2:	462b      	mov	r3, r5
 800ace4:	ee10 0a10 	vmov	r0, s0
 800ace8:	f7f5 faf6 	bl	80002d8 <__aeabi_dsub>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	f7f5 fdd4 	bl	800089c <__aeabi_ddiv>
 800acf4:	e7e6      	b.n	800acc4 <__ieee754_sqrt+0x30>
 800acf6:	1509      	asrs	r1, r1, #20
 800acf8:	d076      	beq.n	800ade8 <__ieee754_sqrt+0x154>
 800acfa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800acfe:	07ce      	lsls	r6, r1, #31
 800ad00:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ad04:	bf5e      	ittt	pl
 800ad06:	0fda      	lsrpl	r2, r3, #31
 800ad08:	005b      	lslpl	r3, r3, #1
 800ad0a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ad0e:	0fda      	lsrs	r2, r3, #31
 800ad10:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ad14:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ad18:	2000      	movs	r0, #0
 800ad1a:	106d      	asrs	r5, r5, #1
 800ad1c:	005b      	lsls	r3, r3, #1
 800ad1e:	f04f 0e16 	mov.w	lr, #22
 800ad22:	4684      	mov	ip, r0
 800ad24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad28:	eb0c 0401 	add.w	r4, ip, r1
 800ad2c:	4294      	cmp	r4, r2
 800ad2e:	bfde      	ittt	le
 800ad30:	1b12      	suble	r2, r2, r4
 800ad32:	eb04 0c01 	addle.w	ip, r4, r1
 800ad36:	1840      	addle	r0, r0, r1
 800ad38:	0052      	lsls	r2, r2, #1
 800ad3a:	f1be 0e01 	subs.w	lr, lr, #1
 800ad3e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ad42:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ad46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad4a:	d1ed      	bne.n	800ad28 <__ieee754_sqrt+0x94>
 800ad4c:	4671      	mov	r1, lr
 800ad4e:	2720      	movs	r7, #32
 800ad50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ad54:	4562      	cmp	r2, ip
 800ad56:	eb04 060e 	add.w	r6, r4, lr
 800ad5a:	dc02      	bgt.n	800ad62 <__ieee754_sqrt+0xce>
 800ad5c:	d113      	bne.n	800ad86 <__ieee754_sqrt+0xf2>
 800ad5e:	429e      	cmp	r6, r3
 800ad60:	d811      	bhi.n	800ad86 <__ieee754_sqrt+0xf2>
 800ad62:	2e00      	cmp	r6, #0
 800ad64:	eb06 0e04 	add.w	lr, r6, r4
 800ad68:	da43      	bge.n	800adf2 <__ieee754_sqrt+0x15e>
 800ad6a:	f1be 0f00 	cmp.w	lr, #0
 800ad6e:	db40      	blt.n	800adf2 <__ieee754_sqrt+0x15e>
 800ad70:	f10c 0801 	add.w	r8, ip, #1
 800ad74:	eba2 020c 	sub.w	r2, r2, ip
 800ad78:	429e      	cmp	r6, r3
 800ad7a:	bf88      	it	hi
 800ad7c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ad80:	1b9b      	subs	r3, r3, r6
 800ad82:	4421      	add	r1, r4
 800ad84:	46c4      	mov	ip, r8
 800ad86:	0052      	lsls	r2, r2, #1
 800ad88:	3f01      	subs	r7, #1
 800ad8a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ad8e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ad92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad96:	d1dd      	bne.n	800ad54 <__ieee754_sqrt+0xc0>
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	d006      	beq.n	800adaa <__ieee754_sqrt+0x116>
 800ad9c:	1c4c      	adds	r4, r1, #1
 800ad9e:	bf13      	iteet	ne
 800ada0:	3101      	addne	r1, #1
 800ada2:	3001      	addeq	r0, #1
 800ada4:	4639      	moveq	r1, r7
 800ada6:	f021 0101 	bicne.w	r1, r1, #1
 800adaa:	1043      	asrs	r3, r0, #1
 800adac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800adb0:	0849      	lsrs	r1, r1, #1
 800adb2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800adb6:	07c2      	lsls	r2, r0, #31
 800adb8:	bf48      	it	mi
 800adba:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800adbe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800adc2:	460c      	mov	r4, r1
 800adc4:	463d      	mov	r5, r7
 800adc6:	e77f      	b.n	800acc8 <__ieee754_sqrt+0x34>
 800adc8:	0ada      	lsrs	r2, r3, #11
 800adca:	3815      	subs	r0, #21
 800adcc:	055b      	lsls	r3, r3, #21
 800adce:	2a00      	cmp	r2, #0
 800add0:	d0fa      	beq.n	800adc8 <__ieee754_sqrt+0x134>
 800add2:	02d7      	lsls	r7, r2, #11
 800add4:	d50a      	bpl.n	800adec <__ieee754_sqrt+0x158>
 800add6:	f1c1 0420 	rsb	r4, r1, #32
 800adda:	fa23 f404 	lsr.w	r4, r3, r4
 800adde:	1e4d      	subs	r5, r1, #1
 800ade0:	408b      	lsls	r3, r1
 800ade2:	4322      	orrs	r2, r4
 800ade4:	1b41      	subs	r1, r0, r5
 800ade6:	e788      	b.n	800acfa <__ieee754_sqrt+0x66>
 800ade8:	4608      	mov	r0, r1
 800adea:	e7f0      	b.n	800adce <__ieee754_sqrt+0x13a>
 800adec:	0052      	lsls	r2, r2, #1
 800adee:	3101      	adds	r1, #1
 800adf0:	e7ef      	b.n	800add2 <__ieee754_sqrt+0x13e>
 800adf2:	46e0      	mov	r8, ip
 800adf4:	e7be      	b.n	800ad74 <__ieee754_sqrt+0xe0>
 800adf6:	bf00      	nop
 800adf8:	7ff00000 	.word	0x7ff00000

0800adfc <fabs>:
 800adfc:	ec51 0b10 	vmov	r0, r1, d0
 800ae00:	ee10 2a10 	vmov	r2, s0
 800ae04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae08:	ec43 2b10 	vmov	d0, r2, r3
 800ae0c:	4770      	bx	lr

0800ae0e <finite>:
 800ae0e:	b082      	sub	sp, #8
 800ae10:	ed8d 0b00 	vstr	d0, [sp]
 800ae14:	9801      	ldr	r0, [sp, #4]
 800ae16:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ae1a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ae1e:	0fc0      	lsrs	r0, r0, #31
 800ae20:	b002      	add	sp, #8
 800ae22:	4770      	bx	lr
 800ae24:	0000      	movs	r0, r0
	...

0800ae28 <nan>:
 800ae28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ae30 <nan+0x8>
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	00000000 	.word	0x00000000
 800ae34:	7ff80000 	.word	0x7ff80000

0800ae38 <rint>:
 800ae38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae3a:	ec51 0b10 	vmov	r0, r1, d0
 800ae3e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ae42:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ae46:	2e13      	cmp	r6, #19
 800ae48:	ee10 4a10 	vmov	r4, s0
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ae52:	dc58      	bgt.n	800af06 <rint+0xce>
 800ae54:	2e00      	cmp	r6, #0
 800ae56:	da2b      	bge.n	800aeb0 <rint+0x78>
 800ae58:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ae5c:	4302      	orrs	r2, r0
 800ae5e:	d023      	beq.n	800aea8 <rint+0x70>
 800ae60:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ae64:	4302      	orrs	r2, r0
 800ae66:	4254      	negs	r4, r2
 800ae68:	4314      	orrs	r4, r2
 800ae6a:	0c4b      	lsrs	r3, r1, #17
 800ae6c:	0b24      	lsrs	r4, r4, #12
 800ae6e:	045b      	lsls	r3, r3, #17
 800ae70:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800ae74:	ea44 0103 	orr.w	r1, r4, r3
 800ae78:	4b32      	ldr	r3, [pc, #200]	; (800af44 <rint+0x10c>)
 800ae7a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ae7e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ae82:	4602      	mov	r2, r0
 800ae84:	460b      	mov	r3, r1
 800ae86:	4630      	mov	r0, r6
 800ae88:	4639      	mov	r1, r7
 800ae8a:	f7f5 fa27 	bl	80002dc <__adddf3>
 800ae8e:	e9cd 0100 	strd	r0, r1, [sp]
 800ae92:	463b      	mov	r3, r7
 800ae94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae98:	4632      	mov	r2, r6
 800ae9a:	f7f5 fa1d 	bl	80002d8 <__aeabi_dsub>
 800ae9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aea2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800aea6:	4639      	mov	r1, r7
 800aea8:	ec41 0b10 	vmov	d0, r0, r1
 800aeac:	b003      	add	sp, #12
 800aeae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeb0:	4a25      	ldr	r2, [pc, #148]	; (800af48 <rint+0x110>)
 800aeb2:	4132      	asrs	r2, r6
 800aeb4:	ea01 0702 	and.w	r7, r1, r2
 800aeb8:	4307      	orrs	r7, r0
 800aeba:	d0f5      	beq.n	800aea8 <rint+0x70>
 800aebc:	0851      	lsrs	r1, r2, #1
 800aebe:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800aec2:	4314      	orrs	r4, r2
 800aec4:	d00c      	beq.n	800aee0 <rint+0xa8>
 800aec6:	ea23 0201 	bic.w	r2, r3, r1
 800aeca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aece:	2e13      	cmp	r6, #19
 800aed0:	fa43 f606 	asr.w	r6, r3, r6
 800aed4:	bf0c      	ite	eq
 800aed6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800aeda:	2400      	movne	r4, #0
 800aedc:	ea42 0306 	orr.w	r3, r2, r6
 800aee0:	4918      	ldr	r1, [pc, #96]	; (800af44 <rint+0x10c>)
 800aee2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800aee6:	4622      	mov	r2, r4
 800aee8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aeec:	4620      	mov	r0, r4
 800aeee:	4629      	mov	r1, r5
 800aef0:	f7f5 f9f4 	bl	80002dc <__adddf3>
 800aef4:	e9cd 0100 	strd	r0, r1, [sp]
 800aef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aefc:	4622      	mov	r2, r4
 800aefe:	462b      	mov	r3, r5
 800af00:	f7f5 f9ea 	bl	80002d8 <__aeabi_dsub>
 800af04:	e7d0      	b.n	800aea8 <rint+0x70>
 800af06:	2e33      	cmp	r6, #51	; 0x33
 800af08:	dd07      	ble.n	800af1a <rint+0xe2>
 800af0a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800af0e:	d1cb      	bne.n	800aea8 <rint+0x70>
 800af10:	ee10 2a10 	vmov	r2, s0
 800af14:	f7f5 f9e2 	bl	80002dc <__adddf3>
 800af18:	e7c6      	b.n	800aea8 <rint+0x70>
 800af1a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800af1e:	f04f 36ff 	mov.w	r6, #4294967295
 800af22:	40d6      	lsrs	r6, r2
 800af24:	4230      	tst	r0, r6
 800af26:	d0bf      	beq.n	800aea8 <rint+0x70>
 800af28:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800af2c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800af30:	bf1f      	itttt	ne
 800af32:	ea24 0101 	bicne.w	r1, r4, r1
 800af36:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800af3a:	fa44 f202 	asrne.w	r2, r4, r2
 800af3e:	ea41 0402 	orrne.w	r4, r1, r2
 800af42:	e7cd      	b.n	800aee0 <rint+0xa8>
 800af44:	0800bc50 	.word	0x0800bc50
 800af48:	000fffff 	.word	0x000fffff
 800af4c:	00000000 	.word	0x00000000

0800af50 <scalbn>:
 800af50:	b570      	push	{r4, r5, r6, lr}
 800af52:	ec55 4b10 	vmov	r4, r5, d0
 800af56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800af5a:	4606      	mov	r6, r0
 800af5c:	462b      	mov	r3, r5
 800af5e:	b99a      	cbnz	r2, 800af88 <scalbn+0x38>
 800af60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800af64:	4323      	orrs	r3, r4
 800af66:	d036      	beq.n	800afd6 <scalbn+0x86>
 800af68:	4b39      	ldr	r3, [pc, #228]	; (800b050 <scalbn+0x100>)
 800af6a:	4629      	mov	r1, r5
 800af6c:	ee10 0a10 	vmov	r0, s0
 800af70:	2200      	movs	r2, #0
 800af72:	f7f5 fb69 	bl	8000648 <__aeabi_dmul>
 800af76:	4b37      	ldr	r3, [pc, #220]	; (800b054 <scalbn+0x104>)
 800af78:	429e      	cmp	r6, r3
 800af7a:	4604      	mov	r4, r0
 800af7c:	460d      	mov	r5, r1
 800af7e:	da10      	bge.n	800afa2 <scalbn+0x52>
 800af80:	a32b      	add	r3, pc, #172	; (adr r3, 800b030 <scalbn+0xe0>)
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	e03a      	b.n	800affe <scalbn+0xae>
 800af88:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800af8c:	428a      	cmp	r2, r1
 800af8e:	d10c      	bne.n	800afaa <scalbn+0x5a>
 800af90:	ee10 2a10 	vmov	r2, s0
 800af94:	4620      	mov	r0, r4
 800af96:	4629      	mov	r1, r5
 800af98:	f7f5 f9a0 	bl	80002dc <__adddf3>
 800af9c:	4604      	mov	r4, r0
 800af9e:	460d      	mov	r5, r1
 800afa0:	e019      	b.n	800afd6 <scalbn+0x86>
 800afa2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800afa6:	460b      	mov	r3, r1
 800afa8:	3a36      	subs	r2, #54	; 0x36
 800afaa:	4432      	add	r2, r6
 800afac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800afb0:	428a      	cmp	r2, r1
 800afb2:	dd08      	ble.n	800afc6 <scalbn+0x76>
 800afb4:	2d00      	cmp	r5, #0
 800afb6:	a120      	add	r1, pc, #128	; (adr r1, 800b038 <scalbn+0xe8>)
 800afb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afbc:	da1c      	bge.n	800aff8 <scalbn+0xa8>
 800afbe:	a120      	add	r1, pc, #128	; (adr r1, 800b040 <scalbn+0xf0>)
 800afc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afc4:	e018      	b.n	800aff8 <scalbn+0xa8>
 800afc6:	2a00      	cmp	r2, #0
 800afc8:	dd08      	ble.n	800afdc <scalbn+0x8c>
 800afca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800afce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800afd2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800afd6:	ec45 4b10 	vmov	d0, r4, r5
 800afda:	bd70      	pop	{r4, r5, r6, pc}
 800afdc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800afe0:	da19      	bge.n	800b016 <scalbn+0xc6>
 800afe2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800afe6:	429e      	cmp	r6, r3
 800afe8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800afec:	dd0a      	ble.n	800b004 <scalbn+0xb4>
 800afee:	a112      	add	r1, pc, #72	; (adr r1, 800b038 <scalbn+0xe8>)
 800aff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1e2      	bne.n	800afbe <scalbn+0x6e>
 800aff8:	a30f      	add	r3, pc, #60	; (adr r3, 800b038 <scalbn+0xe8>)
 800affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affe:	f7f5 fb23 	bl	8000648 <__aeabi_dmul>
 800b002:	e7cb      	b.n	800af9c <scalbn+0x4c>
 800b004:	a10a      	add	r1, pc, #40	; (adr r1, 800b030 <scalbn+0xe0>)
 800b006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d0b8      	beq.n	800af80 <scalbn+0x30>
 800b00e:	a10e      	add	r1, pc, #56	; (adr r1, 800b048 <scalbn+0xf8>)
 800b010:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b014:	e7b4      	b.n	800af80 <scalbn+0x30>
 800b016:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b01a:	3236      	adds	r2, #54	; 0x36
 800b01c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b020:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b024:	4620      	mov	r0, r4
 800b026:	4b0c      	ldr	r3, [pc, #48]	; (800b058 <scalbn+0x108>)
 800b028:	2200      	movs	r2, #0
 800b02a:	e7e8      	b.n	800affe <scalbn+0xae>
 800b02c:	f3af 8000 	nop.w
 800b030:	c2f8f359 	.word	0xc2f8f359
 800b034:	01a56e1f 	.word	0x01a56e1f
 800b038:	8800759c 	.word	0x8800759c
 800b03c:	7e37e43c 	.word	0x7e37e43c
 800b040:	8800759c 	.word	0x8800759c
 800b044:	fe37e43c 	.word	0xfe37e43c
 800b048:	c2f8f359 	.word	0xc2f8f359
 800b04c:	81a56e1f 	.word	0x81a56e1f
 800b050:	43500000 	.word	0x43500000
 800b054:	ffff3cb0 	.word	0xffff3cb0
 800b058:	3c900000 	.word	0x3c900000

0800b05c <_init>:
 800b05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05e:	bf00      	nop
 800b060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b062:	bc08      	pop	{r3}
 800b064:	469e      	mov	lr, r3
 800b066:	4770      	bx	lr

0800b068 <_fini>:
 800b068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b06a:	bf00      	nop
 800b06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b06e:	bc08      	pop	{r3}
 800b070:	469e      	mov	lr, r3
 800b072:	4770      	bx	lr
