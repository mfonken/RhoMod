
rho_mod_v6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bc0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  08008da0  08008da0  00018da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800939c  0800939c  00020444  2**0
                  CONTENTS
  4 .ARM          00000008  0800939c  0800939c  0001939c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093a4  080093a4  00020444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093a4  080093a4  000193a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000444  20000000  080093ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  20000444  080097f0  00020444  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b7c  080097f0  00020b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fee5  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003680  00000000  00000000  00040359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  000439e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  00044da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d76  00000000  00000000  00046040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d5e  00000000  00000000  00067db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd5c6  00000000  00000000  00080b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014e0da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006380  00000000  00000000  0014e130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000444 	.word	0x20000444
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008d88 	.word	0x08008d88

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000448 	.word	0x20000448
 800021c:	08008d88 	.word	0x08008d88

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <OV9712_Init>:

/************************************************************************
 *                      Local Function Definitions                      *
 ***********************************************************************/
void OV9712_Init( OV9712_t * ov9712, I2C_Handle_t * i2c_port, OV9712_pins_t * pins )
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  ov9712->CAM_I2C_PORT = i2c_port;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	605a      	str	r2, [r3, #4]
  if( pins == NULL) return;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d021      	beq.n	8000f4c <OV9712_Init+0x5c>
  ov9712->Pins = pins;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
  OV9712_Functions.Enable(ov9712);
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <OV9712_Init+0x68>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	4798      	blx	r3
  HAL_Delay(30);
 8000f16:	201e      	movs	r0, #30
 8000f18:	f001 fadc 	bl	80024d4 <HAL_Delay>
  hw_register_t reg;
  for( int i = 0; i < sizeof(OV9712_regs) / sizeof(OV9712_regs[0]); i++ )
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e010      	b.n	8000f44 <OV9712_Init+0x54>
  {
    reg = OV9712_regs[i];
 8000f22:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <OV9712_Init+0x6c>)
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f2a:	823b      	strh	r3, [r7, #16]
    if( reg.Address == ENDR ) break;
 8000f2c:	7c3b      	ldrb	r3, [r7, #16]
 8000f2e:	2bff      	cmp	r3, #255	; 0xff
 8000f30:	d00e      	beq.n	8000f50 <OV9712_Init+0x60>
    OV9712_Functions.Write( ov9712, reg.Address, reg.Value );
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <OV9712_Init+0x68>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	7c39      	ldrb	r1, [r7, #16]
 8000f38:	7c7a      	ldrb	r2, [r7, #17]
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	4798      	blx	r3
  for( int i = 0; i < sizeof(OV9712_regs) / sizeof(OV9712_regs[0]); i++ )
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	d9eb      	bls.n	8000f22 <OV9712_Init+0x32>
 8000f4a:	e002      	b.n	8000f52 <OV9712_Init+0x62>
  if( pins == NULL) return;
 8000f4c:	bf00      	nop
 8000f4e:	e000      	b.n	8000f52 <OV9712_Init+0x62>
    if( reg.Address == ENDR ) break;
 8000f50:	bf00      	nop
  }
}
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000060 	.word	0x20000060
 8000f5c:	2000009c 	.word	0x2000009c

08000f60 <OV9712_Write>:
void OV9712_Write( OV9712_t * ov9712, uint8_t r, uint8_t v )
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	70bb      	strb	r3, [r7, #2]
  uint8_t data[2] = { r, v };
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	733b      	strb	r3, [r7, #12]
 8000f74:	78bb      	ldrb	r3, [r7, #2]
 8000f76:	737b      	strb	r3, [r7, #13]
  PlatformFunctions.I2C.Transmit( ov9712->CAM_I2C_PORT, ov9712->ADDR, data, 2, 100);
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <OV9712_Write+0x3c>)
 8000f7a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6858      	ldr	r0, [r3, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b299      	uxth	r1, r3
 8000f86:	f107 020c 	add.w	r2, r7, #12
 8000f8a:	2364      	movs	r3, #100	; 0x64
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2302      	movs	r3, #2
 8000f90:	47a0      	blx	r4
}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd90      	pop	{r4, r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000000 	.word	0x20000000

08000fa0 <OV9712_Enable>:

void OV9712_Enable( OV9712_t * ov9712 )
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if( ov9712->Pins == NULL) return;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d01f      	beq.n	8000ff0 <OV9712_Enable+0x50>
  PlatformFunctions.GPIO.Write( &ov9712->Pins->ENABLE, GPIO_PIN_SET);
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <OV9712_Enable+0x58>)
 8000fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	6892      	ldr	r2, [r2, #8]
 8000fb8:	2101      	movs	r1, #1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4798      	blx	r3
  PlatformFunctions.GPIO.Write( &ov9712->Pins->LOW_VOLTAGE, GPIO_PIN_SET);
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <OV9712_Enable+0x58>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	6892      	ldr	r2, [r2, #8]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4798      	blx	r3
  PlatformFunctions.GPIO.Write( &ov9712->Pins->POWER_DOWN, GPIO_PIN_RESET);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <OV9712_Enable+0x58>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	6892      	ldr	r2, [r2, #8]
 8000fd6:	3210      	adds	r2, #16
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4798      	blx	r3
  PlatformFunctions.GPIO.SetPortMode( &ov9712->Pins->MASTER_CLOCK, GPIO_MODE_AF_PP);
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <OV9712_Enable+0x58>)
 8000fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	6892      	ldr	r2, [r2, #8]
 8000fe6:	3218      	adds	r2, #24
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4610      	mov	r0, r2
 8000fec:	4798      	blx	r3
 8000fee:	e000      	b.n	8000ff2 <OV9712_Enable+0x52>
  if( ov9712->Pins == NULL) return;
 8000ff0:	bf00      	nop
}
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000000 	.word	0x20000000

08000ffc <OV9712_Disable>:

void OV9712_Disable( OV9712_t * ov9712 )
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if( ov9712->Pins == NULL) return;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d01f      	beq.n	800104c <OV9712_Disable+0x50>
  PlatformFunctions.GPIO.Write( &ov9712->Pins->ENABLE, GPIO_PIN_RESET);
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <OV9712_Disable+0x58>)
 800100e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6892      	ldr	r2, [r2, #8]
 8001014:	2100      	movs	r1, #0
 8001016:	4610      	mov	r0, r2
 8001018:	4798      	blx	r3
  PlatformFunctions.GPIO.Write( &ov9712->Pins->LOW_VOLTAGE, GPIO_PIN_RESET);
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <OV9712_Disable+0x58>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	6892      	ldr	r2, [r2, #8]
 8001022:	3208      	adds	r2, #8
 8001024:	2100      	movs	r1, #0
 8001026:	4610      	mov	r0, r2
 8001028:	4798      	blx	r3
  PlatformFunctions.GPIO.Write( &ov9712->Pins->POWER_DOWN, GPIO_PIN_SET);
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <OV9712_Disable+0x58>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	6892      	ldr	r2, [r2, #8]
 8001032:	3210      	adds	r2, #16
 8001034:	2101      	movs	r1, #1
 8001036:	4610      	mov	r0, r2
 8001038:	4798      	blx	r3
  PlatformFunctions.GPIO.SetPortMode( &ov9712->Pins->MASTER_CLOCK, GPIO_MODE_INPUT);
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <OV9712_Disable+0x58>)
 800103c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6892      	ldr	r2, [r2, #8]
 8001042:	3218      	adds	r2, #24
 8001044:	2100      	movs	r1, #0
 8001046:	4610      	mov	r0, r2
 8001048:	4798      	blx	r3
 800104a:	e000      	b.n	800104e <OV9712_Disable+0x52>
  if( ov9712->Pins == NULL) return;
 800104c:	bf00      	nop
}
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000000 	.word	0x20000000

08001058 <HAL_UART_TxCpltCallback>:
//}

static bool tx_cplt = false;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
//	PlatformFunctions.GPIO.Write( &LED_GPIO, 0 );
	tx_cplt = true;
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <HAL_UART_TxCpltCallback+0x1c>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000470 	.word	0x20000470

08001078 <CaptureFrame>:

void CaptureFrame()
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
//	PlatformFunctions.DMA.Reset( &CameraDMA );
//	while(!CameraFlags.Frame);
//	memset(frame, 0, FRAME_SIZE);
	CameraDMA.dst = (uint32_t)frame;
 800107e:	4a31      	ldr	r2, [pc, #196]	; (8001144 <CaptureFrame+0xcc>)
 8001080:	4b31      	ldr	r3, [pc, #196]	; (8001148 <CaptureFrame+0xd0>)
 8001082:	611a      	str	r2, [r3, #16]
	PlatformFunctions.DMA.Init( &CameraDMA );
 8001084:	4b31      	ldr	r3, [pc, #196]	; (800114c <CaptureFrame+0xd4>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	482f      	ldr	r0, [pc, #188]	; (8001148 <CaptureFrame+0xd0>)
 800108a:	4798      	blx	r3
	while(!CameraFlags.Row);
 800108c:	bf00      	nop
 800108e:	4b30      	ldr	r3, [pc, #192]	; (8001150 <CaptureFrame+0xd8>)
 8001090:	78db      	ldrb	r3, [r3, #3]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	f083 0301 	eor.w	r3, r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f7      	bne.n	800108e <CaptureFrame+0x16>
	while(CameraFlags.Row);
 800109e:	bf00      	nop
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <CaptureFrame+0xd8>)
 80010a2:	78db      	ldrb	r3, [r3, #3]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1fa      	bne.n	80010a0 <CaptureFrame+0x28>
	for(int r = 0; r < FRAME_HEIGHT; r++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	e022      	b.n	80010f6 <CaptureFrame+0x7e>
	{
		CameraDMA.dst = (uint32_t)frame + ( r * FRAME_WIDTH_BASE );
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b21      	ldr	r3, [pc, #132]	; (8001144 <CaptureFrame+0xcc>)
 80010be:	4413      	add	r3, r2
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <CaptureFrame+0xd0>)
 80010c2:	6113      	str	r3, [r2, #16]
		PlatformFunctions.DMA.Init( &CameraDMA );
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <CaptureFrame+0xd4>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	481f      	ldr	r0, [pc, #124]	; (8001148 <CaptureFrame+0xd0>)
 80010ca:	4798      	blx	r3
		while(!CameraFlags.Row);
 80010cc:	bf00      	nop
 80010ce:	4b20      	ldr	r3, [pc, #128]	; (8001150 <CaptureFrame+0xd8>)
 80010d0:	78db      	ldrb	r3, [r3, #3]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	f083 0301 	eor.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f7      	bne.n	80010ce <CaptureFrame+0x56>
		while(CameraFlags.Row)
 80010de:	e002      	b.n	80010e6 <CaptureFrame+0x6e>
			asm volatile("nop\n\tnop\n\tnop\n\t");
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	bf00      	nop
		while(CameraFlags.Row)
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <CaptureFrame+0xd8>)
 80010e8:	78db      	ldrb	r3, [r3, #3]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f7      	bne.n	80010e0 <CaptureFrame+0x68>
	for(int r = 0; r < FRAME_HEIGHT; r++)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3301      	adds	r3, #1
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b18      	cmp	r3, #24
 80010fa:	ddd9      	ble.n	80010b0 <CaptureFrame+0x38>
//		uint32_t fill = PlatformFunctions.DMA.GetFillAddr( &CameraDMA ) - CameraDMA.dst;
//		asm volatile("nop");
	}
//	while(CameraFlags.Frame);
	tx_cplt = false;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <CaptureFrame+0xdc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
	TransmitToHost((uint8_t *)&nl, 2);
 8001102:	2102      	movs	r1, #2
 8001104:	4814      	ldr	r0, [pc, #80]	; (8001158 <CaptureFrame+0xe0>)
 8001106:	f001 f869 	bl	80021dc <TransmitToHost>
	while(!tx_cplt);
 800110a:	bf00      	nop
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <CaptureFrame+0xdc>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	f083 0301 	eor.w	r3, r3, #1
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f8      	bne.n	800110c <CaptureFrame+0x94>
	tx_cplt = false;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <CaptureFrame+0xdc>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
	TransmitToHost((uint8_t *)frame, FRAME_SIZE);
 8001120:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001124:	4807      	ldr	r0, [pc, #28]	; (8001144 <CaptureFrame+0xcc>)
 8001126:	f001 f859 	bl	80021dc <TransmitToHost>
	while(!tx_cplt);
 800112a:	bf00      	nop
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <CaptureFrame+0xdc>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f083 0301 	eor.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f8      	bne.n	800112c <CaptureFrame+0xb4>
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000584 	.word	0x20000584
 8001148:	20000198 	.word	0x20000198
 800114c:	200000bc 	.word	0x200000bc
 8001150:	20000460 	.word	0x20000460
 8001154:	20000470 	.word	0x20000470
 8001158:	200001b0 	.word	0x200001b0

0800115c <InitializePlatform>:

/* INITIALIZING State Routine */
void InitializePlatform( void )
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
	LOG(DEBUG_2, "Initializing platform"ENDL);
 8001162:	2303      	movs	r3, #3
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	e005      	b.n	8001174 <InitializePlatform+0x18>
 8001168:	2009      	movs	r0, #9
 800116a:	f005 fd95 	bl	8006c98 <putchar>
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	3301      	adds	r3, #1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d9f6      	bls.n	8001168 <InitializePlatform+0xc>
 800117a:	4807      	ldr	r0, [pc, #28]	; (8001198 <InitializePlatform+0x3c>)
 800117c:	f005 fe10 	bl	8006da0 <puts>
    PlatformFunctions.Init( &Platform, HOST_COMMUNICATION_PROTOCOL, (generic_handle_t)Master.IOs.HOST_DEFAULT_CHANNEL );
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <InitializePlatform+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <InitializePlatform+0x44>)
 8001186:	6852      	ldr	r2, [r2, #4]
 8001188:	2102      	movs	r1, #2
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <InitializePlatform+0x48>)
 800118c:	4798      	blx	r3
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	08008e18 	.word	0x08008e18
 800119c:	200000bc 	.word	0x200000bc
 80011a0:	2000096c 	.word	0x2000096c
 80011a4:	20000b60 	.word	0x20000b60

080011a8 <ConnectToHost>:

/* CONNECTING_TO_HOST State Routine */
void ConnectToHost( void )
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  while( PlatformFunctions.Host.Command( PING_HOST, NEEDED ) != OK )
  {
    PlatformFunctions.Wait( HOST_COMMAND_WAIT_TIME );
  }
#endif
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <ConfigureApplication>:

/* CONFIGURING State Routine */
void ConfigureApplication( void )
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	PlatformFunctions.DMA.Init( &CameraDMA );
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <ConfigureApplication+0x30>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	480a      	ldr	r0, [pc, #40]	; (80011ec <ConfigureApplication+0x34>)
 80011c2:	4798      	blx	r3
	PlatformFunctions.DMA.Resume( &CameraDMA );
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <ConfigureApplication+0x30>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	4808      	ldr	r0, [pc, #32]	; (80011ec <ConfigureApplication+0x34>)
 80011ca:	4798      	blx	r3

#ifdef __OV9712__
  OV9712_Functions.Init( &OV9712, Master.IOs.CAMERA_COMMUNICATION_CHANNEL, &Default_OV9712_Pins );
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <ConfigureApplication+0x38>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <ConfigureApplication+0x3c>)
 80011d2:	6811      	ldr	r1, [r2, #0]
 80011d4:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <ConfigureApplication+0x40>)
 80011d6:	4809      	ldr	r0, [pc, #36]	; (80011fc <ConfigureApplication+0x44>)
 80011d8:	4798      	blx	r3
#endif
#ifdef __RHO__
  RhoSystem.Functions.Perform.ConnectToInterface( &PlatformFunctions, &CameraFlags, &CameraDMA );
  RhoSystem.Functions.Perform.Initialize( CAMERA_PORT, UART_TX_PORT );
#endif
  HAL_Delay(300);
 80011da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011de:	f001 f979 	bl	80024d4 <HAL_Delay>
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200000bc 	.word	0x200000bc
 80011ec:	20000198 	.word	0x20000198
 80011f0:	20000060 	.word	0x20000060
 80011f4:	2000096c 	.word	0x2000096c
 80011f8:	20000070 	.word	0x20000070
 80011fc:	20000090 	.word	0x20000090

08001200 <ExitInitialization>:

/* READY State Routine */
void ExitInitialization( void )
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
#ifdef __RHO__
  RhoSystem.Functions.Perform.Activate();
#endif
  if( SystemFunctions.State.IsIn( &System, READY ) )
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <ExitInitialization+0x28>)
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	2103      	movs	r1, #3
 800120a:	4808      	ldr	r0, [pc, #32]	; (800122c <ExitInitialization+0x2c>)
 800120c:	4798      	blx	r3
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <ExitInitialization+0x1c>
    MasterFunctions.Run();
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <ExitInitialization+0x30>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	4798      	blx	r3
  else
    PlatformFunctions.Wait(250);
}
 800121a:	e003      	b.n	8001224 <ExitInitialization+0x24>
    PlatformFunctions.Wait(250);
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <ExitInitialization+0x34>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	20fa      	movs	r0, #250	; 0xfa
 8001222:	4798      	blx	r3
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000124 	.word	0x20000124
 800122c:	2000011c 	.word	0x2000011c
 8001230:	20000144 	.word	0x20000144
 8001234:	200000bc 	.word	0x200000bc

08001238 <ApplicationCore>:

/* ACTIVE State Routine */
void ApplicationCore( void )
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	CaptureFrame();
 800123c:	f7ff ff1c 	bl	8001078 <CaptureFrame>
//#ifdef __RHO__
//    RhoSystem.Functions.Perform.CoreProcess();
//#else
//#warning "No application core."
//#endif
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <SystemError>:

/* SYS_ERROR State Routine */
void SystemError( void )
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
    LOG( ALWAYS, "System error! Resetting in" );
 800124a:	2304      	movs	r3, #4
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	e005      	b.n	800125c <SystemError+0x18>
 8001250:	2009      	movs	r0, #9
 8001252:	f005 fd21 	bl	8006c98 <putchar>
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	3301      	adds	r3, #1
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b03      	cmp	r3, #3
 8001260:	d9f6      	bls.n	8001250 <SystemError+0xc>
 8001262:	480e      	ldr	r0, [pc, #56]	; (800129c <SystemError+0x58>)
 8001264:	f005 fd00 	bl	8006c68 <iprintf>
    for( uint8_t i = 3 ; i > 0; i-- )
 8001268:	2303      	movs	r3, #3
 800126a:	71bb      	strb	r3, [r7, #6]
 800126c:	e00c      	b.n	8001288 <SystemError+0x44>
    {
        LOG_BARE( ALWAYS, " %d", i );
 800126e:	79bb      	ldrb	r3, [r7, #6]
 8001270:	4619      	mov	r1, r3
 8001272:	480b      	ldr	r0, [pc, #44]	; (80012a0 <SystemError+0x5c>)
 8001274:	f005 fcf8 	bl	8006c68 <iprintf>
        PlatformFunctions.Wait(1000);
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <SystemError+0x60>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001280:	4798      	blx	r3
    for( uint8_t i = 3 ; i > 0; i-- )
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	3b01      	subs	r3, #1
 8001286:	71bb      	strb	r3, [r7, #6]
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1ef      	bne.n	800126e <SystemError+0x2a>
    }
    PlatformFunctions.Reset();
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <SystemError+0x60>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	4798      	blx	r3
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	08008e30 	.word	0x08008e30
 80012a0:	08008e4c 	.word	0x08008e4c
 80012a4:	200000bc 	.word	0x200000bc

080012a8 <Master_Connect>:

/***************************************************************************************/
/*                                Master Initialize                                    */
/***************************************************************************************/
void Master_Connect( I2C_Handle_t * i2c, TIMER_Handle_t * timer, UART_Handle_t * usart )
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  printf("Connecting master..."ENDL);
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <Master_Connect+0x34>)
 80012b6:	f005 fd73 	bl	8006da0 <puts>
  Master.IOs.I2C_Primary = i2c;
 80012ba:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <Master_Connect+0x38>)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6013      	str	r3, [r2, #0]
  Master.IOs.UART_Primary = usart;
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <Master_Connect+0x38>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6053      	str	r3, [r2, #4]
  Master.Utilities.Timer_Primary = timer;
 80012c6:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <Master_Connect+0x38>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	6093      	str	r3, [r2, #8]
  // PlatformFunctions.GPIO.Write( &LED_GPIO, GPIO_PIN_SET);
  MasterFunctions.Init();
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <Master_Connect+0x3c>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4798      	blx	r3
}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	08008e50 	.word	0x08008e50
 80012e0:	2000096c 	.word	0x2000096c
 80012e4:	20000144 	.word	0x20000144

080012e8 <Master_Init>:

void Master_Init( void )
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Initialize state manager */
  SystemFunctions.Init( &System, &global_states_list );
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <Master_Init+0x3c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	490d      	ldr	r1, [pc, #52]	; (8001328 <Master_Init+0x40>)
 80012f2:	480e      	ldr	r0, [pc, #56]	; (800132c <Master_Init+0x44>)
 80012f4:	4798      	blx	r3

  /* Initialize core platform */
  SystemFunctions.State.Enter( &System, INITIALIZING );
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <Master_Init+0x3c>)
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	2100      	movs	r1, #0
 80012fc:	480b      	ldr	r0, [pc, #44]	; (800132c <Master_Init+0x44>)
 80012fe:	4798      	blx	r3

  /* Connect to host, this is critical for finishing initialization hence endless loop */
  SystemFunctions.State.Enter( &System, CONNECTING_TO_HOST );
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <Master_Init+0x3c>)
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	2101      	movs	r1, #1
 8001306:	4809      	ldr	r0, [pc, #36]	; (800132c <Master_Init+0x44>)
 8001308:	4798      	blx	r3

  /* Configure application items */
  SystemFunctions.State.Enter( &System, CONFIGURING );
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <Master_Init+0x3c>)
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	2102      	movs	r1, #2
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <Master_Init+0x44>)
 8001312:	4798      	blx	r3

  /* Exit initialization, enter run */
  SystemFunctions.State.Enter( &System, READY );
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <Master_Init+0x3c>)
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	2103      	movs	r1, #3
 800131a:	4804      	ldr	r0, [pc, #16]	; (800132c <Master_Init+0x44>)
 800131c:	4798      	blx	r3
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000124 	.word	0x20000124
 8001328:	20000150 	.word	0x20000150
 800132c:	2000011c 	.word	0x2000011c

08001330 <Master_Run>:

/***************************************************************************************/
/*                                   Master Run                                        */
/***************************************************************************************/
void Master_Run( void )
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	SystemFunctions.State.Next( &System );
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <Master_Run+0x18>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <Master_Run+0x1c>)
 800133a:	4798      	blx	r3
//	SystemFunctions.State.Set( &System, ACTIVE );
	while(1)
	{
		SystemFunctions.State.Perform( &System );
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <Master_Run+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <Master_Run+0x1c>)
 8001342:	4798      	blx	r3
 8001344:	e7fa      	b.n	800133c <Master_Run+0xc>
 8001346:	bf00      	nop
 8001348:	20000124 	.word	0x20000124
 800134c:	2000011c 	.word	0x2000011c

08001350 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001354:	f3bf 8f4f 	dsb	sy
}
 8001358:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <__NVIC_SystemReset+0x24>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001362:	4904      	ldr	r1, [pc, #16]	; (8001374 <__NVIC_SystemReset+0x24>)
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <__NVIC_SystemReset+0x28>)
 8001366:	4313      	orrs	r3, r2
 8001368:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800136a:	f3bf 8f4f 	dsb	sy
}
 800136e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <__NVIC_SystemReset+0x20>
 8001374:	e000ed00 	.word	0xe000ed00
 8001378:	05fa0004 	.word	0x05fa0004

0800137c <HAL_GPIO_EXTI_Callback>:

/************************************************************************
 *                           Interrupt Handlers                         *
 ***********************************************************************/
inline void STM_InterruptHandler( uint16_t GPIO_Pin )
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
//#ifdef __RHO__
//	if(!CameraFlags.IRQ) return;
	if(GPIO_Pin == VSYNC_Pin)
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d10b      	bne.n	80013a4 <HAL_GPIO_EXTI_Callback+0x28>
		CameraFlags.Frame = !(flag_t)( VSYNC_GPIO_Port->IDR & VSYNC_Pin );
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_GPIO_EXTI_Callback+0x50>)
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	bf0c      	ite	eq
 8001398:	2301      	moveq	r3, #1
 800139a:	2300      	movne	r3, #0
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x54>)
 80013a0:	709a      	strb	r2, [r3, #2]
//    STM_InitDMA( (uint32_t)&CAMERA_PORT, _dma_destination, _dma_size, true );
//    LOG(ALWAYS, "0x%08x", Master.Utilities.Timer_Primary->hdma[RHO_TIM_DMA_ID]->Instance->CNDTR );
//    LOG(ALWAYS, ENDL);
//  }
//#endif/* EXTI line interrupt detected */
}
 80013a2:	e00d      	b.n	80013c0 <HAL_GPIO_EXTI_Callback+0x44>
	else if( GPIO_Pin == HREF_Pin)
 80013a4:	88fb      	ldrh	r3, [r7, #6]
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d10a      	bne.n	80013c0 <HAL_GPIO_EXTI_Callback+0x44>
		CameraFlags.Row = (flag_t)( HREF_GPIO_Port->IDR & HREF_Pin );
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_GPIO_EXTI_Callback+0x50>)
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	bf14      	ite	ne
 80013b6:	2301      	movne	r3, #1
 80013b8:	2300      	moveq	r3, #0
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x54>)
 80013be:	70da      	strb	r2, [r3, #3]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	48000400 	.word	0x48000400
 80013d0:	20000460 	.word	0x20000460

080013d4 <STM_InterruptEnable>:
void STM_InterruptEnable( void )
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
//  STM_ResumeDMA(RHO_TIM_IT_CC, RHO_TIM_CHANNEL);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013d8:	2006      	movs	r0, #6
 80013da:	f001 f9b6 	bl	800274a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80013de:	2009      	movs	r0, #9
 80013e0:	f001 f9b3 	bl	800274a <HAL_NVIC_EnableIRQ>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <STM_InterruptDisable>:
void STM_InterruptDisable( void )
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
//  STM_PauseDMA(RHO_TIM_IT_CC, RHO_TIM_CHANNEL);
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80013ec:	2006      	movs	r0, #6
 80013ee:	f001 f9ba 	bl	8002766 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 80013f2:	2009      	movs	r0, #9
 80013f4:	f001 f9b7 	bl	8002766 <HAL_NVIC_DisableIRQ>
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <STM_PauseDMA>:

/************************************************************************
 *                              DMA Handlers                            *
 ***********************************************************************/
inline void STM_PauseDMA( dma_info_t * info )
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  __HAL_TIM_DISABLE_IT(Master.Utilities.Timer_Primary, info->it_cc);
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <STM_PauseDMA+0x3c>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68d9      	ldr	r1, [r3, #12]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	43da      	mvns	r2, r3
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <STM_PauseDMA+0x3c>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	400a      	ands	r2, r1
 800141a:	60da      	str	r2, [r3, #12]
  TIM_CCxChannelCmd(Master.Utilities.Timer_Primary->Instance, info->tim_ch, TIM_CCx_DISABLE);
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <STM_PauseDMA+0x3c>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	f003 fd4b 	bl	8004ec4 <TIM_CCxChannelCmd>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000096c 	.word	0x2000096c

0800143c <STM_ResumeDMA>:
inline void STM_ResumeDMA( dma_info_t * info )
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  __HAL_TIM_ENABLE_IT(Master.Utilities.Timer_Primary, info->it_cc );
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <STM_ResumeDMA+0x38>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68d9      	ldr	r1, [r3, #12]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <STM_ResumeDMA+0x38>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	60da      	str	r2, [r3, #12]
  TIM_CCxChannelCmd(Master.Utilities.Timer_Primary->Instance, info->tim_ch, TIM_CCx_ENABLE);
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <STM_ResumeDMA+0x38>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	4619      	mov	r1, r3
 8001468:	f003 fd2c 	bl	8004ec4 <TIM_CCxChannelCmd>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000096c 	.word	0x2000096c

08001478 <STM_ResetDMA>:
inline void STM_ResetDMA( dma_info_t * info )
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
    if(info->dst != (uint32_t)NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00a      	beq.n	800149e <STM_ResetDMA+0x26>
        Master.Utilities.Timer_Primary->hdma[info->id]->Instance->CMAR = info->dst;
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <STM_ResetDMA+0x34>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	7d92      	ldrb	r2, [r2, #22]
 8001490:	3208      	adds	r2, #8
 8001492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6912      	ldr	r2, [r2, #16]
 800149c:	60da      	str	r2, [r3, #12]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	2000096c 	.word	0x2000096c

080014b0 <STM_InitDMA>:
void STM_InitDMA( dma_info_t * info )
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(HAL_DMA_Start_IT(Master.Utilities.Timer_Primary->hdma[info->id], info->src, info->dst, info->size) != HAL_OK)
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <STM_InitDMA+0x5c>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	7d92      	ldrb	r2, [r2, #22]
 80014c0:	3208      	adds	r2, #8
 80014c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68d9      	ldr	r1, [r3, #12]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691a      	ldr	r2, [r3, #16]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	8a9b      	ldrh	r3, [r3, #20]
 80014d2:	f001 fa0b 	bl	80028ec <HAL_DMA_Start_IT>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <STM_InitDMA+0x30>
    Error_Handler();
 80014dc:	f000 fb54 	bl	8001b88 <Error_Handler>
  __HAL_TIM_ENABLE_DMA(Master.Utilities.Timer_Primary, info->cc);
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <STM_InitDMA+0x5c>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68d9      	ldr	r1, [r3, #12]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <STM_InitDMA+0x5c>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	60da      	str	r2, [r3, #12]
  if(info->state)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7ddb      	ldrb	r3, [r3, #23]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <STM_InitDMA+0x54>
	  STM_ResumeDMA(info);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ff9c 	bl	800143c <STM_ResumeDMA>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2000096c 	.word	0x2000096c

08001510 <STM_GetDMAFillAddress>:
uint32_t STM_GetDMAFillAddress( dma_info_t * info )
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return info->dst + ( (int32_t)info->size - (int32_t)Master.Utilities.Timer_Primary->hdma[info->id]->Instance->CNDTR );
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	8a92      	ldrh	r2, [r2, #20]
 8001520:	4610      	mov	r0, r2
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <STM_GetDMAFillAddress+0x34>)
 8001524:	6892      	ldr	r2, [r2, #8]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	7d89      	ldrb	r1, [r1, #22]
 800152a:	3108      	adds	r1, #8
 800152c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	6852      	ldr	r2, [r2, #4]
 8001534:	1a82      	subs	r2, r0, r2
 8001536:	4413      	add	r3, r2
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	2000096c 	.word	0x2000096c

08001548 <STM_UartTxDMA>:

/************************************************************************
 *                             UART Handlers                            *
 ***********************************************************************/
inline uint8_t STM_UartTxDMA( UART_Handle_t * huart, uint8_t * buffer, uint16_t length )
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	4613      	mov	r3, r2
 8001554:	80fb      	strh	r3, [r7, #6]
	uint8_t ret;
	do
	{
		ret = HAL_UART_Transmit_DMA( Master.IOs.UART_Primary, buffer, length);
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <STM_UartTxDMA+0x30>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	88fa      	ldrh	r2, [r7, #6]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	4618      	mov	r0, r3
 8001560:	f003 fd2e 	bl	8004fc0 <HAL_UART_Transmit_DMA>
 8001564:	4603      	mov	r3, r0
 8001566:	75fb      	strb	r3, [r7, #23]
	} while(ret == HAL_BUSY);
 8001568:	7dfb      	ldrb	r3, [r7, #23]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d0f3      	beq.n	8001556 <STM_UartTxDMA+0xe>
	return ret;//( Master.IOs.UART_Primary, buffer, length);//, UART_TIMEOUT );
 800156e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000096c 	.word	0x2000096c

0800157c <STM_UartRxDMA>:

inline uint16_t STM_UartRxDMA( UART_Handle_t * huart, uint8_t * buffer )
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  ///TODO: Actually implement
  return 1;
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <STM_I2CMasterTx>:

/************************************************************************
 *                              I2C Handlers                            *
 ***********************************************************************/
inline void STM_I2CMasterTx( I2C_Handle_t * hi2c, uint16_t addr, uint8_t * buffer, uint16_t length, uint32_t timeout )
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af02      	add	r7, sp, #8
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	461a      	mov	r2, r3
 80015a0:	460b      	mov	r3, r1
 80015a2:	817b      	strh	r3, [r7, #10]
 80015a4:	4613      	mov	r3, r2
 80015a6:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Master_Transmit( hi2c, addr, buffer, length, timeout);
 80015a8:	893a      	ldrh	r2, [r7, #8]
 80015aa:	8979      	ldrh	r1, [r7, #10]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	4613      	mov	r3, r2
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f001 fe7f 	bl	80032b8 <HAL_I2C_Master_Transmit>
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <STM_SetPortMode>:

/************************************************************************
 *                             GPIO Handlers                            *
 ***********************************************************************/
inline void STM_SetPortMode( GPIO_TypeDef * port, uint16_t pin, uint8_t mode )
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b088      	sub	sp, #32
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	807b      	strh	r3, [r7, #2]
 80015ce:	4613      	mov	r3, r2
 80015d0:	707b      	strb	r3, [r7, #1]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = pin;
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = mode;
 80015e6:	787b      	ldrb	r3, [r7, #1]
 80015e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init( (GPIO_TypeDef *)port, &GPIO_InitStruct );
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	4619      	mov	r1, r3
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f001 fc05 	bl	8002e00 <HAL_GPIO_Init>
}
 80015f6:	bf00      	nop
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <STM_ReadPort>:
inline uint8_t STM_ReadPort( GPIO_TypeDef * port )
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
    return port->IDR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	b2db      	uxtb	r3, r3
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <STM_WritePin>:
inline void STM_WritePin( GPIO_TypeDef * port, uint16_t pin, uint8_t state )
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]
 8001624:	4613      	mov	r3, r2
 8001626:	707b      	strb	r3, [r7, #1]
  HAL_GPIO_WritePin( port, pin, (GPIO_PinState)state);
 8001628:	787a      	ldrb	r2, [r7, #1]
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	4619      	mov	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f001 fd68 	bl	8003104 <HAL_GPIO_WritePin>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <STM_TogglePin>:
inline void STM_TogglePin( GPIO_TypeDef * port, uint16_t pin )
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_TogglePin( port, pin );
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	4619      	mov	r1, r3
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f001 fd71 	bl	8003134 <HAL_GPIO_TogglePin>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <STM_Timestamp>:

/************************************************************************
 *                             Time Handlers                            *
 ***********************************************************************/
inline uint32_t STM_Timestamp(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800165e:	f000 ff2d 	bl	80024bc <HAL_GetTick>
 8001662:	4603      	mov	r3, r0
}
 8001664:	4618      	mov	r0, r3
 8001666:	bd80      	pop	{r7, pc}

08001668 <STM_Wait>:
inline void STM_Wait( uint32_t nTime )
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_Delay( nTime );
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 ff2f 	bl	80024d4 <HAL_Delay>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <STM_SysClockFreq>:
inline uint32_t STM_SysClockFreq(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  return HAL_RCC_GetSysClockFreq();
 8001682:	f002 fe55 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 8001686:	4603      	mov	r3, r0
}
 8001688:	4618      	mov	r0, r3
 800168a:	bd80      	pop	{r7, pc}

0800168c <STM_Reset>:

/************************************************************************
 *                            System Handlers                           *
 ***********************************************************************/
void STM_Reset( void )
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
    NVIC_SystemReset();
 8001690:	f7ff fe5e 	bl	8001350 <__NVIC_SystemReset>

08001694 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
	while(huart1.gState == HAL_UART_STATE_BUSY_TX);
 80016a0:	bf00      	nop
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <_write+0x34>)
 80016a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016a8:	2b21      	cmp	r3, #33	; 0x21
 80016aa:	d0fa      	beq.n	80016a2 <_write+0xe>
	HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(&huart1, (uint8_t*)ptr, len);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	68b9      	ldr	r1, [r7, #8]
 80016b4:	4804      	ldr	r0, [pc, #16]	; (80016c8 <_write+0x34>)
 80016b6:	f003 fc83 	bl	8004fc0 <HAL_UART_Transmit_DMA>
 80016ba:	4603      	mov	r3, r0
 80016bc:	75fb      	strb	r3, [r7, #23]
	return (int)status;
 80016be:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000a24 	.word	0x20000a24

080016cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d0:	f000 fe90 	bl	80023f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d4:	f000 f81e 	bl	8001714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d8:	f000 f9a2 	bl	8001a20 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016dc:	f000 f88a 	bl	80017f4 <MX_I2C1_Init>
  MX_DMA_Init();
 80016e0:	f000 f960 	bl	80019a4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80016e4:	f000 f910 	bl	8001908 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80016e8:	f000 f8c4 	bl	8001874 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting...\r\n");
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <main+0x34>)
 80016ee:	f005 fb57 	bl	8006da0 <puts>
  MasterFunctions.Connect( &hi2c1, &htim16, &huart1 );
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <main+0x38>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <main+0x3c>)
 80016f8:	4904      	ldr	r1, [pc, #16]	; (800170c <main+0x40>)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <main+0x44>)
 80016fc:	4798      	blx	r3
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <main+0x32>
 8001700:	08008ee0 	.word	0x08008ee0
 8001704:	200001b4 	.word	0x200001b4
 8001708:	20000a24 	.word	0x20000a24
 800170c:	20000b14 	.word	0x20000b14
 8001710:	20000978 	.word	0x20000978

08001714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0a4      	sub	sp, #144	; 0x90
 8001718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800171e:	2238      	movs	r2, #56	; 0x38
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f004 fd84 	bl	8006230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001728:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001738:	463b      	mov	r3, r7
 800173a:	2244      	movs	r2, #68	; 0x44
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f004 fd76 	bl	8006230 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001744:	2000      	movs	r0, #0
 8001746:	f002 f8b7 	bl	80038b8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800174a:	2322      	movs	r3, #34	; 0x22
 800174c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800174e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001752:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001754:	2340      	movs	r3, #64	; 0x40
 8001756:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001758:	2301      	movs	r3, #1
 800175a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175c:	2302      	movs	r3, #2
 800175e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001760:	2302      	movs	r3, #2
 8001762:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001764:	2302      	movs	r3, #2
 8001766:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001768:	2328      	movs	r3, #40	; 0x28
 800176a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800176e:	2302      	movs	r3, #2
 8001770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001774:	2302      	movs	r3, #2
 8001776:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800177a:	2302      	movs	r3, #2
 800177c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001780:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001784:	4618      	mov	r0, r3
 8001786:	f002 f94b 	bl	8003a20 <HAL_RCC_OscConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001790:	f000 f9fa 	bl	8001b88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001794:	230f      	movs	r3, #15
 8001796:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001798:	2303      	movs	r3, #3
 800179a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80017a0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80017a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017ae:	2104      	movs	r1, #4
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 fc4d 	bl	8004050 <HAL_RCC_ClockConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80017bc:	f000 f9e4 	bl	8001b88 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80017c0:	2341      	movs	r3, #65	; 0x41
 80017c2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017cc:	463b      	mov	r3, r7
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 fe8e 	bl	80044f0 <HAL_RCCEx_PeriphCLKConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80017da:	f000 f9d5 	bl	8001b88 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_4);
 80017de:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80017e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80017e6:	2000      	movs	r0, #0
 80017e8:	f002 fd6e 	bl	80042c8 <HAL_RCC_MCOConfig>
}
 80017ec:	bf00      	nop
 80017ee:	3790      	adds	r7, #144	; 0x90
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <MX_I2C1_Init+0x74>)
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <MX_I2C1_Init+0x78>)
 80017fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 80017fe:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <MX_I2C1_Init+0x74>)
 8001800:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <MX_I2C1_Init+0x7c>)
 8001802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <MX_I2C1_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <MX_I2C1_Init+0x74>)
 800180c:	2201      	movs	r2, #1
 800180e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <MX_I2C1_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <MX_I2C1_Init+0x74>)
 8001818:	2200      	movs	r2, #0
 800181a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <MX_I2C1_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_I2C1_Init+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_I2C1_Init+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800182e:	480e      	ldr	r0, [pc, #56]	; (8001868 <MX_I2C1_Init+0x74>)
 8001830:	f001 fcb2 	bl	8003198 <HAL_I2C_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800183a:	f000 f9a5 	bl	8001b88 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800183e:	2100      	movs	r1, #0
 8001840:	4809      	ldr	r0, [pc, #36]	; (8001868 <MX_I2C1_Init+0x74>)
 8001842:	f001 ffa1 	bl	8003788 <HAL_I2CEx_ConfigAnalogFilter>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800184c:	f000 f99c 	bl	8001b88 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001850:	2100      	movs	r1, #0
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_I2C1_Init+0x74>)
 8001854:	f001 ffe3 	bl	800381e <HAL_I2CEx_ConfigDigitalFilter>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800185e:	f000 f993 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000978 	.word	0x20000978
 800186c:	40005400 	.word	0x40005400
 8001870:	00202538 	.word	0x00202538

08001874 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800187a:	463b      	mov	r3, r7
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001886:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <MX_TIM16_Init+0x8c>)
 8001888:	4a1e      	ldr	r2, [pc, #120]	; (8001904 <MX_TIM16_Init+0x90>)
 800188a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800188c:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <MX_TIM16_Init+0x8c>)
 800188e:	2200      	movs	r2, #0
 8001890:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <MX_TIM16_Init+0x8c>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <MX_TIM16_Init+0x8c>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <MX_TIM16_Init+0x8c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <MX_TIM16_Init+0x8c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <MX_TIM16_Init+0x8c>)
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018b0:	4813      	ldr	r0, [pc, #76]	; (8001900 <MX_TIM16_Init+0x8c>)
 80018b2:	f003 f80d 	bl	80048d0 <HAL_TIM_Base_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM16_Init+0x4c>
  {
    Error_Handler();
 80018bc:	f000 f964 	bl	8001b88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 80018c0:	480f      	ldr	r0, [pc, #60]	; (8001900 <MX_TIM16_Init+0x8c>)
 80018c2:	f003 f85c 	bl	800497e <HAL_TIM_IC_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM16_Init+0x5c>
  {
    Error_Handler();
 80018cc:	f000 f95c 	bl	8001b88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018d0:	2300      	movs	r3, #0
 80018d2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018d4:	2301      	movs	r3, #1
 80018d6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <MX_TIM16_Init+0x8c>)
 80018e8:	f003 f8aa 	bl	8004a40 <HAL_TIM_IC_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM16_Init+0x82>
  {
    Error_Handler();
 80018f2:	f000 f949 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000b14 	.word	0x20000b14
 8001904:	40014400 	.word	0x40014400

08001908 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <MX_USART1_UART_Init+0x94>)
 800190e:	4a24      	ldr	r2, [pc, #144]	; (80019a0 <MX_USART1_UART_Init+0x98>)
 8001910:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <MX_USART1_UART_Init+0x94>)
 8001914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001918:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <MX_USART1_UART_Init+0x94>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <MX_USART1_UART_Init+0x94>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <MX_USART1_UART_Init+0x94>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <MX_USART1_UART_Init+0x94>)
 800192e:	2208      	movs	r2, #8
 8001930:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <MX_USART1_UART_Init+0x94>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <MX_USART1_UART_Init+0x94>)
 800193a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800193e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <MX_USART1_UART_Init+0x94>)
 8001942:	2200      	movs	r2, #0
 8001944:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <MX_USART1_UART_Init+0x94>)
 8001948:	2200      	movs	r2, #0
 800194a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <MX_USART1_UART_Init+0x94>)
 800194e:	2200      	movs	r2, #0
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001952:	4812      	ldr	r0, [pc, #72]	; (800199c <MX_USART1_UART_Init+0x94>)
 8001954:	f003 fadb 	bl	8004f0e <HAL_HalfDuplex_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800195e:	f000 f913 	bl	8001b88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001962:	2100      	movs	r1, #0
 8001964:	480d      	ldr	r0, [pc, #52]	; (800199c <MX_USART1_UART_Init+0x94>)
 8001966:	f004 fb59 	bl	800601c <HAL_UARTEx_SetTxFifoThreshold>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001970:	f000 f90a 	bl	8001b88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001974:	2100      	movs	r1, #0
 8001976:	4809      	ldr	r0, [pc, #36]	; (800199c <MX_USART1_UART_Init+0x94>)
 8001978:	f004 fb8e 	bl	8006098 <HAL_UARTEx_SetRxFifoThreshold>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001982:	f000 f901 	bl	8001b88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_USART1_UART_Init+0x94>)
 8001988:	f004 fb0f 	bl	8005faa <HAL_UARTEx_DisableFifoMode>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001992:	f000 f8f9 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000a24 	.word	0x20000a24
 80019a0:	40013800 	.word	0x40013800

080019a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <MX_DMA_Init+0x78>)
 80019ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ae:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <MX_DMA_Init+0x78>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	6493      	str	r3, [r2, #72]	; 0x48
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <MX_DMA_Init+0x78>)
 80019b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <MX_DMA_Init+0x78>)
 80019c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c6:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <MX_DMA_Init+0x78>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6493      	str	r3, [r2, #72]	; 0x48
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <MX_DMA_Init+0x78>)
 80019d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <MX_DMA_Init+0x78>)
 80019dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019de:	4a0f      	ldr	r2, [pc, #60]	; (8001a1c <MX_DMA_Init+0x78>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6493      	str	r3, [r2, #72]	; 0x48
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <MX_DMA_Init+0x78>)
 80019e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	200b      	movs	r0, #11
 80019f8:	f000 fe8d 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019fc:	200b      	movs	r0, #11
 80019fe:	f000 fea4 	bl	800274a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	2039      	movs	r0, #57	; 0x39
 8001a08:	f000 fe85 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001a0c:	2039      	movs	r0, #57	; 0x39
 8001a0e:	f000 fe9c 	bl	800274a <HAL_NVIC_EnableIRQ>

}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a36:	4b51      	ldr	r3, [pc, #324]	; (8001b7c <MX_GPIO_Init+0x15c>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	4a50      	ldr	r2, [pc, #320]	; (8001b7c <MX_GPIO_Init+0x15c>)
 8001a3c:	f043 0320 	orr.w	r3, r3, #32
 8001a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a42:	4b4e      	ldr	r3, [pc, #312]	; (8001b7c <MX_GPIO_Init+0x15c>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	f003 0320 	and.w	r3, r3, #32
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <MX_GPIO_Init+0x15c>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	4a4a      	ldr	r2, [pc, #296]	; (8001b7c <MX_GPIO_Init+0x15c>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5a:	4b48      	ldr	r3, [pc, #288]	; (8001b7c <MX_GPIO_Init+0x15c>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	4b45      	ldr	r3, [pc, #276]	; (8001b7c <MX_GPIO_Init+0x15c>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	4a44      	ldr	r2, [pc, #272]	; (8001b7c <MX_GPIO_Init+0x15c>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a72:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <MX_GPIO_Init+0x15c>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWDN_Pin|EN_1V5_Pin|CAM_EN_Pin, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8001a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a88:	f001 fb3c 	bl	8003104 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CPI0_Pin CPI2_Pin CPI4_Pin CPI6_Pin */
  GPIO_InitStruct.Pin = CPI0_Pin|CPI2_Pin|CPI4_Pin|CPI6_Pin;
 8001a8c:	2355      	movs	r3, #85	; 0x55
 8001a8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa2:	f001 f9ad 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : CPI1_Pin CPI3_Pin CPI5_Pin CPI7_Pin */
  GPIO_InitStruct.Pin = CPI1_Pin|CPI3_Pin|CPI5_Pin|CPI7_Pin;
 8001aa6:	23aa      	movs	r3, #170	; 0xaa
 8001aa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001abc:	f001 f9a0 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_Pin HREF_Pin */
  GPIO_InitStruct.Pin = VSYNC_Pin|HREF_Pin;
 8001ac0:	2309      	movs	r3, #9
 8001ac2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <MX_GPIO_Init+0x160>)
 8001ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	482c      	ldr	r0, [pc, #176]	; (8001b84 <MX_GPIO_Init+0x164>)
 8001ad4:	f001 f994 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCLK_Pin */
  GPIO_InitStruct.Pin = MCLK_Pin;
 8001ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCLK_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af8:	f001 f982 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWDN_Pin EN_1V5_Pin */
  GPIO_InitStruct.Pin = PWDN_Pin|EN_1V5_Pin;
 8001afc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	f107 030c 	add.w	r3, r7, #12
 8001b12:	4619      	mov	r1, r3
 8001b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b18:	f001 f972 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_EN_Pin */
  GPIO_InitStruct.Pin = CAM_EN_Pin;
 8001b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAM_EN_GPIO_Port, &GPIO_InitStruct);
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	4619      	mov	r1, r3
 8001b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b38:	f001 f962 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM__CS_Pin */
  GPIO_InitStruct.Pin = CAM__CS_Pin;
 8001b3c:	2320      	movs	r3, #32
 8001b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CAM__CS_GPIO_Port, &GPIO_InitStruct);
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480d      	ldr	r0, [pc, #52]	; (8001b84 <MX_GPIO_Init+0x164>)
 8001b50:	f001 f956 	bl	8002e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 1);
 8001b54:	2201      	movs	r2, #1
 8001b56:	2101      	movs	r1, #1
 8001b58:	2006      	movs	r0, #6
 8001b5a:	f000 fddc 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b5e:	2006      	movs	r0, #6
 8001b60:	f000 fdf3 	bl	800274a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2101      	movs	r1, #1
 8001b68:	2009      	movs	r0, #9
 8001b6a:	f000 fdd4 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001b6e:	2009      	movs	r0, #9
 8001b70:	f000 fdeb 	bl	800274a <HAL_NVIC_EnableIRQ>

}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	10310000 	.word	0x10310000
 8001b84:	48000400 	.word	0x48000400

08001b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b8c:	b672      	cpsid	i
}
 8001b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <Error_Handler+0x8>
	...

08001b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_MspInit+0x48>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9e:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <HAL_MspInit+0x48>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_MspInit+0x48>)
 8001ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_MspInit+0x48>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	4a09      	ldr	r2, [pc, #36]	; (8001bdc <HAL_MspInit+0x48>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <HAL_MspInit+0x48>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001bca:	2005      	movs	r0, #5
 8001bcc:	f000 fd98 	bl	8002700 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bd0:	f001 ff16 	bl	8003a00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <HAL_I2C_MspInit+0x7c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d128      	bne.n	8001c54 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_I2C_MspInit+0x80>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <HAL_I2C_MspInit+0x80>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_I2C_MspInit+0x80>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = SIOD_Pin|SIOC_Pin;
 8001c1a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c20:	2312      	movs	r3, #18
 8001c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	480b      	ldr	r0, [pc, #44]	; (8001c64 <HAL_I2C_MspInit+0x84>)
 8001c38:	f001 f8e2 	bl	8002e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_I2C_MspInit+0x80>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_I2C_MspInit+0x80>)
 8001c42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c46:	6593      	str	r3, [r2, #88]	; 0x58
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_I2C_MspInit+0x80>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40005400 	.word	0x40005400
 8001c60:	40021000 	.word	0x40021000
 8001c64:	48000400 	.word	0x48000400

08001c68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM16)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a2c      	ldr	r2, [pc, #176]	; (8001d38 <HAL_TIM_Base_MspInit+0xd0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d151      	bne.n	8001d2e <HAL_TIM_Base_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <HAL_TIM_Base_MspInit+0xd4>)
 8001c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8e:	4a2b      	ldr	r2, [pc, #172]	; (8001d3c <HAL_TIM_Base_MspInit+0xd4>)
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	6613      	str	r3, [r2, #96]	; 0x60
 8001c96:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <HAL_TIM_Base_MspInit+0xd4>)
 8001c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <HAL_TIM_Base_MspInit+0xd4>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	4a25      	ldr	r2, [pc, #148]	; (8001d3c <HAL_TIM_Base_MspInit+0xd4>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cae:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <HAL_TIM_Base_MspInit+0xd4>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = PCLK_Pin;
 8001cba:	2310      	movs	r3, #16
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PCLK_GPIO_Port, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	481a      	ldr	r0, [pc, #104]	; (8001d40 <HAL_TIM_Base_MspInit+0xd8>)
 8001cd6:	f001 f893 	bl	8002e00 <HAL_GPIO_Init>

    /* TIM16 DMA Init */
    /* TIM16_CH1 Init */
    hdma_tim16_ch1.Instance = DMA1_Channel1;
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_TIM_Base_MspInit+0xdc>)
 8001cdc:	4a1a      	ldr	r2, [pc, #104]	; (8001d48 <HAL_TIM_Base_MspInit+0xe0>)
 8001cde:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1.Init.Request = DMA_REQUEST_TIM16_CH1;
 8001ce0:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_TIM_Base_MspInit+0xdc>)
 8001ce2:	2252      	movs	r2, #82	; 0x52
 8001ce4:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce6:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <HAL_TIM_Base_MspInit+0xdc>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cec:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_TIM_Base_MspInit+0xdc>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_TIM_Base_MspInit+0xdc>)
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_TIM_Base_MspInit+0xdc>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_TIM_Base_MspInit+0xdc>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1.Init.Mode = DMA_NORMAL;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <HAL_TIM_Base_MspInit+0xdc>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <HAL_TIM_Base_MspInit+0xdc>)
 8001d0c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001d10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1) != HAL_OK)
 8001d12:	480c      	ldr	r0, [pc, #48]	; (8001d44 <HAL_TIM_Base_MspInit+0xdc>)
 8001d14:	f000 fd42 	bl	800279c <HAL_DMA_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_TIM_Base_MspInit+0xba>
    {
      Error_Handler();
 8001d1e:	f7ff ff33 	bl	8001b88 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <HAL_TIM_Base_MspInit+0xdc>)
 8001d26:	625a      	str	r2, [r3, #36]	; 0x24
 8001d28:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <HAL_TIM_Base_MspInit+0xdc>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	; 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40014400 	.word	0x40014400
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	48000400 	.word	0x48000400
 8001d44:	20000ab4 	.word	0x20000ab4
 8001d48:	40020008 	.word	0x40020008

08001d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a3a      	ldr	r2, [pc, #232]	; (8001e54 <HAL_UART_MspInit+0x108>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d16d      	bne.n	8001e4a <HAL_UART_MspInit+0xfe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d6e:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <HAL_UART_MspInit+0x10c>)
 8001d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d72:	4a39      	ldr	r2, [pc, #228]	; (8001e58 <HAL_UART_MspInit+0x10c>)
 8001d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d78:	6613      	str	r3, [r2, #96]	; 0x60
 8001d7a:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <HAL_UART_MspInit+0x10c>)
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <HAL_UART_MspInit+0x10c>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	4a33      	ldr	r2, [pc, #204]	; (8001e58 <HAL_UART_MspInit+0x10c>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d92:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <HAL_UART_MspInit+0x10c>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CAM_TX_Pin;
 8001d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da4:	2312      	movs	r3, #18
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001db0:	2307      	movs	r3, #7
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CAM_TX_GPIO_Port, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dbe:	f001 f81f 	bl	8002e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_RX_Pin;
 8001dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dd4:	2307      	movs	r3, #7
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CAM_RX_GPIO_Port, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de2:	f001 f80d 	bl	8002e00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel2;
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_UART_MspInit+0x110>)
 8001de8:	4a1d      	ldr	r2, [pc, #116]	; (8001e60 <HAL_UART_MspInit+0x114>)
 8001dea:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_UART_MspInit+0x110>)
 8001dee:	2219      	movs	r2, #25
 8001df0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_UART_MspInit+0x110>)
 8001df4:	2210      	movs	r2, #16
 8001df6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df8:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_UART_MspInit+0x110>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_UART_MspInit+0x110>)
 8001e00:	2280      	movs	r2, #128	; 0x80
 8001e02:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_UART_MspInit+0x110>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_UART_MspInit+0x110>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_UART_MspInit+0x110>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_UART_MspInit+0x110>)
 8001e18:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001e1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e1e:	480f      	ldr	r0, [pc, #60]	; (8001e5c <HAL_UART_MspInit+0x110>)
 8001e20:	f000 fcbc 	bl	800279c <HAL_DMA_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8001e2a:	f7ff fead 	bl	8001b88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <HAL_UART_MspInit+0x110>)
 8001e32:	679a      	str	r2, [r3, #120]	; 0x78
 8001e34:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <HAL_UART_MspInit+0x110>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2025      	movs	r0, #37	; 0x25
 8001e40:	f000 fc69 	bl	8002716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e44:	2025      	movs	r0, #37	; 0x25
 8001e46:	f000 fc80 	bl	800274a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3728      	adds	r7, #40	; 0x28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40013800 	.word	0x40013800
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	200009c4 	.word	0x200009c4
 8001e60:	4002041c 	.word	0x4002041c

08001e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <NMI_Handler+0x4>

08001e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <HardFault_Handler+0x4>

08001e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <MemManage_Handler+0x4>

08001e76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <BusFault_Handler+0x4>

08001e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <UsageFault_Handler+0x4>

08001e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb0:	f000 faf2 	bl	8002498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f001 f953 	bl	8003168 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001eca:	2008      	movs	r0, #8
 8001ecc:	f001 f94c 	bl	8003168 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
//////////////
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim16_ch1);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <DMA1_Channel1_IRQHandler+0x10>)
 8001eda:	f000 fe42 	bl	8002b62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
//////////////
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000ab4 	.word	0x20000ab4

08001ee8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <USART1_IRQHandler+0x10>)
 8001eee:	f003 f8e7 	bl	80050c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000a24 	.word	0x20000a24

08001efc <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <DMA2_Channel2_IRQHandler+0x10>)
 8001f02:	f000 fe2e 	bl	8002b62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200009c4 	.word	0x200009c4

08001f10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
	return 1;
 8001f14:	2301      	movs	r3, #1
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_kill>:

int _kill(int pid, int sig)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f2a:	f004 f941 	bl	80061b0 <__errno>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2216      	movs	r2, #22
 8001f32:	601a      	str	r2, [r3, #0]
	return -1;
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_exit>:

void _exit (int status)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f48:	f04f 31ff 	mov.w	r1, #4294967295
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ffe7 	bl	8001f20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f52:	e7fe      	b.n	8001f52 <_exit+0x12>

08001f54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	e00a      	b.n	8001f7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f66:	f3af 8000 	nop.w
 8001f6a:	4601      	mov	r1, r0
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	60ba      	str	r2, [r7, #8]
 8001f72:	b2ca      	uxtb	r2, r1
 8001f74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	dbf0      	blt.n	8001f66 <_read+0x12>
	}

return len;
 8001f84:	687b      	ldr	r3, [r7, #4]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
	return -1;
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fb6:	605a      	str	r2, [r3, #4]
	return 0;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_isatty>:

int _isatty(int file)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
	return 1;
 8001fce:	2301      	movs	r3, #1
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
	return 0;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002000:	4a14      	ldr	r2, [pc, #80]	; (8002054 <_sbrk+0x5c>)
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <_sbrk+0x60>)
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <_sbrk+0x64>)
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <_sbrk+0x68>)
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d207      	bcs.n	8002038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002028:	f004 f8c2 	bl	80061b0 <__errno>
 800202c:	4603      	mov	r3, r0
 800202e:	220c      	movs	r2, #12
 8002030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
 8002036:	e009      	b.n	800204c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	4a05      	ldr	r2, [pc, #20]	; (800205c <_sbrk+0x64>)
 8002048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204a:	68fb      	ldr	r3, [r7, #12]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20008000 	.word	0x20008000
 8002058:	00000400 	.word	0x00000400
 800205c:	20000474 	.word	0x20000474
 8002060:	20000b80 	.word	0x20000b80

08002064 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002064:	480d      	ldr	r0, [pc, #52]	; (800209c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002066:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002068:	480d      	ldr	r0, [pc, #52]	; (80020a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800206a:	490e      	ldr	r1, [pc, #56]	; (80020a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800206c:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <LoopForever+0xe>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002070:	e002      	b.n	8002078 <LoopCopyDataInit>

08002072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002076:	3304      	adds	r3, #4

08002078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800207c:	d3f9      	bcc.n	8002072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207e:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002080:	4c0b      	ldr	r4, [pc, #44]	; (80020b0 <LoopForever+0x16>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002084:	e001      	b.n	800208a <LoopFillZerobss>

08002086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002088:	3204      	adds	r2, #4

0800208a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800208c:	d3fb      	bcc.n	8002086 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800208e:	f000 f99f 	bl	80023d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002092:	f004 f893 	bl	80061bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002096:	f7ff fb19 	bl	80016cc <main>

0800209a <LoopForever>:

LoopForever:
    b LoopForever
 800209a:	e7fe      	b.n	800209a <LoopForever>
  ldr   r0, =_estack
 800209c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80020a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a4:	20000444 	.word	0x20000444
  ldr r2, =_sidata
 80020a8:	080093ac 	.word	0x080093ac
  ldr r2, =_sbss
 80020ac:	20000444 	.word	0x20000444
  ldr r4, =_ebss
 80020b0:	20000b7c 	.word	0x20000b7c

080020b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020b4:	e7fe      	b.n	80020b4 <ADC1_2_IRQHandler>

080020b6 <InitPlatform>:

/************************************************************************
 *                      Local Function Definitions                      *
 ***********************************************************************/
void InitPlatform( platform_t * platform, protocol_t host_communication_protocol, generic_handle_t host_communication_handle )
{
 80020b6:	b480      	push	{r7}
 80020b8:	b087      	sub	sp, #28
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	460b      	mov	r3, r1
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	72fb      	strb	r3, [r7, #11]
  *platform = (platform_t){ host_communication_protocol, host_communication_handle };
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	7afa      	ldrb	r2, [r7, #11]
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	605a      	str	r2, [r3, #4]
}
 80020d0:	bf00      	nop
 80020d2:	371c      	adds	r7, #28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <WritePin>:

void WritePin( GPIO_t * gpio, uint8_t val )
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
	PLATFORM_SPECIFIC(WritePin)( gpio->port, gpio->pin, val );
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	889b      	ldrh	r3, [r3, #4]
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	4619      	mov	r1, r3
 80020f4:	f7ff fa90 	bl	8001618 <STM_WritePin>
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <TogglePin>:
void TogglePin( GPIO_t * gpio )
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	PLATFORM_SPECIFIC(TogglePin)( gpio->port, gpio->pin );
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	889b      	ldrh	r3, [r3, #4]
 8002110:	4619      	mov	r1, r3
 8002112:	4610      	mov	r0, r2
 8002114:	f7ff fa92 	bl	800163c <STM_TogglePin>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <SetPortMode>:
void SetPortMode(GPIO_t * gpio, uint16_t val )
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
  PLATFORM_SPECIFIC(SetPortMode)( gpio->port, gpio->pin, val );
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	889b      	ldrh	r3, [r3, #4]
 8002134:	887a      	ldrh	r2, [r7, #2]
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	4619      	mov	r1, r3
 800213a:	f7ff fa42 	bl	80015c2 <STM_SetPortMode>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <PerformHostCommand>:

platform_status_enum PerformHostCommand(
  host_command_type_enum command,
  platform_wait_priority_level_enum priority )
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	460a      	mov	r2, r1
 8002152:	71fb      	strb	r3, [r7, #7]
 8002154:	4613      	mov	r3, r2
 8002156:	71bb      	strb	r3, [r7, #6]
  platform_status_enum status = NO_STATUS;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
  uint16_t return_data = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	81bb      	strh	r3, [r7, #12]
  host_command_t packet = { HOST_ADDRESS, THIS_ID, priority, command };
 8002160:	2301      	movs	r3, #1
 8002162:	723b      	strb	r3, [r7, #8]
 8002164:	2301      	movs	r3, #1
 8002166:	727b      	strb	r3, [r7, #9]
 8002168:	79bb      	ldrb	r3, [r7, #6]
 800216a:	72bb      	strb	r3, [r7, #10]
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	72fb      	strb	r3, [r7, #11]
  for( uint8_t i = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	73bb      	strb	r3, [r7, #14]
 8002174:	e025      	b.n	80021c2 <PerformHostCommand+0x7a>
    i < HOST_COMM_RETRIES
    && status != OK;
    i++ )
  {
    switch( command )
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d117      	bne.n	80021ac <PerformHostCommand+0x64>
    {
      case PING_HOST:
        return_data = PlatformFunctions.Host.Transmit( (uint8_t *)&packet, sizeof(host_command_t) );
 800217c:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <PerformHostCommand+0x90>)
 800217e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002180:	f107 0208 	add.w	r2, r7, #8
 8002184:	2104      	movs	r1, #4
 8002186:	4610      	mov	r0, r2
 8002188:	4798      	blx	r3
 800218a:	4603      	mov	r3, r0
 800218c:	81bb      	strh	r3, [r7, #12]
        if( return_data == 0 )
 800218e:	89bb      	ldrh	r3, [r7, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <PerformHostCommand+0x52>
        {
          status = FAILURE;
 8002194:	2302      	movs	r3, #2
 8002196:	73fb      	strb	r3, [r7, #15]
          continue;
 8002198:	e010      	b.n	80021bc <PerformHostCommand+0x74>
        }
//        return_data = PlatformFunctions.Host.Receive( /* Enter correct buffer */ );
        if( return_data == 0 )
 800219a:	89bb      	ldrh	r3, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <PerformHostCommand+0x5e>
        {
          status = INVALID_OUTPUT;
 80021a0:	2304      	movs	r3, #4
 80021a2:	73fb      	strb	r3, [r7, #15]
          continue;
 80021a4:	e00a      	b.n	80021bc <PerformHostCommand+0x74>
        }
        status = OK;
 80021a6:	2301      	movs	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
        break;
 80021aa:	e002      	b.n	80021b2 <PerformHostCommand+0x6a>
      default:
        status = INVALID_INPUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	73fb      	strb	r3, [r7, #15]
        break;
 80021b0:	bf00      	nop
    }
    PlatformFunctions.Wait( HOST_COMMAND_RETRY_TIME );
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <PerformHostCommand+0x90>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021ba:	4798      	blx	r3
    i++ )
 80021bc:	7bbb      	ldrb	r3, [r7, #14]
 80021be:	3301      	adds	r3, #1
 80021c0:	73bb      	strb	r3, [r7, #14]
  for( uint8_t i = 0;
 80021c2:	7bbb      	ldrb	r3, [r7, #14]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d802      	bhi.n	80021ce <PerformHostCommand+0x86>
    && status != OK;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d1d3      	bne.n	8002176 <PerformHostCommand+0x2e>
  }
  return status;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	200001c0 	.word	0x200001c0

080021dc <TransmitToHost>:

uint8_t TransmitToHost( uint8_t * buffer, uint16_t length )
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	807b      	strh	r3, [r7, #2]
#if HOST_COMMUNICATION_PROTOCOL == USART
  return PlatformFunctions.USART.Transmit( (UART_Handle_t *)Platform.HostHandle, buffer, length );
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <TransmitToHost+0x24>)
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	4a05      	ldr	r2, [pc, #20]	; (8002204 <TransmitToHost+0x28>)
 80021ee:	6850      	ldr	r0, [r2, #4]
 80021f0:	887a      	ldrh	r2, [r7, #2]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4798      	blx	r3
 80021f6:	4603      	mov	r3, r0
#elif HOST_COMMUNICATION_PROTOCOL == USB
  return CDC_Transmit_FS(buffer, length);
#else
#error "Invalid host communication protocol!"
#endif
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200001c0 	.word	0x200001c0
 8002204:	20000b60 	.word	0x20000b60

08002208 <ReceiveFromHost>:
uint16_t ReceiveFromHost( uint8_t * buffer )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  #if HOST_COMMUNICATION_PROTOCOL == USART
    return PlatformFunctions.USART.Receive( (UART_Handle_t *)Platform.HostHandle, buffer );
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <ReceiveFromHost+0x20>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	4a05      	ldr	r2, [pc, #20]	; (800222c <ReceiveFromHost+0x24>)
 8002216:	6852      	ldr	r2, [r2, #4]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4610      	mov	r0, r2
 800221c:	4798      	blx	r3
 800221e:	4603      	mov	r3, r0
    PlatformFunctions.I2C.Receive( (I2C_Handle_t *)Platform.HostHandle, HOST_ADDRESS, data, len );
    return 1;
  #else
  #error "Invalid host communication protocol!"
  #endif
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200001c0 	.word	0x200001c0
 800222c:	20000b60 	.word	0x20000b60

08002230 <InitSystem>:
#include "printers.h"

void InitSystem(
  system_t * system,
  system_states_list_t * state_list )
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  system->state_list = state_list;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	605a      	str	r2, [r3, #4]
  SystemFunctions.State.Set( system, system->state );
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <InitSystem+0x28>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	7852      	ldrb	r2, [r2, #1]
 8002248:	4611      	mov	r1, r2
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4798      	blx	r3
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000248 	.word	0x20000248

0800225c <NextStateSystem>:

void NextStateSystem( system_t * system )
{
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  SystemFunctions.State.Enter( system, SystemFunctions.State.Get(system)->next );
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <NextStateSystem+0x28>)
 8002266:	691c      	ldr	r4, [r3, #16]
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <NextStateSystem+0x28>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
 8002270:	4603      	mov	r3, r0
 8002272:	785b      	ldrb	r3, [r3, #1]
 8002274:	4619      	mov	r1, r3
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	47a0      	blx	r4
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bd90      	pop	{r4, r7, pc}
 8002282:	bf00      	nop
 8002284:	20000248 	.word	0x20000248

08002288 <GetStateSystem>:

system_state_t * GetStateSystem( system_t * system )
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  return SystemFunctions.State.GetFromList( system, system->state );
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <GetStateSystem+0x20>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	7852      	ldrb	r2, [r2, #1]
 8002298:	4611      	mov	r1, r2
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
 800229e:	4603      	mov	r3, r0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000248 	.word	0x20000248

080022ac <SetStateSystem>:

void SetStateSystem( system_t * system, system_state_enum new_state )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
  if( system->state != new_state )
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	785b      	ldrb	r3, [r3, #1]
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d013      	beq.n	80022ea <SetStateSystem+0x3e>
    LOG(STATE_DEBUG, "Entering %s\r\n", system_state_enum_strings[new_state]);
 80022c2:	2303      	movs	r3, #3
 80022c4:	73fb      	strb	r3, [r7, #15]
 80022c6:	e005      	b.n	80022d4 <SetStateSystem+0x28>
 80022c8:	2009      	movs	r0, #9
 80022ca:	f004 fce5 	bl	8006c98 <putchar>
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	3301      	adds	r3, #1
 80022d2:	73fb      	strb	r3, [r7, #15]
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d9f6      	bls.n	80022c8 <SetStateSystem+0x1c>
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <SetStateSystem+0x4c>)
 80022de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e2:	4619      	mov	r1, r3
 80022e4:	4805      	ldr	r0, [pc, #20]	; (80022fc <SetStateSystem+0x50>)
 80022e6:	f004 fcbf 	bl	8006c68 <iprintf>
  system->state = new_state;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	705a      	strb	r2, [r3, #1]
}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000220 	.word	0x20000220
 80022fc:	08008f68 	.word	0x08008f68

08002300 <PerformStateSystem>:

void PerformStateSystem( system_t * system )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  void (*routine)(void) = SystemFunctions.State.Get(system)->routine;
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <PerformStateSystem+0x28>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
 8002310:	4603      	mov	r3, r0
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	60fb      	str	r3, [r7, #12]
  if( routine != NULL ) routine();
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <PerformStateSystem+0x20>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4798      	blx	r3
}
 8002320:	bf00      	nop
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000248 	.word	0x20000248

0800232c <EnterStateSystem>:

void EnterStateSystem( system_t * system, system_state_enum new_state )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
  SystemFunctions.State.Set( system, new_state );
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <EnterStateSystem+0x28>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	4611      	mov	r1, r2
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	4798      	blx	r3
  SystemFunctions.State.Perform( system );
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <EnterStateSystem+0x28>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000248 	.word	0x20000248

08002358 <IsInStateSystem>:

bool IsInStateSystem( system_t * system, system_state_enum check_state )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
  return ( SystemFunctions.State.Get( system )->state == check_state );
 8002364:	4b07      	ldr	r3, [pc, #28]	; (8002384 <IsInStateSystem+0x2c>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	4798      	blx	r3
 800236c:	4603      	mov	r3, r0
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	429a      	cmp	r2, r3
 8002374:	bf0c      	ite	eq
 8002376:	2301      	moveq	r3, #1
 8002378:	2300      	movne	r3, #0
 800237a:	b2db      	uxtb	r3, r3
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000248 	.word	0x20000248

08002388 <GetStateFromListSystem>:

system_state_t * GetStateFromListSystem( system_t * system, system_state_enum state )
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	70fb      	strb	r3, [r7, #3]
    system_state_t * state_type;
    /* Cycle state list to find specified state.
        If not found, return is ERROR_STATE */
    for( uint8_t i = 0; i < SYS_ERROR; i++ )
 8002394:	2300      	movs	r3, #0
 8002396:	72fb      	strb	r3, [r7, #11]
 8002398:	e00d      	b.n	80023b6 <GetStateFromListSystem+0x2e>
    {
        state_type = &(*system->state_list)[i];
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	7afb      	ldrb	r3, [r7, #11]
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
        if( state_type->state == state ) break;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d006      	beq.n	80023be <GetStateFromListSystem+0x36>
    for( uint8_t i = 0; i < SYS_ERROR; i++ )
 80023b0:	7afb      	ldrb	r3, [r7, #11]
 80023b2:	3301      	adds	r3, #1
 80023b4:	72fb      	strb	r3, [r7, #11]
 80023b6:	7afb      	ldrb	r3, [r7, #11]
 80023b8:	2b07      	cmp	r3, #7
 80023ba:	d9ee      	bls.n	800239a <GetStateFromListSystem+0x12>
 80023bc:	e000      	b.n	80023c0 <GetStateFromListSystem+0x38>
        if( state_type->state == state ) break;
 80023be:	bf00      	nop
    }
    return state_type;
 80023c0:	68fb      	ldr	r3, [r7, #12]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <SystemInit+0x20>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <SystemInit+0x20>)
 80023dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023fe:	2003      	movs	r0, #3
 8002400:	f000 f97e 	bl	8002700 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002404:	2000      	movs	r0, #0
 8002406:	f000 f80d 	bl	8002424 <HAL_InitTick>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	71fb      	strb	r3, [r7, #7]
 8002414:	e001      	b.n	800241a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002416:	f7ff fbbd 	bl	8001b94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800241a:	79fb      	ldrb	r3, [r7, #7]

}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002430:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_InitTick+0x68>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d022      	beq.n	800247e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_InitTick+0x6c>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_InitTick+0x68>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002444:	fbb1 f3f3 	udiv	r3, r1, r3
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	4618      	mov	r0, r3
 800244e:	f000 f998 	bl	8002782 <HAL_SYSTICK_Config>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10f      	bne.n	8002478 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b0f      	cmp	r3, #15
 800245c:	d809      	bhi.n	8002472 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800245e:	2200      	movs	r2, #0
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	f04f 30ff 	mov.w	r0, #4294967295
 8002466:	f000 f956 	bl	8002716 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <HAL_InitTick+0x70>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	e007      	b.n	8002482 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
 8002476:	e004      	b.n	8002482 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e001      	b.n	8002482 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002482:	7bfb      	ldrb	r3, [r7, #15]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000270 	.word	0x20000270
 8002490:	20000268 	.word	0x20000268
 8002494:	2000026c 	.word	0x2000026c

08002498 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_IncTick+0x1c>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_IncTick+0x20>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4413      	add	r3, r2
 80024a6:	4a03      	ldr	r2, [pc, #12]	; (80024b4 <HAL_IncTick+0x1c>)
 80024a8:	6013      	str	r3, [r2, #0]
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	20000b68 	.word	0x20000b68
 80024b8:	20000270 	.word	0x20000270

080024bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return uwTick;
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <HAL_GetTick+0x14>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000b68 	.word	0x20000b68

080024d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7ff ffee 	bl	80024bc <HAL_GetTick>
 80024e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ec:	d004      	beq.n	80024f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_Delay+0x40>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4413      	add	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024f8:	bf00      	nop
 80024fa:	f7ff ffdf 	bl	80024bc <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	429a      	cmp	r2, r3
 8002508:	d8f7      	bhi.n	80024fa <HAL_Delay+0x26>
  {
  }
}
 800250a:	bf00      	nop
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000270 	.word	0x20000270

08002518 <__NVIC_SetPriorityGrouping>:
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002534:	4013      	ands	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254a:	4a04      	ldr	r2, [pc, #16]	; (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	60d3      	str	r3, [r2, #12]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_GetPriorityGrouping>:
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <__NVIC_GetPriorityGrouping+0x18>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	f003 0307 	and.w	r3, r3, #7
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_EnableIRQ>:
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	2b00      	cmp	r3, #0
 800258c:	db0b      	blt.n	80025a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	4907      	ldr	r1, [pc, #28]	; (80025b4 <__NVIC_EnableIRQ+0x38>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	2001      	movs	r0, #1
 800259e:	fa00 f202 	lsl.w	r2, r0, r2
 80025a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000e100 	.word	0xe000e100

080025b8 <__NVIC_DisableIRQ>:
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db12      	blt.n	80025f0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	490a      	ldr	r1, [pc, #40]	; (80025fc <__NVIC_DisableIRQ+0x44>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	3320      	adds	r3, #32
 80025e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80025e4:	f3bf 8f4f 	dsb	sy
}
 80025e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025ea:	f3bf 8f6f 	isb	sy
}
 80025ee:	bf00      	nop
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000e100 	.word	0xe000e100

08002600 <__NVIC_SetPriority>:
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	6039      	str	r1, [r7, #0]
 800260a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	2b00      	cmp	r3, #0
 8002612:	db0a      	blt.n	800262a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	b2da      	uxtb	r2, r3
 8002618:	490c      	ldr	r1, [pc, #48]	; (800264c <__NVIC_SetPriority+0x4c>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	440b      	add	r3, r1
 8002624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002628:	e00a      	b.n	8002640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4908      	ldr	r1, [pc, #32]	; (8002650 <__NVIC_SetPriority+0x50>)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	3b04      	subs	r3, #4
 8002638:	0112      	lsls	r2, r2, #4
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	440b      	add	r3, r1
 800263e:	761a      	strb	r2, [r3, #24]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000e100 	.word	0xe000e100
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <NVIC_EncodePriority>:
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f1c3 0307 	rsb	r3, r3, #7
 800266e:	2b04      	cmp	r3, #4
 8002670:	bf28      	it	cs
 8002672:	2304      	movcs	r3, #4
 8002674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3304      	adds	r3, #4
 800267a:	2b06      	cmp	r3, #6
 800267c:	d902      	bls.n	8002684 <NVIC_EncodePriority+0x30>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3b03      	subs	r3, #3
 8002682:	e000      	b.n	8002686 <NVIC_EncodePriority+0x32>
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	f04f 32ff 	mov.w	r2, #4294967295
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	401a      	ands	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800269c:	f04f 31ff 	mov.w	r1, #4294967295
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	43d9      	mvns	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	4313      	orrs	r3, r2
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	; 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026cc:	d301      	bcc.n	80026d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00f      	b.n	80026f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d2:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <SysTick_Config+0x40>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026da:	210f      	movs	r1, #15
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f7ff ff8e 	bl	8002600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <SysTick_Config+0x40>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <SysTick_Config+0x40>)
 80026ec:	2207      	movs	r2, #7
 80026ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	e000e010 	.word	0xe000e010

08002700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff05 	bl	8002518 <__NVIC_SetPriorityGrouping>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b086      	sub	sp, #24
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002724:	f7ff ff1c 	bl	8002560 <__NVIC_GetPriorityGrouping>
 8002728:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	6978      	ldr	r0, [r7, #20]
 8002730:	f7ff ff90 	bl	8002654 <NVIC_EncodePriority>
 8002734:	4602      	mov	r2, r0
 8002736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff5f 	bl	8002600 <__NVIC_SetPriority>
}
 8002742:	bf00      	nop
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff0f 	bl	800257c <__NVIC_EnableIRQ>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff1f 	bl	80025b8 <__NVIC_DisableIRQ>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ff96 	bl	80026bc <SysTick_Config>
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e08d      	b.n	80028ca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <HAL_DMA_Init+0x138>)
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d80f      	bhi.n	80027da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	4b45      	ldr	r3, [pc, #276]	; (80028d8 <HAL_DMA_Init+0x13c>)
 80027c2:	4413      	add	r3, r2
 80027c4:	4a45      	ldr	r2, [pc, #276]	; (80028dc <HAL_DMA_Init+0x140>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	009a      	lsls	r2, r3, #2
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a42      	ldr	r2, [pc, #264]	; (80028e0 <HAL_DMA_Init+0x144>)
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40
 80027d8:	e00e      	b.n	80027f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	4b40      	ldr	r3, [pc, #256]	; (80028e4 <HAL_DMA_Init+0x148>)
 80027e2:	4413      	add	r3, r2
 80027e4:	4a3d      	ldr	r2, [pc, #244]	; (80028dc <HAL_DMA_Init+0x140>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	009a      	lsls	r2, r3, #2
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a3c      	ldr	r2, [pc, #240]	; (80028e8 <HAL_DMA_Init+0x14c>)
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800280e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002812:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800281c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fa76 	bl	8002d3c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002858:	d102      	bne.n	8002860 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002874:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d010      	beq.n	80028a0 <HAL_DMA_Init+0x104>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b04      	cmp	r3, #4
 8002884:	d80c      	bhi.n	80028a0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fa96 	bl	8002db8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	e008      	b.n	80028b2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40020407 	.word	0x40020407
 80028d8:	bffdfff8 	.word	0xbffdfff8
 80028dc:	cccccccd 	.word	0xcccccccd
 80028e0:	40020000 	.word	0x40020000
 80028e4:	bffdfbf8 	.word	0xbffdfbf8
 80028e8:	40020400 	.word	0x40020400

080028ec <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_DMA_Start_IT+0x20>
 8002908:	2302      	movs	r3, #2
 800290a:	e066      	b.n	80029da <HAL_DMA_Start_IT+0xee>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d155      	bne.n	80029cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0201 	bic.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f9bb 	bl	8002cc0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 020e 	orr.w	r2, r2, #14
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	e00f      	b.n	8002984 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0204 	bic.w	r2, r2, #4
 8002972:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 020a 	orr.w	r2, r2, #10
 8002982:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0201 	orr.w	r2, r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e005      	b.n	80029d8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
 80029d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d005      	beq.n	8002a06 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2204      	movs	r2, #4
 80029fe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
 8002a04:	e037      	b.n	8002a76 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 020e 	bic.w	r2, r2, #14
 8002a14:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a24:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0201 	bic.w	r2, r2, #1
 8002a34:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f003 021f 	and.w	r2, r3, #31
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	2101      	movs	r1, #1
 8002a44:	fa01 f202 	lsl.w	r2, r1, r2
 8002a48:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a52:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00c      	beq.n	8002a76 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a6a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a74:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d00d      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2204      	movs	r2, #4
 8002ab0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	e047      	b.n	8002b58 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 020e 	bic.w	r2, r2, #14
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002af6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	2101      	movs	r1, #1
 8002b06:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b14:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00c      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b36:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	4798      	blx	r3
    }
  }
  return status;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2204      	movs	r2, #4
 8002b84:	409a      	lsls	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d026      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x7a>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d021      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d107      	bne.n	8002bb6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0204 	bic.w	r2, r2, #4
 8002bb4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f003 021f 	and.w	r2, r3, #31
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	2104      	movs	r1, #4
 8002bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d071      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002bda:	e06c      	b.n	8002cb6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	2202      	movs	r2, #2
 8002be6:	409a      	lsls	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d02e      	beq.n	8002c4e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d029      	beq.n	8002c4e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10b      	bne.n	8002c20 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 020a 	bic.w	r2, r2, #10
 8002c16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	f003 021f 	and.w	r2, r3, #31
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	2102      	movs	r1, #2
 8002c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c32:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d038      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002c4c:	e033      	b.n	8002cb6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	2208      	movs	r2, #8
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d02a      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d025      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 020e 	bic.w	r2, r2, #14
 8002c7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c80:	f003 021f 	and.w	r2, r3, #31
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	2101      	movs	r1, #1
 8002c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d004      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002cb6:	bf00      	nop
 8002cb8:	bf00      	nop
}
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002cd6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ce8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	f003 021f 	and.w	r2, r3, #31
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d108      	bne.n	8002d20 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d1e:	e007      	b.n	8002d30 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	60da      	str	r2, [r3, #12]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d802      	bhi.n	8002d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002d50:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e001      	b.n	8002d5a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002d58:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	3b08      	subs	r3, #8
 8002d66:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	009a      	lsls	r2, r3, #2
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002d86:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 031f 	and.w	r3, r3, #31
 8002d8e:	2201      	movs	r2, #1
 8002d90:	409a      	lsls	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40020407 	.word	0x40020407
 8002da8:	40020800 	.word	0x40020800
 8002dac:	40020820 	.word	0x40020820
 8002db0:	cccccccd 	.word	0xcccccccd
 8002db4:	40020880 	.word	0x40020880

08002db8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a08      	ldr	r2, [pc, #32]	; (8002dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002dda:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	2201      	movs	r2, #1
 8002de6:	409a      	lsls	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	1000823f 	.word	0x1000823f
 8002dfc:	40020940 	.word	0x40020940

08002e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e0e:	e15a      	b.n	80030c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 814c 	beq.w	80030c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d00b      	beq.n	8002e48 <HAL_GPIO_Init+0x48>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d007      	beq.n	8002e48 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e3c:	2b11      	cmp	r3, #17
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b12      	cmp	r3, #18
 8002e46:	d130      	bne.n	8002eaa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2203      	movs	r2, #3
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e7e:	2201      	movs	r2, #1
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 0201 	and.w	r2, r3, #1
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_Init+0xea>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b12      	cmp	r3, #18
 8002ee8:	d123      	bne.n	8002f32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	08da      	lsrs	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3208      	adds	r2, #8
 8002ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	220f      	movs	r2, #15
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	08da      	lsrs	r2, r3, #3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3208      	adds	r2, #8
 8002f2c:	6939      	ldr	r1, [r7, #16]
 8002f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4013      	ands	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0203 	and.w	r2, r3, #3
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80a6 	beq.w	80030c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f74:	4b5b      	ldr	r3, [pc, #364]	; (80030e4 <HAL_GPIO_Init+0x2e4>)
 8002f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f78:	4a5a      	ldr	r2, [pc, #360]	; (80030e4 <HAL_GPIO_Init+0x2e4>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6613      	str	r3, [r2, #96]	; 0x60
 8002f80:	4b58      	ldr	r3, [pc, #352]	; (80030e4 <HAL_GPIO_Init+0x2e4>)
 8002f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f8c:	4a56      	ldr	r2, [pc, #344]	; (80030e8 <HAL_GPIO_Init+0x2e8>)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	3302      	adds	r3, #2
 8002f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	220f      	movs	r2, #15
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4013      	ands	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fb6:	d01f      	beq.n	8002ff8 <HAL_GPIO_Init+0x1f8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a4c      	ldr	r2, [pc, #304]	; (80030ec <HAL_GPIO_Init+0x2ec>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d019      	beq.n	8002ff4 <HAL_GPIO_Init+0x1f4>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a4b      	ldr	r2, [pc, #300]	; (80030f0 <HAL_GPIO_Init+0x2f0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d013      	beq.n	8002ff0 <HAL_GPIO_Init+0x1f0>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a4a      	ldr	r2, [pc, #296]	; (80030f4 <HAL_GPIO_Init+0x2f4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00d      	beq.n	8002fec <HAL_GPIO_Init+0x1ec>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a49      	ldr	r2, [pc, #292]	; (80030f8 <HAL_GPIO_Init+0x2f8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d007      	beq.n	8002fe8 <HAL_GPIO_Init+0x1e8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a48      	ldr	r2, [pc, #288]	; (80030fc <HAL_GPIO_Init+0x2fc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_GPIO_Init+0x1e4>
 8002fe0:	2305      	movs	r3, #5
 8002fe2:	e00a      	b.n	8002ffa <HAL_GPIO_Init+0x1fa>
 8002fe4:	2306      	movs	r3, #6
 8002fe6:	e008      	b.n	8002ffa <HAL_GPIO_Init+0x1fa>
 8002fe8:	2304      	movs	r3, #4
 8002fea:	e006      	b.n	8002ffa <HAL_GPIO_Init+0x1fa>
 8002fec:	2303      	movs	r3, #3
 8002fee:	e004      	b.n	8002ffa <HAL_GPIO_Init+0x1fa>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e002      	b.n	8002ffa <HAL_GPIO_Init+0x1fa>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <HAL_GPIO_Init+0x1fa>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	f002 0203 	and.w	r2, r2, #3
 8003000:	0092      	lsls	r2, r2, #2
 8003002:	4093      	lsls	r3, r2
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800300a:	4937      	ldr	r1, [pc, #220]	; (80030e8 <HAL_GPIO_Init+0x2e8>)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	089b      	lsrs	r3, r3, #2
 8003010:	3302      	adds	r3, #2
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003018:	4b39      	ldr	r3, [pc, #228]	; (8003100 <HAL_GPIO_Init+0x300>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	43db      	mvns	r3, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800303c:	4a30      	ldr	r2, [pc, #192]	; (8003100 <HAL_GPIO_Init+0x300>)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003042:	4b2f      	ldr	r3, [pc, #188]	; (8003100 <HAL_GPIO_Init+0x300>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	43db      	mvns	r3, r3
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4013      	ands	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003066:	4a26      	ldr	r2, [pc, #152]	; (8003100 <HAL_GPIO_Init+0x300>)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800306c:	4b24      	ldr	r3, [pc, #144]	; (8003100 <HAL_GPIO_Init+0x300>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	43db      	mvns	r3, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003090:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <HAL_GPIO_Init+0x300>)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003096:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <HAL_GPIO_Init+0x300>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	43db      	mvns	r3, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030ba:	4a11      	ldr	r2, [pc, #68]	; (8003100 <HAL_GPIO_Init+0x300>)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3301      	adds	r3, #1
 80030c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f47f ae9d 	bne.w	8002e10 <HAL_GPIO_Init+0x10>
  }
}
 80030d6:	bf00      	nop
 80030d8:	bf00      	nop
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40010000 	.word	0x40010000
 80030ec:	48000400 	.word	0x48000400
 80030f0:	48000800 	.word	0x48000800
 80030f4:	48000c00 	.word	0x48000c00
 80030f8:	48001000 	.word	0x48001000
 80030fc:	48001400 	.word	0x48001400
 8003100:	40010400 	.word	0x40010400

08003104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	807b      	strh	r3, [r7, #2]
 8003110:	4613      	mov	r3, r2
 8003112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003114:	787b      	ldrb	r3, [r7, #1]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800311a:	887a      	ldrh	r2, [r7, #2]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003120:	e002      	b.n	8003128 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003122:	887a      	ldrh	r2, [r7, #2]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003146:	887a      	ldrh	r2, [r7, #2]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4013      	ands	r3, r2
 800314c:	041a      	lsls	r2, r3, #16
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	43d9      	mvns	r1, r3
 8003152:	887b      	ldrh	r3, [r7, #2]
 8003154:	400b      	ands	r3, r1
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	619a      	str	r2, [r3, #24]
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003172:	4b08      	ldr	r3, [pc, #32]	; (8003194 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	4013      	ands	r3, r2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d006      	beq.n	800318c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800317e:	4a05      	ldr	r2, [pc, #20]	; (8003194 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe f8f8 	bl	800137c <HAL_GPIO_EXTI_Callback>
  }
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40010400 	.word	0x40010400

08003198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e081      	b.n	80032ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe fd0e 	bl	8001be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	; 0x24
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d107      	bne.n	8003212 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	e006      	b.n	8003220 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800321e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d104      	bne.n	8003232 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003230:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003244:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003254:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	ea42 0103 	orr.w	r1, r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	021a      	lsls	r2, r3, #8
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69d9      	ldr	r1, [r3, #28]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1a      	ldr	r2, [r3, #32]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	461a      	mov	r2, r3
 80032c4:	460b      	mov	r3, r1
 80032c6:	817b      	strh	r3, [r7, #10]
 80032c8:	4613      	mov	r3, r2
 80032ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	f040 80da 	bne.w	800348e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_I2C_Master_Transmit+0x30>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e0d3      	b.n	8003490 <HAL_I2C_Master_Transmit+0x1d8>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032f0:	f7ff f8e4 	bl	80024bc <HAL_GetTick>
 80032f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	2319      	movs	r3, #25
 80032fc:	2201      	movs	r2, #1
 80032fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f8f0 	bl	80034e8 <I2C_WaitOnFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e0be      	b.n	8003490 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2221      	movs	r2, #33	; 0x21
 8003316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2210      	movs	r2, #16
 800331e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	893a      	ldrh	r2, [r7, #8]
 8003332:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333e:	b29b      	uxth	r3, r3
 8003340:	2bff      	cmp	r3, #255	; 0xff
 8003342:	d90e      	bls.n	8003362 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	22ff      	movs	r2, #255	; 0xff
 8003348:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334e:	b2da      	uxtb	r2, r3
 8003350:	8979      	ldrh	r1, [r7, #10]
 8003352:	4b51      	ldr	r3, [pc, #324]	; (8003498 <HAL_I2C_Master_Transmit+0x1e0>)
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f9e6 	bl	800372c <I2C_TransferConfig>
 8003360:	e06c      	b.n	800343c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	b2da      	uxtb	r2, r3
 8003372:	8979      	ldrh	r1, [r7, #10]
 8003374:	4b48      	ldr	r3, [pc, #288]	; (8003498 <HAL_I2C_Master_Transmit+0x1e0>)
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f9d5 	bl	800372c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003382:	e05b      	b.n	800343c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	6a39      	ldr	r1, [r7, #32]
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f8ed 	bl	8003568 <I2C_WaitOnTXISFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e07b      	b.n	8003490 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d034      	beq.n	800343c <HAL_I2C_Master_Transmit+0x184>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d130      	bne.n	800343c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	2200      	movs	r2, #0
 80033e2:	2180      	movs	r1, #128	; 0x80
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f87f 	bl	80034e8 <I2C_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e04d      	b.n	8003490 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2bff      	cmp	r3, #255	; 0xff
 80033fc:	d90e      	bls.n	800341c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	22ff      	movs	r2, #255	; 0xff
 8003402:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003408:	b2da      	uxtb	r2, r3
 800340a:	8979      	ldrh	r1, [r7, #10]
 800340c:	2300      	movs	r3, #0
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f989 	bl	800372c <I2C_TransferConfig>
 800341a:	e00f      	b.n	800343c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342a:	b2da      	uxtb	r2, r3
 800342c:	8979      	ldrh	r1, [r7, #10]
 800342e:	2300      	movs	r3, #0
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f978 	bl	800372c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d19e      	bne.n	8003384 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	6a39      	ldr	r1, [r7, #32]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f8cc 	bl	80035e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e01a      	b.n	8003490 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2220      	movs	r2, #32
 8003460:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_I2C_Master_Transmit+0x1e4>)
 800346e:	400b      	ands	r3, r1
 8003470:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	e000      	b.n	8003490 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800348e:	2302      	movs	r3, #2
  }
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	80002000 	.word	0x80002000
 800349c:	fe00e800 	.word	0xfe00e800

080034a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d103      	bne.n	80034be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2200      	movs	r2, #0
 80034bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d007      	beq.n	80034dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	619a      	str	r2, [r3, #24]
  }
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034f8:	e022      	b.n	8003540 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003500:	d01e      	beq.n	8003540 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003502:	f7fe ffdb 	bl	80024bc <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d302      	bcc.n	8003518 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d113      	bne.n	8003540 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	f043 0220 	orr.w	r2, r3, #32
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e00f      	b.n	8003560 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	429a      	cmp	r2, r3
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	429a      	cmp	r2, r3
 800355c:	d0cd      	beq.n	80034fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003574:	e02c      	b.n	80035d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f870 	bl	8003660 <I2C_IsAcknowledgeFailed>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e02a      	b.n	80035e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d01e      	beq.n	80035d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003592:	f7fe ff93 	bl	80024bc <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d302      	bcc.n	80035a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d113      	bne.n	80035d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	f043 0220 	orr.w	r2, r3, #32
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e007      	b.n	80035e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d1cb      	bne.n	8003576 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f4:	e028      	b.n	8003648 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f830 	bl	8003660 <I2C_IsAcknowledgeFailed>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e026      	b.n	8003658 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360a:	f7fe ff57 	bl	80024bc <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	d302      	bcc.n	8003620 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d113      	bne.n	8003648 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f043 0220 	orr.w	r2, r3, #32
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e007      	b.n	8003658 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b20      	cmp	r3, #32
 8003654:	d1cf      	bne.n	80035f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b10      	cmp	r3, #16
 8003678:	d151      	bne.n	800371e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800367a:	e022      	b.n	80036c2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d01e      	beq.n	80036c2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003684:	f7fe ff1a 	bl	80024bc <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	429a      	cmp	r2, r3
 8003692:	d302      	bcc.n	800369a <I2C_IsAcknowledgeFailed+0x3a>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d113      	bne.n	80036c2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	f043 0220 	orr.w	r2, r3, #32
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e02e      	b.n	8003720 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d1d5      	bne.n	800367c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2210      	movs	r2, #16
 80036d6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2220      	movs	r2, #32
 80036de:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f7ff fedd 	bl	80034a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6859      	ldr	r1, [r3, #4]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <I2C_IsAcknowledgeFailed+0xc8>)
 80036f2:	400b      	ands	r3, r1
 80036f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f043 0204 	orr.w	r2, r3, #4
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	fe00e800 	.word	0xfe00e800

0800372c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	817b      	strh	r3, [r7, #10]
 800373a:	4613      	mov	r3, r2
 800373c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	0d5b      	lsrs	r3, r3, #21
 8003748:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800374c:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <I2C_TransferConfig+0x58>)
 800374e:	430b      	orrs	r3, r1
 8003750:	43db      	mvns	r3, r3
 8003752:	ea02 0103 	and.w	r1, r2, r3
 8003756:	897b      	ldrh	r3, [r7, #10]
 8003758:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800375c:	7a7b      	ldrb	r3, [r7, #9]
 800375e:	041b      	lsls	r3, r3, #16
 8003760:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	431a      	orrs	r2, r3
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	431a      	orrs	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	03ff63ff 	.word	0x03ff63ff

08003788 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b20      	cmp	r3, #32
 800379c:	d138      	bne.n	8003810 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e032      	b.n	8003812 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	; 0x24
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6819      	ldr	r1, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	e000      	b.n	8003812 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003810:	2302      	movs	r3, #2
  }
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800381e:	b480      	push	{r7}
 8003820:	b085      	sub	sp, #20
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b20      	cmp	r3, #32
 8003832:	d139      	bne.n	80038a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800383e:	2302      	movs	r3, #2
 8003840:	e033      	b.n	80038aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2224      	movs	r2, #36	; 0x24
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003870:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	e000      	b.n	80038aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
  }
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d141      	bne.n	800394a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038c6:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d2:	d131      	bne.n	8003938 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038d4:	4b47      	ldr	r3, [pc, #284]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038da:	4a46      	ldr	r2, [pc, #280]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038e4:	4b43      	ldr	r3, [pc, #268]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038ec:	4a41      	ldr	r2, [pc, #260]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038f4:	4b40      	ldr	r3, [pc, #256]	; (80039f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2232      	movs	r2, #50	; 0x32
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	4a3f      	ldr	r2, [pc, #252]	; (80039fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	0c9b      	lsrs	r3, r3, #18
 8003906:	3301      	adds	r3, #1
 8003908:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800390a:	e002      	b.n	8003912 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	3b01      	subs	r3, #1
 8003910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003912:	4b38      	ldr	r3, [pc, #224]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391e:	d102      	bne.n	8003926 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f2      	bne.n	800390c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003926:	4b33      	ldr	r3, [pc, #204]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003932:	d158      	bne.n	80039e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e057      	b.n	80039e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003938:	4b2e      	ldr	r3, [pc, #184]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800393a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800393e:	4a2d      	ldr	r2, [pc, #180]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003944:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003948:	e04d      	b.n	80039e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003950:	d141      	bne.n	80039d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003952:	4b28      	ldr	r3, [pc, #160]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800395a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395e:	d131      	bne.n	80039c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003960:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003966:	4a23      	ldr	r2, [pc, #140]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003970:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003978:	4a1e      	ldr	r2, [pc, #120]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800397a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800397e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003980:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2232      	movs	r2, #50	; 0x32
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	4a1c      	ldr	r2, [pc, #112]	; (80039fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	0c9b      	lsrs	r3, r3, #18
 8003992:	3301      	adds	r3, #1
 8003994:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003996:	e002      	b.n	800399e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3b01      	subs	r3, #1
 800399c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039aa:	d102      	bne.n	80039b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f2      	bne.n	8003998 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039be:	d112      	bne.n	80039e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e011      	b.n	80039e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ca:	4a0a      	ldr	r2, [pc, #40]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039d4:	e007      	b.n	80039e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039d6:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039de:	4a05      	ldr	r2, [pc, #20]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	40007000 	.word	0x40007000
 80039f8:	20000268 	.word	0x20000268
 80039fc:	431bde83 	.word	0x431bde83

08003a00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a04:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a0e:	6093      	str	r3, [r2, #8]
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40007000 	.word	0x40007000

08003a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e308      	b.n	8004044 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d075      	beq.n	8003b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a3e:	4ba3      	ldr	r3, [pc, #652]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a48:	4ba0      	ldr	r3, [pc, #640]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b0c      	cmp	r3, #12
 8003a56:	d102      	bne.n	8003a5e <HAL_RCC_OscConfig+0x3e>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d002      	beq.n	8003a64 <HAL_RCC_OscConfig+0x44>
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d10b      	bne.n	8003a7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	4b99      	ldr	r3, [pc, #612]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d05b      	beq.n	8003b28 <HAL_RCC_OscConfig+0x108>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d157      	bne.n	8003b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e2e3      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a84:	d106      	bne.n	8003a94 <HAL_RCC_OscConfig+0x74>
 8003a86:	4b91      	ldr	r3, [pc, #580]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a90      	ldr	r2, [pc, #576]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e01d      	b.n	8003ad0 <HAL_RCC_OscConfig+0xb0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x98>
 8003a9e:	4b8b      	ldr	r3, [pc, #556]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a8a      	ldr	r2, [pc, #552]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b88      	ldr	r3, [pc, #544]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a87      	ldr	r2, [pc, #540]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCC_OscConfig+0xb0>
 8003ab8:	4b84      	ldr	r3, [pc, #528]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a83      	ldr	r2, [pc, #524]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	4b81      	ldr	r3, [pc, #516]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a80      	ldr	r2, [pc, #512]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d013      	beq.n	8003b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad8:	f7fe fcf0 	bl	80024bc <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae0:	f7fe fcec 	bl	80024bc <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b64      	cmp	r3, #100	; 0x64
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e2a8      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003af2:	4b76      	ldr	r3, [pc, #472]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0xc0>
 8003afe:	e014      	b.n	8003b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fe fcdc 	bl	80024bc <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b08:	f7fe fcd8 	bl	80024bc <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	; 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e294      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b1a:	4b6c      	ldr	r3, [pc, #432]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0xe8>
 8003b26:	e000      	b.n	8003b2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d075      	beq.n	8003c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b36:	4b65      	ldr	r3, [pc, #404]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
 8003b3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b40:	4b62      	ldr	r3, [pc, #392]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b0c      	cmp	r3, #12
 8003b4e:	d102      	bne.n	8003b56 <HAL_RCC_OscConfig+0x136>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d002      	beq.n	8003b5c <HAL_RCC_OscConfig+0x13c>
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d11f      	bne.n	8003b9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b5c:	4b5b      	ldr	r3, [pc, #364]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_RCC_OscConfig+0x154>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e267      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b74:	4b55      	ldr	r3, [pc, #340]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	4952      	ldr	r1, [pc, #328]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b88:	4b51      	ldr	r3, [pc, #324]	; (8003cd0 <HAL_RCC_OscConfig+0x2b0>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe fc49 	bl	8002424 <HAL_InitTick>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d043      	beq.n	8003c20 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e253      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d023      	beq.n	8003bec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba4:	4b49      	ldr	r3, [pc, #292]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a48      	ldr	r2, [pc, #288]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fc84 	bl	80024bc <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb8:	f7fe fc80 	bl	80024bc <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e23c      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bca:	4b40      	ldr	r3, [pc, #256]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	061b      	lsls	r3, r3, #24
 8003be4:	4939      	ldr	r1, [pc, #228]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	604b      	str	r3, [r1, #4]
 8003bea:	e01a      	b.n	8003c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bec:	4b37      	ldr	r3, [pc, #220]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a36      	ldr	r2, [pc, #216]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003bf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fc60 	bl	80024bc <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c00:	f7fe fc5c 	bl	80024bc <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e218      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c12:	4b2e      	ldr	r3, [pc, #184]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x1e0>
 8003c1e:	e000      	b.n	8003c22 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d03c      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01c      	beq.n	8003c70 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c36:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c3c:	4a23      	ldr	r2, [pc, #140]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c46:	f7fe fc39 	bl	80024bc <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c4e:	f7fe fc35 	bl	80024bc <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e1f1      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c60:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0ef      	beq.n	8003c4e <HAL_RCC_OscConfig+0x22e>
 8003c6e:	e01b      	b.n	8003ca8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c70:	4b16      	ldr	r3, [pc, #88]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c76:	4a15      	ldr	r2, [pc, #84]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	f023 0301 	bic.w	r3, r3, #1
 8003c7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fe fc1c 	bl	80024bc <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c88:	f7fe fc18 	bl	80024bc <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e1d4      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1ef      	bne.n	8003c88 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80ab 	beq.w	8003e0c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cba:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x2b4>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e005      	b.n	8003cd6 <HAL_RCC_OscConfig+0x2b6>
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	2000026c 	.word	0x2000026c
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00d      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cda:	4baf      	ldr	r3, [pc, #700]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	4aae      	ldr	r2, [pc, #696]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce6:	4bac      	ldr	r3, [pc, #688]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf6:	4ba9      	ldr	r3, [pc, #676]	; (8003f9c <HAL_RCC_OscConfig+0x57c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d118      	bne.n	8003d34 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d02:	4ba6      	ldr	r3, [pc, #664]	; (8003f9c <HAL_RCC_OscConfig+0x57c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4aa5      	ldr	r2, [pc, #660]	; (8003f9c <HAL_RCC_OscConfig+0x57c>)
 8003d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d0e:	f7fe fbd5 	bl	80024bc <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d16:	f7fe fbd1 	bl	80024bc <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e18d      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d28:	4b9c      	ldr	r3, [pc, #624]	; (8003f9c <HAL_RCC_OscConfig+0x57c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d108      	bne.n	8003d4e <HAL_RCC_OscConfig+0x32e>
 8003d3c:	4b96      	ldr	r3, [pc, #600]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	4a95      	ldr	r2, [pc, #596]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d4c:	e024      	b.n	8003d98 <HAL_RCC_OscConfig+0x378>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b05      	cmp	r3, #5
 8003d54:	d110      	bne.n	8003d78 <HAL_RCC_OscConfig+0x358>
 8003d56:	4b90      	ldr	r3, [pc, #576]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5c:	4a8e      	ldr	r2, [pc, #568]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d5e:	f043 0304 	orr.w	r3, r3, #4
 8003d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d66:	4b8c      	ldr	r3, [pc, #560]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6c:	4a8a      	ldr	r2, [pc, #552]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d76:	e00f      	b.n	8003d98 <HAL_RCC_OscConfig+0x378>
 8003d78:	4b87      	ldr	r3, [pc, #540]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	4a86      	ldr	r2, [pc, #536]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d88:	4b83      	ldr	r3, [pc, #524]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	4a82      	ldr	r2, [pc, #520]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d90:	f023 0304 	bic.w	r3, r3, #4
 8003d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d016      	beq.n	8003dce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da0:	f7fe fb8c 	bl	80024bc <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da8:	f7fe fb88 	bl	80024bc <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e142      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dbe:	4b76      	ldr	r3, [pc, #472]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ed      	beq.n	8003da8 <HAL_RCC_OscConfig+0x388>
 8003dcc:	e015      	b.n	8003dfa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dce:	f7fe fb75 	bl	80024bc <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fe fb71 	bl	80024bc <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e12b      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dec:	4b6a      	ldr	r3, [pc, #424]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1ed      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dfa:	7ffb      	ldrb	r3, [r7, #31]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d105      	bne.n	8003e0c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e00:	4b65      	ldr	r3, [pc, #404]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	4a64      	ldr	r2, [pc, #400]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d03c      	beq.n	8003e92 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d01c      	beq.n	8003e5a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e20:	4b5d      	ldr	r3, [pc, #372]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e26:	4a5c      	ldr	r2, [pc, #368]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e30:	f7fe fb44 	bl	80024bc <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e38:	f7fe fb40 	bl	80024bc <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e0fc      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e4a:	4b53      	ldr	r3, [pc, #332]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0ef      	beq.n	8003e38 <HAL_RCC_OscConfig+0x418>
 8003e58:	e01b      	b.n	8003e92 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e5a:	4b4f      	ldr	r3, [pc, #316]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e60:	4a4d      	ldr	r2, [pc, #308]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6a:	f7fe fb27 	bl	80024bc <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e72:	f7fe fb23 	bl	80024bc <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e0df      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e84:	4b44      	ldr	r3, [pc, #272]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1ef      	bne.n	8003e72 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 80d3 	beq.w	8004042 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e9c:	4b3e      	ldr	r3, [pc, #248]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b0c      	cmp	r3, #12
 8003ea6:	f000 808d 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d15a      	bne.n	8003f68 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb2:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a38      	ldr	r2, [pc, #224]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003eb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebe:	f7fe fafd 	bl	80024bc <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec6:	f7fe faf9 	bl	80024bc <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e0b5      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed8:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f0      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ee4:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	4b2d      	ldr	r3, [pc, #180]	; (8003fa0 <HAL_RCC_OscConfig+0x580>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6a11      	ldr	r1, [r2, #32]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ef4:	3a01      	subs	r2, #1
 8003ef6:	0112      	lsls	r2, r2, #4
 8003ef8:	4311      	orrs	r1, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003efe:	0212      	lsls	r2, r2, #8
 8003f00:	4311      	orrs	r1, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f06:	0852      	lsrs	r2, r2, #1
 8003f08:	3a01      	subs	r2, #1
 8003f0a:	0552      	lsls	r2, r2, #21
 8003f0c:	4311      	orrs	r1, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f12:	0852      	lsrs	r2, r2, #1
 8003f14:	3a01      	subs	r2, #1
 8003f16:	0652      	lsls	r2, r2, #25
 8003f18:	4311      	orrs	r1, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f1e:	06d2      	lsls	r2, r2, #27
 8003f20:	430a      	orrs	r2, r1
 8003f22:	491d      	ldr	r1, [pc, #116]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1a      	ldr	r2, [pc, #104]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f34:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a17      	ldr	r2, [pc, #92]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fe fabc 	bl	80024bc <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f48:	f7fe fab8 	bl	80024bc <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e074      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f5a:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x528>
 8003f66:	e06c      	b.n	8004042 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f72:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f74:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4a07      	ldr	r2, [pc, #28]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4a04      	ldr	r2, [pc, #16]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f86:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fe fa94 	bl	80024bc <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f96:	e00e      	b.n	8003fb6 <HAL_RCC_OscConfig+0x596>
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40007000 	.word	0x40007000
 8003fa0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7fe fa8a 	bl	80024bc <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e046      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb6:	4b25      	ldr	r3, [pc, #148]	; (800404c <HAL_RCC_OscConfig+0x62c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x584>
 8003fc2:	e03e      	b.n	8004042 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e039      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003fd0:	4b1e      	ldr	r3, [pc, #120]	; (800404c <HAL_RCC_OscConfig+0x62c>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f003 0203 	and.w	r2, r3, #3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d12c      	bne.n	800403e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d123      	bne.n	800403e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004000:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004002:	429a      	cmp	r2, r3
 8004004:	d11b      	bne.n	800403e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d113      	bne.n	800403e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	085b      	lsrs	r3, r3, #1
 8004022:	3b01      	subs	r3, #1
 8004024:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004026:	429a      	cmp	r2, r3
 8004028:	d109      	bne.n	800403e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	3b01      	subs	r3, #1
 8004038:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800403a:	429a      	cmp	r2, r3
 800403c:	d001      	beq.n	8004042 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40021000 	.word	0x40021000

08004050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e11e      	b.n	80042a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004068:	4b91      	ldr	r3, [pc, #580]	; (80042b0 <HAL_RCC_ClockConfig+0x260>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d910      	bls.n	8004098 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b8e      	ldr	r3, [pc, #568]	; (80042b0 <HAL_RCC_ClockConfig+0x260>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f023 020f 	bic.w	r2, r3, #15
 800407e:	498c      	ldr	r1, [pc, #560]	; (80042b0 <HAL_RCC_ClockConfig+0x260>)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	4313      	orrs	r3, r2
 8004084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b8a      	ldr	r3, [pc, #552]	; (80042b0 <HAL_RCC_ClockConfig+0x260>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e106      	b.n	80042a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d073      	beq.n	800418c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d129      	bne.n	8004100 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ac:	4b81      	ldr	r3, [pc, #516]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0f4      	b.n	80042a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80040bc:	f000 f9d2 	bl	8004464 <RCC_GetSysClockFreqFromPLLSource>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4a7c      	ldr	r2, [pc, #496]	; (80042b8 <HAL_RCC_ClockConfig+0x268>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d93f      	bls.n	800414a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040ca:	4b7a      	ldr	r3, [pc, #488]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d009      	beq.n	80040ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d033      	beq.n	800414a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d12f      	bne.n	800414a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040ea:	4b72      	ldr	r3, [pc, #456]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040f2:	4a70      	ldr	r2, [pc, #448]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 80040f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80040fa:	2380      	movs	r3, #128	; 0x80
 80040fc:	617b      	str	r3, [r7, #20]
 80040fe:	e024      	b.n	800414a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d107      	bne.n	8004118 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004108:	4b6a      	ldr	r3, [pc, #424]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d109      	bne.n	8004128 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0c6      	b.n	80042a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004118:	4b66      	ldr	r3, [pc, #408]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0be      	b.n	80042a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004128:	f000 f902 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 800412c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4a61      	ldr	r2, [pc, #388]	; (80042b8 <HAL_RCC_ClockConfig+0x268>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d909      	bls.n	800414a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004136:	4b5f      	ldr	r3, [pc, #380]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800413e:	4a5d      	ldr	r2, [pc, #372]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 8004140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004144:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004146:	2380      	movs	r3, #128	; 0x80
 8004148:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800414a:	4b5a      	ldr	r3, [pc, #360]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f023 0203 	bic.w	r2, r3, #3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4957      	ldr	r1, [pc, #348]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 8004158:	4313      	orrs	r3, r2
 800415a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800415c:	f7fe f9ae 	bl	80024bc <HAL_GetTick>
 8004160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004162:	e00a      	b.n	800417a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004164:	f7fe f9aa 	bl	80024bc <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e095      	b.n	80042a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417a:	4b4e      	ldr	r3, [pc, #312]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 020c 	and.w	r2, r3, #12
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	429a      	cmp	r2, r3
 800418a:	d1eb      	bne.n	8004164 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d023      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041a4:	4b43      	ldr	r3, [pc, #268]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	4a42      	ldr	r2, [pc, #264]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 80041aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80041bc:	4b3d      	ldr	r3, [pc, #244]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80041c4:	4a3b      	ldr	r2, [pc, #236]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 80041c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041cc:	4b39      	ldr	r3, [pc, #228]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4936      	ldr	r1, [pc, #216]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
 80041de:	e008      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b80      	cmp	r3, #128	; 0x80
 80041e4:	d105      	bne.n	80041f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80041e6:	4b33      	ldr	r3, [pc, #204]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	4a32      	ldr	r2, [pc, #200]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 80041ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041f2:	4b2f      	ldr	r3, [pc, #188]	; (80042b0 <HAL_RCC_ClockConfig+0x260>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d21d      	bcs.n	800423c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004200:	4b2b      	ldr	r3, [pc, #172]	; (80042b0 <HAL_RCC_ClockConfig+0x260>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f023 020f 	bic.w	r2, r3, #15
 8004208:	4929      	ldr	r1, [pc, #164]	; (80042b0 <HAL_RCC_ClockConfig+0x260>)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	4313      	orrs	r3, r2
 800420e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004210:	f7fe f954 	bl	80024bc <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004216:	e00a      	b.n	800422e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004218:	f7fe f950 	bl	80024bc <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	; 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e03b      	b.n	80042a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800422e:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <HAL_RCC_ClockConfig+0x260>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d1ed      	bne.n	8004218 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004248:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4917      	ldr	r1, [pc, #92]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 8004256:	4313      	orrs	r3, r2
 8004258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004266:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	490f      	ldr	r1, [pc, #60]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800427a:	f000 f859 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 800427e:	4602      	mov	r2, r0
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <HAL_RCC_ClockConfig+0x264>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	490c      	ldr	r1, [pc, #48]	; (80042bc <HAL_RCC_ClockConfig+0x26c>)
 800428c:	5ccb      	ldrb	r3, [r1, r3]
 800428e:	f003 031f 	and.w	r3, r3, #31
 8004292:	fa22 f303 	lsr.w	r3, r2, r3
 8004296:	4a0a      	ldr	r2, [pc, #40]	; (80042c0 <HAL_RCC_ClockConfig+0x270>)
 8004298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800429a:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <HAL_RCC_ClockConfig+0x274>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe f8c0 	bl	8002424 <HAL_InitTick>
 80042a4:	4603      	mov	r3, r0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40022000 	.word	0x40022000
 80042b4:	40021000 	.word	0x40021000
 80042b8:	04c4b400 	.word	0x04c4b400
 80042bc:	08008f78 	.word	0x08008f78
 80042c0:	20000268 	.word	0x20000268
 80042c4:	2000026c 	.word	0x2000026c

080042c8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	; 0x28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  MCO1_CLK_ENABLE();
 80042d4:	4b15      	ldr	r3, [pc, #84]	; (800432c <HAL_RCC_MCOConfig+0x64>)
 80042d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d8:	4a14      	ldr	r2, [pc, #80]	; (800432c <HAL_RCC_MCOConfig+0x64>)
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042e0:	4b12      	ldr	r3, [pc, #72]	; (800432c <HAL_RCC_MCOConfig+0x64>)
 80042e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 80042ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f2:	2302      	movs	r3, #2
 80042f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f6:	2303      	movs	r3, #3
 80042f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80042fe:	2300      	movs	r3, #0
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004302:	f107 0314 	add.w	r3, r7, #20
 8004306:	4619      	mov	r1, r3
 8004308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800430c:	f7fe fd78 	bl	8002e00 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_RCC_MCOConfig+0x64>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	430b      	orrs	r3, r1
 800431e:	4903      	ldr	r1, [pc, #12]	; (800432c <HAL_RCC_MCOConfig+0x64>)
 8004320:	4313      	orrs	r3, r2
 8004322:	608b      	str	r3, [r1, #8]
}
 8004324:	bf00      	nop
 8004326:	3728      	adds	r7, #40	; 0x28
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40021000 	.word	0x40021000

08004330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004336:	4b2c      	ldr	r3, [pc, #176]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b04      	cmp	r3, #4
 8004340:	d102      	bne.n	8004348 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004342:	4b2a      	ldr	r3, [pc, #168]	; (80043ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	e047      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004348:	4b27      	ldr	r3, [pc, #156]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b08      	cmp	r3, #8
 8004352:	d102      	bne.n	800435a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004354:	4b26      	ldr	r3, [pc, #152]	; (80043f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	e03e      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800435a:	4b23      	ldr	r3, [pc, #140]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d136      	bne.n	80043d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004366:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004370:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	3301      	adds	r3, #1
 800437c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b03      	cmp	r3, #3
 8004382:	d10c      	bne.n	800439e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004384:	4a1a      	ldr	r2, [pc, #104]	; (80043f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	4a16      	ldr	r2, [pc, #88]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800438e:	68d2      	ldr	r2, [r2, #12]
 8004390:	0a12      	lsrs	r2, r2, #8
 8004392:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	617b      	str	r3, [r7, #20]
      break;
 800439c:	e00c      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800439e:	4a13      	ldr	r2, [pc, #76]	; (80043ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	4a10      	ldr	r2, [pc, #64]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a8:	68d2      	ldr	r2, [r2, #12]
 80043aa:	0a12      	lsrs	r2, r2, #8
 80043ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043b0:	fb02 f303 	mul.w	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]
      break;
 80043b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	0e5b      	lsrs	r3, r3, #25
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	3301      	adds	r3, #1
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	e001      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043d8:	693b      	ldr	r3, [r7, #16]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000
 80043ec:	00f42400 	.word	0x00f42400
 80043f0:	003d0900 	.word	0x003d0900

080043f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f8:	4b03      	ldr	r3, [pc, #12]	; (8004408 <HAL_RCC_GetHCLKFreq+0x14>)
 80043fa:	681b      	ldr	r3, [r3, #0]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20000268 	.word	0x20000268

0800440c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004410:	f7ff fff0 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 8004414:	4602      	mov	r2, r0
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	0a1b      	lsrs	r3, r3, #8
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	4904      	ldr	r1, [pc, #16]	; (8004434 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004422:	5ccb      	ldrb	r3, [r1, r3]
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800442c:	4618      	mov	r0, r3
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40021000 	.word	0x40021000
 8004434:	08008f88 	.word	0x08008f88

08004438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800443c:	f7ff ffda 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 8004440:	4602      	mov	r2, r0
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	0adb      	lsrs	r3, r3, #11
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	4904      	ldr	r1, [pc, #16]	; (8004460 <HAL_RCC_GetPCLK2Freq+0x28>)
 800444e:	5ccb      	ldrb	r3, [r1, r3]
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000
 8004460:	08008f88 	.word	0x08008f88

08004464 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800446a:	4b1e      	ldr	r3, [pc, #120]	; (80044e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004474:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	3301      	adds	r3, #1
 8004480:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d10c      	bne.n	80044a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004488:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	4a14      	ldr	r2, [pc, #80]	; (80044e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004492:	68d2      	ldr	r2, [r2, #12]
 8004494:	0a12      	lsrs	r2, r2, #8
 8004496:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	617b      	str	r3, [r7, #20]
    break;
 80044a0:	e00c      	b.n	80044bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044a2:	4a12      	ldr	r2, [pc, #72]	; (80044ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	4a0e      	ldr	r2, [pc, #56]	; (80044e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044ac:	68d2      	ldr	r2, [r2, #12]
 80044ae:	0a12      	lsrs	r2, r2, #8
 80044b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
 80044b8:	617b      	str	r3, [r7, #20]
    break;
 80044ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	0e5b      	lsrs	r3, r3, #25
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	3301      	adds	r3, #1
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80044d6:	687b      	ldr	r3, [r7, #4]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	40021000 	.word	0x40021000
 80044e8:	003d0900 	.word	0x003d0900
 80044ec:	00f42400 	.word	0x00f42400

080044f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044f8:	2300      	movs	r3, #0
 80044fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044fc:	2300      	movs	r3, #0
 80044fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8098 	beq.w	800463e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450e:	2300      	movs	r3, #0
 8004510:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004512:	4b43      	ldr	r3, [pc, #268]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10d      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800451e:	4b40      	ldr	r3, [pc, #256]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004522:	4a3f      	ldr	r2, [pc, #252]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004528:	6593      	str	r3, [r2, #88]	; 0x58
 800452a:	4b3d      	ldr	r3, [pc, #244]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800452c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004536:	2301      	movs	r3, #1
 8004538:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800453a:	4b3a      	ldr	r3, [pc, #232]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a39      	ldr	r2, [pc, #228]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004544:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004546:	f7fd ffb9 	bl	80024bc <HAL_GetTick>
 800454a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800454c:	e009      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454e:	f7fd ffb5 	bl	80024bc <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d902      	bls.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	74fb      	strb	r3, [r7, #19]
        break;
 8004560:	e005      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004562:	4b30      	ldr	r3, [pc, #192]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0ef      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800456e:	7cfb      	ldrb	r3, [r7, #19]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d159      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004574:	4b2a      	ldr	r3, [pc, #168]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d01e      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	429a      	cmp	r2, r3
 800458e:	d019      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004590:	4b23      	ldr	r3, [pc, #140]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800459c:	4b20      	ldr	r3, [pc, #128]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045ac:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b2:	4a1b      	ldr	r2, [pc, #108]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045bc:	4a18      	ldr	r2, [pc, #96]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d016      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ce:	f7fd ff75 	bl	80024bc <HAL_GetTick>
 80045d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d4:	e00b      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fd ff71 	bl	80024bc <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d902      	bls.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	74fb      	strb	r3, [r7, #19]
            break;
 80045ec:	e006      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ee:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0ec      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80045fc:	7cfb      	ldrb	r3, [r7, #19]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10b      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	4903      	ldr	r1, [pc, #12]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004618:	e008      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800461a:	7cfb      	ldrb	r3, [r7, #19]
 800461c:	74bb      	strb	r3, [r7, #18]
 800461e:	e005      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004620:	40021000 	.word	0x40021000
 8004624:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004628:	7cfb      	ldrb	r3, [r7, #19]
 800462a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800462c:	7c7b      	ldrb	r3, [r7, #17]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d105      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004632:	4ba6      	ldr	r3, [pc, #664]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004636:	4aa5      	ldr	r2, [pc, #660]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800463c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800464a:	4ba0      	ldr	r3, [pc, #640]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f023 0203 	bic.w	r2, r3, #3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	499c      	ldr	r1, [pc, #624]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800466c:	4b97      	ldr	r3, [pc, #604]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	f023 020c 	bic.w	r2, r3, #12
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	4994      	ldr	r1, [pc, #592]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800468e:	4b8f      	ldr	r3, [pc, #572]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	498b      	ldr	r1, [pc, #556]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046b0:	4b86      	ldr	r3, [pc, #536]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	4983      	ldr	r1, [pc, #524]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046d2:	4b7e      	ldr	r3, [pc, #504]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	497a      	ldr	r1, [pc, #488]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046f4:	4b75      	ldr	r3, [pc, #468]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	4972      	ldr	r1, [pc, #456]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004716:	4b6d      	ldr	r3, [pc, #436]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	4969      	ldr	r1, [pc, #420]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004738:	4b64      	ldr	r3, [pc, #400]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	4961      	ldr	r1, [pc, #388]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800475a:	4b5c      	ldr	r3, [pc, #368]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004760:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	4958      	ldr	r1, [pc, #352]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004778:	2b00      	cmp	r3, #0
 800477a:	d015      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800477c:	4b53      	ldr	r3, [pc, #332]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004782:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	4950      	ldr	r1, [pc, #320]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800479a:	d105      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800479c:	4b4b      	ldr	r3, [pc, #300]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a4a      	ldr	r2, [pc, #296]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d015      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047b4:	4b45      	ldr	r3, [pc, #276]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	4942      	ldr	r1, [pc, #264]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d2:	d105      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d4:	4b3d      	ldr	r3, [pc, #244]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	4a3c      	ldr	r2, [pc, #240]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d015      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047ec:	4b37      	ldr	r3, [pc, #220]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	4934      	ldr	r1, [pc, #208]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800480a:	d105      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800480c:	4b2f      	ldr	r3, [pc, #188]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4a2e      	ldr	r2, [pc, #184]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004816:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d015      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004824:	4b29      	ldr	r3, [pc, #164]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004832:	4926      	ldr	r1, [pc, #152]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004842:	d105      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004844:	4b21      	ldr	r3, [pc, #132]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	4a20      	ldr	r2, [pc, #128]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800484a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800484e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d015      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800485c:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	4918      	ldr	r1, [pc, #96]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800487a:	d105      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800487c:	4b13      	ldr	r3, [pc, #76]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4a12      	ldr	r2, [pc, #72]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004886:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d015      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004894:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a2:	490a      	ldr	r1, [pc, #40]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048b2:	d105      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4a04      	ldr	r2, [pc, #16]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80048c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000

080048d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e049      	b.n	8004976 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd f9b6 	bl	8001c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3304      	adds	r3, #4
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f000 f92a 	bl	8004b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e049      	b.n	8004a24 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d106      	bne.n	80049aa <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f841 	bl	8004a2c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2202      	movs	r2, #2
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f000 f8d3 	bl	8004b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_TIM_IC_ConfigChannel+0x1a>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e082      	b.n	8004b60 <HAL_TIM_IC_ConfigChannel+0x120>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f000 f906 	bl	8004c88 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 020c 	bic.w	r2, r2, #12
 8004a8a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6999      	ldr	r1, [r3, #24]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	619a      	str	r2, [r3, #24]
 8004a9e:	e05a      	b.n	8004b56 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d11c      	bne.n	8004ae0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6818      	ldr	r0, [r3, #0]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	6819      	ldr	r1, [r3, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f000 f94f 	bl	8004d58 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699a      	ldr	r2, [r3, #24]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ac8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6999      	ldr	r1, [r3, #24]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	021a      	lsls	r2, r3, #8
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	619a      	str	r2, [r3, #24]
 8004ade:	e03a      	b.n	8004b56 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d11b      	bne.n	8004b1e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	6819      	ldr	r1, [r3, #0]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f000 f96c 	bl	8004dd2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 020c 	bic.w	r2, r2, #12
 8004b08:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69d9      	ldr	r1, [r3, #28]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	61da      	str	r2, [r3, #28]
 8004b1c:	e01b      	b.n	8004b56 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6819      	ldr	r1, [r3, #0]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f000 f98c 	bl	8004e4a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b40:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69d9      	ldr	r1, [r3, #28]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	021a      	lsls	r2, r3, #8
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3c      	ldr	r2, [pc, #240]	; (8004c6c <TIM_Base_SetConfig+0x104>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00f      	beq.n	8004ba0 <TIM_Base_SetConfig+0x38>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b86:	d00b      	beq.n	8004ba0 <TIM_Base_SetConfig+0x38>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a39      	ldr	r2, [pc, #228]	; (8004c70 <TIM_Base_SetConfig+0x108>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <TIM_Base_SetConfig+0x38>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a38      	ldr	r2, [pc, #224]	; (8004c74 <TIM_Base_SetConfig+0x10c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_Base_SetConfig+0x38>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a37      	ldr	r2, [pc, #220]	; (8004c78 <TIM_Base_SetConfig+0x110>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d108      	bne.n	8004bb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2d      	ldr	r2, [pc, #180]	; (8004c6c <TIM_Base_SetConfig+0x104>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01b      	beq.n	8004bf2 <TIM_Base_SetConfig+0x8a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc0:	d017      	beq.n	8004bf2 <TIM_Base_SetConfig+0x8a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2a      	ldr	r2, [pc, #168]	; (8004c70 <TIM_Base_SetConfig+0x108>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d013      	beq.n	8004bf2 <TIM_Base_SetConfig+0x8a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a29      	ldr	r2, [pc, #164]	; (8004c74 <TIM_Base_SetConfig+0x10c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00f      	beq.n	8004bf2 <TIM_Base_SetConfig+0x8a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a28      	ldr	r2, [pc, #160]	; (8004c78 <TIM_Base_SetConfig+0x110>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00b      	beq.n	8004bf2 <TIM_Base_SetConfig+0x8a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a27      	ldr	r2, [pc, #156]	; (8004c7c <TIM_Base_SetConfig+0x114>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d007      	beq.n	8004bf2 <TIM_Base_SetConfig+0x8a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a26      	ldr	r2, [pc, #152]	; (8004c80 <TIM_Base_SetConfig+0x118>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d003      	beq.n	8004bf2 <TIM_Base_SetConfig+0x8a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a25      	ldr	r2, [pc, #148]	; (8004c84 <TIM_Base_SetConfig+0x11c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d108      	bne.n	8004c04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a10      	ldr	r2, [pc, #64]	; (8004c6c <TIM_Base_SetConfig+0x104>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00f      	beq.n	8004c50 <TIM_Base_SetConfig+0xe8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a11      	ldr	r2, [pc, #68]	; (8004c78 <TIM_Base_SetConfig+0x110>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00b      	beq.n	8004c50 <TIM_Base_SetConfig+0xe8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a10      	ldr	r2, [pc, #64]	; (8004c7c <TIM_Base_SetConfig+0x114>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d007      	beq.n	8004c50 <TIM_Base_SetConfig+0xe8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a0f      	ldr	r2, [pc, #60]	; (8004c80 <TIM_Base_SetConfig+0x118>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_Base_SetConfig+0xe8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a0e      	ldr	r2, [pc, #56]	; (8004c84 <TIM_Base_SetConfig+0x11c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d103      	bne.n	8004c58 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	615a      	str	r2, [r3, #20]
}
 8004c5e:	bf00      	nop
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40012c00 	.word	0x40012c00
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40013400 	.word	0x40013400
 8004c7c:	40014000 	.word	0x40014000
 8004c80:	40014400 	.word	0x40014400
 8004c84:	40014800 	.word	0x40014800

08004c88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f023 0201 	bic.w	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4a24      	ldr	r2, [pc, #144]	; (8004d44 <TIM_TI1_SetConfig+0xbc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <TIM_TI1_SetConfig+0x56>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbc:	d00f      	beq.n	8004cde <TIM_TI1_SetConfig+0x56>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4a21      	ldr	r2, [pc, #132]	; (8004d48 <TIM_TI1_SetConfig+0xc0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00b      	beq.n	8004cde <TIM_TI1_SetConfig+0x56>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4a20      	ldr	r2, [pc, #128]	; (8004d4c <TIM_TI1_SetConfig+0xc4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d007      	beq.n	8004cde <TIM_TI1_SetConfig+0x56>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4a1f      	ldr	r2, [pc, #124]	; (8004d50 <TIM_TI1_SetConfig+0xc8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d003      	beq.n	8004cde <TIM_TI1_SetConfig+0x56>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4a1e      	ldr	r2, [pc, #120]	; (8004d54 <TIM_TI1_SetConfig+0xcc>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d101      	bne.n	8004ce2 <TIM_TI1_SetConfig+0x5a>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <TIM_TI1_SetConfig+0x5c>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f023 0303 	bic.w	r3, r3, #3
 8004cee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	e003      	b.n	8004d02 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f043 0301 	orr.w	r3, r3, #1
 8004d00:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f023 030a 	bic.w	r3, r3, #10
 8004d1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f003 030a 	and.w	r3, r3, #10
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	621a      	str	r2, [r3, #32]
}
 8004d36:	bf00      	nop
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40012c00 	.word	0x40012c00
 8004d48:	40000400 	.word	0x40000400
 8004d4c:	40000800 	.word	0x40000800
 8004d50:	40013400 	.word	0x40013400
 8004d54:	40014000 	.word	0x40014000

08004d58 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f023 0210 	bic.w	r2, r3, #16
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	031b      	lsls	r3, r3, #12
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004daa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b087      	sub	sp, #28
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
 8004dde:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f023 0303 	bic.w	r3, r3, #3
 8004dfe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004e22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	021b      	lsls	r3, r3, #8
 8004e28:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b087      	sub	sp, #28
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	607a      	str	r2, [r7, #4]
 8004e56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e76:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	031b      	lsls	r3, r3, #12
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004e9c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	031b      	lsls	r3, r3, #12
 8004ea2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	621a      	str	r2, [r3, #32]
}
 8004eb8:	bf00      	nop
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a1a      	ldr	r2, [r3, #32]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	401a      	ands	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a1a      	ldr	r2, [r3, #32]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f003 031f 	and.w	r3, r3, #31
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8004efc:	431a      	orrs	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	621a      	str	r2, [r3, #32]
}
 8004f02:	bf00      	nop
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e04a      	b.n	8004fb6 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fc ff0a 	bl	8001d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2224      	movs	r2, #36	; 0x24
 8004f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0201 	bic.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fb09 	bl	8005568 <UART_SetConfig>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e02a      	b.n	8004fb6 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fd9b 	bl	8005aa4 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004f8c:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0208 	orr.w	r2, r2, #8
 8004f9c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0201 	orr.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fe1a 	bl	8005be8 <UART_CheckIdleState>
 8004fb4:	4603      	mov	r3, r0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d168      	bne.n	80050aa <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <HAL_UART_Transmit_DMA+0x24>
 8004fde:	88fb      	ldrh	r3, [r7, #6]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e061      	b.n	80050ac <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_UART_Transmit_DMA+0x36>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e05a      	b.n	80050ac <HAL_UART_Transmit_DMA+0xec>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	88fa      	ldrh	r2, [r7, #6]
 8005010:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2221      	movs	r2, #33	; 0x21
 8005020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005028:	2b00      	cmp	r3, #0
 800502a:	d02c      	beq.n	8005086 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005030:	4a20      	ldr	r2, [pc, #128]	; (80050b4 <HAL_UART_Transmit_DMA+0xf4>)
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005038:	4a1f      	ldr	r2, [pc, #124]	; (80050b8 <HAL_UART_Transmit_DMA+0xf8>)
 800503a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005040:	4a1e      	ldr	r2, [pc, #120]	; (80050bc <HAL_UART_Transmit_DMA+0xfc>)
 8005042:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005048:	2200      	movs	r2, #0
 800504a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005054:	4619      	mov	r1, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3328      	adds	r3, #40	; 0x28
 800505c:	461a      	mov	r2, r3
 800505e:	88fb      	ldrh	r3, [r7, #6]
 8005060:	f7fd fc44 	bl	80028ec <HAL_DMA_Start_IT>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00d      	beq.n	8005086 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2210      	movs	r2, #16
 800506e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e012      	b.n	80050ac <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2240      	movs	r2, #64	; 0x40
 800508c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050a4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	e000      	b.n	80050ac <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80050aa:	2302      	movs	r3, #2
  }
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	08005e1f 	.word	0x08005e1f
 80050b8:	08005e73 	.word	0x08005e73
 80050bc:	08005e8f 	.word	0x08005e8f

080050c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80050e0:	69fa      	ldr	r2, [r7, #28]
 80050e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80050e6:	4013      	ands	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d118      	bne.n	8005122 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d013      	beq.n	8005122 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d104      	bne.n	800510e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 81fb 	beq.w	800550e <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	4798      	blx	r3
      }
      return;
 8005120:	e1f5      	b.n	800550e <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 80ef 	beq.w	8005308 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4b73      	ldr	r3, [pc, #460]	; (80052fc <HAL_UART_IRQHandler+0x23c>)
 800512e:	4013      	ands	r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d105      	bne.n	8005140 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	4b72      	ldr	r3, [pc, #456]	; (8005300 <HAL_UART_IRQHandler+0x240>)
 8005138:	4013      	ands	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 80e4 	beq.w	8005308 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d010      	beq.n	800516c <HAL_UART_IRQHandler+0xac>
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00b      	beq.n	800516c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2201      	movs	r2, #1
 800515a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005162:	f043 0201 	orr.w	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d010      	beq.n	8005198 <HAL_UART_IRQHandler+0xd8>
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00b      	beq.n	8005198 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2202      	movs	r2, #2
 8005186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800518e:	f043 0204 	orr.w	r2, r3, #4
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d010      	beq.n	80051c4 <HAL_UART_IRQHandler+0x104>
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00b      	beq.n	80051c4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2204      	movs	r2, #4
 80051b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ba:	f043 0202 	orr.w	r2, r3, #2
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d015      	beq.n	80051fa <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d104      	bne.n	80051e2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4b48      	ldr	r3, [pc, #288]	; (80052fc <HAL_UART_IRQHandler+0x23c>)
 80051dc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2208      	movs	r2, #8
 80051e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f0:	f043 0208 	orr.w	r2, r3, #8
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005200:	2b00      	cmp	r3, #0
 8005202:	d011      	beq.n	8005228 <HAL_UART_IRQHandler+0x168>
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00c      	beq.n	8005228 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800521e:	f043 0220 	orr.w	r2, r3, #32
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 816f 	beq.w	8005512 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b00      	cmp	r3, #0
 800523c:	d011      	beq.n	8005262 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b00      	cmp	r3, #0
 8005246:	d104      	bne.n	8005252 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005268:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b40      	cmp	r3, #64	; 0x40
 8005276:	d004      	beq.n	8005282 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800527e:	2b00      	cmp	r3, #0
 8005280:	d031      	beq.n	80052e6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fd99 	bl	8005dba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005292:	2b40      	cmp	r3, #64	; 0x40
 8005294:	d123      	bne.n	80052de <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d013      	beq.n	80052d6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b2:	4a14      	ldr	r2, [pc, #80]	; (8005304 <HAL_UART_IRQHandler+0x244>)
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fd fbea 	bl	8002a94 <HAL_DMA_Abort_IT>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d017      	beq.n	80052f6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80052d0:	4610      	mov	r0, r2
 80052d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d4:	e00f      	b.n	80052f6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f930 	bl	800553c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052dc:	e00b      	b.n	80052f6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f92c 	bl	800553c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e4:	e007      	b.n	80052f6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f928 	bl	800553c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80052f4:	e10d      	b.n	8005512 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f6:	bf00      	nop
    return;
 80052f8:	e10b      	b.n	8005512 <HAL_UART_IRQHandler+0x452>
 80052fa:	bf00      	nop
 80052fc:	10000001 	.word	0x10000001
 8005300:	04000120 	.word	0x04000120
 8005304:	08005f0f 	.word	0x08005f0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800530c:	2b01      	cmp	r3, #1
 800530e:	f040 80ab 	bne.w	8005468 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80a5 	beq.w	8005468 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 809f 	beq.w	8005468 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2210      	movs	r2, #16
 8005330:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b40      	cmp	r3, #64	; 0x40
 800533e:	d155      	bne.n	80053ec <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800534a:	893b      	ldrh	r3, [r7, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 80e2 	beq.w	8005516 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005358:	893a      	ldrh	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	f080 80db 	bcs.w	8005516 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	893a      	ldrh	r2, [r7, #8]
 8005364:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b00      	cmp	r3, #0
 8005376:	d12b      	bne.n	80053d0 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005386:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0201 	bic.w	r2, r2, #1
 8005396:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0210 	bic.w	r2, r2, #16
 80053c4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fd fb09 	bl	80029e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053dc:	b29b      	uxth	r3, r3
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f8b3 	bl	8005550 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053ea:	e094      	b.n	8005516 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 8087 	beq.w	800551a <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 800540c:	897b      	ldrh	r3, [r7, #10]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 8083 	beq.w	800551a <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005422:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6812      	ldr	r2, [r2, #0]
 800542e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005432:	f023 0301 	bic.w	r3, r3, #1
 8005436:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0210 	bic.w	r2, r2, #16
 800545a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800545c:	897b      	ldrh	r3, [r7, #10]
 800545e:	4619      	mov	r1, r3
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f875 	bl	8005550 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005466:	e058      	b.n	800551a <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00d      	beq.n	800548e <HAL_UART_IRQHandler+0x3ce>
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005484:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fd71 	bl	8005f6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800548c:	e048      	b.n	8005520 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005494:	2b00      	cmp	r3, #0
 8005496:	d012      	beq.n	80054be <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d104      	bne.n	80054ac <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d034      	beq.n	800551e <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	4798      	blx	r3
    }
    return;
 80054bc:	e02f      	b.n	800551e <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_UART_IRQHandler+0x41a>
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fd31 	bl	8005f3a <UART_EndTransmit_IT>
    return;
 80054d8:	e022      	b.n	8005520 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d008      	beq.n	80054f6 <HAL_UART_IRQHandler+0x436>
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fd51 	bl	8005f96 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054f4:	e014      	b.n	8005520 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00f      	beq.n	8005520 <HAL_UART_IRQHandler+0x460>
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	2b00      	cmp	r3, #0
 8005504:	da0c      	bge.n	8005520 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fd3b 	bl	8005f82 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800550c:	e008      	b.n	8005520 <HAL_UART_IRQHandler+0x460>
      return;
 800550e:	bf00      	nop
 8005510:	e006      	b.n	8005520 <HAL_UART_IRQHandler+0x460>
    return;
 8005512:	bf00      	nop
 8005514:	e004      	b.n	8005520 <HAL_UART_IRQHandler+0x460>
      return;
 8005516:	bf00      	nop
 8005518:	e002      	b.n	8005520 <HAL_UART_IRQHandler+0x460>
      return;
 800551a:	bf00      	nop
 800551c:	e000      	b.n	8005520 <HAL_UART_IRQHandler+0x460>
    return;
 800551e:	bf00      	nop
  }
}
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop

08005528 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	460b      	mov	r3, r1
 800555a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005568:	b5b0      	push	{r4, r5, r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	4313      	orrs	r3, r2
 800558a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4baf      	ldr	r3, [pc, #700]	; (8005850 <UART_SetConfig+0x2e8>)
 8005594:	4013      	ands	r3, r2
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6812      	ldr	r2, [r2, #0]
 800559a:	69f9      	ldr	r1, [r7, #28]
 800559c:	430b      	orrs	r3, r1
 800559e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4aa4      	ldr	r2, [pc, #656]	; (8005854 <UART_SetConfig+0x2ec>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d004      	beq.n	80055d0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80055da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	69f9      	ldr	r1, [r7, #28]
 80055e4:	430b      	orrs	r3, r1
 80055e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	f023 010f 	bic.w	r1, r3, #15
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a95      	ldr	r2, [pc, #596]	; (8005858 <UART_SetConfig+0x2f0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d120      	bne.n	800564a <UART_SetConfig+0xe2>
 8005608:	4b94      	ldr	r3, [pc, #592]	; (800585c <UART_SetConfig+0x2f4>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	2b03      	cmp	r3, #3
 8005614:	d816      	bhi.n	8005644 <UART_SetConfig+0xdc>
 8005616:	a201      	add	r2, pc, #4	; (adr r2, 800561c <UART_SetConfig+0xb4>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	0800562d 	.word	0x0800562d
 8005620:	08005639 	.word	0x08005639
 8005624:	08005633 	.word	0x08005633
 8005628:	0800563f 	.word	0x0800563f
 800562c:	2301      	movs	r3, #1
 800562e:	76fb      	strb	r3, [r7, #27]
 8005630:	e0bc      	b.n	80057ac <UART_SetConfig+0x244>
 8005632:	2302      	movs	r3, #2
 8005634:	76fb      	strb	r3, [r7, #27]
 8005636:	e0b9      	b.n	80057ac <UART_SetConfig+0x244>
 8005638:	2304      	movs	r3, #4
 800563a:	76fb      	strb	r3, [r7, #27]
 800563c:	e0b6      	b.n	80057ac <UART_SetConfig+0x244>
 800563e:	2308      	movs	r3, #8
 8005640:	76fb      	strb	r3, [r7, #27]
 8005642:	e0b3      	b.n	80057ac <UART_SetConfig+0x244>
 8005644:	2310      	movs	r3, #16
 8005646:	76fb      	strb	r3, [r7, #27]
 8005648:	e0b0      	b.n	80057ac <UART_SetConfig+0x244>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a84      	ldr	r2, [pc, #528]	; (8005860 <UART_SetConfig+0x2f8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d132      	bne.n	80056ba <UART_SetConfig+0x152>
 8005654:	4b81      	ldr	r3, [pc, #516]	; (800585c <UART_SetConfig+0x2f4>)
 8005656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565a:	f003 030c 	and.w	r3, r3, #12
 800565e:	2b0c      	cmp	r3, #12
 8005660:	d828      	bhi.n	80056b4 <UART_SetConfig+0x14c>
 8005662:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <UART_SetConfig+0x100>)
 8005664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005668:	0800569d 	.word	0x0800569d
 800566c:	080056b5 	.word	0x080056b5
 8005670:	080056b5 	.word	0x080056b5
 8005674:	080056b5 	.word	0x080056b5
 8005678:	080056a9 	.word	0x080056a9
 800567c:	080056b5 	.word	0x080056b5
 8005680:	080056b5 	.word	0x080056b5
 8005684:	080056b5 	.word	0x080056b5
 8005688:	080056a3 	.word	0x080056a3
 800568c:	080056b5 	.word	0x080056b5
 8005690:	080056b5 	.word	0x080056b5
 8005694:	080056b5 	.word	0x080056b5
 8005698:	080056af 	.word	0x080056af
 800569c:	2300      	movs	r3, #0
 800569e:	76fb      	strb	r3, [r7, #27]
 80056a0:	e084      	b.n	80057ac <UART_SetConfig+0x244>
 80056a2:	2302      	movs	r3, #2
 80056a4:	76fb      	strb	r3, [r7, #27]
 80056a6:	e081      	b.n	80057ac <UART_SetConfig+0x244>
 80056a8:	2304      	movs	r3, #4
 80056aa:	76fb      	strb	r3, [r7, #27]
 80056ac:	e07e      	b.n	80057ac <UART_SetConfig+0x244>
 80056ae:	2308      	movs	r3, #8
 80056b0:	76fb      	strb	r3, [r7, #27]
 80056b2:	e07b      	b.n	80057ac <UART_SetConfig+0x244>
 80056b4:	2310      	movs	r3, #16
 80056b6:	76fb      	strb	r3, [r7, #27]
 80056b8:	e078      	b.n	80057ac <UART_SetConfig+0x244>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a69      	ldr	r2, [pc, #420]	; (8005864 <UART_SetConfig+0x2fc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d120      	bne.n	8005706 <UART_SetConfig+0x19e>
 80056c4:	4b65      	ldr	r3, [pc, #404]	; (800585c <UART_SetConfig+0x2f4>)
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056ce:	2b30      	cmp	r3, #48	; 0x30
 80056d0:	d013      	beq.n	80056fa <UART_SetConfig+0x192>
 80056d2:	2b30      	cmp	r3, #48	; 0x30
 80056d4:	d814      	bhi.n	8005700 <UART_SetConfig+0x198>
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d009      	beq.n	80056ee <UART_SetConfig+0x186>
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d810      	bhi.n	8005700 <UART_SetConfig+0x198>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <UART_SetConfig+0x180>
 80056e2:	2b10      	cmp	r3, #16
 80056e4:	d006      	beq.n	80056f4 <UART_SetConfig+0x18c>
 80056e6:	e00b      	b.n	8005700 <UART_SetConfig+0x198>
 80056e8:	2300      	movs	r3, #0
 80056ea:	76fb      	strb	r3, [r7, #27]
 80056ec:	e05e      	b.n	80057ac <UART_SetConfig+0x244>
 80056ee:	2302      	movs	r3, #2
 80056f0:	76fb      	strb	r3, [r7, #27]
 80056f2:	e05b      	b.n	80057ac <UART_SetConfig+0x244>
 80056f4:	2304      	movs	r3, #4
 80056f6:	76fb      	strb	r3, [r7, #27]
 80056f8:	e058      	b.n	80057ac <UART_SetConfig+0x244>
 80056fa:	2308      	movs	r3, #8
 80056fc:	76fb      	strb	r3, [r7, #27]
 80056fe:	e055      	b.n	80057ac <UART_SetConfig+0x244>
 8005700:	2310      	movs	r3, #16
 8005702:	76fb      	strb	r3, [r7, #27]
 8005704:	e052      	b.n	80057ac <UART_SetConfig+0x244>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a57      	ldr	r2, [pc, #348]	; (8005868 <UART_SetConfig+0x300>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d120      	bne.n	8005752 <UART_SetConfig+0x1ea>
 8005710:	4b52      	ldr	r3, [pc, #328]	; (800585c <UART_SetConfig+0x2f4>)
 8005712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005716:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800571a:	2bc0      	cmp	r3, #192	; 0xc0
 800571c:	d013      	beq.n	8005746 <UART_SetConfig+0x1de>
 800571e:	2bc0      	cmp	r3, #192	; 0xc0
 8005720:	d814      	bhi.n	800574c <UART_SetConfig+0x1e4>
 8005722:	2b80      	cmp	r3, #128	; 0x80
 8005724:	d009      	beq.n	800573a <UART_SetConfig+0x1d2>
 8005726:	2b80      	cmp	r3, #128	; 0x80
 8005728:	d810      	bhi.n	800574c <UART_SetConfig+0x1e4>
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <UART_SetConfig+0x1cc>
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d006      	beq.n	8005740 <UART_SetConfig+0x1d8>
 8005732:	e00b      	b.n	800574c <UART_SetConfig+0x1e4>
 8005734:	2300      	movs	r3, #0
 8005736:	76fb      	strb	r3, [r7, #27]
 8005738:	e038      	b.n	80057ac <UART_SetConfig+0x244>
 800573a:	2302      	movs	r3, #2
 800573c:	76fb      	strb	r3, [r7, #27]
 800573e:	e035      	b.n	80057ac <UART_SetConfig+0x244>
 8005740:	2304      	movs	r3, #4
 8005742:	76fb      	strb	r3, [r7, #27]
 8005744:	e032      	b.n	80057ac <UART_SetConfig+0x244>
 8005746:	2308      	movs	r3, #8
 8005748:	76fb      	strb	r3, [r7, #27]
 800574a:	e02f      	b.n	80057ac <UART_SetConfig+0x244>
 800574c:	2310      	movs	r3, #16
 800574e:	76fb      	strb	r3, [r7, #27]
 8005750:	e02c      	b.n	80057ac <UART_SetConfig+0x244>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a3f      	ldr	r2, [pc, #252]	; (8005854 <UART_SetConfig+0x2ec>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d125      	bne.n	80057a8 <UART_SetConfig+0x240>
 800575c:	4b3f      	ldr	r3, [pc, #252]	; (800585c <UART_SetConfig+0x2f4>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005762:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005766:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800576a:	d017      	beq.n	800579c <UART_SetConfig+0x234>
 800576c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005770:	d817      	bhi.n	80057a2 <UART_SetConfig+0x23a>
 8005772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005776:	d00b      	beq.n	8005790 <UART_SetConfig+0x228>
 8005778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800577c:	d811      	bhi.n	80057a2 <UART_SetConfig+0x23a>
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <UART_SetConfig+0x222>
 8005782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005786:	d006      	beq.n	8005796 <UART_SetConfig+0x22e>
 8005788:	e00b      	b.n	80057a2 <UART_SetConfig+0x23a>
 800578a:	2300      	movs	r3, #0
 800578c:	76fb      	strb	r3, [r7, #27]
 800578e:	e00d      	b.n	80057ac <UART_SetConfig+0x244>
 8005790:	2302      	movs	r3, #2
 8005792:	76fb      	strb	r3, [r7, #27]
 8005794:	e00a      	b.n	80057ac <UART_SetConfig+0x244>
 8005796:	2304      	movs	r3, #4
 8005798:	76fb      	strb	r3, [r7, #27]
 800579a:	e007      	b.n	80057ac <UART_SetConfig+0x244>
 800579c:	2308      	movs	r3, #8
 800579e:	76fb      	strb	r3, [r7, #27]
 80057a0:	e004      	b.n	80057ac <UART_SetConfig+0x244>
 80057a2:	2310      	movs	r3, #16
 80057a4:	76fb      	strb	r3, [r7, #27]
 80057a6:	e001      	b.n	80057ac <UART_SetConfig+0x244>
 80057a8:	2310      	movs	r3, #16
 80057aa:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a28      	ldr	r2, [pc, #160]	; (8005854 <UART_SetConfig+0x2ec>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	f040 809e 	bne.w	80058f4 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057b8:	7efb      	ldrb	r3, [r7, #27]
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d823      	bhi.n	8005806 <UART_SetConfig+0x29e>
 80057be:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <UART_SetConfig+0x25c>)
 80057c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c4:	080057e9 	.word	0x080057e9
 80057c8:	08005807 	.word	0x08005807
 80057cc:	080057f1 	.word	0x080057f1
 80057d0:	08005807 	.word	0x08005807
 80057d4:	080057f7 	.word	0x080057f7
 80057d8:	08005807 	.word	0x08005807
 80057dc:	08005807 	.word	0x08005807
 80057e0:	08005807 	.word	0x08005807
 80057e4:	080057ff 	.word	0x080057ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e8:	f7fe fe10 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 80057ec:	6178      	str	r0, [r7, #20]
        break;
 80057ee:	e00f      	b.n	8005810 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057f0:	4b1e      	ldr	r3, [pc, #120]	; (800586c <UART_SetConfig+0x304>)
 80057f2:	617b      	str	r3, [r7, #20]
        break;
 80057f4:	e00c      	b.n	8005810 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057f6:	f7fe fd9b 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80057fa:	6178      	str	r0, [r7, #20]
        break;
 80057fc:	e008      	b.n	8005810 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005802:	617b      	str	r3, [r7, #20]
        break;
 8005804:	e004      	b.n	8005810 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	76bb      	strb	r3, [r7, #26]
        break;
 800580e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 812e 	beq.w	8005a74 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	4a14      	ldr	r2, [pc, #80]	; (8005870 <UART_SetConfig+0x308>)
 800581e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005822:	461a      	mov	r2, r3
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	fbb3 f3f2 	udiv	r3, r3, r2
 800582a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	4613      	mov	r3, r2
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	4413      	add	r3, r2
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	429a      	cmp	r2, r3
 800583a:	d305      	bcc.n	8005848 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	429a      	cmp	r2, r3
 8005846:	d915      	bls.n	8005874 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	76bb      	strb	r3, [r7, #26]
 800584c:	e112      	b.n	8005a74 <UART_SetConfig+0x50c>
 800584e:	bf00      	nop
 8005850:	cfff69f3 	.word	0xcfff69f3
 8005854:	40008000 	.word	0x40008000
 8005858:	40013800 	.word	0x40013800
 800585c:	40021000 	.word	0x40021000
 8005860:	40004400 	.word	0x40004400
 8005864:	40004800 	.word	0x40004800
 8005868:	40004c00 	.word	0x40004c00
 800586c:	00f42400 	.word	0x00f42400
 8005870:	08008f90 	.word	0x08008f90
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	4618      	mov	r0, r3
 8005878:	f04f 0100 	mov.w	r1, #0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	4a86      	ldr	r2, [pc, #536]	; (8005a9c <UART_SetConfig+0x534>)
 8005882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005886:	b29a      	uxth	r2, r3
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	f7fb f9b4 	bl	8000bf8 <__aeabi_uldivmod>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4610      	mov	r0, r2
 8005896:	4619      	mov	r1, r3
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	020b      	lsls	r3, r1, #8
 80058a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058a6:	0202      	lsls	r2, r0, #8
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	6849      	ldr	r1, [r1, #4]
 80058ac:	0849      	lsrs	r1, r1, #1
 80058ae:	4608      	mov	r0, r1
 80058b0:	f04f 0100 	mov.w	r1, #0
 80058b4:	1814      	adds	r4, r2, r0
 80058b6:	eb43 0501 	adc.w	r5, r3, r1
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	461a      	mov	r2, r3
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	4620      	mov	r0, r4
 80058c6:	4629      	mov	r1, r5
 80058c8:	f7fb f996 	bl	8000bf8 <__aeabi_uldivmod>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4613      	mov	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058da:	d308      	bcc.n	80058ee <UART_SetConfig+0x386>
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058e2:	d204      	bcs.n	80058ee <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	60da      	str	r2, [r3, #12]
 80058ec:	e0c2      	b.n	8005a74 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	76bb      	strb	r3, [r7, #26]
 80058f2:	e0bf      	b.n	8005a74 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058fc:	d165      	bne.n	80059ca <UART_SetConfig+0x462>
  {
    switch (clocksource)
 80058fe:	7efb      	ldrb	r3, [r7, #27]
 8005900:	2b08      	cmp	r3, #8
 8005902:	d828      	bhi.n	8005956 <UART_SetConfig+0x3ee>
 8005904:	a201      	add	r2, pc, #4	; (adr r2, 800590c <UART_SetConfig+0x3a4>)
 8005906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590a:	bf00      	nop
 800590c:	08005931 	.word	0x08005931
 8005910:	08005939 	.word	0x08005939
 8005914:	08005941 	.word	0x08005941
 8005918:	08005957 	.word	0x08005957
 800591c:	08005947 	.word	0x08005947
 8005920:	08005957 	.word	0x08005957
 8005924:	08005957 	.word	0x08005957
 8005928:	08005957 	.word	0x08005957
 800592c:	0800594f 	.word	0x0800594f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005930:	f7fe fd6c 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 8005934:	6178      	str	r0, [r7, #20]
        break;
 8005936:	e013      	b.n	8005960 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005938:	f7fe fd7e 	bl	8004438 <HAL_RCC_GetPCLK2Freq>
 800593c:	6178      	str	r0, [r7, #20]
        break;
 800593e:	e00f      	b.n	8005960 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005940:	4b57      	ldr	r3, [pc, #348]	; (8005aa0 <UART_SetConfig+0x538>)
 8005942:	617b      	str	r3, [r7, #20]
        break;
 8005944:	e00c      	b.n	8005960 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005946:	f7fe fcf3 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 800594a:	6178      	str	r0, [r7, #20]
        break;
 800594c:	e008      	b.n	8005960 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800594e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005952:	617b      	str	r3, [r7, #20]
        break;
 8005954:	e004      	b.n	8005960 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	76bb      	strb	r3, [r7, #26]
        break;
 800595e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 8086 	beq.w	8005a74 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	4a4b      	ldr	r2, [pc, #300]	; (8005a9c <UART_SetConfig+0x534>)
 800596e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005972:	461a      	mov	r2, r3
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	fbb3 f3f2 	udiv	r3, r3, r2
 800597a:	005a      	lsls	r2, r3, #1
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	441a      	add	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	fbb2 f3f3 	udiv	r3, r2, r3
 800598c:	b29b      	uxth	r3, r3
 800598e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	2b0f      	cmp	r3, #15
 8005994:	d916      	bls.n	80059c4 <UART_SetConfig+0x45c>
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800599c:	d212      	bcs.n	80059c4 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	f023 030f 	bic.w	r3, r3, #15
 80059a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	89fb      	ldrh	r3, [r7, #14]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	89fa      	ldrh	r2, [r7, #14]
 80059c0:	60da      	str	r2, [r3, #12]
 80059c2:	e057      	b.n	8005a74 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	76bb      	strb	r3, [r7, #26]
 80059c8:	e054      	b.n	8005a74 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059ca:	7efb      	ldrb	r3, [r7, #27]
 80059cc:	2b08      	cmp	r3, #8
 80059ce:	d828      	bhi.n	8005a22 <UART_SetConfig+0x4ba>
 80059d0:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <UART_SetConfig+0x470>)
 80059d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d6:	bf00      	nop
 80059d8:	080059fd 	.word	0x080059fd
 80059dc:	08005a05 	.word	0x08005a05
 80059e0:	08005a0d 	.word	0x08005a0d
 80059e4:	08005a23 	.word	0x08005a23
 80059e8:	08005a13 	.word	0x08005a13
 80059ec:	08005a23 	.word	0x08005a23
 80059f0:	08005a23 	.word	0x08005a23
 80059f4:	08005a23 	.word	0x08005a23
 80059f8:	08005a1b 	.word	0x08005a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059fc:	f7fe fd06 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 8005a00:	6178      	str	r0, [r7, #20]
        break;
 8005a02:	e013      	b.n	8005a2c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a04:	f7fe fd18 	bl	8004438 <HAL_RCC_GetPCLK2Freq>
 8005a08:	6178      	str	r0, [r7, #20]
        break;
 8005a0a:	e00f      	b.n	8005a2c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a0c:	4b24      	ldr	r3, [pc, #144]	; (8005aa0 <UART_SetConfig+0x538>)
 8005a0e:	617b      	str	r3, [r7, #20]
        break;
 8005a10:	e00c      	b.n	8005a2c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a12:	f7fe fc8d 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 8005a16:	6178      	str	r0, [r7, #20]
        break;
 8005a18:	e008      	b.n	8005a2c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a1e:	617b      	str	r3, [r7, #20]
        break;
 8005a20:	e004      	b.n	8005a2c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	76bb      	strb	r3, [r7, #26]
        break;
 8005a2a:	bf00      	nop
    }

    if (pclk != 0U)
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d020      	beq.n	8005a74 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	4a19      	ldr	r2, [pc, #100]	; (8005a9c <UART_SetConfig+0x534>)
 8005a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	085b      	lsrs	r3, r3, #1
 8005a4a:	441a      	add	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2b0f      	cmp	r3, #15
 8005a5c:	d908      	bls.n	8005a70 <UART_SetConfig+0x508>
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a64:	d204      	bcs.n	8005a70 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	60da      	str	r2, [r3, #12]
 8005a6e:	e001      	b.n	8005a74 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005a90:	7ebb      	ldrb	r3, [r7, #26]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3720      	adds	r7, #32
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bdb0      	pop	{r4, r5, r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	08008f90 	.word	0x08008f90
 8005aa0:	00f42400 	.word	0x00f42400

08005aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01a      	beq.n	8005bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba2:	d10a      	bne.n	8005bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	605a      	str	r2, [r3, #4]
  }
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af02      	add	r7, sp, #8
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bf8:	f7fc fc60 	bl	80024bc <HAL_GetTick>
 8005bfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0308 	and.w	r3, r3, #8
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d10e      	bne.n	8005c2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f82f 	bl	8005c7e <UART_WaitOnFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e025      	b.n	8005c76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d10e      	bne.n	8005c56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f819 	bl	8005c7e <UART_WaitOnFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e00f      	b.n	8005c76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	603b      	str	r3, [r7, #0]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c8e:	e062      	b.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d05e      	beq.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c98:	f7fc fc10 	bl	80024bc <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d302      	bcc.n	8005cae <UART_WaitOnFlagUntilTimeout+0x30>
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d11d      	bne.n	8005cea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cbc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0201 	bic.w	r2, r2, #1
 8005ccc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e045      	b.n	8005d76 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d02e      	beq.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d06:	d126      	bne.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d10:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d20:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0201 	bic.w	r2, r2, #1
 8005d30:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e00f      	b.n	8005d76 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69da      	ldr	r2, [r3, #28]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	bf0c      	ite	eq
 8005d66:	2301      	moveq	r3, #1
 8005d68:	2300      	movne	r3, #0
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d08d      	beq.n	8005c90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005d94:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005da4:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005dd0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6812      	ldr	r2, [r2, #0]
 8005ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005de0:	f023 0301 	bic.w	r3, r3, #1
 8005de4:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d107      	bne.n	8005dfe <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0210 	bic.w	r2, r2, #16
 8005dfc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d114      	bne.n	8005e64 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e50:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e60:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e62:	e002      	b.n	8005e6a <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f7fb f8f7 	bl	8001058 <HAL_UART_TxCpltCallback>
}
 8005e6a:	bf00      	nop
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7ff fb51 	bl	8005528 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b086      	sub	sp, #24
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ea2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb6:	2b80      	cmp	r3, #128	; 0x80
 8005eb8:	d109      	bne.n	8005ece <UART_DMAError+0x40>
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	2b21      	cmp	r3, #33	; 0x21
 8005ebe:	d106      	bne.n	8005ece <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005ec8:	6978      	ldr	r0, [r7, #20]
 8005eca:	f7ff ff58 	bl	8005d7e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed8:	2b40      	cmp	r3, #64	; 0x40
 8005eda:	d109      	bne.n	8005ef0 <UART_DMAError+0x62>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b22      	cmp	r3, #34	; 0x22
 8005ee0:	d106      	bne.n	8005ef0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005eea:	6978      	ldr	r0, [r7, #20]
 8005eec:	f7ff ff65 	bl	8005dba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef6:	f043 0210 	orr.w	r2, r3, #16
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f00:	6978      	ldr	r0, [r7, #20]
 8005f02:	f7ff fb1b 	bl	800553c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f06:	bf00      	nop
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f7ff fb05 	bl	800553c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f32:	bf00      	nop
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f50:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7fb f879 	bl	8001058 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f66:	bf00      	nop
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e027      	b.n	8006010 <HAL_UARTEx_DisableFifoMode+0x66>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2224      	movs	r2, #36	; 0x24
 8005fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005fee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006030:	2302      	movs	r3, #2
 8006032:	e02d      	b.n	8006090 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2224      	movs	r2, #36	; 0x24
 8006040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0201 	bic.w	r2, r2, #1
 800605a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f84f 	bl	8006114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2220      	movs	r2, #32
 8006082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d101      	bne.n	80060b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e02d      	b.n	800610c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2224      	movs	r2, #36	; 0x24
 80060bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0201 	bic.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f811 	bl	8006114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006120:	2b00      	cmp	r3, #0
 8006122:	d108      	bne.n	8006136 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006134:	e031      	b.n	800619a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006136:	2308      	movs	r3, #8
 8006138:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800613a:	2308      	movs	r3, #8
 800613c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	0e5b      	lsrs	r3, r3, #25
 8006146:	b2db      	uxtb	r3, r3
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	0f5b      	lsrs	r3, r3, #29
 8006156:	b2db      	uxtb	r3, r3
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800615e:	7bbb      	ldrb	r3, [r7, #14]
 8006160:	7b3a      	ldrb	r2, [r7, #12]
 8006162:	4911      	ldr	r1, [pc, #68]	; (80061a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006164:	5c8a      	ldrb	r2, [r1, r2]
 8006166:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800616a:	7b3a      	ldrb	r2, [r7, #12]
 800616c:	490f      	ldr	r1, [pc, #60]	; (80061ac <UARTEx_SetNbDataToProcess+0x98>)
 800616e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006170:	fb93 f3f2 	sdiv	r3, r3, r2
 8006174:	b29a      	uxth	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	7b7a      	ldrb	r2, [r7, #13]
 8006180:	4909      	ldr	r1, [pc, #36]	; (80061a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006182:	5c8a      	ldrb	r2, [r1, r2]
 8006184:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006188:	7b7a      	ldrb	r2, [r7, #13]
 800618a:	4908      	ldr	r1, [pc, #32]	; (80061ac <UARTEx_SetNbDataToProcess+0x98>)
 800618c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800618e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006192:	b29a      	uxth	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	08008fa8 	.word	0x08008fa8
 80061ac:	08008fb0 	.word	0x08008fb0

080061b0 <__errno>:
 80061b0:	4b01      	ldr	r3, [pc, #4]	; (80061b8 <__errno+0x8>)
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	20000274 	.word	0x20000274

080061bc <__libc_init_array>:
 80061bc:	b570      	push	{r4, r5, r6, lr}
 80061be:	4d0d      	ldr	r5, [pc, #52]	; (80061f4 <__libc_init_array+0x38>)
 80061c0:	4c0d      	ldr	r4, [pc, #52]	; (80061f8 <__libc_init_array+0x3c>)
 80061c2:	1b64      	subs	r4, r4, r5
 80061c4:	10a4      	asrs	r4, r4, #2
 80061c6:	2600      	movs	r6, #0
 80061c8:	42a6      	cmp	r6, r4
 80061ca:	d109      	bne.n	80061e0 <__libc_init_array+0x24>
 80061cc:	4d0b      	ldr	r5, [pc, #44]	; (80061fc <__libc_init_array+0x40>)
 80061ce:	4c0c      	ldr	r4, [pc, #48]	; (8006200 <__libc_init_array+0x44>)
 80061d0:	f002 fdda 	bl	8008d88 <_init>
 80061d4:	1b64      	subs	r4, r4, r5
 80061d6:	10a4      	asrs	r4, r4, #2
 80061d8:	2600      	movs	r6, #0
 80061da:	42a6      	cmp	r6, r4
 80061dc:	d105      	bne.n	80061ea <__libc_init_array+0x2e>
 80061de:	bd70      	pop	{r4, r5, r6, pc}
 80061e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e4:	4798      	blx	r3
 80061e6:	3601      	adds	r6, #1
 80061e8:	e7ee      	b.n	80061c8 <__libc_init_array+0xc>
 80061ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ee:	4798      	blx	r3
 80061f0:	3601      	adds	r6, #1
 80061f2:	e7f2      	b.n	80061da <__libc_init_array+0x1e>
 80061f4:	080093a4 	.word	0x080093a4
 80061f8:	080093a4 	.word	0x080093a4
 80061fc:	080093a4 	.word	0x080093a4
 8006200:	080093a8 	.word	0x080093a8

08006204 <malloc>:
 8006204:	4b02      	ldr	r3, [pc, #8]	; (8006210 <malloc+0xc>)
 8006206:	4601      	mov	r1, r0
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	f000 b869 	b.w	80062e0 <_malloc_r>
 800620e:	bf00      	nop
 8006210:	20000274 	.word	0x20000274

08006214 <memcpy>:
 8006214:	440a      	add	r2, r1
 8006216:	4291      	cmp	r1, r2
 8006218:	f100 33ff 	add.w	r3, r0, #4294967295
 800621c:	d100      	bne.n	8006220 <memcpy+0xc>
 800621e:	4770      	bx	lr
 8006220:	b510      	push	{r4, lr}
 8006222:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006226:	f803 4f01 	strb.w	r4, [r3, #1]!
 800622a:	4291      	cmp	r1, r2
 800622c:	d1f9      	bne.n	8006222 <memcpy+0xe>
 800622e:	bd10      	pop	{r4, pc}

08006230 <memset>:
 8006230:	4402      	add	r2, r0
 8006232:	4603      	mov	r3, r0
 8006234:	4293      	cmp	r3, r2
 8006236:	d100      	bne.n	800623a <memset+0xa>
 8006238:	4770      	bx	lr
 800623a:	f803 1b01 	strb.w	r1, [r3], #1
 800623e:	e7f9      	b.n	8006234 <memset+0x4>

08006240 <_free_r>:
 8006240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006242:	2900      	cmp	r1, #0
 8006244:	d048      	beq.n	80062d8 <_free_r+0x98>
 8006246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800624a:	9001      	str	r0, [sp, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	f1a1 0404 	sub.w	r4, r1, #4
 8006252:	bfb8      	it	lt
 8006254:	18e4      	addlt	r4, r4, r3
 8006256:	f001 ff17 	bl	8008088 <__malloc_lock>
 800625a:	4a20      	ldr	r2, [pc, #128]	; (80062dc <_free_r+0x9c>)
 800625c:	9801      	ldr	r0, [sp, #4]
 800625e:	6813      	ldr	r3, [r2, #0]
 8006260:	4615      	mov	r5, r2
 8006262:	b933      	cbnz	r3, 8006272 <_free_r+0x32>
 8006264:	6063      	str	r3, [r4, #4]
 8006266:	6014      	str	r4, [r2, #0]
 8006268:	b003      	add	sp, #12
 800626a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800626e:	f001 bf11 	b.w	8008094 <__malloc_unlock>
 8006272:	42a3      	cmp	r3, r4
 8006274:	d90b      	bls.n	800628e <_free_r+0x4e>
 8006276:	6821      	ldr	r1, [r4, #0]
 8006278:	1862      	adds	r2, r4, r1
 800627a:	4293      	cmp	r3, r2
 800627c:	bf04      	itt	eq
 800627e:	681a      	ldreq	r2, [r3, #0]
 8006280:	685b      	ldreq	r3, [r3, #4]
 8006282:	6063      	str	r3, [r4, #4]
 8006284:	bf04      	itt	eq
 8006286:	1852      	addeq	r2, r2, r1
 8006288:	6022      	streq	r2, [r4, #0]
 800628a:	602c      	str	r4, [r5, #0]
 800628c:	e7ec      	b.n	8006268 <_free_r+0x28>
 800628e:	461a      	mov	r2, r3
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	b10b      	cbz	r3, 8006298 <_free_r+0x58>
 8006294:	42a3      	cmp	r3, r4
 8006296:	d9fa      	bls.n	800628e <_free_r+0x4e>
 8006298:	6811      	ldr	r1, [r2, #0]
 800629a:	1855      	adds	r5, r2, r1
 800629c:	42a5      	cmp	r5, r4
 800629e:	d10b      	bne.n	80062b8 <_free_r+0x78>
 80062a0:	6824      	ldr	r4, [r4, #0]
 80062a2:	4421      	add	r1, r4
 80062a4:	1854      	adds	r4, r2, r1
 80062a6:	42a3      	cmp	r3, r4
 80062a8:	6011      	str	r1, [r2, #0]
 80062aa:	d1dd      	bne.n	8006268 <_free_r+0x28>
 80062ac:	681c      	ldr	r4, [r3, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	6053      	str	r3, [r2, #4]
 80062b2:	4421      	add	r1, r4
 80062b4:	6011      	str	r1, [r2, #0]
 80062b6:	e7d7      	b.n	8006268 <_free_r+0x28>
 80062b8:	d902      	bls.n	80062c0 <_free_r+0x80>
 80062ba:	230c      	movs	r3, #12
 80062bc:	6003      	str	r3, [r0, #0]
 80062be:	e7d3      	b.n	8006268 <_free_r+0x28>
 80062c0:	6825      	ldr	r5, [r4, #0]
 80062c2:	1961      	adds	r1, r4, r5
 80062c4:	428b      	cmp	r3, r1
 80062c6:	bf04      	itt	eq
 80062c8:	6819      	ldreq	r1, [r3, #0]
 80062ca:	685b      	ldreq	r3, [r3, #4]
 80062cc:	6063      	str	r3, [r4, #4]
 80062ce:	bf04      	itt	eq
 80062d0:	1949      	addeq	r1, r1, r5
 80062d2:	6021      	streq	r1, [r4, #0]
 80062d4:	6054      	str	r4, [r2, #4]
 80062d6:	e7c7      	b.n	8006268 <_free_r+0x28>
 80062d8:	b003      	add	sp, #12
 80062da:	bd30      	pop	{r4, r5, pc}
 80062dc:	20000478 	.word	0x20000478

080062e0 <_malloc_r>:
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	1ccd      	adds	r5, r1, #3
 80062e4:	f025 0503 	bic.w	r5, r5, #3
 80062e8:	3508      	adds	r5, #8
 80062ea:	2d0c      	cmp	r5, #12
 80062ec:	bf38      	it	cc
 80062ee:	250c      	movcc	r5, #12
 80062f0:	2d00      	cmp	r5, #0
 80062f2:	4606      	mov	r6, r0
 80062f4:	db01      	blt.n	80062fa <_malloc_r+0x1a>
 80062f6:	42a9      	cmp	r1, r5
 80062f8:	d903      	bls.n	8006302 <_malloc_r+0x22>
 80062fa:	230c      	movs	r3, #12
 80062fc:	6033      	str	r3, [r6, #0]
 80062fe:	2000      	movs	r0, #0
 8006300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006302:	f001 fec1 	bl	8008088 <__malloc_lock>
 8006306:	4921      	ldr	r1, [pc, #132]	; (800638c <_malloc_r+0xac>)
 8006308:	680a      	ldr	r2, [r1, #0]
 800630a:	4614      	mov	r4, r2
 800630c:	b99c      	cbnz	r4, 8006336 <_malloc_r+0x56>
 800630e:	4f20      	ldr	r7, [pc, #128]	; (8006390 <_malloc_r+0xb0>)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	b923      	cbnz	r3, 800631e <_malloc_r+0x3e>
 8006314:	4621      	mov	r1, r4
 8006316:	4630      	mov	r0, r6
 8006318:	f000 fd4a 	bl	8006db0 <_sbrk_r>
 800631c:	6038      	str	r0, [r7, #0]
 800631e:	4629      	mov	r1, r5
 8006320:	4630      	mov	r0, r6
 8006322:	f000 fd45 	bl	8006db0 <_sbrk_r>
 8006326:	1c43      	adds	r3, r0, #1
 8006328:	d123      	bne.n	8006372 <_malloc_r+0x92>
 800632a:	230c      	movs	r3, #12
 800632c:	6033      	str	r3, [r6, #0]
 800632e:	4630      	mov	r0, r6
 8006330:	f001 feb0 	bl	8008094 <__malloc_unlock>
 8006334:	e7e3      	b.n	80062fe <_malloc_r+0x1e>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	1b5b      	subs	r3, r3, r5
 800633a:	d417      	bmi.n	800636c <_malloc_r+0x8c>
 800633c:	2b0b      	cmp	r3, #11
 800633e:	d903      	bls.n	8006348 <_malloc_r+0x68>
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	441c      	add	r4, r3
 8006344:	6025      	str	r5, [r4, #0]
 8006346:	e004      	b.n	8006352 <_malloc_r+0x72>
 8006348:	6863      	ldr	r3, [r4, #4]
 800634a:	42a2      	cmp	r2, r4
 800634c:	bf0c      	ite	eq
 800634e:	600b      	streq	r3, [r1, #0]
 8006350:	6053      	strne	r3, [r2, #4]
 8006352:	4630      	mov	r0, r6
 8006354:	f001 fe9e 	bl	8008094 <__malloc_unlock>
 8006358:	f104 000b 	add.w	r0, r4, #11
 800635c:	1d23      	adds	r3, r4, #4
 800635e:	f020 0007 	bic.w	r0, r0, #7
 8006362:	1ac2      	subs	r2, r0, r3
 8006364:	d0cc      	beq.n	8006300 <_malloc_r+0x20>
 8006366:	1a1b      	subs	r3, r3, r0
 8006368:	50a3      	str	r3, [r4, r2]
 800636a:	e7c9      	b.n	8006300 <_malloc_r+0x20>
 800636c:	4622      	mov	r2, r4
 800636e:	6864      	ldr	r4, [r4, #4]
 8006370:	e7cc      	b.n	800630c <_malloc_r+0x2c>
 8006372:	1cc4      	adds	r4, r0, #3
 8006374:	f024 0403 	bic.w	r4, r4, #3
 8006378:	42a0      	cmp	r0, r4
 800637a:	d0e3      	beq.n	8006344 <_malloc_r+0x64>
 800637c:	1a21      	subs	r1, r4, r0
 800637e:	4630      	mov	r0, r6
 8006380:	f000 fd16 	bl	8006db0 <_sbrk_r>
 8006384:	3001      	adds	r0, #1
 8006386:	d1dd      	bne.n	8006344 <_malloc_r+0x64>
 8006388:	e7cf      	b.n	800632a <_malloc_r+0x4a>
 800638a:	bf00      	nop
 800638c:	20000478 	.word	0x20000478
 8006390:	2000047c 	.word	0x2000047c

08006394 <__cvt>:
 8006394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006398:	ec55 4b10 	vmov	r4, r5, d0
 800639c:	2d00      	cmp	r5, #0
 800639e:	460e      	mov	r6, r1
 80063a0:	4619      	mov	r1, r3
 80063a2:	462b      	mov	r3, r5
 80063a4:	bfbb      	ittet	lt
 80063a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80063aa:	461d      	movlt	r5, r3
 80063ac:	2300      	movge	r3, #0
 80063ae:	232d      	movlt	r3, #45	; 0x2d
 80063b0:	700b      	strb	r3, [r1, #0]
 80063b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80063b8:	4691      	mov	r9, r2
 80063ba:	f023 0820 	bic.w	r8, r3, #32
 80063be:	bfbc      	itt	lt
 80063c0:	4622      	movlt	r2, r4
 80063c2:	4614      	movlt	r4, r2
 80063c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063c8:	d005      	beq.n	80063d6 <__cvt+0x42>
 80063ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80063ce:	d100      	bne.n	80063d2 <__cvt+0x3e>
 80063d0:	3601      	adds	r6, #1
 80063d2:	2102      	movs	r1, #2
 80063d4:	e000      	b.n	80063d8 <__cvt+0x44>
 80063d6:	2103      	movs	r1, #3
 80063d8:	ab03      	add	r3, sp, #12
 80063da:	9301      	str	r3, [sp, #4]
 80063dc:	ab02      	add	r3, sp, #8
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	ec45 4b10 	vmov	d0, r4, r5
 80063e4:	4653      	mov	r3, sl
 80063e6:	4632      	mov	r2, r6
 80063e8:	f000 fe3e 	bl	8007068 <_dtoa_r>
 80063ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063f0:	4607      	mov	r7, r0
 80063f2:	d102      	bne.n	80063fa <__cvt+0x66>
 80063f4:	f019 0f01 	tst.w	r9, #1
 80063f8:	d022      	beq.n	8006440 <__cvt+0xac>
 80063fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063fe:	eb07 0906 	add.w	r9, r7, r6
 8006402:	d110      	bne.n	8006426 <__cvt+0x92>
 8006404:	783b      	ldrb	r3, [r7, #0]
 8006406:	2b30      	cmp	r3, #48	; 0x30
 8006408:	d10a      	bne.n	8006420 <__cvt+0x8c>
 800640a:	2200      	movs	r2, #0
 800640c:	2300      	movs	r3, #0
 800640e:	4620      	mov	r0, r4
 8006410:	4629      	mov	r1, r5
 8006412:	f7fa fb81 	bl	8000b18 <__aeabi_dcmpeq>
 8006416:	b918      	cbnz	r0, 8006420 <__cvt+0x8c>
 8006418:	f1c6 0601 	rsb	r6, r6, #1
 800641c:	f8ca 6000 	str.w	r6, [sl]
 8006420:	f8da 3000 	ldr.w	r3, [sl]
 8006424:	4499      	add	r9, r3
 8006426:	2200      	movs	r2, #0
 8006428:	2300      	movs	r3, #0
 800642a:	4620      	mov	r0, r4
 800642c:	4629      	mov	r1, r5
 800642e:	f7fa fb73 	bl	8000b18 <__aeabi_dcmpeq>
 8006432:	b108      	cbz	r0, 8006438 <__cvt+0xa4>
 8006434:	f8cd 900c 	str.w	r9, [sp, #12]
 8006438:	2230      	movs	r2, #48	; 0x30
 800643a:	9b03      	ldr	r3, [sp, #12]
 800643c:	454b      	cmp	r3, r9
 800643e:	d307      	bcc.n	8006450 <__cvt+0xbc>
 8006440:	9b03      	ldr	r3, [sp, #12]
 8006442:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006444:	1bdb      	subs	r3, r3, r7
 8006446:	4638      	mov	r0, r7
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	b004      	add	sp, #16
 800644c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006450:	1c59      	adds	r1, r3, #1
 8006452:	9103      	str	r1, [sp, #12]
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	e7f0      	b.n	800643a <__cvt+0xa6>

08006458 <__exponent>:
 8006458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800645a:	4603      	mov	r3, r0
 800645c:	2900      	cmp	r1, #0
 800645e:	bfb8      	it	lt
 8006460:	4249      	neglt	r1, r1
 8006462:	f803 2b02 	strb.w	r2, [r3], #2
 8006466:	bfb4      	ite	lt
 8006468:	222d      	movlt	r2, #45	; 0x2d
 800646a:	222b      	movge	r2, #43	; 0x2b
 800646c:	2909      	cmp	r1, #9
 800646e:	7042      	strb	r2, [r0, #1]
 8006470:	dd2a      	ble.n	80064c8 <__exponent+0x70>
 8006472:	f10d 0407 	add.w	r4, sp, #7
 8006476:	46a4      	mov	ip, r4
 8006478:	270a      	movs	r7, #10
 800647a:	46a6      	mov	lr, r4
 800647c:	460a      	mov	r2, r1
 800647e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006482:	fb07 1516 	mls	r5, r7, r6, r1
 8006486:	3530      	adds	r5, #48	; 0x30
 8006488:	2a63      	cmp	r2, #99	; 0x63
 800648a:	f104 34ff 	add.w	r4, r4, #4294967295
 800648e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006492:	4631      	mov	r1, r6
 8006494:	dcf1      	bgt.n	800647a <__exponent+0x22>
 8006496:	3130      	adds	r1, #48	; 0x30
 8006498:	f1ae 0502 	sub.w	r5, lr, #2
 800649c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80064a0:	1c44      	adds	r4, r0, #1
 80064a2:	4629      	mov	r1, r5
 80064a4:	4561      	cmp	r1, ip
 80064a6:	d30a      	bcc.n	80064be <__exponent+0x66>
 80064a8:	f10d 0209 	add.w	r2, sp, #9
 80064ac:	eba2 020e 	sub.w	r2, r2, lr
 80064b0:	4565      	cmp	r5, ip
 80064b2:	bf88      	it	hi
 80064b4:	2200      	movhi	r2, #0
 80064b6:	4413      	add	r3, r2
 80064b8:	1a18      	subs	r0, r3, r0
 80064ba:	b003      	add	sp, #12
 80064bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80064c6:	e7ed      	b.n	80064a4 <__exponent+0x4c>
 80064c8:	2330      	movs	r3, #48	; 0x30
 80064ca:	3130      	adds	r1, #48	; 0x30
 80064cc:	7083      	strb	r3, [r0, #2]
 80064ce:	70c1      	strb	r1, [r0, #3]
 80064d0:	1d03      	adds	r3, r0, #4
 80064d2:	e7f1      	b.n	80064b8 <__exponent+0x60>

080064d4 <_printf_float>:
 80064d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d8:	ed2d 8b02 	vpush	{d8}
 80064dc:	b08d      	sub	sp, #52	; 0x34
 80064de:	460c      	mov	r4, r1
 80064e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80064e4:	4616      	mov	r6, r2
 80064e6:	461f      	mov	r7, r3
 80064e8:	4605      	mov	r5, r0
 80064ea:	f001 fd61 	bl	8007fb0 <_localeconv_r>
 80064ee:	f8d0 a000 	ldr.w	sl, [r0]
 80064f2:	4650      	mov	r0, sl
 80064f4:	f7f9 fe94 	bl	8000220 <strlen>
 80064f8:	2300      	movs	r3, #0
 80064fa:	930a      	str	r3, [sp, #40]	; 0x28
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	9305      	str	r3, [sp, #20]
 8006500:	f8d8 3000 	ldr.w	r3, [r8]
 8006504:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006508:	3307      	adds	r3, #7
 800650a:	f023 0307 	bic.w	r3, r3, #7
 800650e:	f103 0208 	add.w	r2, r3, #8
 8006512:	f8c8 2000 	str.w	r2, [r8]
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800651e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006522:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006526:	9307      	str	r3, [sp, #28]
 8006528:	f8cd 8018 	str.w	r8, [sp, #24]
 800652c:	ee08 0a10 	vmov	s16, r0
 8006530:	4b9f      	ldr	r3, [pc, #636]	; (80067b0 <_printf_float+0x2dc>)
 8006532:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006536:	f04f 32ff 	mov.w	r2, #4294967295
 800653a:	f7fa fb1f 	bl	8000b7c <__aeabi_dcmpun>
 800653e:	bb88      	cbnz	r0, 80065a4 <_printf_float+0xd0>
 8006540:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006544:	4b9a      	ldr	r3, [pc, #616]	; (80067b0 <_printf_float+0x2dc>)
 8006546:	f04f 32ff 	mov.w	r2, #4294967295
 800654a:	f7fa faf9 	bl	8000b40 <__aeabi_dcmple>
 800654e:	bb48      	cbnz	r0, 80065a4 <_printf_float+0xd0>
 8006550:	2200      	movs	r2, #0
 8006552:	2300      	movs	r3, #0
 8006554:	4640      	mov	r0, r8
 8006556:	4649      	mov	r1, r9
 8006558:	f7fa fae8 	bl	8000b2c <__aeabi_dcmplt>
 800655c:	b110      	cbz	r0, 8006564 <_printf_float+0x90>
 800655e:	232d      	movs	r3, #45	; 0x2d
 8006560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006564:	4b93      	ldr	r3, [pc, #588]	; (80067b4 <_printf_float+0x2e0>)
 8006566:	4894      	ldr	r0, [pc, #592]	; (80067b8 <_printf_float+0x2e4>)
 8006568:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800656c:	bf94      	ite	ls
 800656e:	4698      	movls	r8, r3
 8006570:	4680      	movhi	r8, r0
 8006572:	2303      	movs	r3, #3
 8006574:	6123      	str	r3, [r4, #16]
 8006576:	9b05      	ldr	r3, [sp, #20]
 8006578:	f023 0204 	bic.w	r2, r3, #4
 800657c:	6022      	str	r2, [r4, #0]
 800657e:	f04f 0900 	mov.w	r9, #0
 8006582:	9700      	str	r7, [sp, #0]
 8006584:	4633      	mov	r3, r6
 8006586:	aa0b      	add	r2, sp, #44	; 0x2c
 8006588:	4621      	mov	r1, r4
 800658a:	4628      	mov	r0, r5
 800658c:	f000 f9d8 	bl	8006940 <_printf_common>
 8006590:	3001      	adds	r0, #1
 8006592:	f040 8090 	bne.w	80066b6 <_printf_float+0x1e2>
 8006596:	f04f 30ff 	mov.w	r0, #4294967295
 800659a:	b00d      	add	sp, #52	; 0x34
 800659c:	ecbd 8b02 	vpop	{d8}
 80065a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a4:	4642      	mov	r2, r8
 80065a6:	464b      	mov	r3, r9
 80065a8:	4640      	mov	r0, r8
 80065aa:	4649      	mov	r1, r9
 80065ac:	f7fa fae6 	bl	8000b7c <__aeabi_dcmpun>
 80065b0:	b140      	cbz	r0, 80065c4 <_printf_float+0xf0>
 80065b2:	464b      	mov	r3, r9
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	bfbc      	itt	lt
 80065b8:	232d      	movlt	r3, #45	; 0x2d
 80065ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80065be:	487f      	ldr	r0, [pc, #508]	; (80067bc <_printf_float+0x2e8>)
 80065c0:	4b7f      	ldr	r3, [pc, #508]	; (80067c0 <_printf_float+0x2ec>)
 80065c2:	e7d1      	b.n	8006568 <_printf_float+0x94>
 80065c4:	6863      	ldr	r3, [r4, #4]
 80065c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80065ca:	9206      	str	r2, [sp, #24]
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	d13f      	bne.n	8006650 <_printf_float+0x17c>
 80065d0:	2306      	movs	r3, #6
 80065d2:	6063      	str	r3, [r4, #4]
 80065d4:	9b05      	ldr	r3, [sp, #20]
 80065d6:	6861      	ldr	r1, [r4, #4]
 80065d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80065dc:	2300      	movs	r3, #0
 80065de:	9303      	str	r3, [sp, #12]
 80065e0:	ab0a      	add	r3, sp, #40	; 0x28
 80065e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80065e6:	ab09      	add	r3, sp, #36	; 0x24
 80065e8:	ec49 8b10 	vmov	d0, r8, r9
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	6022      	str	r2, [r4, #0]
 80065f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065f4:	4628      	mov	r0, r5
 80065f6:	f7ff fecd 	bl	8006394 <__cvt>
 80065fa:	9b06      	ldr	r3, [sp, #24]
 80065fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065fe:	2b47      	cmp	r3, #71	; 0x47
 8006600:	4680      	mov	r8, r0
 8006602:	d108      	bne.n	8006616 <_printf_float+0x142>
 8006604:	1cc8      	adds	r0, r1, #3
 8006606:	db02      	blt.n	800660e <_printf_float+0x13a>
 8006608:	6863      	ldr	r3, [r4, #4]
 800660a:	4299      	cmp	r1, r3
 800660c:	dd41      	ble.n	8006692 <_printf_float+0x1be>
 800660e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006612:	fa5f fb8b 	uxtb.w	fp, fp
 8006616:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800661a:	d820      	bhi.n	800665e <_printf_float+0x18a>
 800661c:	3901      	subs	r1, #1
 800661e:	465a      	mov	r2, fp
 8006620:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006624:	9109      	str	r1, [sp, #36]	; 0x24
 8006626:	f7ff ff17 	bl	8006458 <__exponent>
 800662a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800662c:	1813      	adds	r3, r2, r0
 800662e:	2a01      	cmp	r2, #1
 8006630:	4681      	mov	r9, r0
 8006632:	6123      	str	r3, [r4, #16]
 8006634:	dc02      	bgt.n	800663c <_printf_float+0x168>
 8006636:	6822      	ldr	r2, [r4, #0]
 8006638:	07d2      	lsls	r2, r2, #31
 800663a:	d501      	bpl.n	8006640 <_printf_float+0x16c>
 800663c:	3301      	adds	r3, #1
 800663e:	6123      	str	r3, [r4, #16]
 8006640:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006644:	2b00      	cmp	r3, #0
 8006646:	d09c      	beq.n	8006582 <_printf_float+0xae>
 8006648:	232d      	movs	r3, #45	; 0x2d
 800664a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800664e:	e798      	b.n	8006582 <_printf_float+0xae>
 8006650:	9a06      	ldr	r2, [sp, #24]
 8006652:	2a47      	cmp	r2, #71	; 0x47
 8006654:	d1be      	bne.n	80065d4 <_printf_float+0x100>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1bc      	bne.n	80065d4 <_printf_float+0x100>
 800665a:	2301      	movs	r3, #1
 800665c:	e7b9      	b.n	80065d2 <_printf_float+0xfe>
 800665e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006662:	d118      	bne.n	8006696 <_printf_float+0x1c2>
 8006664:	2900      	cmp	r1, #0
 8006666:	6863      	ldr	r3, [r4, #4]
 8006668:	dd0b      	ble.n	8006682 <_printf_float+0x1ae>
 800666a:	6121      	str	r1, [r4, #16]
 800666c:	b913      	cbnz	r3, 8006674 <_printf_float+0x1a0>
 800666e:	6822      	ldr	r2, [r4, #0]
 8006670:	07d0      	lsls	r0, r2, #31
 8006672:	d502      	bpl.n	800667a <_printf_float+0x1a6>
 8006674:	3301      	adds	r3, #1
 8006676:	440b      	add	r3, r1
 8006678:	6123      	str	r3, [r4, #16]
 800667a:	65a1      	str	r1, [r4, #88]	; 0x58
 800667c:	f04f 0900 	mov.w	r9, #0
 8006680:	e7de      	b.n	8006640 <_printf_float+0x16c>
 8006682:	b913      	cbnz	r3, 800668a <_printf_float+0x1b6>
 8006684:	6822      	ldr	r2, [r4, #0]
 8006686:	07d2      	lsls	r2, r2, #31
 8006688:	d501      	bpl.n	800668e <_printf_float+0x1ba>
 800668a:	3302      	adds	r3, #2
 800668c:	e7f4      	b.n	8006678 <_printf_float+0x1a4>
 800668e:	2301      	movs	r3, #1
 8006690:	e7f2      	b.n	8006678 <_printf_float+0x1a4>
 8006692:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006698:	4299      	cmp	r1, r3
 800669a:	db05      	blt.n	80066a8 <_printf_float+0x1d4>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	6121      	str	r1, [r4, #16]
 80066a0:	07d8      	lsls	r0, r3, #31
 80066a2:	d5ea      	bpl.n	800667a <_printf_float+0x1a6>
 80066a4:	1c4b      	adds	r3, r1, #1
 80066a6:	e7e7      	b.n	8006678 <_printf_float+0x1a4>
 80066a8:	2900      	cmp	r1, #0
 80066aa:	bfd4      	ite	le
 80066ac:	f1c1 0202 	rsble	r2, r1, #2
 80066b0:	2201      	movgt	r2, #1
 80066b2:	4413      	add	r3, r2
 80066b4:	e7e0      	b.n	8006678 <_printf_float+0x1a4>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	055a      	lsls	r2, r3, #21
 80066ba:	d407      	bmi.n	80066cc <_printf_float+0x1f8>
 80066bc:	6923      	ldr	r3, [r4, #16]
 80066be:	4642      	mov	r2, r8
 80066c0:	4631      	mov	r1, r6
 80066c2:	4628      	mov	r0, r5
 80066c4:	47b8      	blx	r7
 80066c6:	3001      	adds	r0, #1
 80066c8:	d12c      	bne.n	8006724 <_printf_float+0x250>
 80066ca:	e764      	b.n	8006596 <_printf_float+0xc2>
 80066cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066d0:	f240 80e0 	bls.w	8006894 <_printf_float+0x3c0>
 80066d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066d8:	2200      	movs	r2, #0
 80066da:	2300      	movs	r3, #0
 80066dc:	f7fa fa1c 	bl	8000b18 <__aeabi_dcmpeq>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d034      	beq.n	800674e <_printf_float+0x27a>
 80066e4:	4a37      	ldr	r2, [pc, #220]	; (80067c4 <_printf_float+0x2f0>)
 80066e6:	2301      	movs	r3, #1
 80066e8:	4631      	mov	r1, r6
 80066ea:	4628      	mov	r0, r5
 80066ec:	47b8      	blx	r7
 80066ee:	3001      	adds	r0, #1
 80066f0:	f43f af51 	beq.w	8006596 <_printf_float+0xc2>
 80066f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066f8:	429a      	cmp	r2, r3
 80066fa:	db02      	blt.n	8006702 <_printf_float+0x22e>
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	07d8      	lsls	r0, r3, #31
 8006700:	d510      	bpl.n	8006724 <_printf_float+0x250>
 8006702:	ee18 3a10 	vmov	r3, s16
 8006706:	4652      	mov	r2, sl
 8006708:	4631      	mov	r1, r6
 800670a:	4628      	mov	r0, r5
 800670c:	47b8      	blx	r7
 800670e:	3001      	adds	r0, #1
 8006710:	f43f af41 	beq.w	8006596 <_printf_float+0xc2>
 8006714:	f04f 0800 	mov.w	r8, #0
 8006718:	f104 091a 	add.w	r9, r4, #26
 800671c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800671e:	3b01      	subs	r3, #1
 8006720:	4543      	cmp	r3, r8
 8006722:	dc09      	bgt.n	8006738 <_printf_float+0x264>
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	079b      	lsls	r3, r3, #30
 8006728:	f100 8105 	bmi.w	8006936 <_printf_float+0x462>
 800672c:	68e0      	ldr	r0, [r4, #12]
 800672e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006730:	4298      	cmp	r0, r3
 8006732:	bfb8      	it	lt
 8006734:	4618      	movlt	r0, r3
 8006736:	e730      	b.n	800659a <_printf_float+0xc6>
 8006738:	2301      	movs	r3, #1
 800673a:	464a      	mov	r2, r9
 800673c:	4631      	mov	r1, r6
 800673e:	4628      	mov	r0, r5
 8006740:	47b8      	blx	r7
 8006742:	3001      	adds	r0, #1
 8006744:	f43f af27 	beq.w	8006596 <_printf_float+0xc2>
 8006748:	f108 0801 	add.w	r8, r8, #1
 800674c:	e7e6      	b.n	800671c <_printf_float+0x248>
 800674e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006750:	2b00      	cmp	r3, #0
 8006752:	dc39      	bgt.n	80067c8 <_printf_float+0x2f4>
 8006754:	4a1b      	ldr	r2, [pc, #108]	; (80067c4 <_printf_float+0x2f0>)
 8006756:	2301      	movs	r3, #1
 8006758:	4631      	mov	r1, r6
 800675a:	4628      	mov	r0, r5
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	f43f af19 	beq.w	8006596 <_printf_float+0xc2>
 8006764:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006768:	4313      	orrs	r3, r2
 800676a:	d102      	bne.n	8006772 <_printf_float+0x29e>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	07d9      	lsls	r1, r3, #31
 8006770:	d5d8      	bpl.n	8006724 <_printf_float+0x250>
 8006772:	ee18 3a10 	vmov	r3, s16
 8006776:	4652      	mov	r2, sl
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	f43f af09 	beq.w	8006596 <_printf_float+0xc2>
 8006784:	f04f 0900 	mov.w	r9, #0
 8006788:	f104 0a1a 	add.w	sl, r4, #26
 800678c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800678e:	425b      	negs	r3, r3
 8006790:	454b      	cmp	r3, r9
 8006792:	dc01      	bgt.n	8006798 <_printf_float+0x2c4>
 8006794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006796:	e792      	b.n	80066be <_printf_float+0x1ea>
 8006798:	2301      	movs	r3, #1
 800679a:	4652      	mov	r2, sl
 800679c:	4631      	mov	r1, r6
 800679e:	4628      	mov	r0, r5
 80067a0:	47b8      	blx	r7
 80067a2:	3001      	adds	r0, #1
 80067a4:	f43f aef7 	beq.w	8006596 <_printf_float+0xc2>
 80067a8:	f109 0901 	add.w	r9, r9, #1
 80067ac:	e7ee      	b.n	800678c <_printf_float+0x2b8>
 80067ae:	bf00      	nop
 80067b0:	7fefffff 	.word	0x7fefffff
 80067b4:	08008fbc 	.word	0x08008fbc
 80067b8:	08008fc0 	.word	0x08008fc0
 80067bc:	08008fc8 	.word	0x08008fc8
 80067c0:	08008fc4 	.word	0x08008fc4
 80067c4:	08008fcc 	.word	0x08008fcc
 80067c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067cc:	429a      	cmp	r2, r3
 80067ce:	bfa8      	it	ge
 80067d0:	461a      	movge	r2, r3
 80067d2:	2a00      	cmp	r2, #0
 80067d4:	4691      	mov	r9, r2
 80067d6:	dc37      	bgt.n	8006848 <_printf_float+0x374>
 80067d8:	f04f 0b00 	mov.w	fp, #0
 80067dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067e0:	f104 021a 	add.w	r2, r4, #26
 80067e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067e6:	9305      	str	r3, [sp, #20]
 80067e8:	eba3 0309 	sub.w	r3, r3, r9
 80067ec:	455b      	cmp	r3, fp
 80067ee:	dc33      	bgt.n	8006858 <_printf_float+0x384>
 80067f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067f4:	429a      	cmp	r2, r3
 80067f6:	db3b      	blt.n	8006870 <_printf_float+0x39c>
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	07da      	lsls	r2, r3, #31
 80067fc:	d438      	bmi.n	8006870 <_printf_float+0x39c>
 80067fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006800:	9b05      	ldr	r3, [sp, #20]
 8006802:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	eba2 0901 	sub.w	r9, r2, r1
 800680a:	4599      	cmp	r9, r3
 800680c:	bfa8      	it	ge
 800680e:	4699      	movge	r9, r3
 8006810:	f1b9 0f00 	cmp.w	r9, #0
 8006814:	dc35      	bgt.n	8006882 <_printf_float+0x3ae>
 8006816:	f04f 0800 	mov.w	r8, #0
 800681a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800681e:	f104 0a1a 	add.w	sl, r4, #26
 8006822:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006826:	1a9b      	subs	r3, r3, r2
 8006828:	eba3 0309 	sub.w	r3, r3, r9
 800682c:	4543      	cmp	r3, r8
 800682e:	f77f af79 	ble.w	8006724 <_printf_float+0x250>
 8006832:	2301      	movs	r3, #1
 8006834:	4652      	mov	r2, sl
 8006836:	4631      	mov	r1, r6
 8006838:	4628      	mov	r0, r5
 800683a:	47b8      	blx	r7
 800683c:	3001      	adds	r0, #1
 800683e:	f43f aeaa 	beq.w	8006596 <_printf_float+0xc2>
 8006842:	f108 0801 	add.w	r8, r8, #1
 8006846:	e7ec      	b.n	8006822 <_printf_float+0x34e>
 8006848:	4613      	mov	r3, r2
 800684a:	4631      	mov	r1, r6
 800684c:	4642      	mov	r2, r8
 800684e:	4628      	mov	r0, r5
 8006850:	47b8      	blx	r7
 8006852:	3001      	adds	r0, #1
 8006854:	d1c0      	bne.n	80067d8 <_printf_float+0x304>
 8006856:	e69e      	b.n	8006596 <_printf_float+0xc2>
 8006858:	2301      	movs	r3, #1
 800685a:	4631      	mov	r1, r6
 800685c:	4628      	mov	r0, r5
 800685e:	9205      	str	r2, [sp, #20]
 8006860:	47b8      	blx	r7
 8006862:	3001      	adds	r0, #1
 8006864:	f43f ae97 	beq.w	8006596 <_printf_float+0xc2>
 8006868:	9a05      	ldr	r2, [sp, #20]
 800686a:	f10b 0b01 	add.w	fp, fp, #1
 800686e:	e7b9      	b.n	80067e4 <_printf_float+0x310>
 8006870:	ee18 3a10 	vmov	r3, s16
 8006874:	4652      	mov	r2, sl
 8006876:	4631      	mov	r1, r6
 8006878:	4628      	mov	r0, r5
 800687a:	47b8      	blx	r7
 800687c:	3001      	adds	r0, #1
 800687e:	d1be      	bne.n	80067fe <_printf_float+0x32a>
 8006880:	e689      	b.n	8006596 <_printf_float+0xc2>
 8006882:	9a05      	ldr	r2, [sp, #20]
 8006884:	464b      	mov	r3, r9
 8006886:	4442      	add	r2, r8
 8006888:	4631      	mov	r1, r6
 800688a:	4628      	mov	r0, r5
 800688c:	47b8      	blx	r7
 800688e:	3001      	adds	r0, #1
 8006890:	d1c1      	bne.n	8006816 <_printf_float+0x342>
 8006892:	e680      	b.n	8006596 <_printf_float+0xc2>
 8006894:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006896:	2a01      	cmp	r2, #1
 8006898:	dc01      	bgt.n	800689e <_printf_float+0x3ca>
 800689a:	07db      	lsls	r3, r3, #31
 800689c:	d538      	bpl.n	8006910 <_printf_float+0x43c>
 800689e:	2301      	movs	r3, #1
 80068a0:	4642      	mov	r2, r8
 80068a2:	4631      	mov	r1, r6
 80068a4:	4628      	mov	r0, r5
 80068a6:	47b8      	blx	r7
 80068a8:	3001      	adds	r0, #1
 80068aa:	f43f ae74 	beq.w	8006596 <_printf_float+0xc2>
 80068ae:	ee18 3a10 	vmov	r3, s16
 80068b2:	4652      	mov	r2, sl
 80068b4:	4631      	mov	r1, r6
 80068b6:	4628      	mov	r0, r5
 80068b8:	47b8      	blx	r7
 80068ba:	3001      	adds	r0, #1
 80068bc:	f43f ae6b 	beq.w	8006596 <_printf_float+0xc2>
 80068c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068c4:	2200      	movs	r2, #0
 80068c6:	2300      	movs	r3, #0
 80068c8:	f7fa f926 	bl	8000b18 <__aeabi_dcmpeq>
 80068cc:	b9d8      	cbnz	r0, 8006906 <_printf_float+0x432>
 80068ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d0:	f108 0201 	add.w	r2, r8, #1
 80068d4:	3b01      	subs	r3, #1
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	d10e      	bne.n	80068fe <_printf_float+0x42a>
 80068e0:	e659      	b.n	8006596 <_printf_float+0xc2>
 80068e2:	2301      	movs	r3, #1
 80068e4:	4652      	mov	r2, sl
 80068e6:	4631      	mov	r1, r6
 80068e8:	4628      	mov	r0, r5
 80068ea:	47b8      	blx	r7
 80068ec:	3001      	adds	r0, #1
 80068ee:	f43f ae52 	beq.w	8006596 <_printf_float+0xc2>
 80068f2:	f108 0801 	add.w	r8, r8, #1
 80068f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068f8:	3b01      	subs	r3, #1
 80068fa:	4543      	cmp	r3, r8
 80068fc:	dcf1      	bgt.n	80068e2 <_printf_float+0x40e>
 80068fe:	464b      	mov	r3, r9
 8006900:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006904:	e6dc      	b.n	80066c0 <_printf_float+0x1ec>
 8006906:	f04f 0800 	mov.w	r8, #0
 800690a:	f104 0a1a 	add.w	sl, r4, #26
 800690e:	e7f2      	b.n	80068f6 <_printf_float+0x422>
 8006910:	2301      	movs	r3, #1
 8006912:	4642      	mov	r2, r8
 8006914:	e7df      	b.n	80068d6 <_printf_float+0x402>
 8006916:	2301      	movs	r3, #1
 8006918:	464a      	mov	r2, r9
 800691a:	4631      	mov	r1, r6
 800691c:	4628      	mov	r0, r5
 800691e:	47b8      	blx	r7
 8006920:	3001      	adds	r0, #1
 8006922:	f43f ae38 	beq.w	8006596 <_printf_float+0xc2>
 8006926:	f108 0801 	add.w	r8, r8, #1
 800692a:	68e3      	ldr	r3, [r4, #12]
 800692c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800692e:	1a5b      	subs	r3, r3, r1
 8006930:	4543      	cmp	r3, r8
 8006932:	dcf0      	bgt.n	8006916 <_printf_float+0x442>
 8006934:	e6fa      	b.n	800672c <_printf_float+0x258>
 8006936:	f04f 0800 	mov.w	r8, #0
 800693a:	f104 0919 	add.w	r9, r4, #25
 800693e:	e7f4      	b.n	800692a <_printf_float+0x456>

08006940 <_printf_common>:
 8006940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006944:	4616      	mov	r6, r2
 8006946:	4699      	mov	r9, r3
 8006948:	688a      	ldr	r2, [r1, #8]
 800694a:	690b      	ldr	r3, [r1, #16]
 800694c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006950:	4293      	cmp	r3, r2
 8006952:	bfb8      	it	lt
 8006954:	4613      	movlt	r3, r2
 8006956:	6033      	str	r3, [r6, #0]
 8006958:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800695c:	4607      	mov	r7, r0
 800695e:	460c      	mov	r4, r1
 8006960:	b10a      	cbz	r2, 8006966 <_printf_common+0x26>
 8006962:	3301      	adds	r3, #1
 8006964:	6033      	str	r3, [r6, #0]
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	0699      	lsls	r1, r3, #26
 800696a:	bf42      	ittt	mi
 800696c:	6833      	ldrmi	r3, [r6, #0]
 800696e:	3302      	addmi	r3, #2
 8006970:	6033      	strmi	r3, [r6, #0]
 8006972:	6825      	ldr	r5, [r4, #0]
 8006974:	f015 0506 	ands.w	r5, r5, #6
 8006978:	d106      	bne.n	8006988 <_printf_common+0x48>
 800697a:	f104 0a19 	add.w	sl, r4, #25
 800697e:	68e3      	ldr	r3, [r4, #12]
 8006980:	6832      	ldr	r2, [r6, #0]
 8006982:	1a9b      	subs	r3, r3, r2
 8006984:	42ab      	cmp	r3, r5
 8006986:	dc26      	bgt.n	80069d6 <_printf_common+0x96>
 8006988:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800698c:	1e13      	subs	r3, r2, #0
 800698e:	6822      	ldr	r2, [r4, #0]
 8006990:	bf18      	it	ne
 8006992:	2301      	movne	r3, #1
 8006994:	0692      	lsls	r2, r2, #26
 8006996:	d42b      	bmi.n	80069f0 <_printf_common+0xb0>
 8006998:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800699c:	4649      	mov	r1, r9
 800699e:	4638      	mov	r0, r7
 80069a0:	47c0      	blx	r8
 80069a2:	3001      	adds	r0, #1
 80069a4:	d01e      	beq.n	80069e4 <_printf_common+0xa4>
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	68e5      	ldr	r5, [r4, #12]
 80069aa:	6832      	ldr	r2, [r6, #0]
 80069ac:	f003 0306 	and.w	r3, r3, #6
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	bf08      	it	eq
 80069b4:	1aad      	subeq	r5, r5, r2
 80069b6:	68a3      	ldr	r3, [r4, #8]
 80069b8:	6922      	ldr	r2, [r4, #16]
 80069ba:	bf0c      	ite	eq
 80069bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069c0:	2500      	movne	r5, #0
 80069c2:	4293      	cmp	r3, r2
 80069c4:	bfc4      	itt	gt
 80069c6:	1a9b      	subgt	r3, r3, r2
 80069c8:	18ed      	addgt	r5, r5, r3
 80069ca:	2600      	movs	r6, #0
 80069cc:	341a      	adds	r4, #26
 80069ce:	42b5      	cmp	r5, r6
 80069d0:	d11a      	bne.n	8006a08 <_printf_common+0xc8>
 80069d2:	2000      	movs	r0, #0
 80069d4:	e008      	b.n	80069e8 <_printf_common+0xa8>
 80069d6:	2301      	movs	r3, #1
 80069d8:	4652      	mov	r2, sl
 80069da:	4649      	mov	r1, r9
 80069dc:	4638      	mov	r0, r7
 80069de:	47c0      	blx	r8
 80069e0:	3001      	adds	r0, #1
 80069e2:	d103      	bne.n	80069ec <_printf_common+0xac>
 80069e4:	f04f 30ff 	mov.w	r0, #4294967295
 80069e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ec:	3501      	adds	r5, #1
 80069ee:	e7c6      	b.n	800697e <_printf_common+0x3e>
 80069f0:	18e1      	adds	r1, r4, r3
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	2030      	movs	r0, #48	; 0x30
 80069f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069fa:	4422      	add	r2, r4
 80069fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a04:	3302      	adds	r3, #2
 8006a06:	e7c7      	b.n	8006998 <_printf_common+0x58>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	4638      	mov	r0, r7
 8006a10:	47c0      	blx	r8
 8006a12:	3001      	adds	r0, #1
 8006a14:	d0e6      	beq.n	80069e4 <_printf_common+0xa4>
 8006a16:	3601      	adds	r6, #1
 8006a18:	e7d9      	b.n	80069ce <_printf_common+0x8e>
	...

08006a1c <_printf_i>:
 8006a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a20:	460c      	mov	r4, r1
 8006a22:	4691      	mov	r9, r2
 8006a24:	7e27      	ldrb	r7, [r4, #24]
 8006a26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a28:	2f78      	cmp	r7, #120	; 0x78
 8006a2a:	4680      	mov	r8, r0
 8006a2c:	469a      	mov	sl, r3
 8006a2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a32:	d807      	bhi.n	8006a44 <_printf_i+0x28>
 8006a34:	2f62      	cmp	r7, #98	; 0x62
 8006a36:	d80a      	bhi.n	8006a4e <_printf_i+0x32>
 8006a38:	2f00      	cmp	r7, #0
 8006a3a:	f000 80d8 	beq.w	8006bee <_printf_i+0x1d2>
 8006a3e:	2f58      	cmp	r7, #88	; 0x58
 8006a40:	f000 80a3 	beq.w	8006b8a <_printf_i+0x16e>
 8006a44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a4c:	e03a      	b.n	8006ac4 <_printf_i+0xa8>
 8006a4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a52:	2b15      	cmp	r3, #21
 8006a54:	d8f6      	bhi.n	8006a44 <_printf_i+0x28>
 8006a56:	a001      	add	r0, pc, #4	; (adr r0, 8006a5c <_printf_i+0x40>)
 8006a58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006a5c:	08006ab5 	.word	0x08006ab5
 8006a60:	08006ac9 	.word	0x08006ac9
 8006a64:	08006a45 	.word	0x08006a45
 8006a68:	08006a45 	.word	0x08006a45
 8006a6c:	08006a45 	.word	0x08006a45
 8006a70:	08006a45 	.word	0x08006a45
 8006a74:	08006ac9 	.word	0x08006ac9
 8006a78:	08006a45 	.word	0x08006a45
 8006a7c:	08006a45 	.word	0x08006a45
 8006a80:	08006a45 	.word	0x08006a45
 8006a84:	08006a45 	.word	0x08006a45
 8006a88:	08006bd5 	.word	0x08006bd5
 8006a8c:	08006af9 	.word	0x08006af9
 8006a90:	08006bb7 	.word	0x08006bb7
 8006a94:	08006a45 	.word	0x08006a45
 8006a98:	08006a45 	.word	0x08006a45
 8006a9c:	08006bf7 	.word	0x08006bf7
 8006aa0:	08006a45 	.word	0x08006a45
 8006aa4:	08006af9 	.word	0x08006af9
 8006aa8:	08006a45 	.word	0x08006a45
 8006aac:	08006a45 	.word	0x08006a45
 8006ab0:	08006bbf 	.word	0x08006bbf
 8006ab4:	680b      	ldr	r3, [r1, #0]
 8006ab6:	1d1a      	adds	r2, r3, #4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	600a      	str	r2, [r1, #0]
 8006abc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e0a3      	b.n	8006c10 <_printf_i+0x1f4>
 8006ac8:	6825      	ldr	r5, [r4, #0]
 8006aca:	6808      	ldr	r0, [r1, #0]
 8006acc:	062e      	lsls	r6, r5, #24
 8006ace:	f100 0304 	add.w	r3, r0, #4
 8006ad2:	d50a      	bpl.n	8006aea <_printf_i+0xce>
 8006ad4:	6805      	ldr	r5, [r0, #0]
 8006ad6:	600b      	str	r3, [r1, #0]
 8006ad8:	2d00      	cmp	r5, #0
 8006ada:	da03      	bge.n	8006ae4 <_printf_i+0xc8>
 8006adc:	232d      	movs	r3, #45	; 0x2d
 8006ade:	426d      	negs	r5, r5
 8006ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ae4:	485e      	ldr	r0, [pc, #376]	; (8006c60 <_printf_i+0x244>)
 8006ae6:	230a      	movs	r3, #10
 8006ae8:	e019      	b.n	8006b1e <_printf_i+0x102>
 8006aea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006aee:	6805      	ldr	r5, [r0, #0]
 8006af0:	600b      	str	r3, [r1, #0]
 8006af2:	bf18      	it	ne
 8006af4:	b22d      	sxthne	r5, r5
 8006af6:	e7ef      	b.n	8006ad8 <_printf_i+0xbc>
 8006af8:	680b      	ldr	r3, [r1, #0]
 8006afa:	6825      	ldr	r5, [r4, #0]
 8006afc:	1d18      	adds	r0, r3, #4
 8006afe:	6008      	str	r0, [r1, #0]
 8006b00:	0628      	lsls	r0, r5, #24
 8006b02:	d501      	bpl.n	8006b08 <_printf_i+0xec>
 8006b04:	681d      	ldr	r5, [r3, #0]
 8006b06:	e002      	b.n	8006b0e <_printf_i+0xf2>
 8006b08:	0669      	lsls	r1, r5, #25
 8006b0a:	d5fb      	bpl.n	8006b04 <_printf_i+0xe8>
 8006b0c:	881d      	ldrh	r5, [r3, #0]
 8006b0e:	4854      	ldr	r0, [pc, #336]	; (8006c60 <_printf_i+0x244>)
 8006b10:	2f6f      	cmp	r7, #111	; 0x6f
 8006b12:	bf0c      	ite	eq
 8006b14:	2308      	moveq	r3, #8
 8006b16:	230a      	movne	r3, #10
 8006b18:	2100      	movs	r1, #0
 8006b1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b1e:	6866      	ldr	r6, [r4, #4]
 8006b20:	60a6      	str	r6, [r4, #8]
 8006b22:	2e00      	cmp	r6, #0
 8006b24:	bfa2      	ittt	ge
 8006b26:	6821      	ldrge	r1, [r4, #0]
 8006b28:	f021 0104 	bicge.w	r1, r1, #4
 8006b2c:	6021      	strge	r1, [r4, #0]
 8006b2e:	b90d      	cbnz	r5, 8006b34 <_printf_i+0x118>
 8006b30:	2e00      	cmp	r6, #0
 8006b32:	d04d      	beq.n	8006bd0 <_printf_i+0x1b4>
 8006b34:	4616      	mov	r6, r2
 8006b36:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b3a:	fb03 5711 	mls	r7, r3, r1, r5
 8006b3e:	5dc7      	ldrb	r7, [r0, r7]
 8006b40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b44:	462f      	mov	r7, r5
 8006b46:	42bb      	cmp	r3, r7
 8006b48:	460d      	mov	r5, r1
 8006b4a:	d9f4      	bls.n	8006b36 <_printf_i+0x11a>
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d10b      	bne.n	8006b68 <_printf_i+0x14c>
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	07df      	lsls	r7, r3, #31
 8006b54:	d508      	bpl.n	8006b68 <_printf_i+0x14c>
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	6861      	ldr	r1, [r4, #4]
 8006b5a:	4299      	cmp	r1, r3
 8006b5c:	bfde      	ittt	le
 8006b5e:	2330      	movle	r3, #48	; 0x30
 8006b60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b68:	1b92      	subs	r2, r2, r6
 8006b6a:	6122      	str	r2, [r4, #16]
 8006b6c:	f8cd a000 	str.w	sl, [sp]
 8006b70:	464b      	mov	r3, r9
 8006b72:	aa03      	add	r2, sp, #12
 8006b74:	4621      	mov	r1, r4
 8006b76:	4640      	mov	r0, r8
 8006b78:	f7ff fee2 	bl	8006940 <_printf_common>
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d14c      	bne.n	8006c1a <_printf_i+0x1fe>
 8006b80:	f04f 30ff 	mov.w	r0, #4294967295
 8006b84:	b004      	add	sp, #16
 8006b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8a:	4835      	ldr	r0, [pc, #212]	; (8006c60 <_printf_i+0x244>)
 8006b8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	680e      	ldr	r6, [r1, #0]
 8006b94:	061f      	lsls	r7, r3, #24
 8006b96:	f856 5b04 	ldr.w	r5, [r6], #4
 8006b9a:	600e      	str	r6, [r1, #0]
 8006b9c:	d514      	bpl.n	8006bc8 <_printf_i+0x1ac>
 8006b9e:	07d9      	lsls	r1, r3, #31
 8006ba0:	bf44      	itt	mi
 8006ba2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ba6:	6023      	strmi	r3, [r4, #0]
 8006ba8:	b91d      	cbnz	r5, 8006bb2 <_printf_i+0x196>
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	f023 0320 	bic.w	r3, r3, #32
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	2310      	movs	r3, #16
 8006bb4:	e7b0      	b.n	8006b18 <_printf_i+0xfc>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	f043 0320 	orr.w	r3, r3, #32
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	2378      	movs	r3, #120	; 0x78
 8006bc0:	4828      	ldr	r0, [pc, #160]	; (8006c64 <_printf_i+0x248>)
 8006bc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bc6:	e7e3      	b.n	8006b90 <_printf_i+0x174>
 8006bc8:	065e      	lsls	r6, r3, #25
 8006bca:	bf48      	it	mi
 8006bcc:	b2ad      	uxthmi	r5, r5
 8006bce:	e7e6      	b.n	8006b9e <_printf_i+0x182>
 8006bd0:	4616      	mov	r6, r2
 8006bd2:	e7bb      	b.n	8006b4c <_printf_i+0x130>
 8006bd4:	680b      	ldr	r3, [r1, #0]
 8006bd6:	6826      	ldr	r6, [r4, #0]
 8006bd8:	6960      	ldr	r0, [r4, #20]
 8006bda:	1d1d      	adds	r5, r3, #4
 8006bdc:	600d      	str	r5, [r1, #0]
 8006bde:	0635      	lsls	r5, r6, #24
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	d501      	bpl.n	8006be8 <_printf_i+0x1cc>
 8006be4:	6018      	str	r0, [r3, #0]
 8006be6:	e002      	b.n	8006bee <_printf_i+0x1d2>
 8006be8:	0671      	lsls	r1, r6, #25
 8006bea:	d5fb      	bpl.n	8006be4 <_printf_i+0x1c8>
 8006bec:	8018      	strh	r0, [r3, #0]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	6123      	str	r3, [r4, #16]
 8006bf2:	4616      	mov	r6, r2
 8006bf4:	e7ba      	b.n	8006b6c <_printf_i+0x150>
 8006bf6:	680b      	ldr	r3, [r1, #0]
 8006bf8:	1d1a      	adds	r2, r3, #4
 8006bfa:	600a      	str	r2, [r1, #0]
 8006bfc:	681e      	ldr	r6, [r3, #0]
 8006bfe:	6862      	ldr	r2, [r4, #4]
 8006c00:	2100      	movs	r1, #0
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7f9 fb14 	bl	8000230 <memchr>
 8006c08:	b108      	cbz	r0, 8006c0e <_printf_i+0x1f2>
 8006c0a:	1b80      	subs	r0, r0, r6
 8006c0c:	6060      	str	r0, [r4, #4]
 8006c0e:	6863      	ldr	r3, [r4, #4]
 8006c10:	6123      	str	r3, [r4, #16]
 8006c12:	2300      	movs	r3, #0
 8006c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c18:	e7a8      	b.n	8006b6c <_printf_i+0x150>
 8006c1a:	6923      	ldr	r3, [r4, #16]
 8006c1c:	4632      	mov	r2, r6
 8006c1e:	4649      	mov	r1, r9
 8006c20:	4640      	mov	r0, r8
 8006c22:	47d0      	blx	sl
 8006c24:	3001      	adds	r0, #1
 8006c26:	d0ab      	beq.n	8006b80 <_printf_i+0x164>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	079b      	lsls	r3, r3, #30
 8006c2c:	d413      	bmi.n	8006c56 <_printf_i+0x23a>
 8006c2e:	68e0      	ldr	r0, [r4, #12]
 8006c30:	9b03      	ldr	r3, [sp, #12]
 8006c32:	4298      	cmp	r0, r3
 8006c34:	bfb8      	it	lt
 8006c36:	4618      	movlt	r0, r3
 8006c38:	e7a4      	b.n	8006b84 <_printf_i+0x168>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	4649      	mov	r1, r9
 8006c40:	4640      	mov	r0, r8
 8006c42:	47d0      	blx	sl
 8006c44:	3001      	adds	r0, #1
 8006c46:	d09b      	beq.n	8006b80 <_printf_i+0x164>
 8006c48:	3501      	adds	r5, #1
 8006c4a:	68e3      	ldr	r3, [r4, #12]
 8006c4c:	9903      	ldr	r1, [sp, #12]
 8006c4e:	1a5b      	subs	r3, r3, r1
 8006c50:	42ab      	cmp	r3, r5
 8006c52:	dcf2      	bgt.n	8006c3a <_printf_i+0x21e>
 8006c54:	e7eb      	b.n	8006c2e <_printf_i+0x212>
 8006c56:	2500      	movs	r5, #0
 8006c58:	f104 0619 	add.w	r6, r4, #25
 8006c5c:	e7f5      	b.n	8006c4a <_printf_i+0x22e>
 8006c5e:	bf00      	nop
 8006c60:	08008fce 	.word	0x08008fce
 8006c64:	08008fdf 	.word	0x08008fdf

08006c68 <iprintf>:
 8006c68:	b40f      	push	{r0, r1, r2, r3}
 8006c6a:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <iprintf+0x2c>)
 8006c6c:	b513      	push	{r0, r1, r4, lr}
 8006c6e:	681c      	ldr	r4, [r3, #0]
 8006c70:	b124      	cbz	r4, 8006c7c <iprintf+0x14>
 8006c72:	69a3      	ldr	r3, [r4, #24]
 8006c74:	b913      	cbnz	r3, 8006c7c <iprintf+0x14>
 8006c76:	4620      	mov	r0, r4
 8006c78:	f001 f8fc 	bl	8007e74 <__sinit>
 8006c7c:	ab05      	add	r3, sp, #20
 8006c7e:	9a04      	ldr	r2, [sp, #16]
 8006c80:	68a1      	ldr	r1, [r4, #8]
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	4620      	mov	r0, r4
 8006c86:	f001 fdc1 	bl	800880c <_vfiprintf_r>
 8006c8a:	b002      	add	sp, #8
 8006c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c90:	b004      	add	sp, #16
 8006c92:	4770      	bx	lr
 8006c94:	20000274 	.word	0x20000274

08006c98 <putchar>:
 8006c98:	4b09      	ldr	r3, [pc, #36]	; (8006cc0 <putchar+0x28>)
 8006c9a:	b513      	push	{r0, r1, r4, lr}
 8006c9c:	681c      	ldr	r4, [r3, #0]
 8006c9e:	4601      	mov	r1, r0
 8006ca0:	b134      	cbz	r4, 8006cb0 <putchar+0x18>
 8006ca2:	69a3      	ldr	r3, [r4, #24]
 8006ca4:	b923      	cbnz	r3, 8006cb0 <putchar+0x18>
 8006ca6:	9001      	str	r0, [sp, #4]
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f001 f8e3 	bl	8007e74 <__sinit>
 8006cae:	9901      	ldr	r1, [sp, #4]
 8006cb0:	68a2      	ldr	r2, [r4, #8]
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	b002      	add	sp, #8
 8006cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cba:	f001 bed7 	b.w	8008a6c <_putc_r>
 8006cbe:	bf00      	nop
 8006cc0:	20000274 	.word	0x20000274

08006cc4 <_puts_r>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	460e      	mov	r6, r1
 8006cc8:	4605      	mov	r5, r0
 8006cca:	b118      	cbz	r0, 8006cd4 <_puts_r+0x10>
 8006ccc:	6983      	ldr	r3, [r0, #24]
 8006cce:	b90b      	cbnz	r3, 8006cd4 <_puts_r+0x10>
 8006cd0:	f001 f8d0 	bl	8007e74 <__sinit>
 8006cd4:	69ab      	ldr	r3, [r5, #24]
 8006cd6:	68ac      	ldr	r4, [r5, #8]
 8006cd8:	b913      	cbnz	r3, 8006ce0 <_puts_r+0x1c>
 8006cda:	4628      	mov	r0, r5
 8006cdc:	f001 f8ca 	bl	8007e74 <__sinit>
 8006ce0:	4b2c      	ldr	r3, [pc, #176]	; (8006d94 <_puts_r+0xd0>)
 8006ce2:	429c      	cmp	r4, r3
 8006ce4:	d120      	bne.n	8006d28 <_puts_r+0x64>
 8006ce6:	686c      	ldr	r4, [r5, #4]
 8006ce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cea:	07db      	lsls	r3, r3, #31
 8006cec:	d405      	bmi.n	8006cfa <_puts_r+0x36>
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	0598      	lsls	r0, r3, #22
 8006cf2:	d402      	bmi.n	8006cfa <_puts_r+0x36>
 8006cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cf6:	f001 f960 	bl	8007fba <__retarget_lock_acquire_recursive>
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	0719      	lsls	r1, r3, #28
 8006cfe:	d51d      	bpl.n	8006d3c <_puts_r+0x78>
 8006d00:	6923      	ldr	r3, [r4, #16]
 8006d02:	b1db      	cbz	r3, 8006d3c <_puts_r+0x78>
 8006d04:	3e01      	subs	r6, #1
 8006d06:	68a3      	ldr	r3, [r4, #8]
 8006d08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	60a3      	str	r3, [r4, #8]
 8006d10:	bb39      	cbnz	r1, 8006d62 <_puts_r+0x9e>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	da38      	bge.n	8006d88 <_puts_r+0xc4>
 8006d16:	4622      	mov	r2, r4
 8006d18:	210a      	movs	r1, #10
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	f000 f858 	bl	8006dd0 <__swbuf_r>
 8006d20:	3001      	adds	r0, #1
 8006d22:	d011      	beq.n	8006d48 <_puts_r+0x84>
 8006d24:	250a      	movs	r5, #10
 8006d26:	e011      	b.n	8006d4c <_puts_r+0x88>
 8006d28:	4b1b      	ldr	r3, [pc, #108]	; (8006d98 <_puts_r+0xd4>)
 8006d2a:	429c      	cmp	r4, r3
 8006d2c:	d101      	bne.n	8006d32 <_puts_r+0x6e>
 8006d2e:	68ac      	ldr	r4, [r5, #8]
 8006d30:	e7da      	b.n	8006ce8 <_puts_r+0x24>
 8006d32:	4b1a      	ldr	r3, [pc, #104]	; (8006d9c <_puts_r+0xd8>)
 8006d34:	429c      	cmp	r4, r3
 8006d36:	bf08      	it	eq
 8006d38:	68ec      	ldreq	r4, [r5, #12]
 8006d3a:	e7d5      	b.n	8006ce8 <_puts_r+0x24>
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 f898 	bl	8006e74 <__swsetup_r>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d0dd      	beq.n	8006d04 <_puts_r+0x40>
 8006d48:	f04f 35ff 	mov.w	r5, #4294967295
 8006d4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d4e:	07da      	lsls	r2, r3, #31
 8006d50:	d405      	bmi.n	8006d5e <_puts_r+0x9a>
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	059b      	lsls	r3, r3, #22
 8006d56:	d402      	bmi.n	8006d5e <_puts_r+0x9a>
 8006d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d5a:	f001 f92f 	bl	8007fbc <__retarget_lock_release_recursive>
 8006d5e:	4628      	mov	r0, r5
 8006d60:	bd70      	pop	{r4, r5, r6, pc}
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	da04      	bge.n	8006d70 <_puts_r+0xac>
 8006d66:	69a2      	ldr	r2, [r4, #24]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	dc06      	bgt.n	8006d7a <_puts_r+0xb6>
 8006d6c:	290a      	cmp	r1, #10
 8006d6e:	d004      	beq.n	8006d7a <_puts_r+0xb6>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	6022      	str	r2, [r4, #0]
 8006d76:	7019      	strb	r1, [r3, #0]
 8006d78:	e7c5      	b.n	8006d06 <_puts_r+0x42>
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	f000 f827 	bl	8006dd0 <__swbuf_r>
 8006d82:	3001      	adds	r0, #1
 8006d84:	d1bf      	bne.n	8006d06 <_puts_r+0x42>
 8006d86:	e7df      	b.n	8006d48 <_puts_r+0x84>
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	250a      	movs	r5, #10
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	6022      	str	r2, [r4, #0]
 8006d90:	701d      	strb	r5, [r3, #0]
 8006d92:	e7db      	b.n	8006d4c <_puts_r+0x88>
 8006d94:	080090a4 	.word	0x080090a4
 8006d98:	080090c4 	.word	0x080090c4
 8006d9c:	08009084 	.word	0x08009084

08006da0 <puts>:
 8006da0:	4b02      	ldr	r3, [pc, #8]	; (8006dac <puts+0xc>)
 8006da2:	4601      	mov	r1, r0
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	f7ff bf8d 	b.w	8006cc4 <_puts_r>
 8006daa:	bf00      	nop
 8006dac:	20000274 	.word	0x20000274

08006db0 <_sbrk_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	4d06      	ldr	r5, [pc, #24]	; (8006dcc <_sbrk_r+0x1c>)
 8006db4:	2300      	movs	r3, #0
 8006db6:	4604      	mov	r4, r0
 8006db8:	4608      	mov	r0, r1
 8006dba:	602b      	str	r3, [r5, #0]
 8006dbc:	f7fb f91c 	bl	8001ff8 <_sbrk>
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	d102      	bne.n	8006dca <_sbrk_r+0x1a>
 8006dc4:	682b      	ldr	r3, [r5, #0]
 8006dc6:	b103      	cbz	r3, 8006dca <_sbrk_r+0x1a>
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	bd38      	pop	{r3, r4, r5, pc}
 8006dcc:	20000b78 	.word	0x20000b78

08006dd0 <__swbuf_r>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	460e      	mov	r6, r1
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	b118      	cbz	r0, 8006de2 <__swbuf_r+0x12>
 8006dda:	6983      	ldr	r3, [r0, #24]
 8006ddc:	b90b      	cbnz	r3, 8006de2 <__swbuf_r+0x12>
 8006dde:	f001 f849 	bl	8007e74 <__sinit>
 8006de2:	4b21      	ldr	r3, [pc, #132]	; (8006e68 <__swbuf_r+0x98>)
 8006de4:	429c      	cmp	r4, r3
 8006de6:	d12b      	bne.n	8006e40 <__swbuf_r+0x70>
 8006de8:	686c      	ldr	r4, [r5, #4]
 8006dea:	69a3      	ldr	r3, [r4, #24]
 8006dec:	60a3      	str	r3, [r4, #8]
 8006dee:	89a3      	ldrh	r3, [r4, #12]
 8006df0:	071a      	lsls	r2, r3, #28
 8006df2:	d52f      	bpl.n	8006e54 <__swbuf_r+0x84>
 8006df4:	6923      	ldr	r3, [r4, #16]
 8006df6:	b36b      	cbz	r3, 8006e54 <__swbuf_r+0x84>
 8006df8:	6923      	ldr	r3, [r4, #16]
 8006dfa:	6820      	ldr	r0, [r4, #0]
 8006dfc:	1ac0      	subs	r0, r0, r3
 8006dfe:	6963      	ldr	r3, [r4, #20]
 8006e00:	b2f6      	uxtb	r6, r6
 8006e02:	4283      	cmp	r3, r0
 8006e04:	4637      	mov	r7, r6
 8006e06:	dc04      	bgt.n	8006e12 <__swbuf_r+0x42>
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f000 ff9e 	bl	8007d4c <_fflush_r>
 8006e10:	bb30      	cbnz	r0, 8006e60 <__swbuf_r+0x90>
 8006e12:	68a3      	ldr	r3, [r4, #8]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	60a3      	str	r3, [r4, #8]
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	6022      	str	r2, [r4, #0]
 8006e1e:	701e      	strb	r6, [r3, #0]
 8006e20:	6963      	ldr	r3, [r4, #20]
 8006e22:	3001      	adds	r0, #1
 8006e24:	4283      	cmp	r3, r0
 8006e26:	d004      	beq.n	8006e32 <__swbuf_r+0x62>
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	07db      	lsls	r3, r3, #31
 8006e2c:	d506      	bpl.n	8006e3c <__swbuf_r+0x6c>
 8006e2e:	2e0a      	cmp	r6, #10
 8006e30:	d104      	bne.n	8006e3c <__swbuf_r+0x6c>
 8006e32:	4621      	mov	r1, r4
 8006e34:	4628      	mov	r0, r5
 8006e36:	f000 ff89 	bl	8007d4c <_fflush_r>
 8006e3a:	b988      	cbnz	r0, 8006e60 <__swbuf_r+0x90>
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e40:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <__swbuf_r+0x9c>)
 8006e42:	429c      	cmp	r4, r3
 8006e44:	d101      	bne.n	8006e4a <__swbuf_r+0x7a>
 8006e46:	68ac      	ldr	r4, [r5, #8]
 8006e48:	e7cf      	b.n	8006dea <__swbuf_r+0x1a>
 8006e4a:	4b09      	ldr	r3, [pc, #36]	; (8006e70 <__swbuf_r+0xa0>)
 8006e4c:	429c      	cmp	r4, r3
 8006e4e:	bf08      	it	eq
 8006e50:	68ec      	ldreq	r4, [r5, #12]
 8006e52:	e7ca      	b.n	8006dea <__swbuf_r+0x1a>
 8006e54:	4621      	mov	r1, r4
 8006e56:	4628      	mov	r0, r5
 8006e58:	f000 f80c 	bl	8006e74 <__swsetup_r>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d0cb      	beq.n	8006df8 <__swbuf_r+0x28>
 8006e60:	f04f 37ff 	mov.w	r7, #4294967295
 8006e64:	e7ea      	b.n	8006e3c <__swbuf_r+0x6c>
 8006e66:	bf00      	nop
 8006e68:	080090a4 	.word	0x080090a4
 8006e6c:	080090c4 	.word	0x080090c4
 8006e70:	08009084 	.word	0x08009084

08006e74 <__swsetup_r>:
 8006e74:	4b32      	ldr	r3, [pc, #200]	; (8006f40 <__swsetup_r+0xcc>)
 8006e76:	b570      	push	{r4, r5, r6, lr}
 8006e78:	681d      	ldr	r5, [r3, #0]
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	b125      	cbz	r5, 8006e8a <__swsetup_r+0x16>
 8006e80:	69ab      	ldr	r3, [r5, #24]
 8006e82:	b913      	cbnz	r3, 8006e8a <__swsetup_r+0x16>
 8006e84:	4628      	mov	r0, r5
 8006e86:	f000 fff5 	bl	8007e74 <__sinit>
 8006e8a:	4b2e      	ldr	r3, [pc, #184]	; (8006f44 <__swsetup_r+0xd0>)
 8006e8c:	429c      	cmp	r4, r3
 8006e8e:	d10f      	bne.n	8006eb0 <__swsetup_r+0x3c>
 8006e90:	686c      	ldr	r4, [r5, #4]
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e98:	0719      	lsls	r1, r3, #28
 8006e9a:	d42c      	bmi.n	8006ef6 <__swsetup_r+0x82>
 8006e9c:	06dd      	lsls	r5, r3, #27
 8006e9e:	d411      	bmi.n	8006ec4 <__swsetup_r+0x50>
 8006ea0:	2309      	movs	r3, #9
 8006ea2:	6033      	str	r3, [r6, #0]
 8006ea4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ea8:	81a3      	strh	r3, [r4, #12]
 8006eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8006eae:	e03e      	b.n	8006f2e <__swsetup_r+0xba>
 8006eb0:	4b25      	ldr	r3, [pc, #148]	; (8006f48 <__swsetup_r+0xd4>)
 8006eb2:	429c      	cmp	r4, r3
 8006eb4:	d101      	bne.n	8006eba <__swsetup_r+0x46>
 8006eb6:	68ac      	ldr	r4, [r5, #8]
 8006eb8:	e7eb      	b.n	8006e92 <__swsetup_r+0x1e>
 8006eba:	4b24      	ldr	r3, [pc, #144]	; (8006f4c <__swsetup_r+0xd8>)
 8006ebc:	429c      	cmp	r4, r3
 8006ebe:	bf08      	it	eq
 8006ec0:	68ec      	ldreq	r4, [r5, #12]
 8006ec2:	e7e6      	b.n	8006e92 <__swsetup_r+0x1e>
 8006ec4:	0758      	lsls	r0, r3, #29
 8006ec6:	d512      	bpl.n	8006eee <__swsetup_r+0x7a>
 8006ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eca:	b141      	cbz	r1, 8006ede <__swsetup_r+0x6a>
 8006ecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ed0:	4299      	cmp	r1, r3
 8006ed2:	d002      	beq.n	8006eda <__swsetup_r+0x66>
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f7ff f9b3 	bl	8006240 <_free_r>
 8006eda:	2300      	movs	r3, #0
 8006edc:	6363      	str	r3, [r4, #52]	; 0x34
 8006ede:	89a3      	ldrh	r3, [r4, #12]
 8006ee0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ee4:	81a3      	strh	r3, [r4, #12]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	6063      	str	r3, [r4, #4]
 8006eea:	6923      	ldr	r3, [r4, #16]
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	f043 0308 	orr.w	r3, r3, #8
 8006ef4:	81a3      	strh	r3, [r4, #12]
 8006ef6:	6923      	ldr	r3, [r4, #16]
 8006ef8:	b94b      	cbnz	r3, 8006f0e <__swsetup_r+0x9a>
 8006efa:	89a3      	ldrh	r3, [r4, #12]
 8006efc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f04:	d003      	beq.n	8006f0e <__swsetup_r+0x9a>
 8006f06:	4621      	mov	r1, r4
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f001 f87d 	bl	8008008 <__smakebuf_r>
 8006f0e:	89a0      	ldrh	r0, [r4, #12]
 8006f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f14:	f010 0301 	ands.w	r3, r0, #1
 8006f18:	d00a      	beq.n	8006f30 <__swsetup_r+0xbc>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60a3      	str	r3, [r4, #8]
 8006f1e:	6963      	ldr	r3, [r4, #20]
 8006f20:	425b      	negs	r3, r3
 8006f22:	61a3      	str	r3, [r4, #24]
 8006f24:	6923      	ldr	r3, [r4, #16]
 8006f26:	b943      	cbnz	r3, 8006f3a <__swsetup_r+0xc6>
 8006f28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f2c:	d1ba      	bne.n	8006ea4 <__swsetup_r+0x30>
 8006f2e:	bd70      	pop	{r4, r5, r6, pc}
 8006f30:	0781      	lsls	r1, r0, #30
 8006f32:	bf58      	it	pl
 8006f34:	6963      	ldrpl	r3, [r4, #20]
 8006f36:	60a3      	str	r3, [r4, #8]
 8006f38:	e7f4      	b.n	8006f24 <__swsetup_r+0xb0>
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	e7f7      	b.n	8006f2e <__swsetup_r+0xba>
 8006f3e:	bf00      	nop
 8006f40:	20000274 	.word	0x20000274
 8006f44:	080090a4 	.word	0x080090a4
 8006f48:	080090c4 	.word	0x080090c4
 8006f4c:	08009084 	.word	0x08009084

08006f50 <quorem>:
 8006f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f54:	6903      	ldr	r3, [r0, #16]
 8006f56:	690c      	ldr	r4, [r1, #16]
 8006f58:	42a3      	cmp	r3, r4
 8006f5a:	4607      	mov	r7, r0
 8006f5c:	f2c0 8081 	blt.w	8007062 <quorem+0x112>
 8006f60:	3c01      	subs	r4, #1
 8006f62:	f101 0814 	add.w	r8, r1, #20
 8006f66:	f100 0514 	add.w	r5, r0, #20
 8006f6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f6e:	9301      	str	r3, [sp, #4]
 8006f70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f84:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f88:	d331      	bcc.n	8006fee <quorem+0x9e>
 8006f8a:	f04f 0e00 	mov.w	lr, #0
 8006f8e:	4640      	mov	r0, r8
 8006f90:	46ac      	mov	ip, r5
 8006f92:	46f2      	mov	sl, lr
 8006f94:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f98:	b293      	uxth	r3, r2
 8006f9a:	fb06 e303 	mla	r3, r6, r3, lr
 8006f9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	ebaa 0303 	sub.w	r3, sl, r3
 8006fa8:	0c12      	lsrs	r2, r2, #16
 8006faa:	f8dc a000 	ldr.w	sl, [ip]
 8006fae:	fb06 e202 	mla	r2, r6, r2, lr
 8006fb2:	fa13 f38a 	uxtah	r3, r3, sl
 8006fb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fba:	fa1f fa82 	uxth.w	sl, r2
 8006fbe:	f8dc 2000 	ldr.w	r2, [ip]
 8006fc2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006fc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fd0:	4581      	cmp	r9, r0
 8006fd2:	f84c 3b04 	str.w	r3, [ip], #4
 8006fd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006fda:	d2db      	bcs.n	8006f94 <quorem+0x44>
 8006fdc:	f855 300b 	ldr.w	r3, [r5, fp]
 8006fe0:	b92b      	cbnz	r3, 8006fee <quorem+0x9e>
 8006fe2:	9b01      	ldr	r3, [sp, #4]
 8006fe4:	3b04      	subs	r3, #4
 8006fe6:	429d      	cmp	r5, r3
 8006fe8:	461a      	mov	r2, r3
 8006fea:	d32e      	bcc.n	800704a <quorem+0xfa>
 8006fec:	613c      	str	r4, [r7, #16]
 8006fee:	4638      	mov	r0, r7
 8006ff0:	f001 fad4 	bl	800859c <__mcmp>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	db24      	blt.n	8007042 <quorem+0xf2>
 8006ff8:	3601      	adds	r6, #1
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f04f 0c00 	mov.w	ip, #0
 8007000:	f858 2b04 	ldr.w	r2, [r8], #4
 8007004:	f8d0 e000 	ldr.w	lr, [r0]
 8007008:	b293      	uxth	r3, r2
 800700a:	ebac 0303 	sub.w	r3, ip, r3
 800700e:	0c12      	lsrs	r2, r2, #16
 8007010:	fa13 f38e 	uxtah	r3, r3, lr
 8007014:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007018:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800701c:	b29b      	uxth	r3, r3
 800701e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007022:	45c1      	cmp	r9, r8
 8007024:	f840 3b04 	str.w	r3, [r0], #4
 8007028:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800702c:	d2e8      	bcs.n	8007000 <quorem+0xb0>
 800702e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007032:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007036:	b922      	cbnz	r2, 8007042 <quorem+0xf2>
 8007038:	3b04      	subs	r3, #4
 800703a:	429d      	cmp	r5, r3
 800703c:	461a      	mov	r2, r3
 800703e:	d30a      	bcc.n	8007056 <quorem+0x106>
 8007040:	613c      	str	r4, [r7, #16]
 8007042:	4630      	mov	r0, r6
 8007044:	b003      	add	sp, #12
 8007046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704a:	6812      	ldr	r2, [r2, #0]
 800704c:	3b04      	subs	r3, #4
 800704e:	2a00      	cmp	r2, #0
 8007050:	d1cc      	bne.n	8006fec <quorem+0x9c>
 8007052:	3c01      	subs	r4, #1
 8007054:	e7c7      	b.n	8006fe6 <quorem+0x96>
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	3b04      	subs	r3, #4
 800705a:	2a00      	cmp	r2, #0
 800705c:	d1f0      	bne.n	8007040 <quorem+0xf0>
 800705e:	3c01      	subs	r4, #1
 8007060:	e7eb      	b.n	800703a <quorem+0xea>
 8007062:	2000      	movs	r0, #0
 8007064:	e7ee      	b.n	8007044 <quorem+0xf4>
	...

08007068 <_dtoa_r>:
 8007068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706c:	ed2d 8b02 	vpush	{d8}
 8007070:	ec57 6b10 	vmov	r6, r7, d0
 8007074:	b095      	sub	sp, #84	; 0x54
 8007076:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007078:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800707c:	9105      	str	r1, [sp, #20]
 800707e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007082:	4604      	mov	r4, r0
 8007084:	9209      	str	r2, [sp, #36]	; 0x24
 8007086:	930f      	str	r3, [sp, #60]	; 0x3c
 8007088:	b975      	cbnz	r5, 80070a8 <_dtoa_r+0x40>
 800708a:	2010      	movs	r0, #16
 800708c:	f7ff f8ba 	bl	8006204 <malloc>
 8007090:	4602      	mov	r2, r0
 8007092:	6260      	str	r0, [r4, #36]	; 0x24
 8007094:	b920      	cbnz	r0, 80070a0 <_dtoa_r+0x38>
 8007096:	4bb2      	ldr	r3, [pc, #712]	; (8007360 <_dtoa_r+0x2f8>)
 8007098:	21ea      	movs	r1, #234	; 0xea
 800709a:	48b2      	ldr	r0, [pc, #712]	; (8007364 <_dtoa_r+0x2fc>)
 800709c:	f001 fd84 	bl	8008ba8 <__assert_func>
 80070a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80070a4:	6005      	str	r5, [r0, #0]
 80070a6:	60c5      	str	r5, [r0, #12]
 80070a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070aa:	6819      	ldr	r1, [r3, #0]
 80070ac:	b151      	cbz	r1, 80070c4 <_dtoa_r+0x5c>
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	604a      	str	r2, [r1, #4]
 80070b2:	2301      	movs	r3, #1
 80070b4:	4093      	lsls	r3, r2
 80070b6:	608b      	str	r3, [r1, #8]
 80070b8:	4620      	mov	r0, r4
 80070ba:	f001 f831 	bl	8008120 <_Bfree>
 80070be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	1e3b      	subs	r3, r7, #0
 80070c6:	bfb9      	ittee	lt
 80070c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80070cc:	9303      	strlt	r3, [sp, #12]
 80070ce:	2300      	movge	r3, #0
 80070d0:	f8c8 3000 	strge.w	r3, [r8]
 80070d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80070d8:	4ba3      	ldr	r3, [pc, #652]	; (8007368 <_dtoa_r+0x300>)
 80070da:	bfbc      	itt	lt
 80070dc:	2201      	movlt	r2, #1
 80070de:	f8c8 2000 	strlt.w	r2, [r8]
 80070e2:	ea33 0309 	bics.w	r3, r3, r9
 80070e6:	d11b      	bne.n	8007120 <_dtoa_r+0xb8>
 80070e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070f4:	4333      	orrs	r3, r6
 80070f6:	f000 857a 	beq.w	8007bee <_dtoa_r+0xb86>
 80070fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070fc:	b963      	cbnz	r3, 8007118 <_dtoa_r+0xb0>
 80070fe:	4b9b      	ldr	r3, [pc, #620]	; (800736c <_dtoa_r+0x304>)
 8007100:	e024      	b.n	800714c <_dtoa_r+0xe4>
 8007102:	4b9b      	ldr	r3, [pc, #620]	; (8007370 <_dtoa_r+0x308>)
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	3308      	adds	r3, #8
 8007108:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	9800      	ldr	r0, [sp, #0]
 800710e:	b015      	add	sp, #84	; 0x54
 8007110:	ecbd 8b02 	vpop	{d8}
 8007114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007118:	4b94      	ldr	r3, [pc, #592]	; (800736c <_dtoa_r+0x304>)
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	3303      	adds	r3, #3
 800711e:	e7f3      	b.n	8007108 <_dtoa_r+0xa0>
 8007120:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007124:	2200      	movs	r2, #0
 8007126:	ec51 0b17 	vmov	r0, r1, d7
 800712a:	2300      	movs	r3, #0
 800712c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007130:	f7f9 fcf2 	bl	8000b18 <__aeabi_dcmpeq>
 8007134:	4680      	mov	r8, r0
 8007136:	b158      	cbz	r0, 8007150 <_dtoa_r+0xe8>
 8007138:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800713a:	2301      	movs	r3, #1
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 8551 	beq.w	8007be8 <_dtoa_r+0xb80>
 8007146:	488b      	ldr	r0, [pc, #556]	; (8007374 <_dtoa_r+0x30c>)
 8007148:	6018      	str	r0, [r3, #0]
 800714a:	1e43      	subs	r3, r0, #1
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	e7dd      	b.n	800710c <_dtoa_r+0xa4>
 8007150:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007154:	aa12      	add	r2, sp, #72	; 0x48
 8007156:	a913      	add	r1, sp, #76	; 0x4c
 8007158:	4620      	mov	r0, r4
 800715a:	f001 fac3 	bl	80086e4 <__d2b>
 800715e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007162:	4683      	mov	fp, r0
 8007164:	2d00      	cmp	r5, #0
 8007166:	d07c      	beq.n	8007262 <_dtoa_r+0x1fa>
 8007168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800716a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800716e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007172:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007176:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800717a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800717e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007182:	4b7d      	ldr	r3, [pc, #500]	; (8007378 <_dtoa_r+0x310>)
 8007184:	2200      	movs	r2, #0
 8007186:	4630      	mov	r0, r6
 8007188:	4639      	mov	r1, r7
 800718a:	f7f9 f8a5 	bl	80002d8 <__aeabi_dsub>
 800718e:	a36e      	add	r3, pc, #440	; (adr r3, 8007348 <_dtoa_r+0x2e0>)
 8007190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007194:	f7f9 fa58 	bl	8000648 <__aeabi_dmul>
 8007198:	a36d      	add	r3, pc, #436	; (adr r3, 8007350 <_dtoa_r+0x2e8>)
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	f7f9 f89d 	bl	80002dc <__adddf3>
 80071a2:	4606      	mov	r6, r0
 80071a4:	4628      	mov	r0, r5
 80071a6:	460f      	mov	r7, r1
 80071a8:	f7f9 f9e4 	bl	8000574 <__aeabi_i2d>
 80071ac:	a36a      	add	r3, pc, #424	; (adr r3, 8007358 <_dtoa_r+0x2f0>)
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	f7f9 fa49 	bl	8000648 <__aeabi_dmul>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4630      	mov	r0, r6
 80071bc:	4639      	mov	r1, r7
 80071be:	f7f9 f88d 	bl	80002dc <__adddf3>
 80071c2:	4606      	mov	r6, r0
 80071c4:	460f      	mov	r7, r1
 80071c6:	f7f9 fcef 	bl	8000ba8 <__aeabi_d2iz>
 80071ca:	2200      	movs	r2, #0
 80071cc:	4682      	mov	sl, r0
 80071ce:	2300      	movs	r3, #0
 80071d0:	4630      	mov	r0, r6
 80071d2:	4639      	mov	r1, r7
 80071d4:	f7f9 fcaa 	bl	8000b2c <__aeabi_dcmplt>
 80071d8:	b148      	cbz	r0, 80071ee <_dtoa_r+0x186>
 80071da:	4650      	mov	r0, sl
 80071dc:	f7f9 f9ca 	bl	8000574 <__aeabi_i2d>
 80071e0:	4632      	mov	r2, r6
 80071e2:	463b      	mov	r3, r7
 80071e4:	f7f9 fc98 	bl	8000b18 <__aeabi_dcmpeq>
 80071e8:	b908      	cbnz	r0, 80071ee <_dtoa_r+0x186>
 80071ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071ee:	f1ba 0f16 	cmp.w	sl, #22
 80071f2:	d854      	bhi.n	800729e <_dtoa_r+0x236>
 80071f4:	4b61      	ldr	r3, [pc, #388]	; (800737c <_dtoa_r+0x314>)
 80071f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007202:	f7f9 fc93 	bl	8000b2c <__aeabi_dcmplt>
 8007206:	2800      	cmp	r0, #0
 8007208:	d04b      	beq.n	80072a2 <_dtoa_r+0x23a>
 800720a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800720e:	2300      	movs	r3, #0
 8007210:	930e      	str	r3, [sp, #56]	; 0x38
 8007212:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007214:	1b5d      	subs	r5, r3, r5
 8007216:	1e6b      	subs	r3, r5, #1
 8007218:	9304      	str	r3, [sp, #16]
 800721a:	bf43      	ittte	mi
 800721c:	2300      	movmi	r3, #0
 800721e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007222:	9304      	strmi	r3, [sp, #16]
 8007224:	f04f 0800 	movpl.w	r8, #0
 8007228:	f1ba 0f00 	cmp.w	sl, #0
 800722c:	db3b      	blt.n	80072a6 <_dtoa_r+0x23e>
 800722e:	9b04      	ldr	r3, [sp, #16]
 8007230:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007234:	4453      	add	r3, sl
 8007236:	9304      	str	r3, [sp, #16]
 8007238:	2300      	movs	r3, #0
 800723a:	9306      	str	r3, [sp, #24]
 800723c:	9b05      	ldr	r3, [sp, #20]
 800723e:	2b09      	cmp	r3, #9
 8007240:	d869      	bhi.n	8007316 <_dtoa_r+0x2ae>
 8007242:	2b05      	cmp	r3, #5
 8007244:	bfc4      	itt	gt
 8007246:	3b04      	subgt	r3, #4
 8007248:	9305      	strgt	r3, [sp, #20]
 800724a:	9b05      	ldr	r3, [sp, #20]
 800724c:	f1a3 0302 	sub.w	r3, r3, #2
 8007250:	bfcc      	ite	gt
 8007252:	2500      	movgt	r5, #0
 8007254:	2501      	movle	r5, #1
 8007256:	2b03      	cmp	r3, #3
 8007258:	d869      	bhi.n	800732e <_dtoa_r+0x2c6>
 800725a:	e8df f003 	tbb	[pc, r3]
 800725e:	4e2c      	.short	0x4e2c
 8007260:	5a4c      	.short	0x5a4c
 8007262:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007266:	441d      	add	r5, r3
 8007268:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800726c:	2b20      	cmp	r3, #32
 800726e:	bfc1      	itttt	gt
 8007270:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007274:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007278:	fa09 f303 	lslgt.w	r3, r9, r3
 800727c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007280:	bfda      	itte	le
 8007282:	f1c3 0320 	rsble	r3, r3, #32
 8007286:	fa06 f003 	lslle.w	r0, r6, r3
 800728a:	4318      	orrgt	r0, r3
 800728c:	f7f9 f962 	bl	8000554 <__aeabi_ui2d>
 8007290:	2301      	movs	r3, #1
 8007292:	4606      	mov	r6, r0
 8007294:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007298:	3d01      	subs	r5, #1
 800729a:	9310      	str	r3, [sp, #64]	; 0x40
 800729c:	e771      	b.n	8007182 <_dtoa_r+0x11a>
 800729e:	2301      	movs	r3, #1
 80072a0:	e7b6      	b.n	8007210 <_dtoa_r+0x1a8>
 80072a2:	900e      	str	r0, [sp, #56]	; 0x38
 80072a4:	e7b5      	b.n	8007212 <_dtoa_r+0x1aa>
 80072a6:	f1ca 0300 	rsb	r3, sl, #0
 80072aa:	9306      	str	r3, [sp, #24]
 80072ac:	2300      	movs	r3, #0
 80072ae:	eba8 080a 	sub.w	r8, r8, sl
 80072b2:	930d      	str	r3, [sp, #52]	; 0x34
 80072b4:	e7c2      	b.n	800723c <_dtoa_r+0x1d4>
 80072b6:	2300      	movs	r3, #0
 80072b8:	9308      	str	r3, [sp, #32]
 80072ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dc39      	bgt.n	8007334 <_dtoa_r+0x2cc>
 80072c0:	f04f 0901 	mov.w	r9, #1
 80072c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80072c8:	464b      	mov	r3, r9
 80072ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80072ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80072d0:	2200      	movs	r2, #0
 80072d2:	6042      	str	r2, [r0, #4]
 80072d4:	2204      	movs	r2, #4
 80072d6:	f102 0614 	add.w	r6, r2, #20
 80072da:	429e      	cmp	r6, r3
 80072dc:	6841      	ldr	r1, [r0, #4]
 80072de:	d92f      	bls.n	8007340 <_dtoa_r+0x2d8>
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 fedd 	bl	80080a0 <_Balloc>
 80072e6:	9000      	str	r0, [sp, #0]
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d14b      	bne.n	8007384 <_dtoa_r+0x31c>
 80072ec:	4b24      	ldr	r3, [pc, #144]	; (8007380 <_dtoa_r+0x318>)
 80072ee:	4602      	mov	r2, r0
 80072f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072f4:	e6d1      	b.n	800709a <_dtoa_r+0x32>
 80072f6:	2301      	movs	r3, #1
 80072f8:	e7de      	b.n	80072b8 <_dtoa_r+0x250>
 80072fa:	2300      	movs	r3, #0
 80072fc:	9308      	str	r3, [sp, #32]
 80072fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007300:	eb0a 0903 	add.w	r9, sl, r3
 8007304:	f109 0301 	add.w	r3, r9, #1
 8007308:	2b01      	cmp	r3, #1
 800730a:	9301      	str	r3, [sp, #4]
 800730c:	bfb8      	it	lt
 800730e:	2301      	movlt	r3, #1
 8007310:	e7dd      	b.n	80072ce <_dtoa_r+0x266>
 8007312:	2301      	movs	r3, #1
 8007314:	e7f2      	b.n	80072fc <_dtoa_r+0x294>
 8007316:	2501      	movs	r5, #1
 8007318:	2300      	movs	r3, #0
 800731a:	9305      	str	r3, [sp, #20]
 800731c:	9508      	str	r5, [sp, #32]
 800731e:	f04f 39ff 	mov.w	r9, #4294967295
 8007322:	2200      	movs	r2, #0
 8007324:	f8cd 9004 	str.w	r9, [sp, #4]
 8007328:	2312      	movs	r3, #18
 800732a:	9209      	str	r2, [sp, #36]	; 0x24
 800732c:	e7cf      	b.n	80072ce <_dtoa_r+0x266>
 800732e:	2301      	movs	r3, #1
 8007330:	9308      	str	r3, [sp, #32]
 8007332:	e7f4      	b.n	800731e <_dtoa_r+0x2b6>
 8007334:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007338:	f8cd 9004 	str.w	r9, [sp, #4]
 800733c:	464b      	mov	r3, r9
 800733e:	e7c6      	b.n	80072ce <_dtoa_r+0x266>
 8007340:	3101      	adds	r1, #1
 8007342:	6041      	str	r1, [r0, #4]
 8007344:	0052      	lsls	r2, r2, #1
 8007346:	e7c6      	b.n	80072d6 <_dtoa_r+0x26e>
 8007348:	636f4361 	.word	0x636f4361
 800734c:	3fd287a7 	.word	0x3fd287a7
 8007350:	8b60c8b3 	.word	0x8b60c8b3
 8007354:	3fc68a28 	.word	0x3fc68a28
 8007358:	509f79fb 	.word	0x509f79fb
 800735c:	3fd34413 	.word	0x3fd34413
 8007360:	08008ffd 	.word	0x08008ffd
 8007364:	08009014 	.word	0x08009014
 8007368:	7ff00000 	.word	0x7ff00000
 800736c:	08008ff9 	.word	0x08008ff9
 8007370:	08008ff0 	.word	0x08008ff0
 8007374:	08008fcd 	.word	0x08008fcd
 8007378:	3ff80000 	.word	0x3ff80000
 800737c:	08009170 	.word	0x08009170
 8007380:	08009073 	.word	0x08009073
 8007384:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007386:	9a00      	ldr	r2, [sp, #0]
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	9b01      	ldr	r3, [sp, #4]
 800738c:	2b0e      	cmp	r3, #14
 800738e:	f200 80ad 	bhi.w	80074ec <_dtoa_r+0x484>
 8007392:	2d00      	cmp	r5, #0
 8007394:	f000 80aa 	beq.w	80074ec <_dtoa_r+0x484>
 8007398:	f1ba 0f00 	cmp.w	sl, #0
 800739c:	dd36      	ble.n	800740c <_dtoa_r+0x3a4>
 800739e:	4ac3      	ldr	r2, [pc, #780]	; (80076ac <_dtoa_r+0x644>)
 80073a0:	f00a 030f 	and.w	r3, sl, #15
 80073a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80073a8:	ed93 7b00 	vldr	d7, [r3]
 80073ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80073b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80073b4:	eeb0 8a47 	vmov.f32	s16, s14
 80073b8:	eef0 8a67 	vmov.f32	s17, s15
 80073bc:	d016      	beq.n	80073ec <_dtoa_r+0x384>
 80073be:	4bbc      	ldr	r3, [pc, #752]	; (80076b0 <_dtoa_r+0x648>)
 80073c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80073c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073c8:	f7f9 fa68 	bl	800089c <__aeabi_ddiv>
 80073cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073d0:	f007 070f 	and.w	r7, r7, #15
 80073d4:	2503      	movs	r5, #3
 80073d6:	4eb6      	ldr	r6, [pc, #728]	; (80076b0 <_dtoa_r+0x648>)
 80073d8:	b957      	cbnz	r7, 80073f0 <_dtoa_r+0x388>
 80073da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073de:	ec53 2b18 	vmov	r2, r3, d8
 80073e2:	f7f9 fa5b 	bl	800089c <__aeabi_ddiv>
 80073e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ea:	e029      	b.n	8007440 <_dtoa_r+0x3d8>
 80073ec:	2502      	movs	r5, #2
 80073ee:	e7f2      	b.n	80073d6 <_dtoa_r+0x36e>
 80073f0:	07f9      	lsls	r1, r7, #31
 80073f2:	d508      	bpl.n	8007406 <_dtoa_r+0x39e>
 80073f4:	ec51 0b18 	vmov	r0, r1, d8
 80073f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073fc:	f7f9 f924 	bl	8000648 <__aeabi_dmul>
 8007400:	ec41 0b18 	vmov	d8, r0, r1
 8007404:	3501      	adds	r5, #1
 8007406:	107f      	asrs	r7, r7, #1
 8007408:	3608      	adds	r6, #8
 800740a:	e7e5      	b.n	80073d8 <_dtoa_r+0x370>
 800740c:	f000 80a6 	beq.w	800755c <_dtoa_r+0x4f4>
 8007410:	f1ca 0600 	rsb	r6, sl, #0
 8007414:	4ba5      	ldr	r3, [pc, #660]	; (80076ac <_dtoa_r+0x644>)
 8007416:	4fa6      	ldr	r7, [pc, #664]	; (80076b0 <_dtoa_r+0x648>)
 8007418:	f006 020f 	and.w	r2, r6, #15
 800741c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007424:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007428:	f7f9 f90e 	bl	8000648 <__aeabi_dmul>
 800742c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007430:	1136      	asrs	r6, r6, #4
 8007432:	2300      	movs	r3, #0
 8007434:	2502      	movs	r5, #2
 8007436:	2e00      	cmp	r6, #0
 8007438:	f040 8085 	bne.w	8007546 <_dtoa_r+0x4de>
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1d2      	bne.n	80073e6 <_dtoa_r+0x37e>
 8007440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 808c 	beq.w	8007560 <_dtoa_r+0x4f8>
 8007448:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800744c:	4b99      	ldr	r3, [pc, #612]	; (80076b4 <_dtoa_r+0x64c>)
 800744e:	2200      	movs	r2, #0
 8007450:	4630      	mov	r0, r6
 8007452:	4639      	mov	r1, r7
 8007454:	f7f9 fb6a 	bl	8000b2c <__aeabi_dcmplt>
 8007458:	2800      	cmp	r0, #0
 800745a:	f000 8081 	beq.w	8007560 <_dtoa_r+0x4f8>
 800745e:	9b01      	ldr	r3, [sp, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d07d      	beq.n	8007560 <_dtoa_r+0x4f8>
 8007464:	f1b9 0f00 	cmp.w	r9, #0
 8007468:	dd3c      	ble.n	80074e4 <_dtoa_r+0x47c>
 800746a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800746e:	9307      	str	r3, [sp, #28]
 8007470:	2200      	movs	r2, #0
 8007472:	4b91      	ldr	r3, [pc, #580]	; (80076b8 <_dtoa_r+0x650>)
 8007474:	4630      	mov	r0, r6
 8007476:	4639      	mov	r1, r7
 8007478:	f7f9 f8e6 	bl	8000648 <__aeabi_dmul>
 800747c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007480:	3501      	adds	r5, #1
 8007482:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007486:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800748a:	4628      	mov	r0, r5
 800748c:	f7f9 f872 	bl	8000574 <__aeabi_i2d>
 8007490:	4632      	mov	r2, r6
 8007492:	463b      	mov	r3, r7
 8007494:	f7f9 f8d8 	bl	8000648 <__aeabi_dmul>
 8007498:	4b88      	ldr	r3, [pc, #544]	; (80076bc <_dtoa_r+0x654>)
 800749a:	2200      	movs	r2, #0
 800749c:	f7f8 ff1e 	bl	80002dc <__adddf3>
 80074a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80074a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074a8:	9303      	str	r3, [sp, #12]
 80074aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d15c      	bne.n	800756a <_dtoa_r+0x502>
 80074b0:	4b83      	ldr	r3, [pc, #524]	; (80076c0 <_dtoa_r+0x658>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	4630      	mov	r0, r6
 80074b6:	4639      	mov	r1, r7
 80074b8:	f7f8 ff0e 	bl	80002d8 <__aeabi_dsub>
 80074bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074c0:	4606      	mov	r6, r0
 80074c2:	460f      	mov	r7, r1
 80074c4:	f7f9 fb50 	bl	8000b68 <__aeabi_dcmpgt>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	f040 8296 	bne.w	80079fa <_dtoa_r+0x992>
 80074ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80074d2:	4630      	mov	r0, r6
 80074d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074d8:	4639      	mov	r1, r7
 80074da:	f7f9 fb27 	bl	8000b2c <__aeabi_dcmplt>
 80074de:	2800      	cmp	r0, #0
 80074e0:	f040 8288 	bne.w	80079f4 <_dtoa_r+0x98c>
 80074e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80074e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f2c0 8158 	blt.w	80077a4 <_dtoa_r+0x73c>
 80074f4:	f1ba 0f0e 	cmp.w	sl, #14
 80074f8:	f300 8154 	bgt.w	80077a4 <_dtoa_r+0x73c>
 80074fc:	4b6b      	ldr	r3, [pc, #428]	; (80076ac <_dtoa_r+0x644>)
 80074fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007502:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007508:	2b00      	cmp	r3, #0
 800750a:	f280 80e3 	bge.w	80076d4 <_dtoa_r+0x66c>
 800750e:	9b01      	ldr	r3, [sp, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	f300 80df 	bgt.w	80076d4 <_dtoa_r+0x66c>
 8007516:	f040 826d 	bne.w	80079f4 <_dtoa_r+0x98c>
 800751a:	4b69      	ldr	r3, [pc, #420]	; (80076c0 <_dtoa_r+0x658>)
 800751c:	2200      	movs	r2, #0
 800751e:	4640      	mov	r0, r8
 8007520:	4649      	mov	r1, r9
 8007522:	f7f9 f891 	bl	8000648 <__aeabi_dmul>
 8007526:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800752a:	f7f9 fb13 	bl	8000b54 <__aeabi_dcmpge>
 800752e:	9e01      	ldr	r6, [sp, #4]
 8007530:	4637      	mov	r7, r6
 8007532:	2800      	cmp	r0, #0
 8007534:	f040 8243 	bne.w	80079be <_dtoa_r+0x956>
 8007538:	9d00      	ldr	r5, [sp, #0]
 800753a:	2331      	movs	r3, #49	; 0x31
 800753c:	f805 3b01 	strb.w	r3, [r5], #1
 8007540:	f10a 0a01 	add.w	sl, sl, #1
 8007544:	e23f      	b.n	80079c6 <_dtoa_r+0x95e>
 8007546:	07f2      	lsls	r2, r6, #31
 8007548:	d505      	bpl.n	8007556 <_dtoa_r+0x4ee>
 800754a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800754e:	f7f9 f87b 	bl	8000648 <__aeabi_dmul>
 8007552:	3501      	adds	r5, #1
 8007554:	2301      	movs	r3, #1
 8007556:	1076      	asrs	r6, r6, #1
 8007558:	3708      	adds	r7, #8
 800755a:	e76c      	b.n	8007436 <_dtoa_r+0x3ce>
 800755c:	2502      	movs	r5, #2
 800755e:	e76f      	b.n	8007440 <_dtoa_r+0x3d8>
 8007560:	9b01      	ldr	r3, [sp, #4]
 8007562:	f8cd a01c 	str.w	sl, [sp, #28]
 8007566:	930c      	str	r3, [sp, #48]	; 0x30
 8007568:	e78d      	b.n	8007486 <_dtoa_r+0x41e>
 800756a:	9900      	ldr	r1, [sp, #0]
 800756c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800756e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007570:	4b4e      	ldr	r3, [pc, #312]	; (80076ac <_dtoa_r+0x644>)
 8007572:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007576:	4401      	add	r1, r0
 8007578:	9102      	str	r1, [sp, #8]
 800757a:	9908      	ldr	r1, [sp, #32]
 800757c:	eeb0 8a47 	vmov.f32	s16, s14
 8007580:	eef0 8a67 	vmov.f32	s17, s15
 8007584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007588:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800758c:	2900      	cmp	r1, #0
 800758e:	d045      	beq.n	800761c <_dtoa_r+0x5b4>
 8007590:	494c      	ldr	r1, [pc, #304]	; (80076c4 <_dtoa_r+0x65c>)
 8007592:	2000      	movs	r0, #0
 8007594:	f7f9 f982 	bl	800089c <__aeabi_ddiv>
 8007598:	ec53 2b18 	vmov	r2, r3, d8
 800759c:	f7f8 fe9c 	bl	80002d8 <__aeabi_dsub>
 80075a0:	9d00      	ldr	r5, [sp, #0]
 80075a2:	ec41 0b18 	vmov	d8, r0, r1
 80075a6:	4639      	mov	r1, r7
 80075a8:	4630      	mov	r0, r6
 80075aa:	f7f9 fafd 	bl	8000ba8 <__aeabi_d2iz>
 80075ae:	900c      	str	r0, [sp, #48]	; 0x30
 80075b0:	f7f8 ffe0 	bl	8000574 <__aeabi_i2d>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4630      	mov	r0, r6
 80075ba:	4639      	mov	r1, r7
 80075bc:	f7f8 fe8c 	bl	80002d8 <__aeabi_dsub>
 80075c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075c2:	3330      	adds	r3, #48	; 0x30
 80075c4:	f805 3b01 	strb.w	r3, [r5], #1
 80075c8:	ec53 2b18 	vmov	r2, r3, d8
 80075cc:	4606      	mov	r6, r0
 80075ce:	460f      	mov	r7, r1
 80075d0:	f7f9 faac 	bl	8000b2c <__aeabi_dcmplt>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d165      	bne.n	80076a4 <_dtoa_r+0x63c>
 80075d8:	4632      	mov	r2, r6
 80075da:	463b      	mov	r3, r7
 80075dc:	4935      	ldr	r1, [pc, #212]	; (80076b4 <_dtoa_r+0x64c>)
 80075de:	2000      	movs	r0, #0
 80075e0:	f7f8 fe7a 	bl	80002d8 <__aeabi_dsub>
 80075e4:	ec53 2b18 	vmov	r2, r3, d8
 80075e8:	f7f9 faa0 	bl	8000b2c <__aeabi_dcmplt>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	f040 80b9 	bne.w	8007764 <_dtoa_r+0x6fc>
 80075f2:	9b02      	ldr	r3, [sp, #8]
 80075f4:	429d      	cmp	r5, r3
 80075f6:	f43f af75 	beq.w	80074e4 <_dtoa_r+0x47c>
 80075fa:	4b2f      	ldr	r3, [pc, #188]	; (80076b8 <_dtoa_r+0x650>)
 80075fc:	ec51 0b18 	vmov	r0, r1, d8
 8007600:	2200      	movs	r2, #0
 8007602:	f7f9 f821 	bl	8000648 <__aeabi_dmul>
 8007606:	4b2c      	ldr	r3, [pc, #176]	; (80076b8 <_dtoa_r+0x650>)
 8007608:	ec41 0b18 	vmov	d8, r0, r1
 800760c:	2200      	movs	r2, #0
 800760e:	4630      	mov	r0, r6
 8007610:	4639      	mov	r1, r7
 8007612:	f7f9 f819 	bl	8000648 <__aeabi_dmul>
 8007616:	4606      	mov	r6, r0
 8007618:	460f      	mov	r7, r1
 800761a:	e7c4      	b.n	80075a6 <_dtoa_r+0x53e>
 800761c:	ec51 0b17 	vmov	r0, r1, d7
 8007620:	f7f9 f812 	bl	8000648 <__aeabi_dmul>
 8007624:	9b02      	ldr	r3, [sp, #8]
 8007626:	9d00      	ldr	r5, [sp, #0]
 8007628:	930c      	str	r3, [sp, #48]	; 0x30
 800762a:	ec41 0b18 	vmov	d8, r0, r1
 800762e:	4639      	mov	r1, r7
 8007630:	4630      	mov	r0, r6
 8007632:	f7f9 fab9 	bl	8000ba8 <__aeabi_d2iz>
 8007636:	9011      	str	r0, [sp, #68]	; 0x44
 8007638:	f7f8 ff9c 	bl	8000574 <__aeabi_i2d>
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	4630      	mov	r0, r6
 8007642:	4639      	mov	r1, r7
 8007644:	f7f8 fe48 	bl	80002d8 <__aeabi_dsub>
 8007648:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800764a:	3330      	adds	r3, #48	; 0x30
 800764c:	f805 3b01 	strb.w	r3, [r5], #1
 8007650:	9b02      	ldr	r3, [sp, #8]
 8007652:	429d      	cmp	r5, r3
 8007654:	4606      	mov	r6, r0
 8007656:	460f      	mov	r7, r1
 8007658:	f04f 0200 	mov.w	r2, #0
 800765c:	d134      	bne.n	80076c8 <_dtoa_r+0x660>
 800765e:	4b19      	ldr	r3, [pc, #100]	; (80076c4 <_dtoa_r+0x65c>)
 8007660:	ec51 0b18 	vmov	r0, r1, d8
 8007664:	f7f8 fe3a 	bl	80002dc <__adddf3>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4630      	mov	r0, r6
 800766e:	4639      	mov	r1, r7
 8007670:	f7f9 fa7a 	bl	8000b68 <__aeabi_dcmpgt>
 8007674:	2800      	cmp	r0, #0
 8007676:	d175      	bne.n	8007764 <_dtoa_r+0x6fc>
 8007678:	ec53 2b18 	vmov	r2, r3, d8
 800767c:	4911      	ldr	r1, [pc, #68]	; (80076c4 <_dtoa_r+0x65c>)
 800767e:	2000      	movs	r0, #0
 8007680:	f7f8 fe2a 	bl	80002d8 <__aeabi_dsub>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4630      	mov	r0, r6
 800768a:	4639      	mov	r1, r7
 800768c:	f7f9 fa4e 	bl	8000b2c <__aeabi_dcmplt>
 8007690:	2800      	cmp	r0, #0
 8007692:	f43f af27 	beq.w	80074e4 <_dtoa_r+0x47c>
 8007696:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007698:	1e6b      	subs	r3, r5, #1
 800769a:	930c      	str	r3, [sp, #48]	; 0x30
 800769c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076a0:	2b30      	cmp	r3, #48	; 0x30
 80076a2:	d0f8      	beq.n	8007696 <_dtoa_r+0x62e>
 80076a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80076a8:	e04a      	b.n	8007740 <_dtoa_r+0x6d8>
 80076aa:	bf00      	nop
 80076ac:	08009170 	.word	0x08009170
 80076b0:	08009148 	.word	0x08009148
 80076b4:	3ff00000 	.word	0x3ff00000
 80076b8:	40240000 	.word	0x40240000
 80076bc:	401c0000 	.word	0x401c0000
 80076c0:	40140000 	.word	0x40140000
 80076c4:	3fe00000 	.word	0x3fe00000
 80076c8:	4baf      	ldr	r3, [pc, #700]	; (8007988 <_dtoa_r+0x920>)
 80076ca:	f7f8 ffbd 	bl	8000648 <__aeabi_dmul>
 80076ce:	4606      	mov	r6, r0
 80076d0:	460f      	mov	r7, r1
 80076d2:	e7ac      	b.n	800762e <_dtoa_r+0x5c6>
 80076d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80076d8:	9d00      	ldr	r5, [sp, #0]
 80076da:	4642      	mov	r2, r8
 80076dc:	464b      	mov	r3, r9
 80076de:	4630      	mov	r0, r6
 80076e0:	4639      	mov	r1, r7
 80076e2:	f7f9 f8db 	bl	800089c <__aeabi_ddiv>
 80076e6:	f7f9 fa5f 	bl	8000ba8 <__aeabi_d2iz>
 80076ea:	9002      	str	r0, [sp, #8]
 80076ec:	f7f8 ff42 	bl	8000574 <__aeabi_i2d>
 80076f0:	4642      	mov	r2, r8
 80076f2:	464b      	mov	r3, r9
 80076f4:	f7f8 ffa8 	bl	8000648 <__aeabi_dmul>
 80076f8:	4602      	mov	r2, r0
 80076fa:	460b      	mov	r3, r1
 80076fc:	4630      	mov	r0, r6
 80076fe:	4639      	mov	r1, r7
 8007700:	f7f8 fdea 	bl	80002d8 <__aeabi_dsub>
 8007704:	9e02      	ldr	r6, [sp, #8]
 8007706:	9f01      	ldr	r7, [sp, #4]
 8007708:	3630      	adds	r6, #48	; 0x30
 800770a:	f805 6b01 	strb.w	r6, [r5], #1
 800770e:	9e00      	ldr	r6, [sp, #0]
 8007710:	1bae      	subs	r6, r5, r6
 8007712:	42b7      	cmp	r7, r6
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	d137      	bne.n	800778a <_dtoa_r+0x722>
 800771a:	f7f8 fddf 	bl	80002dc <__adddf3>
 800771e:	4642      	mov	r2, r8
 8007720:	464b      	mov	r3, r9
 8007722:	4606      	mov	r6, r0
 8007724:	460f      	mov	r7, r1
 8007726:	f7f9 fa1f 	bl	8000b68 <__aeabi_dcmpgt>
 800772a:	b9c8      	cbnz	r0, 8007760 <_dtoa_r+0x6f8>
 800772c:	4642      	mov	r2, r8
 800772e:	464b      	mov	r3, r9
 8007730:	4630      	mov	r0, r6
 8007732:	4639      	mov	r1, r7
 8007734:	f7f9 f9f0 	bl	8000b18 <__aeabi_dcmpeq>
 8007738:	b110      	cbz	r0, 8007740 <_dtoa_r+0x6d8>
 800773a:	9b02      	ldr	r3, [sp, #8]
 800773c:	07d9      	lsls	r1, r3, #31
 800773e:	d40f      	bmi.n	8007760 <_dtoa_r+0x6f8>
 8007740:	4620      	mov	r0, r4
 8007742:	4659      	mov	r1, fp
 8007744:	f000 fcec 	bl	8008120 <_Bfree>
 8007748:	2300      	movs	r3, #0
 800774a:	702b      	strb	r3, [r5, #0]
 800774c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800774e:	f10a 0001 	add.w	r0, sl, #1
 8007752:	6018      	str	r0, [r3, #0]
 8007754:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007756:	2b00      	cmp	r3, #0
 8007758:	f43f acd8 	beq.w	800710c <_dtoa_r+0xa4>
 800775c:	601d      	str	r5, [r3, #0]
 800775e:	e4d5      	b.n	800710c <_dtoa_r+0xa4>
 8007760:	f8cd a01c 	str.w	sl, [sp, #28]
 8007764:	462b      	mov	r3, r5
 8007766:	461d      	mov	r5, r3
 8007768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800776c:	2a39      	cmp	r2, #57	; 0x39
 800776e:	d108      	bne.n	8007782 <_dtoa_r+0x71a>
 8007770:	9a00      	ldr	r2, [sp, #0]
 8007772:	429a      	cmp	r2, r3
 8007774:	d1f7      	bne.n	8007766 <_dtoa_r+0x6fe>
 8007776:	9a07      	ldr	r2, [sp, #28]
 8007778:	9900      	ldr	r1, [sp, #0]
 800777a:	3201      	adds	r2, #1
 800777c:	9207      	str	r2, [sp, #28]
 800777e:	2230      	movs	r2, #48	; 0x30
 8007780:	700a      	strb	r2, [r1, #0]
 8007782:	781a      	ldrb	r2, [r3, #0]
 8007784:	3201      	adds	r2, #1
 8007786:	701a      	strb	r2, [r3, #0]
 8007788:	e78c      	b.n	80076a4 <_dtoa_r+0x63c>
 800778a:	4b7f      	ldr	r3, [pc, #508]	; (8007988 <_dtoa_r+0x920>)
 800778c:	2200      	movs	r2, #0
 800778e:	f7f8 ff5b 	bl	8000648 <__aeabi_dmul>
 8007792:	2200      	movs	r2, #0
 8007794:	2300      	movs	r3, #0
 8007796:	4606      	mov	r6, r0
 8007798:	460f      	mov	r7, r1
 800779a:	f7f9 f9bd 	bl	8000b18 <__aeabi_dcmpeq>
 800779e:	2800      	cmp	r0, #0
 80077a0:	d09b      	beq.n	80076da <_dtoa_r+0x672>
 80077a2:	e7cd      	b.n	8007740 <_dtoa_r+0x6d8>
 80077a4:	9a08      	ldr	r2, [sp, #32]
 80077a6:	2a00      	cmp	r2, #0
 80077a8:	f000 80c4 	beq.w	8007934 <_dtoa_r+0x8cc>
 80077ac:	9a05      	ldr	r2, [sp, #20]
 80077ae:	2a01      	cmp	r2, #1
 80077b0:	f300 80a8 	bgt.w	8007904 <_dtoa_r+0x89c>
 80077b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077b6:	2a00      	cmp	r2, #0
 80077b8:	f000 80a0 	beq.w	80078fc <_dtoa_r+0x894>
 80077bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80077c0:	9e06      	ldr	r6, [sp, #24]
 80077c2:	4645      	mov	r5, r8
 80077c4:	9a04      	ldr	r2, [sp, #16]
 80077c6:	2101      	movs	r1, #1
 80077c8:	441a      	add	r2, r3
 80077ca:	4620      	mov	r0, r4
 80077cc:	4498      	add	r8, r3
 80077ce:	9204      	str	r2, [sp, #16]
 80077d0:	f000 fd62 	bl	8008298 <__i2b>
 80077d4:	4607      	mov	r7, r0
 80077d6:	2d00      	cmp	r5, #0
 80077d8:	dd0b      	ble.n	80077f2 <_dtoa_r+0x78a>
 80077da:	9b04      	ldr	r3, [sp, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	dd08      	ble.n	80077f2 <_dtoa_r+0x78a>
 80077e0:	42ab      	cmp	r3, r5
 80077e2:	9a04      	ldr	r2, [sp, #16]
 80077e4:	bfa8      	it	ge
 80077e6:	462b      	movge	r3, r5
 80077e8:	eba8 0803 	sub.w	r8, r8, r3
 80077ec:	1aed      	subs	r5, r5, r3
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	9304      	str	r3, [sp, #16]
 80077f2:	9b06      	ldr	r3, [sp, #24]
 80077f4:	b1fb      	cbz	r3, 8007836 <_dtoa_r+0x7ce>
 80077f6:	9b08      	ldr	r3, [sp, #32]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 809f 	beq.w	800793c <_dtoa_r+0x8d4>
 80077fe:	2e00      	cmp	r6, #0
 8007800:	dd11      	ble.n	8007826 <_dtoa_r+0x7be>
 8007802:	4639      	mov	r1, r7
 8007804:	4632      	mov	r2, r6
 8007806:	4620      	mov	r0, r4
 8007808:	f000 fe02 	bl	8008410 <__pow5mult>
 800780c:	465a      	mov	r2, fp
 800780e:	4601      	mov	r1, r0
 8007810:	4607      	mov	r7, r0
 8007812:	4620      	mov	r0, r4
 8007814:	f000 fd56 	bl	80082c4 <__multiply>
 8007818:	4659      	mov	r1, fp
 800781a:	9007      	str	r0, [sp, #28]
 800781c:	4620      	mov	r0, r4
 800781e:	f000 fc7f 	bl	8008120 <_Bfree>
 8007822:	9b07      	ldr	r3, [sp, #28]
 8007824:	469b      	mov	fp, r3
 8007826:	9b06      	ldr	r3, [sp, #24]
 8007828:	1b9a      	subs	r2, r3, r6
 800782a:	d004      	beq.n	8007836 <_dtoa_r+0x7ce>
 800782c:	4659      	mov	r1, fp
 800782e:	4620      	mov	r0, r4
 8007830:	f000 fdee 	bl	8008410 <__pow5mult>
 8007834:	4683      	mov	fp, r0
 8007836:	2101      	movs	r1, #1
 8007838:	4620      	mov	r0, r4
 800783a:	f000 fd2d 	bl	8008298 <__i2b>
 800783e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007840:	2b00      	cmp	r3, #0
 8007842:	4606      	mov	r6, r0
 8007844:	dd7c      	ble.n	8007940 <_dtoa_r+0x8d8>
 8007846:	461a      	mov	r2, r3
 8007848:	4601      	mov	r1, r0
 800784a:	4620      	mov	r0, r4
 800784c:	f000 fde0 	bl	8008410 <__pow5mult>
 8007850:	9b05      	ldr	r3, [sp, #20]
 8007852:	2b01      	cmp	r3, #1
 8007854:	4606      	mov	r6, r0
 8007856:	dd76      	ble.n	8007946 <_dtoa_r+0x8de>
 8007858:	2300      	movs	r3, #0
 800785a:	9306      	str	r3, [sp, #24]
 800785c:	6933      	ldr	r3, [r6, #16]
 800785e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007862:	6918      	ldr	r0, [r3, #16]
 8007864:	f000 fcc8 	bl	80081f8 <__hi0bits>
 8007868:	f1c0 0020 	rsb	r0, r0, #32
 800786c:	9b04      	ldr	r3, [sp, #16]
 800786e:	4418      	add	r0, r3
 8007870:	f010 001f 	ands.w	r0, r0, #31
 8007874:	f000 8086 	beq.w	8007984 <_dtoa_r+0x91c>
 8007878:	f1c0 0320 	rsb	r3, r0, #32
 800787c:	2b04      	cmp	r3, #4
 800787e:	dd7f      	ble.n	8007980 <_dtoa_r+0x918>
 8007880:	f1c0 001c 	rsb	r0, r0, #28
 8007884:	9b04      	ldr	r3, [sp, #16]
 8007886:	4403      	add	r3, r0
 8007888:	4480      	add	r8, r0
 800788a:	4405      	add	r5, r0
 800788c:	9304      	str	r3, [sp, #16]
 800788e:	f1b8 0f00 	cmp.w	r8, #0
 8007892:	dd05      	ble.n	80078a0 <_dtoa_r+0x838>
 8007894:	4659      	mov	r1, fp
 8007896:	4642      	mov	r2, r8
 8007898:	4620      	mov	r0, r4
 800789a:	f000 fe13 	bl	80084c4 <__lshift>
 800789e:	4683      	mov	fp, r0
 80078a0:	9b04      	ldr	r3, [sp, #16]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	dd05      	ble.n	80078b2 <_dtoa_r+0x84a>
 80078a6:	4631      	mov	r1, r6
 80078a8:	461a      	mov	r2, r3
 80078aa:	4620      	mov	r0, r4
 80078ac:	f000 fe0a 	bl	80084c4 <__lshift>
 80078b0:	4606      	mov	r6, r0
 80078b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d069      	beq.n	800798c <_dtoa_r+0x924>
 80078b8:	4631      	mov	r1, r6
 80078ba:	4658      	mov	r0, fp
 80078bc:	f000 fe6e 	bl	800859c <__mcmp>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	da63      	bge.n	800798c <_dtoa_r+0x924>
 80078c4:	2300      	movs	r3, #0
 80078c6:	4659      	mov	r1, fp
 80078c8:	220a      	movs	r2, #10
 80078ca:	4620      	mov	r0, r4
 80078cc:	f000 fc4a 	bl	8008164 <__multadd>
 80078d0:	9b08      	ldr	r3, [sp, #32]
 80078d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078d6:	4683      	mov	fp, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 818f 	beq.w	8007bfc <_dtoa_r+0xb94>
 80078de:	4639      	mov	r1, r7
 80078e0:	2300      	movs	r3, #0
 80078e2:	220a      	movs	r2, #10
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 fc3d 	bl	8008164 <__multadd>
 80078ea:	f1b9 0f00 	cmp.w	r9, #0
 80078ee:	4607      	mov	r7, r0
 80078f0:	f300 808e 	bgt.w	8007a10 <_dtoa_r+0x9a8>
 80078f4:	9b05      	ldr	r3, [sp, #20]
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	dc50      	bgt.n	800799c <_dtoa_r+0x934>
 80078fa:	e089      	b.n	8007a10 <_dtoa_r+0x9a8>
 80078fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007902:	e75d      	b.n	80077c0 <_dtoa_r+0x758>
 8007904:	9b01      	ldr	r3, [sp, #4]
 8007906:	1e5e      	subs	r6, r3, #1
 8007908:	9b06      	ldr	r3, [sp, #24]
 800790a:	42b3      	cmp	r3, r6
 800790c:	bfbf      	itttt	lt
 800790e:	9b06      	ldrlt	r3, [sp, #24]
 8007910:	9606      	strlt	r6, [sp, #24]
 8007912:	1af2      	sublt	r2, r6, r3
 8007914:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007916:	bfb6      	itet	lt
 8007918:	189b      	addlt	r3, r3, r2
 800791a:	1b9e      	subge	r6, r3, r6
 800791c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800791e:	9b01      	ldr	r3, [sp, #4]
 8007920:	bfb8      	it	lt
 8007922:	2600      	movlt	r6, #0
 8007924:	2b00      	cmp	r3, #0
 8007926:	bfb5      	itete	lt
 8007928:	eba8 0503 	sublt.w	r5, r8, r3
 800792c:	9b01      	ldrge	r3, [sp, #4]
 800792e:	2300      	movlt	r3, #0
 8007930:	4645      	movge	r5, r8
 8007932:	e747      	b.n	80077c4 <_dtoa_r+0x75c>
 8007934:	9e06      	ldr	r6, [sp, #24]
 8007936:	9f08      	ldr	r7, [sp, #32]
 8007938:	4645      	mov	r5, r8
 800793a:	e74c      	b.n	80077d6 <_dtoa_r+0x76e>
 800793c:	9a06      	ldr	r2, [sp, #24]
 800793e:	e775      	b.n	800782c <_dtoa_r+0x7c4>
 8007940:	9b05      	ldr	r3, [sp, #20]
 8007942:	2b01      	cmp	r3, #1
 8007944:	dc18      	bgt.n	8007978 <_dtoa_r+0x910>
 8007946:	9b02      	ldr	r3, [sp, #8]
 8007948:	b9b3      	cbnz	r3, 8007978 <_dtoa_r+0x910>
 800794a:	9b03      	ldr	r3, [sp, #12]
 800794c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007950:	b9a3      	cbnz	r3, 800797c <_dtoa_r+0x914>
 8007952:	9b03      	ldr	r3, [sp, #12]
 8007954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007958:	0d1b      	lsrs	r3, r3, #20
 800795a:	051b      	lsls	r3, r3, #20
 800795c:	b12b      	cbz	r3, 800796a <_dtoa_r+0x902>
 800795e:	9b04      	ldr	r3, [sp, #16]
 8007960:	3301      	adds	r3, #1
 8007962:	9304      	str	r3, [sp, #16]
 8007964:	f108 0801 	add.w	r8, r8, #1
 8007968:	2301      	movs	r3, #1
 800796a:	9306      	str	r3, [sp, #24]
 800796c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800796e:	2b00      	cmp	r3, #0
 8007970:	f47f af74 	bne.w	800785c <_dtoa_r+0x7f4>
 8007974:	2001      	movs	r0, #1
 8007976:	e779      	b.n	800786c <_dtoa_r+0x804>
 8007978:	2300      	movs	r3, #0
 800797a:	e7f6      	b.n	800796a <_dtoa_r+0x902>
 800797c:	9b02      	ldr	r3, [sp, #8]
 800797e:	e7f4      	b.n	800796a <_dtoa_r+0x902>
 8007980:	d085      	beq.n	800788e <_dtoa_r+0x826>
 8007982:	4618      	mov	r0, r3
 8007984:	301c      	adds	r0, #28
 8007986:	e77d      	b.n	8007884 <_dtoa_r+0x81c>
 8007988:	40240000 	.word	0x40240000
 800798c:	9b01      	ldr	r3, [sp, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	dc38      	bgt.n	8007a04 <_dtoa_r+0x99c>
 8007992:	9b05      	ldr	r3, [sp, #20]
 8007994:	2b02      	cmp	r3, #2
 8007996:	dd35      	ble.n	8007a04 <_dtoa_r+0x99c>
 8007998:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800799c:	f1b9 0f00 	cmp.w	r9, #0
 80079a0:	d10d      	bne.n	80079be <_dtoa_r+0x956>
 80079a2:	4631      	mov	r1, r6
 80079a4:	464b      	mov	r3, r9
 80079a6:	2205      	movs	r2, #5
 80079a8:	4620      	mov	r0, r4
 80079aa:	f000 fbdb 	bl	8008164 <__multadd>
 80079ae:	4601      	mov	r1, r0
 80079b0:	4606      	mov	r6, r0
 80079b2:	4658      	mov	r0, fp
 80079b4:	f000 fdf2 	bl	800859c <__mcmp>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	f73f adbd 	bgt.w	8007538 <_dtoa_r+0x4d0>
 80079be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c0:	9d00      	ldr	r5, [sp, #0]
 80079c2:	ea6f 0a03 	mvn.w	sl, r3
 80079c6:	f04f 0800 	mov.w	r8, #0
 80079ca:	4631      	mov	r1, r6
 80079cc:	4620      	mov	r0, r4
 80079ce:	f000 fba7 	bl	8008120 <_Bfree>
 80079d2:	2f00      	cmp	r7, #0
 80079d4:	f43f aeb4 	beq.w	8007740 <_dtoa_r+0x6d8>
 80079d8:	f1b8 0f00 	cmp.w	r8, #0
 80079dc:	d005      	beq.n	80079ea <_dtoa_r+0x982>
 80079de:	45b8      	cmp	r8, r7
 80079e0:	d003      	beq.n	80079ea <_dtoa_r+0x982>
 80079e2:	4641      	mov	r1, r8
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 fb9b 	bl	8008120 <_Bfree>
 80079ea:	4639      	mov	r1, r7
 80079ec:	4620      	mov	r0, r4
 80079ee:	f000 fb97 	bl	8008120 <_Bfree>
 80079f2:	e6a5      	b.n	8007740 <_dtoa_r+0x6d8>
 80079f4:	2600      	movs	r6, #0
 80079f6:	4637      	mov	r7, r6
 80079f8:	e7e1      	b.n	80079be <_dtoa_r+0x956>
 80079fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80079fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007a00:	4637      	mov	r7, r6
 8007a02:	e599      	b.n	8007538 <_dtoa_r+0x4d0>
 8007a04:	9b08      	ldr	r3, [sp, #32]
 8007a06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 80fd 	beq.w	8007c0a <_dtoa_r+0xba2>
 8007a10:	2d00      	cmp	r5, #0
 8007a12:	dd05      	ble.n	8007a20 <_dtoa_r+0x9b8>
 8007a14:	4639      	mov	r1, r7
 8007a16:	462a      	mov	r2, r5
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f000 fd53 	bl	80084c4 <__lshift>
 8007a1e:	4607      	mov	r7, r0
 8007a20:	9b06      	ldr	r3, [sp, #24]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d05c      	beq.n	8007ae0 <_dtoa_r+0xa78>
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f000 fb39 	bl	80080a0 <_Balloc>
 8007a2e:	4605      	mov	r5, r0
 8007a30:	b928      	cbnz	r0, 8007a3e <_dtoa_r+0x9d6>
 8007a32:	4b80      	ldr	r3, [pc, #512]	; (8007c34 <_dtoa_r+0xbcc>)
 8007a34:	4602      	mov	r2, r0
 8007a36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007a3a:	f7ff bb2e 	b.w	800709a <_dtoa_r+0x32>
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	3202      	adds	r2, #2
 8007a42:	0092      	lsls	r2, r2, #2
 8007a44:	f107 010c 	add.w	r1, r7, #12
 8007a48:	300c      	adds	r0, #12
 8007a4a:	f7fe fbe3 	bl	8006214 <memcpy>
 8007a4e:	2201      	movs	r2, #1
 8007a50:	4629      	mov	r1, r5
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 fd36 	bl	80084c4 <__lshift>
 8007a58:	9b00      	ldr	r3, [sp, #0]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	9301      	str	r3, [sp, #4]
 8007a5e:	9b00      	ldr	r3, [sp, #0]
 8007a60:	444b      	add	r3, r9
 8007a62:	9307      	str	r3, [sp, #28]
 8007a64:	9b02      	ldr	r3, [sp, #8]
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	46b8      	mov	r8, r7
 8007a6c:	9306      	str	r3, [sp, #24]
 8007a6e:	4607      	mov	r7, r0
 8007a70:	9b01      	ldr	r3, [sp, #4]
 8007a72:	4631      	mov	r1, r6
 8007a74:	3b01      	subs	r3, #1
 8007a76:	4658      	mov	r0, fp
 8007a78:	9302      	str	r3, [sp, #8]
 8007a7a:	f7ff fa69 	bl	8006f50 <quorem>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	3330      	adds	r3, #48	; 0x30
 8007a82:	9004      	str	r0, [sp, #16]
 8007a84:	4641      	mov	r1, r8
 8007a86:	4658      	mov	r0, fp
 8007a88:	9308      	str	r3, [sp, #32]
 8007a8a:	f000 fd87 	bl	800859c <__mcmp>
 8007a8e:	463a      	mov	r2, r7
 8007a90:	4681      	mov	r9, r0
 8007a92:	4631      	mov	r1, r6
 8007a94:	4620      	mov	r0, r4
 8007a96:	f000 fd9d 	bl	80085d4 <__mdiff>
 8007a9a:	68c2      	ldr	r2, [r0, #12]
 8007a9c:	9b08      	ldr	r3, [sp, #32]
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	bb02      	cbnz	r2, 8007ae4 <_dtoa_r+0xa7c>
 8007aa2:	4601      	mov	r1, r0
 8007aa4:	4658      	mov	r0, fp
 8007aa6:	f000 fd79 	bl	800859c <__mcmp>
 8007aaa:	9b08      	ldr	r3, [sp, #32]
 8007aac:	4602      	mov	r2, r0
 8007aae:	4629      	mov	r1, r5
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007ab6:	f000 fb33 	bl	8008120 <_Bfree>
 8007aba:	9b05      	ldr	r3, [sp, #20]
 8007abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007abe:	9d01      	ldr	r5, [sp, #4]
 8007ac0:	ea43 0102 	orr.w	r1, r3, r2
 8007ac4:	9b06      	ldr	r3, [sp, #24]
 8007ac6:	430b      	orrs	r3, r1
 8007ac8:	9b08      	ldr	r3, [sp, #32]
 8007aca:	d10d      	bne.n	8007ae8 <_dtoa_r+0xa80>
 8007acc:	2b39      	cmp	r3, #57	; 0x39
 8007ace:	d029      	beq.n	8007b24 <_dtoa_r+0xabc>
 8007ad0:	f1b9 0f00 	cmp.w	r9, #0
 8007ad4:	dd01      	ble.n	8007ada <_dtoa_r+0xa72>
 8007ad6:	9b04      	ldr	r3, [sp, #16]
 8007ad8:	3331      	adds	r3, #49	; 0x31
 8007ada:	9a02      	ldr	r2, [sp, #8]
 8007adc:	7013      	strb	r3, [r2, #0]
 8007ade:	e774      	b.n	80079ca <_dtoa_r+0x962>
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	e7b9      	b.n	8007a58 <_dtoa_r+0x9f0>
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	e7e2      	b.n	8007aae <_dtoa_r+0xa46>
 8007ae8:	f1b9 0f00 	cmp.w	r9, #0
 8007aec:	db06      	blt.n	8007afc <_dtoa_r+0xa94>
 8007aee:	9905      	ldr	r1, [sp, #20]
 8007af0:	ea41 0909 	orr.w	r9, r1, r9
 8007af4:	9906      	ldr	r1, [sp, #24]
 8007af6:	ea59 0101 	orrs.w	r1, r9, r1
 8007afa:	d120      	bne.n	8007b3e <_dtoa_r+0xad6>
 8007afc:	2a00      	cmp	r2, #0
 8007afe:	ddec      	ble.n	8007ada <_dtoa_r+0xa72>
 8007b00:	4659      	mov	r1, fp
 8007b02:	2201      	movs	r2, #1
 8007b04:	4620      	mov	r0, r4
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	f000 fcdc 	bl	80084c4 <__lshift>
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	4683      	mov	fp, r0
 8007b10:	f000 fd44 	bl	800859c <__mcmp>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	9b01      	ldr	r3, [sp, #4]
 8007b18:	dc02      	bgt.n	8007b20 <_dtoa_r+0xab8>
 8007b1a:	d1de      	bne.n	8007ada <_dtoa_r+0xa72>
 8007b1c:	07da      	lsls	r2, r3, #31
 8007b1e:	d5dc      	bpl.n	8007ada <_dtoa_r+0xa72>
 8007b20:	2b39      	cmp	r3, #57	; 0x39
 8007b22:	d1d8      	bne.n	8007ad6 <_dtoa_r+0xa6e>
 8007b24:	9a02      	ldr	r2, [sp, #8]
 8007b26:	2339      	movs	r3, #57	; 0x39
 8007b28:	7013      	strb	r3, [r2, #0]
 8007b2a:	462b      	mov	r3, r5
 8007b2c:	461d      	mov	r5, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b34:	2a39      	cmp	r2, #57	; 0x39
 8007b36:	d050      	beq.n	8007bda <_dtoa_r+0xb72>
 8007b38:	3201      	adds	r2, #1
 8007b3a:	701a      	strb	r2, [r3, #0]
 8007b3c:	e745      	b.n	80079ca <_dtoa_r+0x962>
 8007b3e:	2a00      	cmp	r2, #0
 8007b40:	dd03      	ble.n	8007b4a <_dtoa_r+0xae2>
 8007b42:	2b39      	cmp	r3, #57	; 0x39
 8007b44:	d0ee      	beq.n	8007b24 <_dtoa_r+0xabc>
 8007b46:	3301      	adds	r3, #1
 8007b48:	e7c7      	b.n	8007ada <_dtoa_r+0xa72>
 8007b4a:	9a01      	ldr	r2, [sp, #4]
 8007b4c:	9907      	ldr	r1, [sp, #28]
 8007b4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007b52:	428a      	cmp	r2, r1
 8007b54:	d02a      	beq.n	8007bac <_dtoa_r+0xb44>
 8007b56:	4659      	mov	r1, fp
 8007b58:	2300      	movs	r3, #0
 8007b5a:	220a      	movs	r2, #10
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f000 fb01 	bl	8008164 <__multadd>
 8007b62:	45b8      	cmp	r8, r7
 8007b64:	4683      	mov	fp, r0
 8007b66:	f04f 0300 	mov.w	r3, #0
 8007b6a:	f04f 020a 	mov.w	r2, #10
 8007b6e:	4641      	mov	r1, r8
 8007b70:	4620      	mov	r0, r4
 8007b72:	d107      	bne.n	8007b84 <_dtoa_r+0xb1c>
 8007b74:	f000 faf6 	bl	8008164 <__multadd>
 8007b78:	4680      	mov	r8, r0
 8007b7a:	4607      	mov	r7, r0
 8007b7c:	9b01      	ldr	r3, [sp, #4]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	e775      	b.n	8007a70 <_dtoa_r+0xa08>
 8007b84:	f000 faee 	bl	8008164 <__multadd>
 8007b88:	4639      	mov	r1, r7
 8007b8a:	4680      	mov	r8, r0
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	220a      	movs	r2, #10
 8007b90:	4620      	mov	r0, r4
 8007b92:	f000 fae7 	bl	8008164 <__multadd>
 8007b96:	4607      	mov	r7, r0
 8007b98:	e7f0      	b.n	8007b7c <_dtoa_r+0xb14>
 8007b9a:	f1b9 0f00 	cmp.w	r9, #0
 8007b9e:	9a00      	ldr	r2, [sp, #0]
 8007ba0:	bfcc      	ite	gt
 8007ba2:	464d      	movgt	r5, r9
 8007ba4:	2501      	movle	r5, #1
 8007ba6:	4415      	add	r5, r2
 8007ba8:	f04f 0800 	mov.w	r8, #0
 8007bac:	4659      	mov	r1, fp
 8007bae:	2201      	movs	r2, #1
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	f000 fc86 	bl	80084c4 <__lshift>
 8007bb8:	4631      	mov	r1, r6
 8007bba:	4683      	mov	fp, r0
 8007bbc:	f000 fcee 	bl	800859c <__mcmp>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	dcb2      	bgt.n	8007b2a <_dtoa_r+0xac2>
 8007bc4:	d102      	bne.n	8007bcc <_dtoa_r+0xb64>
 8007bc6:	9b01      	ldr	r3, [sp, #4]
 8007bc8:	07db      	lsls	r3, r3, #31
 8007bca:	d4ae      	bmi.n	8007b2a <_dtoa_r+0xac2>
 8007bcc:	462b      	mov	r3, r5
 8007bce:	461d      	mov	r5, r3
 8007bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bd4:	2a30      	cmp	r2, #48	; 0x30
 8007bd6:	d0fa      	beq.n	8007bce <_dtoa_r+0xb66>
 8007bd8:	e6f7      	b.n	80079ca <_dtoa_r+0x962>
 8007bda:	9a00      	ldr	r2, [sp, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d1a5      	bne.n	8007b2c <_dtoa_r+0xac4>
 8007be0:	f10a 0a01 	add.w	sl, sl, #1
 8007be4:	2331      	movs	r3, #49	; 0x31
 8007be6:	e779      	b.n	8007adc <_dtoa_r+0xa74>
 8007be8:	4b13      	ldr	r3, [pc, #76]	; (8007c38 <_dtoa_r+0xbd0>)
 8007bea:	f7ff baaf 	b.w	800714c <_dtoa_r+0xe4>
 8007bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f47f aa86 	bne.w	8007102 <_dtoa_r+0x9a>
 8007bf6:	4b11      	ldr	r3, [pc, #68]	; (8007c3c <_dtoa_r+0xbd4>)
 8007bf8:	f7ff baa8 	b.w	800714c <_dtoa_r+0xe4>
 8007bfc:	f1b9 0f00 	cmp.w	r9, #0
 8007c00:	dc03      	bgt.n	8007c0a <_dtoa_r+0xba2>
 8007c02:	9b05      	ldr	r3, [sp, #20]
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	f73f aec9 	bgt.w	800799c <_dtoa_r+0x934>
 8007c0a:	9d00      	ldr	r5, [sp, #0]
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	4658      	mov	r0, fp
 8007c10:	f7ff f99e 	bl	8006f50 <quorem>
 8007c14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007c18:	f805 3b01 	strb.w	r3, [r5], #1
 8007c1c:	9a00      	ldr	r2, [sp, #0]
 8007c1e:	1aaa      	subs	r2, r5, r2
 8007c20:	4591      	cmp	r9, r2
 8007c22:	ddba      	ble.n	8007b9a <_dtoa_r+0xb32>
 8007c24:	4659      	mov	r1, fp
 8007c26:	2300      	movs	r3, #0
 8007c28:	220a      	movs	r2, #10
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f000 fa9a 	bl	8008164 <__multadd>
 8007c30:	4683      	mov	fp, r0
 8007c32:	e7eb      	b.n	8007c0c <_dtoa_r+0xba4>
 8007c34:	08009073 	.word	0x08009073
 8007c38:	08008fcc 	.word	0x08008fcc
 8007c3c:	08008ff0 	.word	0x08008ff0

08007c40 <__sflush_r>:
 8007c40:	898a      	ldrh	r2, [r1, #12]
 8007c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c46:	4605      	mov	r5, r0
 8007c48:	0710      	lsls	r0, r2, #28
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	d458      	bmi.n	8007d00 <__sflush_r+0xc0>
 8007c4e:	684b      	ldr	r3, [r1, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	dc05      	bgt.n	8007c60 <__sflush_r+0x20>
 8007c54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	dc02      	bgt.n	8007c60 <__sflush_r+0x20>
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c62:	2e00      	cmp	r6, #0
 8007c64:	d0f9      	beq.n	8007c5a <__sflush_r+0x1a>
 8007c66:	2300      	movs	r3, #0
 8007c68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c6c:	682f      	ldr	r7, [r5, #0]
 8007c6e:	602b      	str	r3, [r5, #0]
 8007c70:	d032      	beq.n	8007cd8 <__sflush_r+0x98>
 8007c72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	075a      	lsls	r2, r3, #29
 8007c78:	d505      	bpl.n	8007c86 <__sflush_r+0x46>
 8007c7a:	6863      	ldr	r3, [r4, #4]
 8007c7c:	1ac0      	subs	r0, r0, r3
 8007c7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c80:	b10b      	cbz	r3, 8007c86 <__sflush_r+0x46>
 8007c82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c84:	1ac0      	subs	r0, r0, r3
 8007c86:	2300      	movs	r3, #0
 8007c88:	4602      	mov	r2, r0
 8007c8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c8c:	6a21      	ldr	r1, [r4, #32]
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b0      	blx	r6
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	d106      	bne.n	8007ca6 <__sflush_r+0x66>
 8007c98:	6829      	ldr	r1, [r5, #0]
 8007c9a:	291d      	cmp	r1, #29
 8007c9c:	d82c      	bhi.n	8007cf8 <__sflush_r+0xb8>
 8007c9e:	4a2a      	ldr	r2, [pc, #168]	; (8007d48 <__sflush_r+0x108>)
 8007ca0:	40ca      	lsrs	r2, r1
 8007ca2:	07d6      	lsls	r6, r2, #31
 8007ca4:	d528      	bpl.n	8007cf8 <__sflush_r+0xb8>
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	6062      	str	r2, [r4, #4]
 8007caa:	04d9      	lsls	r1, r3, #19
 8007cac:	6922      	ldr	r2, [r4, #16]
 8007cae:	6022      	str	r2, [r4, #0]
 8007cb0:	d504      	bpl.n	8007cbc <__sflush_r+0x7c>
 8007cb2:	1c42      	adds	r2, r0, #1
 8007cb4:	d101      	bne.n	8007cba <__sflush_r+0x7a>
 8007cb6:	682b      	ldr	r3, [r5, #0]
 8007cb8:	b903      	cbnz	r3, 8007cbc <__sflush_r+0x7c>
 8007cba:	6560      	str	r0, [r4, #84]	; 0x54
 8007cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cbe:	602f      	str	r7, [r5, #0]
 8007cc0:	2900      	cmp	r1, #0
 8007cc2:	d0ca      	beq.n	8007c5a <__sflush_r+0x1a>
 8007cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cc8:	4299      	cmp	r1, r3
 8007cca:	d002      	beq.n	8007cd2 <__sflush_r+0x92>
 8007ccc:	4628      	mov	r0, r5
 8007cce:	f7fe fab7 	bl	8006240 <_free_r>
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	6360      	str	r0, [r4, #52]	; 0x34
 8007cd6:	e7c1      	b.n	8007c5c <__sflush_r+0x1c>
 8007cd8:	6a21      	ldr	r1, [r4, #32]
 8007cda:	2301      	movs	r3, #1
 8007cdc:	4628      	mov	r0, r5
 8007cde:	47b0      	blx	r6
 8007ce0:	1c41      	adds	r1, r0, #1
 8007ce2:	d1c7      	bne.n	8007c74 <__sflush_r+0x34>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0c4      	beq.n	8007c74 <__sflush_r+0x34>
 8007cea:	2b1d      	cmp	r3, #29
 8007cec:	d001      	beq.n	8007cf2 <__sflush_r+0xb2>
 8007cee:	2b16      	cmp	r3, #22
 8007cf0:	d101      	bne.n	8007cf6 <__sflush_r+0xb6>
 8007cf2:	602f      	str	r7, [r5, #0]
 8007cf4:	e7b1      	b.n	8007c5a <__sflush_r+0x1a>
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cfc:	81a3      	strh	r3, [r4, #12]
 8007cfe:	e7ad      	b.n	8007c5c <__sflush_r+0x1c>
 8007d00:	690f      	ldr	r7, [r1, #16]
 8007d02:	2f00      	cmp	r7, #0
 8007d04:	d0a9      	beq.n	8007c5a <__sflush_r+0x1a>
 8007d06:	0793      	lsls	r3, r2, #30
 8007d08:	680e      	ldr	r6, [r1, #0]
 8007d0a:	bf08      	it	eq
 8007d0c:	694b      	ldreq	r3, [r1, #20]
 8007d0e:	600f      	str	r7, [r1, #0]
 8007d10:	bf18      	it	ne
 8007d12:	2300      	movne	r3, #0
 8007d14:	eba6 0807 	sub.w	r8, r6, r7
 8007d18:	608b      	str	r3, [r1, #8]
 8007d1a:	f1b8 0f00 	cmp.w	r8, #0
 8007d1e:	dd9c      	ble.n	8007c5a <__sflush_r+0x1a>
 8007d20:	6a21      	ldr	r1, [r4, #32]
 8007d22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d24:	4643      	mov	r3, r8
 8007d26:	463a      	mov	r2, r7
 8007d28:	4628      	mov	r0, r5
 8007d2a:	47b0      	blx	r6
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	dc06      	bgt.n	8007d3e <__sflush_r+0xfe>
 8007d30:	89a3      	ldrh	r3, [r4, #12]
 8007d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d36:	81a3      	strh	r3, [r4, #12]
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	e78e      	b.n	8007c5c <__sflush_r+0x1c>
 8007d3e:	4407      	add	r7, r0
 8007d40:	eba8 0800 	sub.w	r8, r8, r0
 8007d44:	e7e9      	b.n	8007d1a <__sflush_r+0xda>
 8007d46:	bf00      	nop
 8007d48:	20400001 	.word	0x20400001

08007d4c <_fflush_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	690b      	ldr	r3, [r1, #16]
 8007d50:	4605      	mov	r5, r0
 8007d52:	460c      	mov	r4, r1
 8007d54:	b913      	cbnz	r3, 8007d5c <_fflush_r+0x10>
 8007d56:	2500      	movs	r5, #0
 8007d58:	4628      	mov	r0, r5
 8007d5a:	bd38      	pop	{r3, r4, r5, pc}
 8007d5c:	b118      	cbz	r0, 8007d66 <_fflush_r+0x1a>
 8007d5e:	6983      	ldr	r3, [r0, #24]
 8007d60:	b90b      	cbnz	r3, 8007d66 <_fflush_r+0x1a>
 8007d62:	f000 f887 	bl	8007e74 <__sinit>
 8007d66:	4b14      	ldr	r3, [pc, #80]	; (8007db8 <_fflush_r+0x6c>)
 8007d68:	429c      	cmp	r4, r3
 8007d6a:	d11b      	bne.n	8007da4 <_fflush_r+0x58>
 8007d6c:	686c      	ldr	r4, [r5, #4]
 8007d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0ef      	beq.n	8007d56 <_fflush_r+0xa>
 8007d76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d78:	07d0      	lsls	r0, r2, #31
 8007d7a:	d404      	bmi.n	8007d86 <_fflush_r+0x3a>
 8007d7c:	0599      	lsls	r1, r3, #22
 8007d7e:	d402      	bmi.n	8007d86 <_fflush_r+0x3a>
 8007d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d82:	f000 f91a 	bl	8007fba <__retarget_lock_acquire_recursive>
 8007d86:	4628      	mov	r0, r5
 8007d88:	4621      	mov	r1, r4
 8007d8a:	f7ff ff59 	bl	8007c40 <__sflush_r>
 8007d8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d90:	07da      	lsls	r2, r3, #31
 8007d92:	4605      	mov	r5, r0
 8007d94:	d4e0      	bmi.n	8007d58 <_fflush_r+0xc>
 8007d96:	89a3      	ldrh	r3, [r4, #12]
 8007d98:	059b      	lsls	r3, r3, #22
 8007d9a:	d4dd      	bmi.n	8007d58 <_fflush_r+0xc>
 8007d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d9e:	f000 f90d 	bl	8007fbc <__retarget_lock_release_recursive>
 8007da2:	e7d9      	b.n	8007d58 <_fflush_r+0xc>
 8007da4:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <_fflush_r+0x70>)
 8007da6:	429c      	cmp	r4, r3
 8007da8:	d101      	bne.n	8007dae <_fflush_r+0x62>
 8007daa:	68ac      	ldr	r4, [r5, #8]
 8007dac:	e7df      	b.n	8007d6e <_fflush_r+0x22>
 8007dae:	4b04      	ldr	r3, [pc, #16]	; (8007dc0 <_fflush_r+0x74>)
 8007db0:	429c      	cmp	r4, r3
 8007db2:	bf08      	it	eq
 8007db4:	68ec      	ldreq	r4, [r5, #12]
 8007db6:	e7da      	b.n	8007d6e <_fflush_r+0x22>
 8007db8:	080090a4 	.word	0x080090a4
 8007dbc:	080090c4 	.word	0x080090c4
 8007dc0:	08009084 	.word	0x08009084

08007dc4 <std>:
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	b510      	push	{r4, lr}
 8007dc8:	4604      	mov	r4, r0
 8007dca:	e9c0 3300 	strd	r3, r3, [r0]
 8007dce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dd2:	6083      	str	r3, [r0, #8]
 8007dd4:	8181      	strh	r1, [r0, #12]
 8007dd6:	6643      	str	r3, [r0, #100]	; 0x64
 8007dd8:	81c2      	strh	r2, [r0, #14]
 8007dda:	6183      	str	r3, [r0, #24]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	2208      	movs	r2, #8
 8007de0:	305c      	adds	r0, #92	; 0x5c
 8007de2:	f7fe fa25 	bl	8006230 <memset>
 8007de6:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <std+0x38>)
 8007de8:	6263      	str	r3, [r4, #36]	; 0x24
 8007dea:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <std+0x3c>)
 8007dec:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dee:	4b05      	ldr	r3, [pc, #20]	; (8007e04 <std+0x40>)
 8007df0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007df2:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <std+0x44>)
 8007df4:	6224      	str	r4, [r4, #32]
 8007df6:	6323      	str	r3, [r4, #48]	; 0x30
 8007df8:	bd10      	pop	{r4, pc}
 8007dfa:	bf00      	nop
 8007dfc:	08008afd 	.word	0x08008afd
 8007e00:	08008b1f 	.word	0x08008b1f
 8007e04:	08008b57 	.word	0x08008b57
 8007e08:	08008b7b 	.word	0x08008b7b

08007e0c <_cleanup_r>:
 8007e0c:	4901      	ldr	r1, [pc, #4]	; (8007e14 <_cleanup_r+0x8>)
 8007e0e:	f000 b8af 	b.w	8007f70 <_fwalk_reent>
 8007e12:	bf00      	nop
 8007e14:	08007d4d 	.word	0x08007d4d

08007e18 <__sfmoreglue>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	1e4a      	subs	r2, r1, #1
 8007e1c:	2568      	movs	r5, #104	; 0x68
 8007e1e:	4355      	muls	r5, r2
 8007e20:	460e      	mov	r6, r1
 8007e22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e26:	f7fe fa5b 	bl	80062e0 <_malloc_r>
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	b140      	cbz	r0, 8007e40 <__sfmoreglue+0x28>
 8007e2e:	2100      	movs	r1, #0
 8007e30:	e9c0 1600 	strd	r1, r6, [r0]
 8007e34:	300c      	adds	r0, #12
 8007e36:	60a0      	str	r0, [r4, #8]
 8007e38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e3c:	f7fe f9f8 	bl	8006230 <memset>
 8007e40:	4620      	mov	r0, r4
 8007e42:	bd70      	pop	{r4, r5, r6, pc}

08007e44 <__sfp_lock_acquire>:
 8007e44:	4801      	ldr	r0, [pc, #4]	; (8007e4c <__sfp_lock_acquire+0x8>)
 8007e46:	f000 b8b8 	b.w	8007fba <__retarget_lock_acquire_recursive>
 8007e4a:	bf00      	nop
 8007e4c:	20000b74 	.word	0x20000b74

08007e50 <__sfp_lock_release>:
 8007e50:	4801      	ldr	r0, [pc, #4]	; (8007e58 <__sfp_lock_release+0x8>)
 8007e52:	f000 b8b3 	b.w	8007fbc <__retarget_lock_release_recursive>
 8007e56:	bf00      	nop
 8007e58:	20000b74 	.word	0x20000b74

08007e5c <__sinit_lock_acquire>:
 8007e5c:	4801      	ldr	r0, [pc, #4]	; (8007e64 <__sinit_lock_acquire+0x8>)
 8007e5e:	f000 b8ac 	b.w	8007fba <__retarget_lock_acquire_recursive>
 8007e62:	bf00      	nop
 8007e64:	20000b6f 	.word	0x20000b6f

08007e68 <__sinit_lock_release>:
 8007e68:	4801      	ldr	r0, [pc, #4]	; (8007e70 <__sinit_lock_release+0x8>)
 8007e6a:	f000 b8a7 	b.w	8007fbc <__retarget_lock_release_recursive>
 8007e6e:	bf00      	nop
 8007e70:	20000b6f 	.word	0x20000b6f

08007e74 <__sinit>:
 8007e74:	b510      	push	{r4, lr}
 8007e76:	4604      	mov	r4, r0
 8007e78:	f7ff fff0 	bl	8007e5c <__sinit_lock_acquire>
 8007e7c:	69a3      	ldr	r3, [r4, #24]
 8007e7e:	b11b      	cbz	r3, 8007e88 <__sinit+0x14>
 8007e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e84:	f7ff bff0 	b.w	8007e68 <__sinit_lock_release>
 8007e88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e8c:	6523      	str	r3, [r4, #80]	; 0x50
 8007e8e:	4b13      	ldr	r3, [pc, #76]	; (8007edc <__sinit+0x68>)
 8007e90:	4a13      	ldr	r2, [pc, #76]	; (8007ee0 <__sinit+0x6c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e96:	42a3      	cmp	r3, r4
 8007e98:	bf04      	itt	eq
 8007e9a:	2301      	moveq	r3, #1
 8007e9c:	61a3      	streq	r3, [r4, #24]
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f000 f820 	bl	8007ee4 <__sfp>
 8007ea4:	6060      	str	r0, [r4, #4]
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f000 f81c 	bl	8007ee4 <__sfp>
 8007eac:	60a0      	str	r0, [r4, #8]
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f000 f818 	bl	8007ee4 <__sfp>
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	60e0      	str	r0, [r4, #12]
 8007eb8:	2104      	movs	r1, #4
 8007eba:	6860      	ldr	r0, [r4, #4]
 8007ebc:	f7ff ff82 	bl	8007dc4 <std>
 8007ec0:	68a0      	ldr	r0, [r4, #8]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	2109      	movs	r1, #9
 8007ec6:	f7ff ff7d 	bl	8007dc4 <std>
 8007eca:	68e0      	ldr	r0, [r4, #12]
 8007ecc:	2202      	movs	r2, #2
 8007ece:	2112      	movs	r1, #18
 8007ed0:	f7ff ff78 	bl	8007dc4 <std>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	61a3      	str	r3, [r4, #24]
 8007ed8:	e7d2      	b.n	8007e80 <__sinit+0xc>
 8007eda:	bf00      	nop
 8007edc:	08008fb8 	.word	0x08008fb8
 8007ee0:	08007e0d 	.word	0x08007e0d

08007ee4 <__sfp>:
 8007ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee6:	4607      	mov	r7, r0
 8007ee8:	f7ff ffac 	bl	8007e44 <__sfp_lock_acquire>
 8007eec:	4b1e      	ldr	r3, [pc, #120]	; (8007f68 <__sfp+0x84>)
 8007eee:	681e      	ldr	r6, [r3, #0]
 8007ef0:	69b3      	ldr	r3, [r6, #24]
 8007ef2:	b913      	cbnz	r3, 8007efa <__sfp+0x16>
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	f7ff ffbd 	bl	8007e74 <__sinit>
 8007efa:	3648      	adds	r6, #72	; 0x48
 8007efc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f00:	3b01      	subs	r3, #1
 8007f02:	d503      	bpl.n	8007f0c <__sfp+0x28>
 8007f04:	6833      	ldr	r3, [r6, #0]
 8007f06:	b30b      	cbz	r3, 8007f4c <__sfp+0x68>
 8007f08:	6836      	ldr	r6, [r6, #0]
 8007f0a:	e7f7      	b.n	8007efc <__sfp+0x18>
 8007f0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f10:	b9d5      	cbnz	r5, 8007f48 <__sfp+0x64>
 8007f12:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <__sfp+0x88>)
 8007f14:	60e3      	str	r3, [r4, #12]
 8007f16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f1a:	6665      	str	r5, [r4, #100]	; 0x64
 8007f1c:	f000 f84c 	bl	8007fb8 <__retarget_lock_init_recursive>
 8007f20:	f7ff ff96 	bl	8007e50 <__sfp_lock_release>
 8007f24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f2c:	6025      	str	r5, [r4, #0]
 8007f2e:	61a5      	str	r5, [r4, #24]
 8007f30:	2208      	movs	r2, #8
 8007f32:	4629      	mov	r1, r5
 8007f34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f38:	f7fe f97a 	bl	8006230 <memset>
 8007f3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f44:	4620      	mov	r0, r4
 8007f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f48:	3468      	adds	r4, #104	; 0x68
 8007f4a:	e7d9      	b.n	8007f00 <__sfp+0x1c>
 8007f4c:	2104      	movs	r1, #4
 8007f4e:	4638      	mov	r0, r7
 8007f50:	f7ff ff62 	bl	8007e18 <__sfmoreglue>
 8007f54:	4604      	mov	r4, r0
 8007f56:	6030      	str	r0, [r6, #0]
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d1d5      	bne.n	8007f08 <__sfp+0x24>
 8007f5c:	f7ff ff78 	bl	8007e50 <__sfp_lock_release>
 8007f60:	230c      	movs	r3, #12
 8007f62:	603b      	str	r3, [r7, #0]
 8007f64:	e7ee      	b.n	8007f44 <__sfp+0x60>
 8007f66:	bf00      	nop
 8007f68:	08008fb8 	.word	0x08008fb8
 8007f6c:	ffff0001 	.word	0xffff0001

08007f70 <_fwalk_reent>:
 8007f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f74:	4606      	mov	r6, r0
 8007f76:	4688      	mov	r8, r1
 8007f78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f7c:	2700      	movs	r7, #0
 8007f7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f82:	f1b9 0901 	subs.w	r9, r9, #1
 8007f86:	d505      	bpl.n	8007f94 <_fwalk_reent+0x24>
 8007f88:	6824      	ldr	r4, [r4, #0]
 8007f8a:	2c00      	cmp	r4, #0
 8007f8c:	d1f7      	bne.n	8007f7e <_fwalk_reent+0xe>
 8007f8e:	4638      	mov	r0, r7
 8007f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f94:	89ab      	ldrh	r3, [r5, #12]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d907      	bls.n	8007faa <_fwalk_reent+0x3a>
 8007f9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	d003      	beq.n	8007faa <_fwalk_reent+0x3a>
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	47c0      	blx	r8
 8007fa8:	4307      	orrs	r7, r0
 8007faa:	3568      	adds	r5, #104	; 0x68
 8007fac:	e7e9      	b.n	8007f82 <_fwalk_reent+0x12>
	...

08007fb0 <_localeconv_r>:
 8007fb0:	4800      	ldr	r0, [pc, #0]	; (8007fb4 <_localeconv_r+0x4>)
 8007fb2:	4770      	bx	lr
 8007fb4:	200003c8 	.word	0x200003c8

08007fb8 <__retarget_lock_init_recursive>:
 8007fb8:	4770      	bx	lr

08007fba <__retarget_lock_acquire_recursive>:
 8007fba:	4770      	bx	lr

08007fbc <__retarget_lock_release_recursive>:
 8007fbc:	4770      	bx	lr

08007fbe <__swhatbuf_r>:
 8007fbe:	b570      	push	{r4, r5, r6, lr}
 8007fc0:	460e      	mov	r6, r1
 8007fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc6:	2900      	cmp	r1, #0
 8007fc8:	b096      	sub	sp, #88	; 0x58
 8007fca:	4614      	mov	r4, r2
 8007fcc:	461d      	mov	r5, r3
 8007fce:	da07      	bge.n	8007fe0 <__swhatbuf_r+0x22>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	602b      	str	r3, [r5, #0]
 8007fd4:	89b3      	ldrh	r3, [r6, #12]
 8007fd6:	061a      	lsls	r2, r3, #24
 8007fd8:	d410      	bmi.n	8007ffc <__swhatbuf_r+0x3e>
 8007fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fde:	e00e      	b.n	8007ffe <__swhatbuf_r+0x40>
 8007fe0:	466a      	mov	r2, sp
 8007fe2:	f000 fe21 	bl	8008c28 <_fstat_r>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	dbf2      	blt.n	8007fd0 <__swhatbuf_r+0x12>
 8007fea:	9a01      	ldr	r2, [sp, #4]
 8007fec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ff0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ff4:	425a      	negs	r2, r3
 8007ff6:	415a      	adcs	r2, r3
 8007ff8:	602a      	str	r2, [r5, #0]
 8007ffa:	e7ee      	b.n	8007fda <__swhatbuf_r+0x1c>
 8007ffc:	2340      	movs	r3, #64	; 0x40
 8007ffe:	2000      	movs	r0, #0
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	b016      	add	sp, #88	; 0x58
 8008004:	bd70      	pop	{r4, r5, r6, pc}
	...

08008008 <__smakebuf_r>:
 8008008:	898b      	ldrh	r3, [r1, #12]
 800800a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800800c:	079d      	lsls	r5, r3, #30
 800800e:	4606      	mov	r6, r0
 8008010:	460c      	mov	r4, r1
 8008012:	d507      	bpl.n	8008024 <__smakebuf_r+0x1c>
 8008014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	6123      	str	r3, [r4, #16]
 800801c:	2301      	movs	r3, #1
 800801e:	6163      	str	r3, [r4, #20]
 8008020:	b002      	add	sp, #8
 8008022:	bd70      	pop	{r4, r5, r6, pc}
 8008024:	ab01      	add	r3, sp, #4
 8008026:	466a      	mov	r2, sp
 8008028:	f7ff ffc9 	bl	8007fbe <__swhatbuf_r>
 800802c:	9900      	ldr	r1, [sp, #0]
 800802e:	4605      	mov	r5, r0
 8008030:	4630      	mov	r0, r6
 8008032:	f7fe f955 	bl	80062e0 <_malloc_r>
 8008036:	b948      	cbnz	r0, 800804c <__smakebuf_r+0x44>
 8008038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800803c:	059a      	lsls	r2, r3, #22
 800803e:	d4ef      	bmi.n	8008020 <__smakebuf_r+0x18>
 8008040:	f023 0303 	bic.w	r3, r3, #3
 8008044:	f043 0302 	orr.w	r3, r3, #2
 8008048:	81a3      	strh	r3, [r4, #12]
 800804a:	e7e3      	b.n	8008014 <__smakebuf_r+0xc>
 800804c:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <__smakebuf_r+0x7c>)
 800804e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	6020      	str	r0, [r4, #0]
 8008054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008058:	81a3      	strh	r3, [r4, #12]
 800805a:	9b00      	ldr	r3, [sp, #0]
 800805c:	6163      	str	r3, [r4, #20]
 800805e:	9b01      	ldr	r3, [sp, #4]
 8008060:	6120      	str	r0, [r4, #16]
 8008062:	b15b      	cbz	r3, 800807c <__smakebuf_r+0x74>
 8008064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008068:	4630      	mov	r0, r6
 800806a:	f000 fdef 	bl	8008c4c <_isatty_r>
 800806e:	b128      	cbz	r0, 800807c <__smakebuf_r+0x74>
 8008070:	89a3      	ldrh	r3, [r4, #12]
 8008072:	f023 0303 	bic.w	r3, r3, #3
 8008076:	f043 0301 	orr.w	r3, r3, #1
 800807a:	81a3      	strh	r3, [r4, #12]
 800807c:	89a0      	ldrh	r0, [r4, #12]
 800807e:	4305      	orrs	r5, r0
 8008080:	81a5      	strh	r5, [r4, #12]
 8008082:	e7cd      	b.n	8008020 <__smakebuf_r+0x18>
 8008084:	08007e0d 	.word	0x08007e0d

08008088 <__malloc_lock>:
 8008088:	4801      	ldr	r0, [pc, #4]	; (8008090 <__malloc_lock+0x8>)
 800808a:	f7ff bf96 	b.w	8007fba <__retarget_lock_acquire_recursive>
 800808e:	bf00      	nop
 8008090:	20000b70 	.word	0x20000b70

08008094 <__malloc_unlock>:
 8008094:	4801      	ldr	r0, [pc, #4]	; (800809c <__malloc_unlock+0x8>)
 8008096:	f7ff bf91 	b.w	8007fbc <__retarget_lock_release_recursive>
 800809a:	bf00      	nop
 800809c:	20000b70 	.word	0x20000b70

080080a0 <_Balloc>:
 80080a0:	b570      	push	{r4, r5, r6, lr}
 80080a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080a4:	4604      	mov	r4, r0
 80080a6:	460d      	mov	r5, r1
 80080a8:	b976      	cbnz	r6, 80080c8 <_Balloc+0x28>
 80080aa:	2010      	movs	r0, #16
 80080ac:	f7fe f8aa 	bl	8006204 <malloc>
 80080b0:	4602      	mov	r2, r0
 80080b2:	6260      	str	r0, [r4, #36]	; 0x24
 80080b4:	b920      	cbnz	r0, 80080c0 <_Balloc+0x20>
 80080b6:	4b18      	ldr	r3, [pc, #96]	; (8008118 <_Balloc+0x78>)
 80080b8:	4818      	ldr	r0, [pc, #96]	; (800811c <_Balloc+0x7c>)
 80080ba:	2166      	movs	r1, #102	; 0x66
 80080bc:	f000 fd74 	bl	8008ba8 <__assert_func>
 80080c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080c4:	6006      	str	r6, [r0, #0]
 80080c6:	60c6      	str	r6, [r0, #12]
 80080c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080ca:	68f3      	ldr	r3, [r6, #12]
 80080cc:	b183      	cbz	r3, 80080f0 <_Balloc+0x50>
 80080ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080d6:	b9b8      	cbnz	r0, 8008108 <_Balloc+0x68>
 80080d8:	2101      	movs	r1, #1
 80080da:	fa01 f605 	lsl.w	r6, r1, r5
 80080de:	1d72      	adds	r2, r6, #5
 80080e0:	0092      	lsls	r2, r2, #2
 80080e2:	4620      	mov	r0, r4
 80080e4:	f000 fb5a 	bl	800879c <_calloc_r>
 80080e8:	b160      	cbz	r0, 8008104 <_Balloc+0x64>
 80080ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080ee:	e00e      	b.n	800810e <_Balloc+0x6e>
 80080f0:	2221      	movs	r2, #33	; 0x21
 80080f2:	2104      	movs	r1, #4
 80080f4:	4620      	mov	r0, r4
 80080f6:	f000 fb51 	bl	800879c <_calloc_r>
 80080fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080fc:	60f0      	str	r0, [r6, #12]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1e4      	bne.n	80080ce <_Balloc+0x2e>
 8008104:	2000      	movs	r0, #0
 8008106:	bd70      	pop	{r4, r5, r6, pc}
 8008108:	6802      	ldr	r2, [r0, #0]
 800810a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800810e:	2300      	movs	r3, #0
 8008110:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008114:	e7f7      	b.n	8008106 <_Balloc+0x66>
 8008116:	bf00      	nop
 8008118:	08008ffd 	.word	0x08008ffd
 800811c:	080090e4 	.word	0x080090e4

08008120 <_Bfree>:
 8008120:	b570      	push	{r4, r5, r6, lr}
 8008122:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008124:	4605      	mov	r5, r0
 8008126:	460c      	mov	r4, r1
 8008128:	b976      	cbnz	r6, 8008148 <_Bfree+0x28>
 800812a:	2010      	movs	r0, #16
 800812c:	f7fe f86a 	bl	8006204 <malloc>
 8008130:	4602      	mov	r2, r0
 8008132:	6268      	str	r0, [r5, #36]	; 0x24
 8008134:	b920      	cbnz	r0, 8008140 <_Bfree+0x20>
 8008136:	4b09      	ldr	r3, [pc, #36]	; (800815c <_Bfree+0x3c>)
 8008138:	4809      	ldr	r0, [pc, #36]	; (8008160 <_Bfree+0x40>)
 800813a:	218a      	movs	r1, #138	; 0x8a
 800813c:	f000 fd34 	bl	8008ba8 <__assert_func>
 8008140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008144:	6006      	str	r6, [r0, #0]
 8008146:	60c6      	str	r6, [r0, #12]
 8008148:	b13c      	cbz	r4, 800815a <_Bfree+0x3a>
 800814a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800814c:	6862      	ldr	r2, [r4, #4]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008154:	6021      	str	r1, [r4, #0]
 8008156:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800815a:	bd70      	pop	{r4, r5, r6, pc}
 800815c:	08008ffd 	.word	0x08008ffd
 8008160:	080090e4 	.word	0x080090e4

08008164 <__multadd>:
 8008164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008168:	690e      	ldr	r6, [r1, #16]
 800816a:	4607      	mov	r7, r0
 800816c:	4698      	mov	r8, r3
 800816e:	460c      	mov	r4, r1
 8008170:	f101 0014 	add.w	r0, r1, #20
 8008174:	2300      	movs	r3, #0
 8008176:	6805      	ldr	r5, [r0, #0]
 8008178:	b2a9      	uxth	r1, r5
 800817a:	fb02 8101 	mla	r1, r2, r1, r8
 800817e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008182:	0c2d      	lsrs	r5, r5, #16
 8008184:	fb02 c505 	mla	r5, r2, r5, ip
 8008188:	b289      	uxth	r1, r1
 800818a:	3301      	adds	r3, #1
 800818c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008190:	429e      	cmp	r6, r3
 8008192:	f840 1b04 	str.w	r1, [r0], #4
 8008196:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800819a:	dcec      	bgt.n	8008176 <__multadd+0x12>
 800819c:	f1b8 0f00 	cmp.w	r8, #0
 80081a0:	d022      	beq.n	80081e8 <__multadd+0x84>
 80081a2:	68a3      	ldr	r3, [r4, #8]
 80081a4:	42b3      	cmp	r3, r6
 80081a6:	dc19      	bgt.n	80081dc <__multadd+0x78>
 80081a8:	6861      	ldr	r1, [r4, #4]
 80081aa:	4638      	mov	r0, r7
 80081ac:	3101      	adds	r1, #1
 80081ae:	f7ff ff77 	bl	80080a0 <_Balloc>
 80081b2:	4605      	mov	r5, r0
 80081b4:	b928      	cbnz	r0, 80081c2 <__multadd+0x5e>
 80081b6:	4602      	mov	r2, r0
 80081b8:	4b0d      	ldr	r3, [pc, #52]	; (80081f0 <__multadd+0x8c>)
 80081ba:	480e      	ldr	r0, [pc, #56]	; (80081f4 <__multadd+0x90>)
 80081bc:	21b5      	movs	r1, #181	; 0xb5
 80081be:	f000 fcf3 	bl	8008ba8 <__assert_func>
 80081c2:	6922      	ldr	r2, [r4, #16]
 80081c4:	3202      	adds	r2, #2
 80081c6:	f104 010c 	add.w	r1, r4, #12
 80081ca:	0092      	lsls	r2, r2, #2
 80081cc:	300c      	adds	r0, #12
 80081ce:	f7fe f821 	bl	8006214 <memcpy>
 80081d2:	4621      	mov	r1, r4
 80081d4:	4638      	mov	r0, r7
 80081d6:	f7ff ffa3 	bl	8008120 <_Bfree>
 80081da:	462c      	mov	r4, r5
 80081dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80081e0:	3601      	adds	r6, #1
 80081e2:	f8c3 8014 	str.w	r8, [r3, #20]
 80081e6:	6126      	str	r6, [r4, #16]
 80081e8:	4620      	mov	r0, r4
 80081ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ee:	bf00      	nop
 80081f0:	08009073 	.word	0x08009073
 80081f4:	080090e4 	.word	0x080090e4

080081f8 <__hi0bits>:
 80081f8:	0c03      	lsrs	r3, r0, #16
 80081fa:	041b      	lsls	r3, r3, #16
 80081fc:	b9d3      	cbnz	r3, 8008234 <__hi0bits+0x3c>
 80081fe:	0400      	lsls	r0, r0, #16
 8008200:	2310      	movs	r3, #16
 8008202:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008206:	bf04      	itt	eq
 8008208:	0200      	lsleq	r0, r0, #8
 800820a:	3308      	addeq	r3, #8
 800820c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008210:	bf04      	itt	eq
 8008212:	0100      	lsleq	r0, r0, #4
 8008214:	3304      	addeq	r3, #4
 8008216:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800821a:	bf04      	itt	eq
 800821c:	0080      	lsleq	r0, r0, #2
 800821e:	3302      	addeq	r3, #2
 8008220:	2800      	cmp	r0, #0
 8008222:	db05      	blt.n	8008230 <__hi0bits+0x38>
 8008224:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008228:	f103 0301 	add.w	r3, r3, #1
 800822c:	bf08      	it	eq
 800822e:	2320      	moveq	r3, #32
 8008230:	4618      	mov	r0, r3
 8008232:	4770      	bx	lr
 8008234:	2300      	movs	r3, #0
 8008236:	e7e4      	b.n	8008202 <__hi0bits+0xa>

08008238 <__lo0bits>:
 8008238:	6803      	ldr	r3, [r0, #0]
 800823a:	f013 0207 	ands.w	r2, r3, #7
 800823e:	4601      	mov	r1, r0
 8008240:	d00b      	beq.n	800825a <__lo0bits+0x22>
 8008242:	07da      	lsls	r2, r3, #31
 8008244:	d424      	bmi.n	8008290 <__lo0bits+0x58>
 8008246:	0798      	lsls	r0, r3, #30
 8008248:	bf49      	itett	mi
 800824a:	085b      	lsrmi	r3, r3, #1
 800824c:	089b      	lsrpl	r3, r3, #2
 800824e:	2001      	movmi	r0, #1
 8008250:	600b      	strmi	r3, [r1, #0]
 8008252:	bf5c      	itt	pl
 8008254:	600b      	strpl	r3, [r1, #0]
 8008256:	2002      	movpl	r0, #2
 8008258:	4770      	bx	lr
 800825a:	b298      	uxth	r0, r3
 800825c:	b9b0      	cbnz	r0, 800828c <__lo0bits+0x54>
 800825e:	0c1b      	lsrs	r3, r3, #16
 8008260:	2010      	movs	r0, #16
 8008262:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008266:	bf04      	itt	eq
 8008268:	0a1b      	lsreq	r3, r3, #8
 800826a:	3008      	addeq	r0, #8
 800826c:	071a      	lsls	r2, r3, #28
 800826e:	bf04      	itt	eq
 8008270:	091b      	lsreq	r3, r3, #4
 8008272:	3004      	addeq	r0, #4
 8008274:	079a      	lsls	r2, r3, #30
 8008276:	bf04      	itt	eq
 8008278:	089b      	lsreq	r3, r3, #2
 800827a:	3002      	addeq	r0, #2
 800827c:	07da      	lsls	r2, r3, #31
 800827e:	d403      	bmi.n	8008288 <__lo0bits+0x50>
 8008280:	085b      	lsrs	r3, r3, #1
 8008282:	f100 0001 	add.w	r0, r0, #1
 8008286:	d005      	beq.n	8008294 <__lo0bits+0x5c>
 8008288:	600b      	str	r3, [r1, #0]
 800828a:	4770      	bx	lr
 800828c:	4610      	mov	r0, r2
 800828e:	e7e8      	b.n	8008262 <__lo0bits+0x2a>
 8008290:	2000      	movs	r0, #0
 8008292:	4770      	bx	lr
 8008294:	2020      	movs	r0, #32
 8008296:	4770      	bx	lr

08008298 <__i2b>:
 8008298:	b510      	push	{r4, lr}
 800829a:	460c      	mov	r4, r1
 800829c:	2101      	movs	r1, #1
 800829e:	f7ff feff 	bl	80080a0 <_Balloc>
 80082a2:	4602      	mov	r2, r0
 80082a4:	b928      	cbnz	r0, 80082b2 <__i2b+0x1a>
 80082a6:	4b05      	ldr	r3, [pc, #20]	; (80082bc <__i2b+0x24>)
 80082a8:	4805      	ldr	r0, [pc, #20]	; (80082c0 <__i2b+0x28>)
 80082aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80082ae:	f000 fc7b 	bl	8008ba8 <__assert_func>
 80082b2:	2301      	movs	r3, #1
 80082b4:	6144      	str	r4, [r0, #20]
 80082b6:	6103      	str	r3, [r0, #16]
 80082b8:	bd10      	pop	{r4, pc}
 80082ba:	bf00      	nop
 80082bc:	08009073 	.word	0x08009073
 80082c0:	080090e4 	.word	0x080090e4

080082c4 <__multiply>:
 80082c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c8:	4614      	mov	r4, r2
 80082ca:	690a      	ldr	r2, [r1, #16]
 80082cc:	6923      	ldr	r3, [r4, #16]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	bfb8      	it	lt
 80082d2:	460b      	movlt	r3, r1
 80082d4:	460d      	mov	r5, r1
 80082d6:	bfbc      	itt	lt
 80082d8:	4625      	movlt	r5, r4
 80082da:	461c      	movlt	r4, r3
 80082dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80082e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80082e4:	68ab      	ldr	r3, [r5, #8]
 80082e6:	6869      	ldr	r1, [r5, #4]
 80082e8:	eb0a 0709 	add.w	r7, sl, r9
 80082ec:	42bb      	cmp	r3, r7
 80082ee:	b085      	sub	sp, #20
 80082f0:	bfb8      	it	lt
 80082f2:	3101      	addlt	r1, #1
 80082f4:	f7ff fed4 	bl	80080a0 <_Balloc>
 80082f8:	b930      	cbnz	r0, 8008308 <__multiply+0x44>
 80082fa:	4602      	mov	r2, r0
 80082fc:	4b42      	ldr	r3, [pc, #264]	; (8008408 <__multiply+0x144>)
 80082fe:	4843      	ldr	r0, [pc, #268]	; (800840c <__multiply+0x148>)
 8008300:	f240 115d 	movw	r1, #349	; 0x15d
 8008304:	f000 fc50 	bl	8008ba8 <__assert_func>
 8008308:	f100 0614 	add.w	r6, r0, #20
 800830c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008310:	4633      	mov	r3, r6
 8008312:	2200      	movs	r2, #0
 8008314:	4543      	cmp	r3, r8
 8008316:	d31e      	bcc.n	8008356 <__multiply+0x92>
 8008318:	f105 0c14 	add.w	ip, r5, #20
 800831c:	f104 0314 	add.w	r3, r4, #20
 8008320:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008324:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008328:	9202      	str	r2, [sp, #8]
 800832a:	ebac 0205 	sub.w	r2, ip, r5
 800832e:	3a15      	subs	r2, #21
 8008330:	f022 0203 	bic.w	r2, r2, #3
 8008334:	3204      	adds	r2, #4
 8008336:	f105 0115 	add.w	r1, r5, #21
 800833a:	458c      	cmp	ip, r1
 800833c:	bf38      	it	cc
 800833e:	2204      	movcc	r2, #4
 8008340:	9201      	str	r2, [sp, #4]
 8008342:	9a02      	ldr	r2, [sp, #8]
 8008344:	9303      	str	r3, [sp, #12]
 8008346:	429a      	cmp	r2, r3
 8008348:	d808      	bhi.n	800835c <__multiply+0x98>
 800834a:	2f00      	cmp	r7, #0
 800834c:	dc55      	bgt.n	80083fa <__multiply+0x136>
 800834e:	6107      	str	r7, [r0, #16]
 8008350:	b005      	add	sp, #20
 8008352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008356:	f843 2b04 	str.w	r2, [r3], #4
 800835a:	e7db      	b.n	8008314 <__multiply+0x50>
 800835c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008360:	f1ba 0f00 	cmp.w	sl, #0
 8008364:	d020      	beq.n	80083a8 <__multiply+0xe4>
 8008366:	f105 0e14 	add.w	lr, r5, #20
 800836a:	46b1      	mov	r9, r6
 800836c:	2200      	movs	r2, #0
 800836e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008372:	f8d9 b000 	ldr.w	fp, [r9]
 8008376:	b2a1      	uxth	r1, r4
 8008378:	fa1f fb8b 	uxth.w	fp, fp
 800837c:	fb0a b101 	mla	r1, sl, r1, fp
 8008380:	4411      	add	r1, r2
 8008382:	f8d9 2000 	ldr.w	r2, [r9]
 8008386:	0c24      	lsrs	r4, r4, #16
 8008388:	0c12      	lsrs	r2, r2, #16
 800838a:	fb0a 2404 	mla	r4, sl, r4, r2
 800838e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008392:	b289      	uxth	r1, r1
 8008394:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008398:	45f4      	cmp	ip, lr
 800839a:	f849 1b04 	str.w	r1, [r9], #4
 800839e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80083a2:	d8e4      	bhi.n	800836e <__multiply+0xaa>
 80083a4:	9901      	ldr	r1, [sp, #4]
 80083a6:	5072      	str	r2, [r6, r1]
 80083a8:	9a03      	ldr	r2, [sp, #12]
 80083aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80083ae:	3304      	adds	r3, #4
 80083b0:	f1b9 0f00 	cmp.w	r9, #0
 80083b4:	d01f      	beq.n	80083f6 <__multiply+0x132>
 80083b6:	6834      	ldr	r4, [r6, #0]
 80083b8:	f105 0114 	add.w	r1, r5, #20
 80083bc:	46b6      	mov	lr, r6
 80083be:	f04f 0a00 	mov.w	sl, #0
 80083c2:	880a      	ldrh	r2, [r1, #0]
 80083c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80083c8:	fb09 b202 	mla	r2, r9, r2, fp
 80083cc:	4492      	add	sl, r2
 80083ce:	b2a4      	uxth	r4, r4
 80083d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80083d4:	f84e 4b04 	str.w	r4, [lr], #4
 80083d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80083dc:	f8be 2000 	ldrh.w	r2, [lr]
 80083e0:	0c24      	lsrs	r4, r4, #16
 80083e2:	fb09 2404 	mla	r4, r9, r4, r2
 80083e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80083ea:	458c      	cmp	ip, r1
 80083ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80083f0:	d8e7      	bhi.n	80083c2 <__multiply+0xfe>
 80083f2:	9a01      	ldr	r2, [sp, #4]
 80083f4:	50b4      	str	r4, [r6, r2]
 80083f6:	3604      	adds	r6, #4
 80083f8:	e7a3      	b.n	8008342 <__multiply+0x7e>
 80083fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1a5      	bne.n	800834e <__multiply+0x8a>
 8008402:	3f01      	subs	r7, #1
 8008404:	e7a1      	b.n	800834a <__multiply+0x86>
 8008406:	bf00      	nop
 8008408:	08009073 	.word	0x08009073
 800840c:	080090e4 	.word	0x080090e4

08008410 <__pow5mult>:
 8008410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008414:	4615      	mov	r5, r2
 8008416:	f012 0203 	ands.w	r2, r2, #3
 800841a:	4606      	mov	r6, r0
 800841c:	460f      	mov	r7, r1
 800841e:	d007      	beq.n	8008430 <__pow5mult+0x20>
 8008420:	4c25      	ldr	r4, [pc, #148]	; (80084b8 <__pow5mult+0xa8>)
 8008422:	3a01      	subs	r2, #1
 8008424:	2300      	movs	r3, #0
 8008426:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800842a:	f7ff fe9b 	bl	8008164 <__multadd>
 800842e:	4607      	mov	r7, r0
 8008430:	10ad      	asrs	r5, r5, #2
 8008432:	d03d      	beq.n	80084b0 <__pow5mult+0xa0>
 8008434:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008436:	b97c      	cbnz	r4, 8008458 <__pow5mult+0x48>
 8008438:	2010      	movs	r0, #16
 800843a:	f7fd fee3 	bl	8006204 <malloc>
 800843e:	4602      	mov	r2, r0
 8008440:	6270      	str	r0, [r6, #36]	; 0x24
 8008442:	b928      	cbnz	r0, 8008450 <__pow5mult+0x40>
 8008444:	4b1d      	ldr	r3, [pc, #116]	; (80084bc <__pow5mult+0xac>)
 8008446:	481e      	ldr	r0, [pc, #120]	; (80084c0 <__pow5mult+0xb0>)
 8008448:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800844c:	f000 fbac 	bl	8008ba8 <__assert_func>
 8008450:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008454:	6004      	str	r4, [r0, #0]
 8008456:	60c4      	str	r4, [r0, #12]
 8008458:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800845c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008460:	b94c      	cbnz	r4, 8008476 <__pow5mult+0x66>
 8008462:	f240 2171 	movw	r1, #625	; 0x271
 8008466:	4630      	mov	r0, r6
 8008468:	f7ff ff16 	bl	8008298 <__i2b>
 800846c:	2300      	movs	r3, #0
 800846e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008472:	4604      	mov	r4, r0
 8008474:	6003      	str	r3, [r0, #0]
 8008476:	f04f 0900 	mov.w	r9, #0
 800847a:	07eb      	lsls	r3, r5, #31
 800847c:	d50a      	bpl.n	8008494 <__pow5mult+0x84>
 800847e:	4639      	mov	r1, r7
 8008480:	4622      	mov	r2, r4
 8008482:	4630      	mov	r0, r6
 8008484:	f7ff ff1e 	bl	80082c4 <__multiply>
 8008488:	4639      	mov	r1, r7
 800848a:	4680      	mov	r8, r0
 800848c:	4630      	mov	r0, r6
 800848e:	f7ff fe47 	bl	8008120 <_Bfree>
 8008492:	4647      	mov	r7, r8
 8008494:	106d      	asrs	r5, r5, #1
 8008496:	d00b      	beq.n	80084b0 <__pow5mult+0xa0>
 8008498:	6820      	ldr	r0, [r4, #0]
 800849a:	b938      	cbnz	r0, 80084ac <__pow5mult+0x9c>
 800849c:	4622      	mov	r2, r4
 800849e:	4621      	mov	r1, r4
 80084a0:	4630      	mov	r0, r6
 80084a2:	f7ff ff0f 	bl	80082c4 <__multiply>
 80084a6:	6020      	str	r0, [r4, #0]
 80084a8:	f8c0 9000 	str.w	r9, [r0]
 80084ac:	4604      	mov	r4, r0
 80084ae:	e7e4      	b.n	800847a <__pow5mult+0x6a>
 80084b0:	4638      	mov	r0, r7
 80084b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084b6:	bf00      	nop
 80084b8:	08009238 	.word	0x08009238
 80084bc:	08008ffd 	.word	0x08008ffd
 80084c0:	080090e4 	.word	0x080090e4

080084c4 <__lshift>:
 80084c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c8:	460c      	mov	r4, r1
 80084ca:	6849      	ldr	r1, [r1, #4]
 80084cc:	6923      	ldr	r3, [r4, #16]
 80084ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084d2:	68a3      	ldr	r3, [r4, #8]
 80084d4:	4607      	mov	r7, r0
 80084d6:	4691      	mov	r9, r2
 80084d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084dc:	f108 0601 	add.w	r6, r8, #1
 80084e0:	42b3      	cmp	r3, r6
 80084e2:	db0b      	blt.n	80084fc <__lshift+0x38>
 80084e4:	4638      	mov	r0, r7
 80084e6:	f7ff fddb 	bl	80080a0 <_Balloc>
 80084ea:	4605      	mov	r5, r0
 80084ec:	b948      	cbnz	r0, 8008502 <__lshift+0x3e>
 80084ee:	4602      	mov	r2, r0
 80084f0:	4b28      	ldr	r3, [pc, #160]	; (8008594 <__lshift+0xd0>)
 80084f2:	4829      	ldr	r0, [pc, #164]	; (8008598 <__lshift+0xd4>)
 80084f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80084f8:	f000 fb56 	bl	8008ba8 <__assert_func>
 80084fc:	3101      	adds	r1, #1
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	e7ee      	b.n	80084e0 <__lshift+0x1c>
 8008502:	2300      	movs	r3, #0
 8008504:	f100 0114 	add.w	r1, r0, #20
 8008508:	f100 0210 	add.w	r2, r0, #16
 800850c:	4618      	mov	r0, r3
 800850e:	4553      	cmp	r3, sl
 8008510:	db33      	blt.n	800857a <__lshift+0xb6>
 8008512:	6920      	ldr	r0, [r4, #16]
 8008514:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008518:	f104 0314 	add.w	r3, r4, #20
 800851c:	f019 091f 	ands.w	r9, r9, #31
 8008520:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008524:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008528:	d02b      	beq.n	8008582 <__lshift+0xbe>
 800852a:	f1c9 0e20 	rsb	lr, r9, #32
 800852e:	468a      	mov	sl, r1
 8008530:	2200      	movs	r2, #0
 8008532:	6818      	ldr	r0, [r3, #0]
 8008534:	fa00 f009 	lsl.w	r0, r0, r9
 8008538:	4302      	orrs	r2, r0
 800853a:	f84a 2b04 	str.w	r2, [sl], #4
 800853e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008542:	459c      	cmp	ip, r3
 8008544:	fa22 f20e 	lsr.w	r2, r2, lr
 8008548:	d8f3      	bhi.n	8008532 <__lshift+0x6e>
 800854a:	ebac 0304 	sub.w	r3, ip, r4
 800854e:	3b15      	subs	r3, #21
 8008550:	f023 0303 	bic.w	r3, r3, #3
 8008554:	3304      	adds	r3, #4
 8008556:	f104 0015 	add.w	r0, r4, #21
 800855a:	4584      	cmp	ip, r0
 800855c:	bf38      	it	cc
 800855e:	2304      	movcc	r3, #4
 8008560:	50ca      	str	r2, [r1, r3]
 8008562:	b10a      	cbz	r2, 8008568 <__lshift+0xa4>
 8008564:	f108 0602 	add.w	r6, r8, #2
 8008568:	3e01      	subs	r6, #1
 800856a:	4638      	mov	r0, r7
 800856c:	612e      	str	r6, [r5, #16]
 800856e:	4621      	mov	r1, r4
 8008570:	f7ff fdd6 	bl	8008120 <_Bfree>
 8008574:	4628      	mov	r0, r5
 8008576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857a:	f842 0f04 	str.w	r0, [r2, #4]!
 800857e:	3301      	adds	r3, #1
 8008580:	e7c5      	b.n	800850e <__lshift+0x4a>
 8008582:	3904      	subs	r1, #4
 8008584:	f853 2b04 	ldr.w	r2, [r3], #4
 8008588:	f841 2f04 	str.w	r2, [r1, #4]!
 800858c:	459c      	cmp	ip, r3
 800858e:	d8f9      	bhi.n	8008584 <__lshift+0xc0>
 8008590:	e7ea      	b.n	8008568 <__lshift+0xa4>
 8008592:	bf00      	nop
 8008594:	08009073 	.word	0x08009073
 8008598:	080090e4 	.word	0x080090e4

0800859c <__mcmp>:
 800859c:	b530      	push	{r4, r5, lr}
 800859e:	6902      	ldr	r2, [r0, #16]
 80085a0:	690c      	ldr	r4, [r1, #16]
 80085a2:	1b12      	subs	r2, r2, r4
 80085a4:	d10e      	bne.n	80085c4 <__mcmp+0x28>
 80085a6:	f100 0314 	add.w	r3, r0, #20
 80085aa:	3114      	adds	r1, #20
 80085ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80085b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80085b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80085b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80085bc:	42a5      	cmp	r5, r4
 80085be:	d003      	beq.n	80085c8 <__mcmp+0x2c>
 80085c0:	d305      	bcc.n	80085ce <__mcmp+0x32>
 80085c2:	2201      	movs	r2, #1
 80085c4:	4610      	mov	r0, r2
 80085c6:	bd30      	pop	{r4, r5, pc}
 80085c8:	4283      	cmp	r3, r0
 80085ca:	d3f3      	bcc.n	80085b4 <__mcmp+0x18>
 80085cc:	e7fa      	b.n	80085c4 <__mcmp+0x28>
 80085ce:	f04f 32ff 	mov.w	r2, #4294967295
 80085d2:	e7f7      	b.n	80085c4 <__mcmp+0x28>

080085d4 <__mdiff>:
 80085d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d8:	460c      	mov	r4, r1
 80085da:	4606      	mov	r6, r0
 80085dc:	4611      	mov	r1, r2
 80085de:	4620      	mov	r0, r4
 80085e0:	4617      	mov	r7, r2
 80085e2:	f7ff ffdb 	bl	800859c <__mcmp>
 80085e6:	1e05      	subs	r5, r0, #0
 80085e8:	d110      	bne.n	800860c <__mdiff+0x38>
 80085ea:	4629      	mov	r1, r5
 80085ec:	4630      	mov	r0, r6
 80085ee:	f7ff fd57 	bl	80080a0 <_Balloc>
 80085f2:	b930      	cbnz	r0, 8008602 <__mdiff+0x2e>
 80085f4:	4b39      	ldr	r3, [pc, #228]	; (80086dc <__mdiff+0x108>)
 80085f6:	4602      	mov	r2, r0
 80085f8:	f240 2132 	movw	r1, #562	; 0x232
 80085fc:	4838      	ldr	r0, [pc, #224]	; (80086e0 <__mdiff+0x10c>)
 80085fe:	f000 fad3 	bl	8008ba8 <__assert_func>
 8008602:	2301      	movs	r3, #1
 8008604:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860c:	bfa4      	itt	ge
 800860e:	463b      	movge	r3, r7
 8008610:	4627      	movge	r7, r4
 8008612:	4630      	mov	r0, r6
 8008614:	6879      	ldr	r1, [r7, #4]
 8008616:	bfa6      	itte	ge
 8008618:	461c      	movge	r4, r3
 800861a:	2500      	movge	r5, #0
 800861c:	2501      	movlt	r5, #1
 800861e:	f7ff fd3f 	bl	80080a0 <_Balloc>
 8008622:	b920      	cbnz	r0, 800862e <__mdiff+0x5a>
 8008624:	4b2d      	ldr	r3, [pc, #180]	; (80086dc <__mdiff+0x108>)
 8008626:	4602      	mov	r2, r0
 8008628:	f44f 7110 	mov.w	r1, #576	; 0x240
 800862c:	e7e6      	b.n	80085fc <__mdiff+0x28>
 800862e:	693e      	ldr	r6, [r7, #16]
 8008630:	60c5      	str	r5, [r0, #12]
 8008632:	6925      	ldr	r5, [r4, #16]
 8008634:	f107 0114 	add.w	r1, r7, #20
 8008638:	f104 0914 	add.w	r9, r4, #20
 800863c:	f100 0e14 	add.w	lr, r0, #20
 8008640:	f107 0210 	add.w	r2, r7, #16
 8008644:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008648:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800864c:	46f2      	mov	sl, lr
 800864e:	2700      	movs	r7, #0
 8008650:	f859 3b04 	ldr.w	r3, [r9], #4
 8008654:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008658:	fa1f f883 	uxth.w	r8, r3
 800865c:	fa17 f78b 	uxtah	r7, r7, fp
 8008660:	0c1b      	lsrs	r3, r3, #16
 8008662:	eba7 0808 	sub.w	r8, r7, r8
 8008666:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800866a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800866e:	fa1f f888 	uxth.w	r8, r8
 8008672:	141f      	asrs	r7, r3, #16
 8008674:	454d      	cmp	r5, r9
 8008676:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800867a:	f84a 3b04 	str.w	r3, [sl], #4
 800867e:	d8e7      	bhi.n	8008650 <__mdiff+0x7c>
 8008680:	1b2b      	subs	r3, r5, r4
 8008682:	3b15      	subs	r3, #21
 8008684:	f023 0303 	bic.w	r3, r3, #3
 8008688:	3304      	adds	r3, #4
 800868a:	3415      	adds	r4, #21
 800868c:	42a5      	cmp	r5, r4
 800868e:	bf38      	it	cc
 8008690:	2304      	movcc	r3, #4
 8008692:	4419      	add	r1, r3
 8008694:	4473      	add	r3, lr
 8008696:	469e      	mov	lr, r3
 8008698:	460d      	mov	r5, r1
 800869a:	4565      	cmp	r5, ip
 800869c:	d30e      	bcc.n	80086bc <__mdiff+0xe8>
 800869e:	f10c 0203 	add.w	r2, ip, #3
 80086a2:	1a52      	subs	r2, r2, r1
 80086a4:	f022 0203 	bic.w	r2, r2, #3
 80086a8:	3903      	subs	r1, #3
 80086aa:	458c      	cmp	ip, r1
 80086ac:	bf38      	it	cc
 80086ae:	2200      	movcc	r2, #0
 80086b0:	441a      	add	r2, r3
 80086b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80086b6:	b17b      	cbz	r3, 80086d8 <__mdiff+0x104>
 80086b8:	6106      	str	r6, [r0, #16]
 80086ba:	e7a5      	b.n	8008608 <__mdiff+0x34>
 80086bc:	f855 8b04 	ldr.w	r8, [r5], #4
 80086c0:	fa17 f488 	uxtah	r4, r7, r8
 80086c4:	1422      	asrs	r2, r4, #16
 80086c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80086ca:	b2a4      	uxth	r4, r4
 80086cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80086d0:	f84e 4b04 	str.w	r4, [lr], #4
 80086d4:	1417      	asrs	r7, r2, #16
 80086d6:	e7e0      	b.n	800869a <__mdiff+0xc6>
 80086d8:	3e01      	subs	r6, #1
 80086da:	e7ea      	b.n	80086b2 <__mdiff+0xde>
 80086dc:	08009073 	.word	0x08009073
 80086e0:	080090e4 	.word	0x080090e4

080086e4 <__d2b>:
 80086e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086e8:	4689      	mov	r9, r1
 80086ea:	2101      	movs	r1, #1
 80086ec:	ec57 6b10 	vmov	r6, r7, d0
 80086f0:	4690      	mov	r8, r2
 80086f2:	f7ff fcd5 	bl	80080a0 <_Balloc>
 80086f6:	4604      	mov	r4, r0
 80086f8:	b930      	cbnz	r0, 8008708 <__d2b+0x24>
 80086fa:	4602      	mov	r2, r0
 80086fc:	4b25      	ldr	r3, [pc, #148]	; (8008794 <__d2b+0xb0>)
 80086fe:	4826      	ldr	r0, [pc, #152]	; (8008798 <__d2b+0xb4>)
 8008700:	f240 310a 	movw	r1, #778	; 0x30a
 8008704:	f000 fa50 	bl	8008ba8 <__assert_func>
 8008708:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800870c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008710:	bb35      	cbnz	r5, 8008760 <__d2b+0x7c>
 8008712:	2e00      	cmp	r6, #0
 8008714:	9301      	str	r3, [sp, #4]
 8008716:	d028      	beq.n	800876a <__d2b+0x86>
 8008718:	4668      	mov	r0, sp
 800871a:	9600      	str	r6, [sp, #0]
 800871c:	f7ff fd8c 	bl	8008238 <__lo0bits>
 8008720:	9900      	ldr	r1, [sp, #0]
 8008722:	b300      	cbz	r0, 8008766 <__d2b+0x82>
 8008724:	9a01      	ldr	r2, [sp, #4]
 8008726:	f1c0 0320 	rsb	r3, r0, #32
 800872a:	fa02 f303 	lsl.w	r3, r2, r3
 800872e:	430b      	orrs	r3, r1
 8008730:	40c2      	lsrs	r2, r0
 8008732:	6163      	str	r3, [r4, #20]
 8008734:	9201      	str	r2, [sp, #4]
 8008736:	9b01      	ldr	r3, [sp, #4]
 8008738:	61a3      	str	r3, [r4, #24]
 800873a:	2b00      	cmp	r3, #0
 800873c:	bf14      	ite	ne
 800873e:	2202      	movne	r2, #2
 8008740:	2201      	moveq	r2, #1
 8008742:	6122      	str	r2, [r4, #16]
 8008744:	b1d5      	cbz	r5, 800877c <__d2b+0x98>
 8008746:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800874a:	4405      	add	r5, r0
 800874c:	f8c9 5000 	str.w	r5, [r9]
 8008750:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008754:	f8c8 0000 	str.w	r0, [r8]
 8008758:	4620      	mov	r0, r4
 800875a:	b003      	add	sp, #12
 800875c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008764:	e7d5      	b.n	8008712 <__d2b+0x2e>
 8008766:	6161      	str	r1, [r4, #20]
 8008768:	e7e5      	b.n	8008736 <__d2b+0x52>
 800876a:	a801      	add	r0, sp, #4
 800876c:	f7ff fd64 	bl	8008238 <__lo0bits>
 8008770:	9b01      	ldr	r3, [sp, #4]
 8008772:	6163      	str	r3, [r4, #20]
 8008774:	2201      	movs	r2, #1
 8008776:	6122      	str	r2, [r4, #16]
 8008778:	3020      	adds	r0, #32
 800877a:	e7e3      	b.n	8008744 <__d2b+0x60>
 800877c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008780:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008784:	f8c9 0000 	str.w	r0, [r9]
 8008788:	6918      	ldr	r0, [r3, #16]
 800878a:	f7ff fd35 	bl	80081f8 <__hi0bits>
 800878e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008792:	e7df      	b.n	8008754 <__d2b+0x70>
 8008794:	08009073 	.word	0x08009073
 8008798:	080090e4 	.word	0x080090e4

0800879c <_calloc_r>:
 800879c:	b513      	push	{r0, r1, r4, lr}
 800879e:	434a      	muls	r2, r1
 80087a0:	4611      	mov	r1, r2
 80087a2:	9201      	str	r2, [sp, #4]
 80087a4:	f7fd fd9c 	bl	80062e0 <_malloc_r>
 80087a8:	4604      	mov	r4, r0
 80087aa:	b118      	cbz	r0, 80087b4 <_calloc_r+0x18>
 80087ac:	9a01      	ldr	r2, [sp, #4]
 80087ae:	2100      	movs	r1, #0
 80087b0:	f7fd fd3e 	bl	8006230 <memset>
 80087b4:	4620      	mov	r0, r4
 80087b6:	b002      	add	sp, #8
 80087b8:	bd10      	pop	{r4, pc}

080087ba <__sfputc_r>:
 80087ba:	6893      	ldr	r3, [r2, #8]
 80087bc:	3b01      	subs	r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	b410      	push	{r4}
 80087c2:	6093      	str	r3, [r2, #8]
 80087c4:	da08      	bge.n	80087d8 <__sfputc_r+0x1e>
 80087c6:	6994      	ldr	r4, [r2, #24]
 80087c8:	42a3      	cmp	r3, r4
 80087ca:	db01      	blt.n	80087d0 <__sfputc_r+0x16>
 80087cc:	290a      	cmp	r1, #10
 80087ce:	d103      	bne.n	80087d8 <__sfputc_r+0x1e>
 80087d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087d4:	f7fe bafc 	b.w	8006dd0 <__swbuf_r>
 80087d8:	6813      	ldr	r3, [r2, #0]
 80087da:	1c58      	adds	r0, r3, #1
 80087dc:	6010      	str	r0, [r2, #0]
 80087de:	7019      	strb	r1, [r3, #0]
 80087e0:	4608      	mov	r0, r1
 80087e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <__sfputs_r>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	4606      	mov	r6, r0
 80087ec:	460f      	mov	r7, r1
 80087ee:	4614      	mov	r4, r2
 80087f0:	18d5      	adds	r5, r2, r3
 80087f2:	42ac      	cmp	r4, r5
 80087f4:	d101      	bne.n	80087fa <__sfputs_r+0x12>
 80087f6:	2000      	movs	r0, #0
 80087f8:	e007      	b.n	800880a <__sfputs_r+0x22>
 80087fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087fe:	463a      	mov	r2, r7
 8008800:	4630      	mov	r0, r6
 8008802:	f7ff ffda 	bl	80087ba <__sfputc_r>
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	d1f3      	bne.n	80087f2 <__sfputs_r+0xa>
 800880a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800880c <_vfiprintf_r>:
 800880c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	460d      	mov	r5, r1
 8008812:	b09d      	sub	sp, #116	; 0x74
 8008814:	4614      	mov	r4, r2
 8008816:	4698      	mov	r8, r3
 8008818:	4606      	mov	r6, r0
 800881a:	b118      	cbz	r0, 8008824 <_vfiprintf_r+0x18>
 800881c:	6983      	ldr	r3, [r0, #24]
 800881e:	b90b      	cbnz	r3, 8008824 <_vfiprintf_r+0x18>
 8008820:	f7ff fb28 	bl	8007e74 <__sinit>
 8008824:	4b89      	ldr	r3, [pc, #548]	; (8008a4c <_vfiprintf_r+0x240>)
 8008826:	429d      	cmp	r5, r3
 8008828:	d11b      	bne.n	8008862 <_vfiprintf_r+0x56>
 800882a:	6875      	ldr	r5, [r6, #4]
 800882c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800882e:	07d9      	lsls	r1, r3, #31
 8008830:	d405      	bmi.n	800883e <_vfiprintf_r+0x32>
 8008832:	89ab      	ldrh	r3, [r5, #12]
 8008834:	059a      	lsls	r2, r3, #22
 8008836:	d402      	bmi.n	800883e <_vfiprintf_r+0x32>
 8008838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800883a:	f7ff fbbe 	bl	8007fba <__retarget_lock_acquire_recursive>
 800883e:	89ab      	ldrh	r3, [r5, #12]
 8008840:	071b      	lsls	r3, r3, #28
 8008842:	d501      	bpl.n	8008848 <_vfiprintf_r+0x3c>
 8008844:	692b      	ldr	r3, [r5, #16]
 8008846:	b9eb      	cbnz	r3, 8008884 <_vfiprintf_r+0x78>
 8008848:	4629      	mov	r1, r5
 800884a:	4630      	mov	r0, r6
 800884c:	f7fe fb12 	bl	8006e74 <__swsetup_r>
 8008850:	b1c0      	cbz	r0, 8008884 <_vfiprintf_r+0x78>
 8008852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008854:	07dc      	lsls	r4, r3, #31
 8008856:	d50e      	bpl.n	8008876 <_vfiprintf_r+0x6a>
 8008858:	f04f 30ff 	mov.w	r0, #4294967295
 800885c:	b01d      	add	sp, #116	; 0x74
 800885e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008862:	4b7b      	ldr	r3, [pc, #492]	; (8008a50 <_vfiprintf_r+0x244>)
 8008864:	429d      	cmp	r5, r3
 8008866:	d101      	bne.n	800886c <_vfiprintf_r+0x60>
 8008868:	68b5      	ldr	r5, [r6, #8]
 800886a:	e7df      	b.n	800882c <_vfiprintf_r+0x20>
 800886c:	4b79      	ldr	r3, [pc, #484]	; (8008a54 <_vfiprintf_r+0x248>)
 800886e:	429d      	cmp	r5, r3
 8008870:	bf08      	it	eq
 8008872:	68f5      	ldreq	r5, [r6, #12]
 8008874:	e7da      	b.n	800882c <_vfiprintf_r+0x20>
 8008876:	89ab      	ldrh	r3, [r5, #12]
 8008878:	0598      	lsls	r0, r3, #22
 800887a:	d4ed      	bmi.n	8008858 <_vfiprintf_r+0x4c>
 800887c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800887e:	f7ff fb9d 	bl	8007fbc <__retarget_lock_release_recursive>
 8008882:	e7e9      	b.n	8008858 <_vfiprintf_r+0x4c>
 8008884:	2300      	movs	r3, #0
 8008886:	9309      	str	r3, [sp, #36]	; 0x24
 8008888:	2320      	movs	r3, #32
 800888a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800888e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008892:	2330      	movs	r3, #48	; 0x30
 8008894:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a58 <_vfiprintf_r+0x24c>
 8008898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800889c:	f04f 0901 	mov.w	r9, #1
 80088a0:	4623      	mov	r3, r4
 80088a2:	469a      	mov	sl, r3
 80088a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088a8:	b10a      	cbz	r2, 80088ae <_vfiprintf_r+0xa2>
 80088aa:	2a25      	cmp	r2, #37	; 0x25
 80088ac:	d1f9      	bne.n	80088a2 <_vfiprintf_r+0x96>
 80088ae:	ebba 0b04 	subs.w	fp, sl, r4
 80088b2:	d00b      	beq.n	80088cc <_vfiprintf_r+0xc0>
 80088b4:	465b      	mov	r3, fp
 80088b6:	4622      	mov	r2, r4
 80088b8:	4629      	mov	r1, r5
 80088ba:	4630      	mov	r0, r6
 80088bc:	f7ff ff94 	bl	80087e8 <__sfputs_r>
 80088c0:	3001      	adds	r0, #1
 80088c2:	f000 80aa 	beq.w	8008a1a <_vfiprintf_r+0x20e>
 80088c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088c8:	445a      	add	r2, fp
 80088ca:	9209      	str	r2, [sp, #36]	; 0x24
 80088cc:	f89a 3000 	ldrb.w	r3, [sl]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 80a2 	beq.w	8008a1a <_vfiprintf_r+0x20e>
 80088d6:	2300      	movs	r3, #0
 80088d8:	f04f 32ff 	mov.w	r2, #4294967295
 80088dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088e0:	f10a 0a01 	add.w	sl, sl, #1
 80088e4:	9304      	str	r3, [sp, #16]
 80088e6:	9307      	str	r3, [sp, #28]
 80088e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088ec:	931a      	str	r3, [sp, #104]	; 0x68
 80088ee:	4654      	mov	r4, sl
 80088f0:	2205      	movs	r2, #5
 80088f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f6:	4858      	ldr	r0, [pc, #352]	; (8008a58 <_vfiprintf_r+0x24c>)
 80088f8:	f7f7 fc9a 	bl	8000230 <memchr>
 80088fc:	9a04      	ldr	r2, [sp, #16]
 80088fe:	b9d8      	cbnz	r0, 8008938 <_vfiprintf_r+0x12c>
 8008900:	06d1      	lsls	r1, r2, #27
 8008902:	bf44      	itt	mi
 8008904:	2320      	movmi	r3, #32
 8008906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800890a:	0713      	lsls	r3, r2, #28
 800890c:	bf44      	itt	mi
 800890e:	232b      	movmi	r3, #43	; 0x2b
 8008910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008914:	f89a 3000 	ldrb.w	r3, [sl]
 8008918:	2b2a      	cmp	r3, #42	; 0x2a
 800891a:	d015      	beq.n	8008948 <_vfiprintf_r+0x13c>
 800891c:	9a07      	ldr	r2, [sp, #28]
 800891e:	4654      	mov	r4, sl
 8008920:	2000      	movs	r0, #0
 8008922:	f04f 0c0a 	mov.w	ip, #10
 8008926:	4621      	mov	r1, r4
 8008928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800892c:	3b30      	subs	r3, #48	; 0x30
 800892e:	2b09      	cmp	r3, #9
 8008930:	d94e      	bls.n	80089d0 <_vfiprintf_r+0x1c4>
 8008932:	b1b0      	cbz	r0, 8008962 <_vfiprintf_r+0x156>
 8008934:	9207      	str	r2, [sp, #28]
 8008936:	e014      	b.n	8008962 <_vfiprintf_r+0x156>
 8008938:	eba0 0308 	sub.w	r3, r0, r8
 800893c:	fa09 f303 	lsl.w	r3, r9, r3
 8008940:	4313      	orrs	r3, r2
 8008942:	9304      	str	r3, [sp, #16]
 8008944:	46a2      	mov	sl, r4
 8008946:	e7d2      	b.n	80088ee <_vfiprintf_r+0xe2>
 8008948:	9b03      	ldr	r3, [sp, #12]
 800894a:	1d19      	adds	r1, r3, #4
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	9103      	str	r1, [sp, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	bfbb      	ittet	lt
 8008954:	425b      	neglt	r3, r3
 8008956:	f042 0202 	orrlt.w	r2, r2, #2
 800895a:	9307      	strge	r3, [sp, #28]
 800895c:	9307      	strlt	r3, [sp, #28]
 800895e:	bfb8      	it	lt
 8008960:	9204      	strlt	r2, [sp, #16]
 8008962:	7823      	ldrb	r3, [r4, #0]
 8008964:	2b2e      	cmp	r3, #46	; 0x2e
 8008966:	d10c      	bne.n	8008982 <_vfiprintf_r+0x176>
 8008968:	7863      	ldrb	r3, [r4, #1]
 800896a:	2b2a      	cmp	r3, #42	; 0x2a
 800896c:	d135      	bne.n	80089da <_vfiprintf_r+0x1ce>
 800896e:	9b03      	ldr	r3, [sp, #12]
 8008970:	1d1a      	adds	r2, r3, #4
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	9203      	str	r2, [sp, #12]
 8008976:	2b00      	cmp	r3, #0
 8008978:	bfb8      	it	lt
 800897a:	f04f 33ff 	movlt.w	r3, #4294967295
 800897e:	3402      	adds	r4, #2
 8008980:	9305      	str	r3, [sp, #20]
 8008982:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a68 <_vfiprintf_r+0x25c>
 8008986:	7821      	ldrb	r1, [r4, #0]
 8008988:	2203      	movs	r2, #3
 800898a:	4650      	mov	r0, sl
 800898c:	f7f7 fc50 	bl	8000230 <memchr>
 8008990:	b140      	cbz	r0, 80089a4 <_vfiprintf_r+0x198>
 8008992:	2340      	movs	r3, #64	; 0x40
 8008994:	eba0 000a 	sub.w	r0, r0, sl
 8008998:	fa03 f000 	lsl.w	r0, r3, r0
 800899c:	9b04      	ldr	r3, [sp, #16]
 800899e:	4303      	orrs	r3, r0
 80089a0:	3401      	adds	r4, #1
 80089a2:	9304      	str	r3, [sp, #16]
 80089a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a8:	482c      	ldr	r0, [pc, #176]	; (8008a5c <_vfiprintf_r+0x250>)
 80089aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089ae:	2206      	movs	r2, #6
 80089b0:	f7f7 fc3e 	bl	8000230 <memchr>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d03f      	beq.n	8008a38 <_vfiprintf_r+0x22c>
 80089b8:	4b29      	ldr	r3, [pc, #164]	; (8008a60 <_vfiprintf_r+0x254>)
 80089ba:	bb1b      	cbnz	r3, 8008a04 <_vfiprintf_r+0x1f8>
 80089bc:	9b03      	ldr	r3, [sp, #12]
 80089be:	3307      	adds	r3, #7
 80089c0:	f023 0307 	bic.w	r3, r3, #7
 80089c4:	3308      	adds	r3, #8
 80089c6:	9303      	str	r3, [sp, #12]
 80089c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ca:	443b      	add	r3, r7
 80089cc:	9309      	str	r3, [sp, #36]	; 0x24
 80089ce:	e767      	b.n	80088a0 <_vfiprintf_r+0x94>
 80089d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80089d4:	460c      	mov	r4, r1
 80089d6:	2001      	movs	r0, #1
 80089d8:	e7a5      	b.n	8008926 <_vfiprintf_r+0x11a>
 80089da:	2300      	movs	r3, #0
 80089dc:	3401      	adds	r4, #1
 80089de:	9305      	str	r3, [sp, #20]
 80089e0:	4619      	mov	r1, r3
 80089e2:	f04f 0c0a 	mov.w	ip, #10
 80089e6:	4620      	mov	r0, r4
 80089e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ec:	3a30      	subs	r2, #48	; 0x30
 80089ee:	2a09      	cmp	r2, #9
 80089f0:	d903      	bls.n	80089fa <_vfiprintf_r+0x1ee>
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0c5      	beq.n	8008982 <_vfiprintf_r+0x176>
 80089f6:	9105      	str	r1, [sp, #20]
 80089f8:	e7c3      	b.n	8008982 <_vfiprintf_r+0x176>
 80089fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80089fe:	4604      	mov	r4, r0
 8008a00:	2301      	movs	r3, #1
 8008a02:	e7f0      	b.n	80089e6 <_vfiprintf_r+0x1da>
 8008a04:	ab03      	add	r3, sp, #12
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	462a      	mov	r2, r5
 8008a0a:	4b16      	ldr	r3, [pc, #88]	; (8008a64 <_vfiprintf_r+0x258>)
 8008a0c:	a904      	add	r1, sp, #16
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f7fd fd60 	bl	80064d4 <_printf_float>
 8008a14:	4607      	mov	r7, r0
 8008a16:	1c78      	adds	r0, r7, #1
 8008a18:	d1d6      	bne.n	80089c8 <_vfiprintf_r+0x1bc>
 8008a1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a1c:	07d9      	lsls	r1, r3, #31
 8008a1e:	d405      	bmi.n	8008a2c <_vfiprintf_r+0x220>
 8008a20:	89ab      	ldrh	r3, [r5, #12]
 8008a22:	059a      	lsls	r2, r3, #22
 8008a24:	d402      	bmi.n	8008a2c <_vfiprintf_r+0x220>
 8008a26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a28:	f7ff fac8 	bl	8007fbc <__retarget_lock_release_recursive>
 8008a2c:	89ab      	ldrh	r3, [r5, #12]
 8008a2e:	065b      	lsls	r3, r3, #25
 8008a30:	f53f af12 	bmi.w	8008858 <_vfiprintf_r+0x4c>
 8008a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a36:	e711      	b.n	800885c <_vfiprintf_r+0x50>
 8008a38:	ab03      	add	r3, sp, #12
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	462a      	mov	r2, r5
 8008a3e:	4b09      	ldr	r3, [pc, #36]	; (8008a64 <_vfiprintf_r+0x258>)
 8008a40:	a904      	add	r1, sp, #16
 8008a42:	4630      	mov	r0, r6
 8008a44:	f7fd ffea 	bl	8006a1c <_printf_i>
 8008a48:	e7e4      	b.n	8008a14 <_vfiprintf_r+0x208>
 8008a4a:	bf00      	nop
 8008a4c:	080090a4 	.word	0x080090a4
 8008a50:	080090c4 	.word	0x080090c4
 8008a54:	08009084 	.word	0x08009084
 8008a58:	08009244 	.word	0x08009244
 8008a5c:	0800924e 	.word	0x0800924e
 8008a60:	080064d5 	.word	0x080064d5
 8008a64:	080087e9 	.word	0x080087e9
 8008a68:	0800924a 	.word	0x0800924a

08008a6c <_putc_r>:
 8008a6c:	b570      	push	{r4, r5, r6, lr}
 8008a6e:	460d      	mov	r5, r1
 8008a70:	4614      	mov	r4, r2
 8008a72:	4606      	mov	r6, r0
 8008a74:	b118      	cbz	r0, 8008a7e <_putc_r+0x12>
 8008a76:	6983      	ldr	r3, [r0, #24]
 8008a78:	b90b      	cbnz	r3, 8008a7e <_putc_r+0x12>
 8008a7a:	f7ff f9fb 	bl	8007e74 <__sinit>
 8008a7e:	4b1c      	ldr	r3, [pc, #112]	; (8008af0 <_putc_r+0x84>)
 8008a80:	429c      	cmp	r4, r3
 8008a82:	d124      	bne.n	8008ace <_putc_r+0x62>
 8008a84:	6874      	ldr	r4, [r6, #4]
 8008a86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a88:	07d8      	lsls	r0, r3, #31
 8008a8a:	d405      	bmi.n	8008a98 <_putc_r+0x2c>
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	0599      	lsls	r1, r3, #22
 8008a90:	d402      	bmi.n	8008a98 <_putc_r+0x2c>
 8008a92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a94:	f7ff fa91 	bl	8007fba <__retarget_lock_acquire_recursive>
 8008a98:	68a3      	ldr	r3, [r4, #8]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	60a3      	str	r3, [r4, #8]
 8008aa0:	da05      	bge.n	8008aae <_putc_r+0x42>
 8008aa2:	69a2      	ldr	r2, [r4, #24]
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	db1c      	blt.n	8008ae2 <_putc_r+0x76>
 8008aa8:	b2eb      	uxtb	r3, r5
 8008aaa:	2b0a      	cmp	r3, #10
 8008aac:	d019      	beq.n	8008ae2 <_putc_r+0x76>
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	6022      	str	r2, [r4, #0]
 8008ab4:	701d      	strb	r5, [r3, #0]
 8008ab6:	b2ed      	uxtb	r5, r5
 8008ab8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008aba:	07da      	lsls	r2, r3, #31
 8008abc:	d405      	bmi.n	8008aca <_putc_r+0x5e>
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	059b      	lsls	r3, r3, #22
 8008ac2:	d402      	bmi.n	8008aca <_putc_r+0x5e>
 8008ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ac6:	f7ff fa79 	bl	8007fbc <__retarget_lock_release_recursive>
 8008aca:	4628      	mov	r0, r5
 8008acc:	bd70      	pop	{r4, r5, r6, pc}
 8008ace:	4b09      	ldr	r3, [pc, #36]	; (8008af4 <_putc_r+0x88>)
 8008ad0:	429c      	cmp	r4, r3
 8008ad2:	d101      	bne.n	8008ad8 <_putc_r+0x6c>
 8008ad4:	68b4      	ldr	r4, [r6, #8]
 8008ad6:	e7d6      	b.n	8008a86 <_putc_r+0x1a>
 8008ad8:	4b07      	ldr	r3, [pc, #28]	; (8008af8 <_putc_r+0x8c>)
 8008ada:	429c      	cmp	r4, r3
 8008adc:	bf08      	it	eq
 8008ade:	68f4      	ldreq	r4, [r6, #12]
 8008ae0:	e7d1      	b.n	8008a86 <_putc_r+0x1a>
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	4622      	mov	r2, r4
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f7fe f972 	bl	8006dd0 <__swbuf_r>
 8008aec:	4605      	mov	r5, r0
 8008aee:	e7e3      	b.n	8008ab8 <_putc_r+0x4c>
 8008af0:	080090a4 	.word	0x080090a4
 8008af4:	080090c4 	.word	0x080090c4
 8008af8:	08009084 	.word	0x08009084

08008afc <__sread>:
 8008afc:	b510      	push	{r4, lr}
 8008afe:	460c      	mov	r4, r1
 8008b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b04:	f000 f8d6 	bl	8008cb4 <_read_r>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	bfab      	itete	ge
 8008b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b10:	181b      	addge	r3, r3, r0
 8008b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b16:	bfac      	ite	ge
 8008b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b1a:	81a3      	strhlt	r3, [r4, #12]
 8008b1c:	bd10      	pop	{r4, pc}

08008b1e <__swrite>:
 8008b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b22:	461f      	mov	r7, r3
 8008b24:	898b      	ldrh	r3, [r1, #12]
 8008b26:	05db      	lsls	r3, r3, #23
 8008b28:	4605      	mov	r5, r0
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	4616      	mov	r6, r2
 8008b2e:	d505      	bpl.n	8008b3c <__swrite+0x1e>
 8008b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b34:	2302      	movs	r3, #2
 8008b36:	2200      	movs	r2, #0
 8008b38:	f000 f898 	bl	8008c6c <_lseek_r>
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b46:	81a3      	strh	r3, [r4, #12]
 8008b48:	4632      	mov	r2, r6
 8008b4a:	463b      	mov	r3, r7
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b52:	f000 b817 	b.w	8008b84 <_write_r>

08008b56 <__sseek>:
 8008b56:	b510      	push	{r4, lr}
 8008b58:	460c      	mov	r4, r1
 8008b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b5e:	f000 f885 	bl	8008c6c <_lseek_r>
 8008b62:	1c43      	adds	r3, r0, #1
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	bf15      	itete	ne
 8008b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b72:	81a3      	strheq	r3, [r4, #12]
 8008b74:	bf18      	it	ne
 8008b76:	81a3      	strhne	r3, [r4, #12]
 8008b78:	bd10      	pop	{r4, pc}

08008b7a <__sclose>:
 8008b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b7e:	f000 b831 	b.w	8008be4 <_close_r>
	...

08008b84 <_write_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d07      	ldr	r5, [pc, #28]	; (8008ba4 <_write_r+0x20>)
 8008b88:	4604      	mov	r4, r0
 8008b8a:	4608      	mov	r0, r1
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	602a      	str	r2, [r5, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	f7f8 fd7e 	bl	8001694 <_write>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_write_r+0x1e>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_write_r+0x1e>
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	20000b78 	.word	0x20000b78

08008ba8 <__assert_func>:
 8008ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008baa:	4614      	mov	r4, r2
 8008bac:	461a      	mov	r2, r3
 8008bae:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <__assert_func+0x2c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	68d8      	ldr	r0, [r3, #12]
 8008bb6:	b14c      	cbz	r4, 8008bcc <__assert_func+0x24>
 8008bb8:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <__assert_func+0x30>)
 8008bba:	9100      	str	r1, [sp, #0]
 8008bbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bc0:	4906      	ldr	r1, [pc, #24]	; (8008bdc <__assert_func+0x34>)
 8008bc2:	462b      	mov	r3, r5
 8008bc4:	f000 f81e 	bl	8008c04 <fiprintf>
 8008bc8:	f000 f893 	bl	8008cf2 <abort>
 8008bcc:	4b04      	ldr	r3, [pc, #16]	; (8008be0 <__assert_func+0x38>)
 8008bce:	461c      	mov	r4, r3
 8008bd0:	e7f3      	b.n	8008bba <__assert_func+0x12>
 8008bd2:	bf00      	nop
 8008bd4:	20000274 	.word	0x20000274
 8008bd8:	08009255 	.word	0x08009255
 8008bdc:	08009262 	.word	0x08009262
 8008be0:	08009290 	.word	0x08009290

08008be4 <_close_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	4d06      	ldr	r5, [pc, #24]	; (8008c00 <_close_r+0x1c>)
 8008be8:	2300      	movs	r3, #0
 8008bea:	4604      	mov	r4, r0
 8008bec:	4608      	mov	r0, r1
 8008bee:	602b      	str	r3, [r5, #0]
 8008bf0:	f7f9 f9cd 	bl	8001f8e <_close>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d102      	bne.n	8008bfe <_close_r+0x1a>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	b103      	cbz	r3, 8008bfe <_close_r+0x1a>
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	20000b78 	.word	0x20000b78

08008c04 <fiprintf>:
 8008c04:	b40e      	push	{r1, r2, r3}
 8008c06:	b503      	push	{r0, r1, lr}
 8008c08:	4601      	mov	r1, r0
 8008c0a:	ab03      	add	r3, sp, #12
 8008c0c:	4805      	ldr	r0, [pc, #20]	; (8008c24 <fiprintf+0x20>)
 8008c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c12:	6800      	ldr	r0, [r0, #0]
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	f7ff fdf9 	bl	800880c <_vfiprintf_r>
 8008c1a:	b002      	add	sp, #8
 8008c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c20:	b003      	add	sp, #12
 8008c22:	4770      	bx	lr
 8008c24:	20000274 	.word	0x20000274

08008c28 <_fstat_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d07      	ldr	r5, [pc, #28]	; (8008c48 <_fstat_r+0x20>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	4611      	mov	r1, r2
 8008c34:	602b      	str	r3, [r5, #0]
 8008c36:	f7f9 f9b6 	bl	8001fa6 <_fstat>
 8008c3a:	1c43      	adds	r3, r0, #1
 8008c3c:	d102      	bne.n	8008c44 <_fstat_r+0x1c>
 8008c3e:	682b      	ldr	r3, [r5, #0]
 8008c40:	b103      	cbz	r3, 8008c44 <_fstat_r+0x1c>
 8008c42:	6023      	str	r3, [r4, #0]
 8008c44:	bd38      	pop	{r3, r4, r5, pc}
 8008c46:	bf00      	nop
 8008c48:	20000b78 	.word	0x20000b78

08008c4c <_isatty_r>:
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	4d06      	ldr	r5, [pc, #24]	; (8008c68 <_isatty_r+0x1c>)
 8008c50:	2300      	movs	r3, #0
 8008c52:	4604      	mov	r4, r0
 8008c54:	4608      	mov	r0, r1
 8008c56:	602b      	str	r3, [r5, #0]
 8008c58:	f7f9 f9b5 	bl	8001fc6 <_isatty>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d102      	bne.n	8008c66 <_isatty_r+0x1a>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	b103      	cbz	r3, 8008c66 <_isatty_r+0x1a>
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	bd38      	pop	{r3, r4, r5, pc}
 8008c68:	20000b78 	.word	0x20000b78

08008c6c <_lseek_r>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	4d07      	ldr	r5, [pc, #28]	; (8008c8c <_lseek_r+0x20>)
 8008c70:	4604      	mov	r4, r0
 8008c72:	4608      	mov	r0, r1
 8008c74:	4611      	mov	r1, r2
 8008c76:	2200      	movs	r2, #0
 8008c78:	602a      	str	r2, [r5, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f7f9 f9ae 	bl	8001fdc <_lseek>
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	d102      	bne.n	8008c8a <_lseek_r+0x1e>
 8008c84:	682b      	ldr	r3, [r5, #0]
 8008c86:	b103      	cbz	r3, 8008c8a <_lseek_r+0x1e>
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	bd38      	pop	{r3, r4, r5, pc}
 8008c8c:	20000b78 	.word	0x20000b78

08008c90 <__ascii_mbtowc>:
 8008c90:	b082      	sub	sp, #8
 8008c92:	b901      	cbnz	r1, 8008c96 <__ascii_mbtowc+0x6>
 8008c94:	a901      	add	r1, sp, #4
 8008c96:	b142      	cbz	r2, 8008caa <__ascii_mbtowc+0x1a>
 8008c98:	b14b      	cbz	r3, 8008cae <__ascii_mbtowc+0x1e>
 8008c9a:	7813      	ldrb	r3, [r2, #0]
 8008c9c:	600b      	str	r3, [r1, #0]
 8008c9e:	7812      	ldrb	r2, [r2, #0]
 8008ca0:	1e10      	subs	r0, r2, #0
 8008ca2:	bf18      	it	ne
 8008ca4:	2001      	movne	r0, #1
 8008ca6:	b002      	add	sp, #8
 8008ca8:	4770      	bx	lr
 8008caa:	4610      	mov	r0, r2
 8008cac:	e7fb      	b.n	8008ca6 <__ascii_mbtowc+0x16>
 8008cae:	f06f 0001 	mvn.w	r0, #1
 8008cb2:	e7f8      	b.n	8008ca6 <__ascii_mbtowc+0x16>

08008cb4 <_read_r>:
 8008cb4:	b538      	push	{r3, r4, r5, lr}
 8008cb6:	4d07      	ldr	r5, [pc, #28]	; (8008cd4 <_read_r+0x20>)
 8008cb8:	4604      	mov	r4, r0
 8008cba:	4608      	mov	r0, r1
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	602a      	str	r2, [r5, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	f7f9 f946 	bl	8001f54 <_read>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	d102      	bne.n	8008cd2 <_read_r+0x1e>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	b103      	cbz	r3, 8008cd2 <_read_r+0x1e>
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	20000b78 	.word	0x20000b78

08008cd8 <__ascii_wctomb>:
 8008cd8:	b149      	cbz	r1, 8008cee <__ascii_wctomb+0x16>
 8008cda:	2aff      	cmp	r2, #255	; 0xff
 8008cdc:	bf85      	ittet	hi
 8008cde:	238a      	movhi	r3, #138	; 0x8a
 8008ce0:	6003      	strhi	r3, [r0, #0]
 8008ce2:	700a      	strbls	r2, [r1, #0]
 8008ce4:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ce8:	bf98      	it	ls
 8008cea:	2001      	movls	r0, #1
 8008cec:	4770      	bx	lr
 8008cee:	4608      	mov	r0, r1
 8008cf0:	4770      	bx	lr

08008cf2 <abort>:
 8008cf2:	b508      	push	{r3, lr}
 8008cf4:	2006      	movs	r0, #6
 8008cf6:	f000 f82b 	bl	8008d50 <raise>
 8008cfa:	2001      	movs	r0, #1
 8008cfc:	f7f9 f920 	bl	8001f40 <_exit>

08008d00 <_raise_r>:
 8008d00:	291f      	cmp	r1, #31
 8008d02:	b538      	push	{r3, r4, r5, lr}
 8008d04:	4604      	mov	r4, r0
 8008d06:	460d      	mov	r5, r1
 8008d08:	d904      	bls.n	8008d14 <_raise_r+0x14>
 8008d0a:	2316      	movs	r3, #22
 8008d0c:	6003      	str	r3, [r0, #0]
 8008d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d12:	bd38      	pop	{r3, r4, r5, pc}
 8008d14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d16:	b112      	cbz	r2, 8008d1e <_raise_r+0x1e>
 8008d18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d1c:	b94b      	cbnz	r3, 8008d32 <_raise_r+0x32>
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f000 f830 	bl	8008d84 <_getpid_r>
 8008d24:	462a      	mov	r2, r5
 8008d26:	4601      	mov	r1, r0
 8008d28:	4620      	mov	r0, r4
 8008d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d2e:	f000 b817 	b.w	8008d60 <_kill_r>
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d00a      	beq.n	8008d4c <_raise_r+0x4c>
 8008d36:	1c59      	adds	r1, r3, #1
 8008d38:	d103      	bne.n	8008d42 <_raise_r+0x42>
 8008d3a:	2316      	movs	r3, #22
 8008d3c:	6003      	str	r3, [r0, #0]
 8008d3e:	2001      	movs	r0, #1
 8008d40:	e7e7      	b.n	8008d12 <_raise_r+0x12>
 8008d42:	2400      	movs	r4, #0
 8008d44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d48:	4628      	mov	r0, r5
 8008d4a:	4798      	blx	r3
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	e7e0      	b.n	8008d12 <_raise_r+0x12>

08008d50 <raise>:
 8008d50:	4b02      	ldr	r3, [pc, #8]	; (8008d5c <raise+0xc>)
 8008d52:	4601      	mov	r1, r0
 8008d54:	6818      	ldr	r0, [r3, #0]
 8008d56:	f7ff bfd3 	b.w	8008d00 <_raise_r>
 8008d5a:	bf00      	nop
 8008d5c:	20000274 	.word	0x20000274

08008d60 <_kill_r>:
 8008d60:	b538      	push	{r3, r4, r5, lr}
 8008d62:	4d07      	ldr	r5, [pc, #28]	; (8008d80 <_kill_r+0x20>)
 8008d64:	2300      	movs	r3, #0
 8008d66:	4604      	mov	r4, r0
 8008d68:	4608      	mov	r0, r1
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	602b      	str	r3, [r5, #0]
 8008d6e:	f7f9 f8d7 	bl	8001f20 <_kill>
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	d102      	bne.n	8008d7c <_kill_r+0x1c>
 8008d76:	682b      	ldr	r3, [r5, #0]
 8008d78:	b103      	cbz	r3, 8008d7c <_kill_r+0x1c>
 8008d7a:	6023      	str	r3, [r4, #0]
 8008d7c:	bd38      	pop	{r3, r4, r5, pc}
 8008d7e:	bf00      	nop
 8008d80:	20000b78 	.word	0x20000b78

08008d84 <_getpid_r>:
 8008d84:	f7f9 b8c4 	b.w	8001f10 <_getpid>

08008d88 <_init>:
 8008d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8a:	bf00      	nop
 8008d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d8e:	bc08      	pop	{r3}
 8008d90:	469e      	mov	lr, r3
 8008d92:	4770      	bx	lr

08008d94 <_fini>:
 8008d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d96:	bf00      	nop
 8008d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d9a:	bc08      	pop	{r3}
 8008d9c:	469e      	mov	lr, r3
 8008d9e:	4770      	bx	lr
