
rho_mod_v6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007180  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  08007360  08007360  00017360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800788c  0800788c  00021fc4  2**0
                  CONTENTS
  4 .ARM          00000008  0800788c  0800788c  0001788c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007894  08007894  00021fc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007894  08007894  00017894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007898  08007898  00017898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001fc4  20000000  0800789c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000207c  20001fc4  08009860  00021fc4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004040  08009860  00024040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021fc4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031d84  00000000  00000000  00021ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004769  00000000  00000000  00053d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00013606  00000000  00000000  000584e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c8  00000000  00000000  0006bae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015e8  00000000  00000000  0006d1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002351c  00000000  00000000  0006e798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022988  00000000  00000000  00091cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1708  00000000  00000000  000b463c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00185d44  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004dc8  00000000  00000000  00185d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001fc4 	.word	0x20001fc4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007348 	.word	0x08007348

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001fc8 	.word	0x20001fc8
 800021c:	08007348 	.word	0x08007348

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <OV9712_Write>:
    if( reg.Address == ENDR ) break;
    OV9712_Functions.Write( ov9712, reg.Address, reg.Value );
  }
}
void OV9712_Write( OV9712_t * ov9712, uint8_t r, uint8_t v )
{
 8000f30:	b500      	push	{lr}
 8000f32:	b085      	sub	sp, #20
  uint8_t data[2] = { r, v };
 8000f34:	f88d 100c 	strb.w	r1, [sp, #12]
 8000f38:	f88d 200d 	strb.w	r2, [sp, #13]
  PlatformFunctions.I2C.Transmit( ov9712->CAM_I2C_PORT, ov9712->ADDR, data, 2, 100);
 8000f3c:	2364      	movs	r3, #100	; 0x64
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2302      	movs	r3, #2
 8000f42:	aa03      	add	r2, sp, #12
 8000f44:	7801      	ldrb	r1, [r0, #0]
 8000f46:	6840      	ldr	r0, [r0, #4]
 8000f48:	f000 f983 	bl	8001252 <STM_I2CMasterTx>
}
 8000f4c:	b005      	add	sp, #20
 8000f4e:	f85d fb04 	ldr.w	pc, [sp], #4

08000f52 <OV9712_Enable>:

void OV9712_Enable( OV9712_t * ov9712 )
{
 8000f52:	b510      	push	{r4, lr}
 8000f54:	4604      	mov	r4, r0
  if( ov9712->Pins == NULL) return;
 8000f56:	6880      	ldr	r0, [r0, #8]
 8000f58:	b188      	cbz	r0, 8000f7e <OV9712_Enable+0x2c>
  PlatformFunctions.GPIO.Write( &ov9712->Pins->ENABLE, GPIO_PIN_SET);
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	f000 ff0c 	bl	8001d78 <WritePin>
  PlatformFunctions.GPIO.Write( &ov9712->Pins->LOW_VOLTAGE, GPIO_PIN_SET);
 8000f60:	68a0      	ldr	r0, [r4, #8]
 8000f62:	2101      	movs	r1, #1
 8000f64:	3008      	adds	r0, #8
 8000f66:	f000 ff07 	bl	8001d78 <WritePin>
  PlatformFunctions.GPIO.Write( &ov9712->Pins->POWER_DOWN, GPIO_PIN_RESET);
 8000f6a:	68a0      	ldr	r0, [r4, #8]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	3010      	adds	r0, #16
 8000f70:	f000 ff02 	bl	8001d78 <WritePin>
  PlatformFunctions.GPIO.SetPortMode( &ov9712->Pins->MASTER_CLOCK, GPIO_MODE_AF_PP);
 8000f74:	68a0      	ldr	r0, [r4, #8]
 8000f76:	2102      	movs	r1, #2
 8000f78:	3018      	adds	r0, #24
 8000f7a:	f000 ff04 	bl	8001d86 <SetPortMode>
}
 8000f7e:	bd10      	pop	{r4, pc}

08000f80 <OV9712_Init>:
  ov9712->CAM_I2C_PORT = i2c_port;
 8000f80:	6041      	str	r1, [r0, #4]
  if( pins == NULL) return;
 8000f82:	b1e2      	cbz	r2, 8000fbe <OV9712_Init+0x3e>
{
 8000f84:	b530      	push	{r4, r5, lr}
 8000f86:	b083      	sub	sp, #12
 8000f88:	4605      	mov	r5, r0
  ov9712->Pins = pins;
 8000f8a:	6082      	str	r2, [r0, #8]
  OV9712_Functions.Enable(ov9712);
 8000f8c:	f7ff ffe1 	bl	8000f52 <OV9712_Enable>
  HAL_Delay(30);
 8000f90:	201e      	movs	r0, #30
 8000f92:	f000 ffa9 	bl	8001ee8 <HAL_Delay>
  for( int i = 0; i < sizeof(OV9712_regs) / sizeof(OV9712_regs[0]); i++ )
 8000f96:	2400      	movs	r4, #0
 8000f98:	2c0d      	cmp	r4, #13
 8000f9a:	d80e      	bhi.n	8000fba <OV9712_Init+0x3a>
    reg = OV9712_regs[i];
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <OV9712_Init+0x40>)
 8000f9e:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 8000fa2:	f8ad 1004 	strh.w	r1, [sp, #4]
    if( reg.Address == ENDR ) break;
 8000fa6:	b2c9      	uxtb	r1, r1
 8000fa8:	29ff      	cmp	r1, #255	; 0xff
 8000faa:	d006      	beq.n	8000fba <OV9712_Init+0x3a>
    OV9712_Functions.Write( ov9712, reg.Address, reg.Value );
 8000fac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	f7ff ffbd 	bl	8000f30 <OV9712_Write>
  for( int i = 0; i < sizeof(OV9712_regs) / sizeof(OV9712_regs[0]); i++ )
 8000fb6:	3401      	adds	r4, #1
 8000fb8:	e7ee      	b.n	8000f98 <OV9712_Init+0x18>
}
 8000fba:	b003      	add	sp, #12
 8000fbc:	bd30      	pop	{r4, r5, pc}
 8000fbe:	4770      	bx	lr
 8000fc0:	08007368 	.word	0x08007368

08000fc4 <InitializePlatform>:
/***************************************************************************************/
/*                                  Core Routines                                      */
/***************************************************************************************/
/* INITIALIZING State Routine */
void InitializePlatform( void )
{
 8000fc4:	b508      	push	{r3, lr}
    PlatformFunctions.Init( &Platform, HOST_COMMUNICATION_PROTOCOL, (generic_handle_t)Master.IOs.HOST_DEFAULT_CHANNEL );
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <InitializePlatform+0x14>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <InitializePlatform+0x18>)
 8000fcc:	6852      	ldr	r2, [r2, #4]
 8000fce:	2102      	movs	r1, #2
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <InitializePlatform+0x1c>)
 8000fd2:	4798      	blx	r3
}
 8000fd4:	bd08      	pop	{r3, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000002c 	.word	0x2000002c
 8000fdc:	20003e8c 	.word	0x20003e8c
 8000fe0:	20004024 	.word	0x20004024

08000fe4 <ConnectToHost>:
  while( PlatformFunctions.Host.Command( PING_HOST, NEEDED ) != OK )
  {
    PlatformFunctions.Wait( HOST_COMMAND_WAIT_TIME );
  }
#endif
}
 8000fe4:	4770      	bx	lr
	...

08000fe8 <ConfigureApplication>:

/* CONFIGURING State Routine */
void ConfigureApplication( void )
{
 8000fe8:	b510      	push	{r4, lr}
#ifdef __OV9712__
  OV9712_Functions.Init( &OV9712, Master.IOs.CAMERA_COMMUNICATION_CHANNEL, &Default_OV9712_Pins );
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <ConfigureApplication+0x30>)
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <ConfigureApplication+0x34>)
 8000fee:	6819      	ldr	r1, [r3, #0]
 8000ff0:	480b      	ldr	r0, [pc, #44]	; (8001020 <ConfigureApplication+0x38>)
 8000ff2:	f7ff ffc5 	bl	8000f80 <OV9712_Init>
#endif
#ifdef __RHO__
  RhoSystem.Functions.Perform.ConnectToInterface( &PlatformFunctions, &CameraFlags );
 8000ff6:	4c0b      	ldr	r4, [pc, #44]	; (8001024 <ConfigureApplication+0x3c>)
 8000ff8:	f504 53e5 	add.w	r3, r4, #7328	; 0x1ca0
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	490a      	ldr	r1, [pc, #40]	; (8001028 <ConfigureApplication+0x40>)
 8001000:	480a      	ldr	r0, [pc, #40]	; (800102c <ConfigureApplication+0x44>)
 8001002:	4798      	blx	r3
  RhoSystem.Functions.Perform.Initialize( CAMERA_PORT, UART_TX_PORT );
 8001004:	f641 4390 	movw	r3, #7312	; 0x1c90
 8001008:	58e3      	ldr	r3, [r4, r3]
 800100a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800100e:	6910      	ldr	r0, [r2, #16]
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <ConfigureApplication+0x48>)
 8001012:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001014:	4798      	blx	r3
#endif
}
 8001016:	bd10      	pop	{r4, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	20003e8c 	.word	0x20003e8c
 8001020:	20000020 	.word	0x20000020
 8001024:	200000d8 	.word	0x200000d8
 8001028:	20001fe0 	.word	0x20001fe0
 800102c:	2000002c 	.word	0x2000002c
 8001030:	40013800 	.word	0x40013800

08001034 <ExitInitialization>:

/* READY State Routine */
void ExitInitialization( void )
{
 8001034:	b508      	push	{r3, lr}
#ifdef __RHO__
  RhoSystem.Functions.Perform.Activate();
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <ExitInitialization+0x24>)
 8001038:	f641 43a8 	movw	r3, #7336	; 0x1ca8
 800103c:	58d3      	ldr	r3, [r2, r3]
 800103e:	4798      	blx	r3
#endif
  if( SystemFunctions.State.IsIn( &System, READY ) )
 8001040:	2104      	movs	r1, #4
 8001042:	4806      	ldr	r0, [pc, #24]	; (800105c <ExitInitialization+0x28>)
 8001044:	f000 fec0 	bl	8001dc8 <IsInStateSystem>
 8001048:	b108      	cbz	r0, 800104e <ExitInitialization+0x1a>
    MasterFunctions.Run();
 800104a:	f000 f831 	bl	80010b0 <Master_Run>
  else
    PlatformFunctions.Wait(250);
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <ExitInitialization+0x2c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	20fa      	movs	r0, #250	; 0xfa
 8001054:	4798      	blx	r3
}
 8001056:	bd08      	pop	{r3, pc}
 8001058:	200000d8 	.word	0x200000d8
 800105c:	20000088 	.word	0x20000088
 8001060:	2000002c 	.word	0x2000002c

08001064 <ApplicationCore>:

/* ACTIVE State Routine */
void ApplicationCore( void )
{
 8001064:	b508      	push	{r3, lr}
#ifdef __RHO__
    RhoSystem.Functions.Perform.CoreProcess();
 8001066:	4a03      	ldr	r2, [pc, #12]	; (8001074 <ApplicationCore+0x10>)
 8001068:	f641 439c 	movw	r3, #7324	; 0x1c9c
 800106c:	58d3      	ldr	r3, [r2, r3]
 800106e:	4798      	blx	r3
#else
#warning "No application core."
#endif
}
 8001070:	bd08      	pop	{r3, pc}
 8001072:	bf00      	nop
 8001074:	200000d8 	.word	0x200000d8

08001078 <Master_Init>:
  PlatformFunctions.GPIO.Write(&(GPIO_t){ LED_GPIO_Port, LED_Pin }, GPIO_PIN_SET);
  MasterFunctions.Init();
}

void Master_Init( void )
{
 8001078:	b510      	push	{r4, lr}
  /* Initialize state manager */
  SystemFunctions.Init( &System, &global_states_list );
 800107a:	4c0b      	ldr	r4, [pc, #44]	; (80010a8 <Master_Init+0x30>)
 800107c:	490b      	ldr	r1, [pc, #44]	; (80010ac <Master_Init+0x34>)
 800107e:	4620      	mov	r0, r4
 8001080:	f000 fe88 	bl	8001d94 <InitSystem>

  /* Initialize core platform */
  SystemFunctions.State.Enter( &System, INITIALIZING );
 8001084:	2101      	movs	r1, #1
 8001086:	4620      	mov	r0, r4
 8001088:	f000 fe96 	bl	8001db8 <EnterStateSystem>

  /* Connect to host, this is critical for finishing initialization hence endless loop */
  SystemFunctions.State.Enter( &System, CONNECTING_TO_HOST );
 800108c:	2102      	movs	r1, #2
 800108e:	4620      	mov	r0, r4
 8001090:	f000 fe92 	bl	8001db8 <EnterStateSystem>

  /* Configure application items */
  SystemFunctions.State.Enter( &System, CONFIGURING );
 8001094:	2103      	movs	r1, #3
 8001096:	4620      	mov	r0, r4
 8001098:	f000 fe8e 	bl	8001db8 <EnterStateSystem>

  /* Exit initialization, enter run */
  SystemFunctions.State.Enter( &System, READY );
 800109c:	2104      	movs	r1, #4
 800109e:	4620      	mov	r0, r4
 80010a0:	f000 fe8a 	bl	8001db8 <EnterStateSystem>
}
 80010a4:	bd10      	pop	{r4, pc}
 80010a6:	bf00      	nop
 80010a8:	20000088 	.word	0x20000088
 80010ac:	20000090 	.word	0x20000090

080010b0 <Master_Run>:

/***************************************************************************************/
/*                                   Master Run                                        */
/***************************************************************************************/
void Master_Run( void )
{
 80010b0:	b508      	push	{r3, lr}
  SystemFunctions.State.Set( &System, ACTIVE );
 80010b2:	2105      	movs	r1, #5
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <Master_Run+0x14>)
 80010b6:	f000 fea7 	bl	8001e08 <SetStateSystem>

  while(1)
  {
    SystemFunctions.State.Perform( &System );
 80010ba:	4802      	ldr	r0, [pc, #8]	; (80010c4 <Master_Run+0x14>)
 80010bc:	f000 fe75 	bl	8001daa <PerformStateSystem>
  while(1)
 80010c0:	e7fb      	b.n	80010ba <Master_Run+0xa>
 80010c2:	bf00      	nop
 80010c4:	20000088 	.word	0x20000088

080010c8 <SystemError>:
{
 80010c8:	b510      	push	{r4, lr}
    LOG( ALWAYS, "System error! Resetting in" );
 80010ca:	480b      	ldr	r0, [pc, #44]	; (80010f8 <SystemError+0x30>)
 80010cc:	f3af 8000 	nop.w
    for( uint8_t i = 3 ; i > 0; i-- )
 80010d0:	2403      	movs	r4, #3
 80010d2:	e00a      	b.n	80010ea <SystemError+0x22>
        LOG_BARE( ALWAYS, " %d", i );
 80010d4:	4621      	mov	r1, r4
 80010d6:	4809      	ldr	r0, [pc, #36]	; (80010fc <SystemError+0x34>)
 80010d8:	f3af 8000 	nop.w
        PlatformFunctions.Wait(1000);
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <SystemError+0x38>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e4:	4798      	blx	r3
    for( uint8_t i = 3 ; i > 0; i-- )
 80010e6:	3c01      	subs	r4, #1
 80010e8:	b2e4      	uxtb	r4, r4
 80010ea:	2c00      	cmp	r4, #0
 80010ec:	d1f2      	bne.n	80010d4 <SystemError+0xc>
    PlatformFunctions.Reset();
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SystemError+0x38>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4798      	blx	r3
}
 80010f4:	bd10      	pop	{r4, pc}
 80010f6:	bf00      	nop
 80010f8:	08007384 	.word	0x08007384
 80010fc:	080073a0 	.word	0x080073a0
 8001100:	2000002c 	.word	0x2000002c

08001104 <Master_Connect>:
{
 8001104:	b570      	push	{r4, r5, r6, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	4606      	mov	r6, r0
 800110a:	460d      	mov	r5, r1
 800110c:	4614      	mov	r4, r2
  printf("Connecting master..."ENDL);
 800110e:	480f      	ldr	r0, [pc, #60]	; (800114c <Master_Connect+0x48>)
 8001110:	f004 f870 	bl	80051f4 <puts>
  Master.IOs.I2C_Primary = i2c;
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <Master_Connect+0x4c>)
 8001116:	601e      	str	r6, [r3, #0]
  Master.Utilities.Timer_Primary = timer;
 8001118:	609d      	str	r5, [r3, #8]
  Master.IOs.UART_Primary = usart;
 800111a:	605c      	str	r4, [r3, #4]
  STM_InitDMA( (uint32_t)&CAMERA_PORT, (uint32_t)RhoSystem.Variables.Buffers.Capture, (uint16_t)CAPTURE_BUFFER_SIZE, true );
 800111c:	2301      	movs	r3, #1
 800111e:	22a2      	movs	r2, #162	; 0xa2
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <Master_Connect+0x50>)
 8001122:	f641 4174 	movw	r1, #7284	; 0x1c74
 8001126:	5841      	ldr	r1, [r0, r1]
 8001128:	480b      	ldr	r0, [pc, #44]	; (8001158 <Master_Connect+0x54>)
 800112a:	f000 f88b 	bl	8001244 <STM_InitDMA>
  PlatformFunctions.GPIO.Write(&(GPIO_t){ LED_GPIO_Port, LED_Pin }, GPIO_PIN_SET);
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <Master_Connect+0x58>)
 8001130:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <Master_Connect+0x5c>)
 8001134:	466b      	mov	r3, sp
 8001136:	e892 0003 	ldmia.w	r2, {r0, r1}
 800113a:	e883 0003 	stmia.w	r3, {r0, r1}
 800113e:	2101      	movs	r1, #1
 8001140:	4618      	mov	r0, r3
 8001142:	47a0      	blx	r4
  MasterFunctions.Init();
 8001144:	f7ff ff98 	bl	8001078 <Master_Init>
}
 8001148:	b002      	add	sp, #8
 800114a:	bd70      	pop	{r4, r5, r6, pc}
 800114c:	080073a4 	.word	0x080073a4
 8001150:	20003e8c 	.word	0x20003e8c
 8001154:	200000d8 	.word	0x200000d8
 8001158:	48000010 	.word	0x48000010
 800115c:	2000002c 	.word	0x2000002c
 8001160:	08007360 	.word	0x08007360

08001164 <HAL_GPIO_EXTI_Callback>:
/************************************************************************
 *                           Interrupt Handlers                         *
 ***********************************************************************/
//static int hrefs = 0;
inline void STM_InterruptHandler( uint16_t GPIO_Pin )
{
 8001164:	b508      	push	{r3, lr}
    /* Applicaiton Specific */
#ifdef __RHO__
  if(!CameraFlags.IRQ) return;
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001168:	785b      	ldrb	r3, [r3, #1]
 800116a:	b11b      	cbz	r3, 8001174 <HAL_GPIO_EXTI_Callback+0x10>
  switch(GPIO_Pin)
 800116c:	2801      	cmp	r0, #1
 800116e:	d002      	beq.n	8001176 <HAL_GPIO_EXTI_Callback+0x12>
 8001170:	2808      	cmp	r0, #8
 8001172:	d016      	beq.n	80011a2 <HAL_GPIO_EXTI_Callback+0x3e>
    STM_InitDMA( (uint32_t)&CAMERA_PORT, _dma_destination, _dma_size, true );
//    LOG(ALWAYS, "0x%08x", Master.Utilities.Timer_Primary->hdma[RHO_TIM_DMA_ID]->Instance->CNDTR );
//    LOG(ALWAYS, ENDL);
  }
#endif
}
 8001174:	bd08      	pop	{r3, pc}
        CameraFlags.Frame = !(flag_t)( VSYNC_GPIO_Port->IDR & VSYNC_Pin );
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x64>)
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	f013 0f01 	tst.w	r3, #1
 800117e:	bf0c      	ite	eq
 8001180:	2201      	moveq	r2, #1
 8001182:	2200      	movne	r2, #0
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001186:	709a      	strb	r2, [r3, #2]
  if(!CameraFlags.Row || CameraFlags.Frame )
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x60>)
 800118a:	78db      	ldrb	r3, [r3, #3]
 800118c:	b11b      	cbz	r3, 8001196 <HAL_GPIO_EXTI_Callback+0x32>
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001190:	789b      	ldrb	r3, [r3, #2]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0ee      	beq.n	8001174 <HAL_GPIO_EXTI_Callback+0x10>
    HAL_DMA_Abort(Master.Utilities.Timer_Primary->hdma[RHO_TIM_DMA_ID]);
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_GPIO_EXTI_Callback+0x68>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800119c:	f000 ffd8 	bl	8002150 <HAL_DMA_Abort>
    STM_InitDMA( (uint32_t)&CAMERA_PORT, _dma_destination, _dma_size, true );
 80011a0:	e7e8      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0x10>
        CameraFlags.Row = (flag_t)( HREF_GPIO_Port->IDR & HREF_Pin );
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x64>)
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80011aa:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x60>)
 80011ac:	70d3      	strb	r3, [r2, #3]
        if( !CameraFlags.Row
 80011ae:	78d3      	ldrb	r3, [r2, #3]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1e9      	bne.n	8001188 <HAL_GPIO_EXTI_Callback+0x24>
         && CameraFlags.Capture.Flag
 80011b4:	7a13      	ldrb	r3, [r2, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0e6      	beq.n	8001188 <HAL_GPIO_EXTI_Callback+0x24>
         && CameraFlags.Capture.Callback != NULL )
 80011ba:	68d3      	ldr	r3, [r2, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0e3      	beq.n	8001188 <HAL_GPIO_EXTI_Callback+0x24>
            CameraFlags.Capture.Callback();
 80011c0:	4798      	blx	r3
 80011c2:	e7e1      	b.n	8001188 <HAL_GPIO_EXTI_Callback+0x24>
 80011c4:	20001ff0 	.word	0x20001ff0
 80011c8:	48000400 	.word	0x48000400
 80011cc:	20003e8c 	.word	0x20003e8c

080011d0 <STM_InterruptEnable>:
void STM_InterruptEnable( void )
{
 80011d0:	b508      	push	{r3, lr}
//  STM_ResumeDMA(RHO_TIM_IT_CC, RHO_TIM_CHANNEL);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011d2:	2006      	movs	r0, #6
 80011d4:	f000 fee2 	bl	8001f9c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011d8:	200a      	movs	r0, #10
 80011da:	f000 fedf 	bl	8001f9c <HAL_NVIC_EnableIRQ>
}
 80011de:	bd08      	pop	{r3, pc}

080011e0 <STM_InterruptDisable>:
void STM_InterruptDisable( void )
{
 80011e0:	b508      	push	{r3, lr}
//  STM_PauseDMA(RHO_TIM_IT_CC, RHO_TIM_CHANNEL);
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80011e2:	2006      	movs	r0, #6
 80011e4:	f000 fee8 	bl	8001fb8 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80011e8:	200a      	movs	r0, #10
 80011ea:	f000 fee5 	bl	8001fb8 <HAL_NVIC_DisableIRQ>
}
 80011ee:	bd08      	pop	{r3, pc}

080011f0 <STM_PauseDMA>:

/************************************************************************
 *                              DMA Handlers                            *
 ***********************************************************************/
inline void STM_PauseDMA( uint32_t interrupt, uint32_t channel )
{
 80011f0:	b510      	push	{r4, lr}
  __HAL_TIM_DISABLE_IT(Master.Utilities.Timer_Primary, interrupt);
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <STM_PauseDMA+0x1c>)
 80011f4:	689c      	ldr	r4, [r3, #8]
 80011f6:	6822      	ldr	r2, [r4, #0]
 80011f8:	68d3      	ldr	r3, [r2, #12]
 80011fa:	ea23 0300 	bic.w	r3, r3, r0
 80011fe:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(Master.Utilities.Timer_Primary->Instance, channel, TIM_CCx_DISABLE);
 8001200:	2200      	movs	r2, #0
 8001202:	6820      	ldr	r0, [r4, #0]
 8001204:	f002 fe3f 	bl	8003e86 <TIM_CCxChannelCmd>
}
 8001208:	bd10      	pop	{r4, pc}
 800120a:	bf00      	nop
 800120c:	20003e8c 	.word	0x20003e8c

08001210 <STM_ResumeDMA>:
inline void STM_ResumeDMA( uint32_t interrupt, uint32_t channel )
{
 8001210:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE_IT(Master.Utilities.Timer_Primary, interrupt ); //RHO_TIM_IT_CC);
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <STM_ResumeDMA+0x18>)
 8001214:	689c      	ldr	r4, [r3, #8]
 8001216:	6822      	ldr	r2, [r4, #0]
 8001218:	68d3      	ldr	r3, [r2, #12]
 800121a:	4303      	orrs	r3, r0
 800121c:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(Master.Utilities.Timer_Primary->Instance, channel/*RHO_TIM_CHANNEL*/, TIM_CCx_ENABLE);
 800121e:	2201      	movs	r2, #1
 8001220:	6820      	ldr	r0, [r4, #0]
 8001222:	f002 fe30 	bl	8003e86 <TIM_CCxChannelCmd>
}
 8001226:	bd10      	pop	{r4, pc}
 8001228:	20003e8c 	.word	0x20003e8c

0800122c <STM_ResetDMA>:
inline void STM_ResetDMA( void * dma_destination, uint8_t dma_id )
{
    if(dma_destination != NULL)
 800122c:	b130      	cbz	r0, 800123c <STM_ResetDMA+0x10>
        Master.Utilities.Timer_Primary->hdma[dma_id/*RHO_TIM_DMA_ID*/]->Instance->CMAR = dma_destination;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <STM_ResetDMA+0x14>)
 8001230:	6892      	ldr	r2, [r2, #8]
 8001232:	3108      	adds	r1, #8
 8001234:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	60d0      	str	r0, [r2, #12]
}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20003e8c 	.word	0x20003e8c

08001244 <STM_InitDMA>:
//    Error_Handler();
//  __HAL_TIM_ENABLE_DMA(Master.Utilities.Timer_Primary, RHO_TIM_DMA_CC);
//  if(init_state) STM_ResumeDMA();
//  _dma_destination = dst;
//  _dma_size = size;
}
 8001244:	4770      	bx	lr

08001246 <STM_GetDMAFillAddress>:
uint32_t STM_GetDMAFillAddress( void )
{
  return 0;//_dma_destination + ( (int32_t)_dma_size - (int32_t)Master.Utilities.Timer_Primary->hdma[RHO_TIM_DMA_ID]->Instance->CNDTR );
}
 8001246:	2000      	movs	r0, #0
 8001248:	4770      	bx	lr

0800124a <STM_UartTxDMA>:
 *                             UART Handlers                            *
 ***********************************************************************/
inline uint8_t STM_UartTxDMA( UART_Handle_t * huart, uint8_t * buffer, uint16_t length )
{
  return 0;//HAL_UART_Transmit( Master.IOs.UART_Primary, buffer, length, UART_TIMEOUT ); //HAL_UART_Transmit_DMA
}
 800124a:	2000      	movs	r0, #0
 800124c:	4770      	bx	lr

0800124e <STM_UartRxDMA>:

inline uint16_t STM_UartRxDMA( UART_Handle_t * huart, uint8_t * buffer )
{
  ///TODO: Actually implement
  return 1;
}
 800124e:	2001      	movs	r0, #1
 8001250:	4770      	bx	lr

08001252 <STM_I2CMasterTx>:

/************************************************************************
 *                              I2C Handlers                            *
 ***********************************************************************/
inline void STM_I2CMasterTx( I2C_Handle_t * hi2c, uint16_t addr, uint8_t * buffer, uint16_t length, uint32_t timeout )
{
 8001252:	b510      	push	{r4, lr}
 8001254:	b082      	sub	sp, #8
  HAL_I2C_Master_Transmit( hi2c, addr, buffer, length, timeout);
 8001256:	9c04      	ldr	r4, [sp, #16]
 8001258:	9400      	str	r4, [sp, #0]
 800125a:	f001 facb 	bl	80027f4 <HAL_I2C_Master_Transmit>
}
 800125e:	b002      	add	sp, #8
 8001260:	bd10      	pop	{r4, pc}

08001262 <STM_SetPortMode>:

/************************************************************************
 *                             GPIO Handlers                            *
 ***********************************************************************/
inline void STM_SetPortMode( GPIO_TypeDef * port, uint16_t pin, uint8_t mode )
{
 8001262:	b500      	push	{lr}
 8001264:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	2300      	movs	r3, #0
 8001268:	9303      	str	r3, [sp, #12]
 800126a:	9304      	str	r3, [sp, #16]
 800126c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = pin;
 800126e:	9101      	str	r1, [sp, #4]
  GPIO_InitStruct.Mode = mode;
 8001270:	9202      	str	r2, [sp, #8]
  HAL_GPIO_Init( (GPIO_TypeDef *)port, &GPIO_InitStruct );
 8001272:	a901      	add	r1, sp, #4
 8001274:	f001 f888 	bl	8002388 <HAL_GPIO_Init>
}
 8001278:	b007      	add	sp, #28
 800127a:	f85d fb04 	ldr.w	pc, [sp], #4

0800127e <STM_ReadPort>:
inline uint8_t STM_ReadPort( GPIO_TypeDef * port )
{
    return port->IDR;
 800127e:	6900      	ldr	r0, [r0, #16]
}
 8001280:	b2c0      	uxtb	r0, r0
 8001282:	4770      	bx	lr

08001284 <STM_WritePin>:
inline void STM_WritePin( GPIO_TypeDef * port, uint16_t pin, uint8_t state )
{
 8001284:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin( port, pin, (GPIO_PinState)state);
 8001286:	f001 f951 	bl	800252c <HAL_GPIO_WritePin>
}
 800128a:	bd08      	pop	{r3, pc}

0800128c <STM_Timestamp>:

/************************************************************************
 *                             Time Handlers                            *
 ***********************************************************************/
inline uint32_t STM_Timestamp(void)
{
 800128c:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800128e:	f000 fe25 	bl	8001edc <HAL_GetTick>
}
 8001292:	bd08      	pop	{r3, pc}

08001294 <STM_Wait>:
inline void STM_Wait( uint32_t nTime )
{
 8001294:	b508      	push	{r3, lr}
  HAL_Delay( nTime );
 8001296:	f000 fe27 	bl	8001ee8 <HAL_Delay>
}
 800129a:	bd08      	pop	{r3, pc}

0800129c <STM_SysClockFreq>:
inline uint32_t STM_SysClockFreq(void)
{
 800129c:	b508      	push	{r3, lr}
  return HAL_RCC_GetSysClockFreq();
 800129e:	f001 ff61 	bl	8003164 <HAL_RCC_GetSysClockFreq>
}
 80012a2:	bd08      	pop	{r3, pc}

080012a4 <STM_Reset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012a8:	4905      	ldr	r1, [pc, #20]	; (80012c0 <STM_Reset+0x1c>)
 80012aa:	68ca      	ldr	r2, [r1, #12]
 80012ac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <STM_Reset+0x20>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	60cb      	str	r3, [r1, #12]
 80012b6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80012ba:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80012bc:	e7fd      	b.n	80012ba <STM_Reset+0x16>
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00
 80012c4:	05fa0004 	.word	0x05fa0004

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b570      	push	{r4, r5, r6, lr}
 80012ca:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	2400      	movs	r4, #0
 80012ce:	9403      	str	r4, [sp, #12]
 80012d0:	9404      	str	r4, [sp, #16]
 80012d2:	9405      	str	r4, [sp, #20]
 80012d4:	9406      	str	r4, [sp, #24]
 80012d6:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d8:	4b44      	ldr	r3, [pc, #272]	; (80013ec <MX_GPIO_Init+0x124>)
 80012da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012dc:	f042 0220 	orr.w	r2, r2, #32
 80012e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80012e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012e4:	f002 0220 	and.w	r2, r2, #32
 80012e8:	9200      	str	r2, [sp, #0]
 80012ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ee:	f042 0201 	orr.w	r2, r2, #1
 80012f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80012f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012f6:	f002 0201 	and.w	r2, r2, #1
 80012fa:	9201      	str	r2, [sp, #4]
 80012fc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001300:	f042 0202 	orr.w	r2, r2, #2
 8001304:	64da      	str	r2, [r3, #76]	; 0x4c
 8001306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWDN_Pin|EN_1V5_Pin|CAM_EN_Pin, GPIO_PIN_RESET);
 8001310:	4622      	mov	r2, r4
 8001312:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f001 f907 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800131e:	4d34      	ldr	r5, [pc, #208]	; (80013f0 <MX_GPIO_Init+0x128>)
 8001320:	4622      	mov	r2, r4
 8001322:	2140      	movs	r1, #64	; 0x40
 8001324:	4628      	mov	r0, r5
 8001326:	f001 f901 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CPI0_Pin CPI1_Pin CPI2_Pin CPI3_Pin
                           CPI4_Pin CPI5_Pin CPI6_Pin CPI7_Pin */
  GPIO_InitStruct.Pin = CPI0_Pin|CPI1_Pin|CPI2_Pin|CPI3_Pin
 800132a:	23ff      	movs	r3, #255	; 0xff
 800132c:	9303      	str	r3, [sp, #12]
                          |CPI4_Pin|CPI5_Pin|CPI6_Pin|CPI7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	a903      	add	r1, sp, #12
 8001334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001338:	f001 f826 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_Pin HREF_Pin PCLK_Pin */
  GPIO_InitStruct.Pin = VSYNC_Pin|HREF_Pin|PCLK_Pin;
 800133c:	2319      	movs	r3, #25
 800133e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001340:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <MX_GPIO_Init+0x12c>)
 8001342:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	a903      	add	r1, sp, #12
 8001348:	4628      	mov	r0, r5
 800134a:	f001 f81d 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCLK_Pin */
  GPIO_InitStruct.Pin = MCLK_Pin;
 800134e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001352:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800135c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(MCLK_GPIO_Port, &GPIO_InitStruct);
 800135e:	a903      	add	r1, sp, #12
 8001360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001364:	f001 f810 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWDN_Pin EN_1V5_Pin */
  GPIO_InitStruct.Pin = PWDN_Pin|EN_1V5_Pin;
 8001368:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800136c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2601      	movs	r6, #1
 8001370:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	a903      	add	r1, sp, #12
 8001378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137c:	f001 f804 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_EN_Pin */
  GPIO_InitStruct.Pin = CAM_EN_Pin;
 8001380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001384:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001388:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(CAM_EN_GPIO_Port, &GPIO_InitStruct);
 800138c:	a903      	add	r1, sp, #12
 800138e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001392:	f000 fff9 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM__CS_Pin */
  GPIO_InitStruct.Pin = CAM__CS_Pin;
 8001396:	2320      	movs	r3, #32
 8001398:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(CAM__CS_GPIO_Port, &GPIO_InitStruct);
 800139e:	a903      	add	r1, sp, #12
 80013a0:	4628      	mov	r0, r5
 80013a2:	f000 fff1 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013a6:	2340      	movs	r3, #64	; 0x40
 80013a8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013b0:	a903      	add	r1, sp, #12
 80013b2:	4628      	mov	r0, r5
 80013b4:	f000 ffe8 	bl	8002388 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013b8:	4622      	mov	r2, r4
 80013ba:	4621      	mov	r1, r4
 80013bc:	2006      	movs	r0, #6
 80013be:	f000 fdb9 	bl	8001f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013c2:	2006      	movs	r0, #6
 80013c4:	f000 fdea 	bl	8001f9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80013c8:	4622      	mov	r2, r4
 80013ca:	4621      	mov	r1, r4
 80013cc:	2009      	movs	r0, #9
 80013ce:	f000 fdb1 	bl	8001f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80013d2:	2009      	movs	r0, #9
 80013d4:	f000 fde2 	bl	8001f9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013d8:	4622      	mov	r2, r4
 80013da:	4621      	mov	r1, r4
 80013dc:	200a      	movs	r0, #10
 80013de:	f000 fda9 	bl	8001f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013e2:	200a      	movs	r0, #10
 80013e4:	f000 fdda 	bl	8001f9c <HAL_NVIC_EnableIRQ>

}
 80013e8:	b008      	add	sp, #32
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	48000400 	.word	0x48000400
 80013f4:	10110000 	.word	0x10110000

080013f8 <_write>:
{
 80013f8:	b508      	push	{r3, lr}
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 1000);
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	b292      	uxth	r2, r2
 8001400:	4801      	ldr	r0, [pc, #4]	; (8001408 <_write+0x10>)
 8001402:	f003 f85c 	bl	80044be <HAL_UART_Transmit>
}
 8001406:	bd08      	pop	{r3, pc}
 8001408:	20003f90 	.word	0x20003f90

0800140c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140e:	e7fe      	b.n	800140e <Error_Handler+0x2>

08001410 <MX_DMA_Init>:
{
 8001410:	b500      	push	{lr}
 8001412:	b08b      	sub	sp, #44	; 0x2c
  HAL_DMA_MuxRequestGeneratorConfigTypeDef pRequestGeneratorConfig = {0};
 8001414:	2300      	movs	r3, #0
 8001416:	9307      	str	r3, [sp, #28]
 8001418:	9308      	str	r3, [sp, #32]
 800141a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig = {0};
 800141c:	9303      	str	r3, [sp, #12]
 800141e:	9304      	str	r3, [sp, #16]
 8001420:	9305      	str	r3, [sp, #20]
 8001422:	9306      	str	r3, [sp, #24]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001424:	4a2c      	ldr	r2, [pc, #176]	; (80014d8 <MX_DMA_Init+0xc8>)
 8001426:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001428:	f041 0104 	orr.w	r1, r1, #4
 800142c:	6491      	str	r1, [r2, #72]	; 0x48
 800142e:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001430:	f001 0104 	and.w	r1, r1, #4
 8001434:	9101      	str	r1, [sp, #4]
 8001436:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001438:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800143a:	f041 0101 	orr.w	r1, r1, #1
 800143e:	6491      	str	r1, [r2, #72]	; 0x48
 8001440:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001442:	f002 0201 	and.w	r2, r2, #1
 8001446:	9202      	str	r2, [sp, #8]
 8001448:	9a02      	ldr	r2, [sp, #8]
  hdma_dma_generator0.Instance = DMA1_Channel1;
 800144a:	4824      	ldr	r0, [pc, #144]	; (80014dc <MX_DMA_Init+0xcc>)
 800144c:	4a24      	ldr	r2, [pc, #144]	; (80014e0 <MX_DMA_Init+0xd0>)
 800144e:	6002      	str	r2, [r0, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8001450:	2201      	movs	r2, #1
 8001452:	6042      	str	r2, [r0, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001454:	6083      	str	r3, [r0, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001456:	60c3      	str	r3, [r0, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8001458:	2280      	movs	r2, #128	; 0x80
 800145a:	6102      	str	r2, [r0, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800145c:	6143      	str	r3, [r0, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800145e:	6183      	str	r3, [r0, #24]
  hdma_dma_generator0.Init.Mode = DMA_CIRCULAR;
 8001460:	2220      	movs	r2, #32
 8001462:	61c2      	str	r2, [r0, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 8001464:	6203      	str	r3, [r0, #32]
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 8001466:	f000 fe07 	bl	8002078 <HAL_DMA_Init>
 800146a:	bb78      	cbnz	r0, 80014cc <MX_DMA_Init+0xbc>
  pRequestGeneratorConfig.SignalID = HAL_DMAMUX1_REQ_GEN_EXTI4;
 800146c:	2304      	movs	r3, #4
 800146e:	9307      	str	r3, [sp, #28]
  pRequestGeneratorConfig.Polarity = HAL_DMAMUX_REQ_GEN_RISING;
 8001470:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001474:	9308      	str	r3, [sp, #32]
  pRequestGeneratorConfig.RequestNumber = 1;
 8001476:	2301      	movs	r3, #1
 8001478:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_DMAEx_ConfigMuxRequestGenerator(&hdma_dma_generator0, &pRequestGeneratorConfig) != HAL_OK)
 800147a:	a907      	add	r1, sp, #28
 800147c:	4817      	ldr	r0, [pc, #92]	; (80014dc <MX_DMA_Init+0xcc>)
 800147e:	f000 ff29 	bl	80022d4 <HAL_DMAEx_ConfigMuxRequestGenerator>
 8001482:	bb28      	cbnz	r0, 80014d0 <MX_DMA_Init+0xc0>
  pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI4;
 8001484:	2304      	movs	r3, #4
 8001486:	9303      	str	r3, [sp, #12]
  pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 8001488:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800148c:	9304      	str	r3, [sp, #16]
  pSyncConfig.SyncEnable = ENABLE;
 800148e:	2301      	movs	r3, #1
 8001490:	f88d 3014 	strb.w	r3, [sp, #20]
  pSyncConfig.EventEnable = DISABLE;
 8001494:	2200      	movs	r2, #0
 8001496:	f88d 2015 	strb.w	r2, [sp, #21]
  pSyncConfig.RequestNumber = 1;
 800149a:	9306      	str	r3, [sp, #24]
  if (HAL_DMAEx_ConfigMuxSync(&hdma_dma_generator0, &pSyncConfig) != HAL_OK)
 800149c:	a903      	add	r1, sp, #12
 800149e:	480f      	ldr	r0, [pc, #60]	; (80014dc <MX_DMA_Init+0xcc>)
 80014a0:	f000 feee 	bl	8002280 <HAL_DMAEx_ConfigMuxSync>
 80014a4:	b9b0      	cbnz	r0, 80014d4 <MX_DMA_Init+0xc4>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	4611      	mov	r1, r2
 80014aa:	200b      	movs	r0, #11
 80014ac:	f000 fd42 	bl	8001f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014b0:	200b      	movs	r0, #11
 80014b2:	f000 fd73 	bl	8001f9c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	4611      	mov	r1, r2
 80014ba:	205e      	movs	r0, #94	; 0x5e
 80014bc:	f000 fd3a 	bl	8001f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 80014c0:	205e      	movs	r0, #94	; 0x5e
 80014c2:	f000 fd6b 	bl	8001f9c <HAL_NVIC_EnableIRQ>
}
 80014c6:	b00b      	add	sp, #44	; 0x2c
 80014c8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 80014cc:	f7ff ff9e 	bl	800140c <Error_Handler>
    Error_Handler( );
 80014d0:	f7ff ff9c 	bl	800140c <Error_Handler>
    Error_Handler( );
 80014d4:	f7ff ff9a 	bl	800140c <Error_Handler>
 80014d8:	40021000 	.word	0x40021000
 80014dc:	20003ee4 	.word	0x20003ee4
 80014e0:	40020008 	.word	0x40020008

080014e4 <MX_I2C1_Init>:
{
 80014e4:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80014e6:	4814      	ldr	r0, [pc, #80]	; (8001538 <MX_I2C1_Init+0x54>)
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_I2C1_Init+0x58>)
 80014ea:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 80014ec:	f1a3 6376 	sub.w	r3, r3, #257949696	; 0xf600000
 80014f0:	f5a3 237b 	sub.w	r3, r3, #1028096	; 0xfb000
 80014f4:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80014f8:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 192;
 80014fa:	23c0      	movs	r3, #192	; 0xc0
 80014fc:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014fe:	2301      	movs	r3, #1
 8001500:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001506:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001508:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800150a:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800150c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800150e:	f001 f913 	bl	8002738 <HAL_I2C_Init>
 8001512:	b950      	cbnz	r0, 800152a <MX_I2C1_Init+0x46>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001514:	2100      	movs	r1, #0
 8001516:	4808      	ldr	r0, [pc, #32]	; (8001538 <MX_I2C1_Init+0x54>)
 8001518:	f001 fa2a 	bl	8002970 <HAL_I2CEx_ConfigAnalogFilter>
 800151c:	b938      	cbnz	r0, 800152e <MX_I2C1_Init+0x4a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800151e:	2100      	movs	r1, #0
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_I2C1_Init+0x54>)
 8001522:	f001 fa53 	bl	80029cc <HAL_I2CEx_ConfigDigitalFilter>
 8001526:	b920      	cbnz	r0, 8001532 <MX_I2C1_Init+0x4e>
}
 8001528:	bd08      	pop	{r3, pc}
    Error_Handler();
 800152a:	f7ff ff6f 	bl	800140c <Error_Handler>
    Error_Handler();
 800152e:	f7ff ff6d 	bl	800140c <Error_Handler>
    Error_Handler();
 8001532:	f7ff ff6b 	bl	800140c <Error_Handler>
 8001536:	bf00      	nop
 8001538:	20003f44 	.word	0x20003f44
 800153c:	40005400 	.word	0x40005400

08001540 <MX_USART1_UART_Init>:
{
 8001540:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8001542:	4815      	ldr	r0, [pc, #84]	; (8001598 <MX_USART1_UART_Init+0x58>)
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_USART1_UART_Init+0x5c>)
 8001546:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8001548:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 800154c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800154e:	2300      	movs	r3, #0
 8001550:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001552:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001554:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001556:	220c      	movs	r2, #12
 8001558:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155e:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001560:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001562:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001564:	f003 f854 	bl	8004610 <HAL_UART_Init>
 8001568:	b970      	cbnz	r0, 8001588 <MX_USART1_UART_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156a:	2100      	movs	r1, #0
 800156c:	480a      	ldr	r0, [pc, #40]	; (8001598 <MX_USART1_UART_Init+0x58>)
 800156e:	f003 f8c8 	bl	8004702 <HAL_UARTEx_SetTxFifoThreshold>
 8001572:	b958      	cbnz	r0, 800158c <MX_USART1_UART_Init+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001574:	2100      	movs	r1, #0
 8001576:	4808      	ldr	r0, [pc, #32]	; (8001598 <MX_USART1_UART_Init+0x58>)
 8001578:	f003 f8e8 	bl	800474c <HAL_UARTEx_SetRxFifoThreshold>
 800157c:	b940      	cbnz	r0, 8001590 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_USART1_UART_Init+0x58>)
 8001580:	f003 f8a0 	bl	80046c4 <HAL_UARTEx_DisableFifoMode>
 8001584:	b930      	cbnz	r0, 8001594 <MX_USART1_UART_Init+0x54>
}
 8001586:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001588:	f7ff ff40 	bl	800140c <Error_Handler>
    Error_Handler();
 800158c:	f7ff ff3e 	bl	800140c <Error_Handler>
    Error_Handler();
 8001590:	f7ff ff3c 	bl	800140c <Error_Handler>
    Error_Handler();
 8001594:	f7ff ff3a 	bl	800140c <Error_Handler>
 8001598:	20003f90 	.word	0x20003f90
 800159c:	40013800 	.word	0x40013800

080015a0 <MX_TIM8_Init>:
{
 80015a0:	b510      	push	{r4, lr}
 80015a2:	b0a0      	sub	sp, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a4:	2400      	movs	r4, #0
 80015a6:	941c      	str	r4, [sp, #112]	; 0x70
 80015a8:	941d      	str	r4, [sp, #116]	; 0x74
 80015aa:	941e      	str	r4, [sp, #120]	; 0x78
 80015ac:	941f      	str	r4, [sp, #124]	; 0x7c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015ae:	9417      	str	r4, [sp, #92]	; 0x5c
 80015b0:	9418      	str	r4, [sp, #96]	; 0x60
 80015b2:	9419      	str	r4, [sp, #100]	; 0x64
 80015b4:	941a      	str	r4, [sp, #104]	; 0x68
 80015b6:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b8:	9414      	str	r4, [sp, #80]	; 0x50
 80015ba:	9415      	str	r4, [sp, #84]	; 0x54
 80015bc:	9416      	str	r4, [sp, #88]	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015be:	940d      	str	r4, [sp, #52]	; 0x34
 80015c0:	940e      	str	r4, [sp, #56]	; 0x38
 80015c2:	940f      	str	r4, [sp, #60]	; 0x3c
 80015c4:	9410      	str	r4, [sp, #64]	; 0x40
 80015c6:	9411      	str	r4, [sp, #68]	; 0x44
 80015c8:	9412      	str	r4, [sp, #72]	; 0x48
 80015ca:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015cc:	2234      	movs	r2, #52	; 0x34
 80015ce:	4621      	mov	r1, r4
 80015d0:	4668      	mov	r0, sp
 80015d2:	f003 f919 	bl	8004808 <memset>
  htim8.Instance = TIM8;
 80015d6:	4832      	ldr	r0, [pc, #200]	; (80016a0 <MX_TIM8_Init+0x100>)
 80015d8:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <MX_TIM8_Init+0x104>)
 80015da:	6003      	str	r3, [r0, #0]
  htim8.Init.Prescaler = 0;
 80015dc:	6044      	str	r4, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	6084      	str	r4, [r0, #8]
  htim8.Init.Period = 65535;
 80015e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e4:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e6:	6104      	str	r4, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 80015e8:	6144      	str	r4, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ea:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015ec:	f002 fa66 	bl	8003abc <HAL_TIM_Base_Init>
 80015f0:	2800      	cmp	r0, #0
 80015f2:	d146      	bne.n	8001682 <MX_TIM8_Init+0xe2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f8:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015fa:	a91c      	add	r1, sp, #112	; 0x70
 80015fc:	4828      	ldr	r0, [pc, #160]	; (80016a0 <MX_TIM8_Init+0x100>)
 80015fe:	f002 fb45 	bl	8003c8c <HAL_TIM_ConfigClockSource>
 8001602:	2800      	cmp	r0, #0
 8001604:	d13f      	bne.n	8001686 <MX_TIM8_Init+0xe6>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001606:	4826      	ldr	r0, [pc, #152]	; (80016a0 <MX_TIM8_Init+0x100>)
 8001608:	f002 fa88 	bl	8003b1c <HAL_TIM_OC_Init>
 800160c:	2800      	cmp	r0, #0
 800160e:	d13c      	bne.n	800168a <MX_TIM8_Init+0xea>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	9317      	str	r3, [sp, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001614:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001616:	a917      	add	r1, sp, #92	; 0x5c
 8001618:	4821      	ldr	r0, [pc, #132]	; (80016a0 <MX_TIM8_Init+0x100>)
 800161a:	f002 fc0b 	bl	8003e34 <HAL_TIM_SlaveConfigSynchro>
 800161e:	2800      	cmp	r0, #0
 8001620:	d135      	bne.n	800168e <MX_TIM8_Init+0xee>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001626:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001628:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800162a:	a914      	add	r1, sp, #80	; 0x50
 800162c:	481c      	ldr	r0, [pc, #112]	; (80016a0 <MX_TIM8_Init+0x100>)
 800162e:	f002 fc3d 	bl	8003eac <HAL_TIMEx_MasterConfigSynchronization>
 8001632:	2800      	cmp	r0, #0
 8001634:	d12d      	bne.n	8001692 <MX_TIM8_Init+0xf2>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001636:	2200      	movs	r2, #0
 8001638:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800163a:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163c:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800163e:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001640:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001642:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001644:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001646:	a90d      	add	r1, sp, #52	; 0x34
 8001648:	4815      	ldr	r0, [pc, #84]	; (80016a0 <MX_TIM8_Init+0x100>)
 800164a:	f002 fadd 	bl	8003c08 <HAL_TIM_OC_ConfigChannel>
 800164e:	bb10      	cbnz	r0, 8001696 <MX_TIM8_Init+0xf6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	9300      	str	r3, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001654:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001656:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001658:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800165a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800165c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001660:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001662:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001664:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001666:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001668:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800166c:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800166e:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001670:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001672:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001674:	4669      	mov	r1, sp
 8001676:	480a      	ldr	r0, [pc, #40]	; (80016a0 <MX_TIM8_Init+0x100>)
 8001678:	f002 fc62 	bl	8003f40 <HAL_TIMEx_ConfigBreakDeadTime>
 800167c:	b968      	cbnz	r0, 800169a <MX_TIM8_Init+0xfa>
}
 800167e:	b020      	add	sp, #128	; 0x80
 8001680:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001682:	f7ff fec3 	bl	800140c <Error_Handler>
    Error_Handler();
 8001686:	f7ff fec1 	bl	800140c <Error_Handler>
    Error_Handler();
 800168a:	f7ff febf 	bl	800140c <Error_Handler>
    Error_Handler();
 800168e:	f7ff febd 	bl	800140c <Error_Handler>
    Error_Handler();
 8001692:	f7ff febb 	bl	800140c <Error_Handler>
    Error_Handler();
 8001696:	f7ff feb9 	bl	800140c <Error_Handler>
    Error_Handler();
 800169a:	f7ff feb7 	bl	800140c <Error_Handler>
 800169e:	bf00      	nop
 80016a0:	20003e98 	.word	0x20003e98
 80016a4:	40013400 	.word	0x40013400

080016a8 <SystemClock_Config>:
{
 80016a8:	b510      	push	{r4, lr}
 80016aa:	b0a4      	sub	sp, #144	; 0x90
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ac:	2238      	movs	r2, #56	; 0x38
 80016ae:	2100      	movs	r1, #0
 80016b0:	a816      	add	r0, sp, #88	; 0x58
 80016b2:	f003 f8a9 	bl	8004808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b6:	2400      	movs	r4, #0
 80016b8:	9411      	str	r4, [sp, #68]	; 0x44
 80016ba:	9412      	str	r4, [sp, #72]	; 0x48
 80016bc:	9413      	str	r4, [sp, #76]	; 0x4c
 80016be:	9414      	str	r4, [sp, #80]	; 0x50
 80016c0:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c2:	2244      	movs	r2, #68	; 0x44
 80016c4:	4621      	mov	r1, r4
 80016c6:	4668      	mov	r0, sp
 80016c8:	f003 f89e 	bl	8004808 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016cc:	4620      	mov	r0, r4
 80016ce:	f001 f9f3 	bl	8002ab8 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d2:	2302      	movs	r3, #2
 80016d4:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016da:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016dc:	2240      	movs	r2, #64	; 0x40
 80016de:	921a      	str	r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e0:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016e2:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80016e4:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016e6:	2228      	movs	r2, #40	; 0x28
 80016e8:	9220      	str	r2, [sp, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ea:	9321      	str	r3, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016ec:	9322      	str	r3, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016ee:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f0:	a816      	add	r0, sp, #88	; 0x58
 80016f2:	f001 fa9b 	bl	8002c2c <HAL_RCC_OscConfig>
 80016f6:	b9f0      	cbnz	r0, 8001736 <SystemClock_Config+0x8e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f8:	230f      	movs	r3, #15
 80016fa:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fc:	2303      	movs	r3, #3
 80016fe:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001704:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001706:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001708:	2104      	movs	r1, #4
 800170a:	a811      	add	r0, sp, #68	; 0x44
 800170c:	f001 fd6e 	bl	80031ec <HAL_RCC_ClockConfig>
 8001710:	b998      	cbnz	r0, 800173a <SystemClock_Config+0x92>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001712:	2341      	movs	r3, #65	; 0x41
 8001714:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001716:	2300      	movs	r3, #0
 8001718:	9301      	str	r3, [sp, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800171a:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171c:	4668      	mov	r0, sp
 800171e:	f001 fe8b 	bl	8003438 <HAL_RCCEx_PeriphCLKConfig>
 8001722:	b960      	cbnz	r0, 800173e <SystemClock_Config+0x96>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_8);
 8001724:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001728:	f04f 61a0 	mov.w	r1, #83886080	; 0x5000000
 800172c:	2000      	movs	r0, #0
 800172e:	f001 fcf1 	bl	8003114 <HAL_RCC_MCOConfig>
}
 8001732:	b024      	add	sp, #144	; 0x90
 8001734:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001736:	f7ff fe69 	bl	800140c <Error_Handler>
    Error_Handler();
 800173a:	f7ff fe67 	bl	800140c <Error_Handler>
    Error_Handler();
 800173e:	f7ff fe65 	bl	800140c <Error_Handler>
	...

08001744 <main>:
{
 8001744:	b508      	push	{r3, lr}
  HAL_Init();
 8001746:	f000 fbad 	bl	8001ea4 <HAL_Init>
  SystemClock_Config();
 800174a:	f7ff ffad 	bl	80016a8 <SystemClock_Config>
  MX_GPIO_Init();
 800174e:	f7ff fdbb 	bl	80012c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001752:	f7ff fe5d 	bl	8001410 <MX_DMA_Init>
  MX_I2C1_Init();
 8001756:	f7ff fec5 	bl	80014e4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800175a:	f7ff fef1 	bl	8001540 <MX_USART1_UART_Init>
  MX_TIM8_Init();
 800175e:	f7ff ff1f 	bl	80015a0 <MX_TIM8_Init>
  printf("Starting...\r\n");
 8001762:	4804      	ldr	r0, [pc, #16]	; (8001774 <main+0x30>)
 8001764:	f003 fd46 	bl	80051f4 <puts>
  MasterFunctions.Connect( &hi2c1, &htim8, &huart1 );
 8001768:	4a03      	ldr	r2, [pc, #12]	; (8001778 <main+0x34>)
 800176a:	4904      	ldr	r1, [pc, #16]	; (800177c <main+0x38>)
 800176c:	4804      	ldr	r0, [pc, #16]	; (8001780 <main+0x3c>)
 800176e:	f7ff fcc9 	bl	8001104 <Master_Connect>
  while (1)
 8001772:	e7fe      	b.n	8001772 <main+0x2e>
 8001774:	080073bc 	.word	0x080073bc
 8001778:	20003f90 	.word	0x20003f90
 800177c:	20003e98 	.word	0x20003e98
 8001780:	20003f44 	.word	0x20003f44

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b510      	push	{r4, lr}
 8001786:	b084      	sub	sp, #16
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8001788:	2400      	movs	r4, #0
 800178a:	9402      	str	r4, [sp, #8]
 800178c:	9403      	str	r4, [sp, #12]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_MspInit+0x4c>)
 8001790:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	661a      	str	r2, [r3, #96]	; 0x60
 8001798:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800179a:	f002 0201 	and.w	r2, r2, #1
 800179e:	9200      	str	r2, [sp, #0]
 80017a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017a8:	659a      	str	r2, [r3, #88]	; 0x58
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80017b4:	2005      	movs	r0, #5
 80017b6:	f000 fbab 	bl	8001f10 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80017ba:	9402      	str	r4, [sp, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80017bc:	9403      	str	r4, [sp, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80017be:	a802      	add	r0, sp, #8
 80017c0:	f001 f930 	bl	8002a24 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80017c4:	f001 f970 	bl	8002aa8 <HAL_PWR_EnablePVD>
  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017c8:	f001 f9fc 	bl	8002bc4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017cc:	b004      	add	sp, #16
 80017ce:	bd10      	pop	{r4, pc}
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d4:	b510      	push	{r4, lr}
 80017d6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	2300      	movs	r3, #0
 80017da:	9303      	str	r3, [sp, #12]
 80017dc:	9304      	str	r3, [sp, #16]
 80017de:	9305      	str	r3, [sp, #20]
 80017e0:	9306      	str	r3, [sp, #24]
 80017e2:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 80017e4:	6802      	ldr	r2, [r0, #0]
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <HAL_I2C_MspInit+0x64>)
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017ec:	b008      	add	sp, #32
 80017ee:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	4c12      	ldr	r4, [pc, #72]	; (800183c <HAL_I2C_MspInit+0x68>)
 80017f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80017fa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SIOD_Pin|SIOC_Pin;
 8001804:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001808:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800180a:	2312      	movs	r3, #18
 800180c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800180e:	2301      	movs	r3, #1
 8001810:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001816:	2304      	movs	r3, #4
 8001818:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	a903      	add	r1, sp, #12
 800181c:	4808      	ldr	r0, [pc, #32]	; (8001840 <HAL_I2C_MspInit+0x6c>)
 800181e:	f000 fdb3 	bl	8002388 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001822:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001828:	65a3      	str	r3, [r4, #88]	; 0x58
 800182a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800182c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001830:	9302      	str	r3, [sp, #8]
 8001832:	9b02      	ldr	r3, [sp, #8]
}
 8001834:	e7da      	b.n	80017ec <HAL_I2C_MspInit+0x18>
 8001836:	bf00      	nop
 8001838:	40005400 	.word	0x40005400
 800183c:	40021000 	.word	0x40021000
 8001840:	48000400 	.word	0x48000400

08001844 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM8)
 8001844:	6802      	ldr	r2, [r0, #0]
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_TIM_Base_MspInit+0x28>)
 8001848:	429a      	cmp	r2, r3
 800184a:	d000      	beq.n	800184e <HAL_TIM_Base_MspInit+0xa>
 800184c:	4770      	bx	lr
{
 800184e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001850:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8001854:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001856:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800185a:	661a      	str	r2, [r3, #96]	; 0x60
 800185c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001866:	b002      	add	sp, #8
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40013400 	.word	0x40013400

08001870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001870:	b500      	push	{lr}
 8001872:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	2300      	movs	r3, #0
 8001876:	9303      	str	r3, [sp, #12]
 8001878:	9304      	str	r3, [sp, #16]
 800187a:	9305      	str	r3, [sp, #20]
 800187c:	9306      	str	r3, [sp, #24]
 800187e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8001880:	6802      	ldr	r2, [r0, #0]
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_UART_MspInit+0x68>)
 8001884:	429a      	cmp	r2, r3
 8001886:	d002      	beq.n	800188e <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001888:	b009      	add	sp, #36	; 0x24
 800188a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800188e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001892:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001898:	661a      	str	r2, [r3, #96]	; 0x60
 800189a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800189c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80018a0:	9201      	str	r2, [sp, #4]
 80018a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018a6:	f042 0201 	orr.w	r2, r2, #1
 80018aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	9302      	str	r3, [sp, #8]
 80018b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = CAM_TX_Pin|CAM_RX_Pin;
 80018b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018c6:	2307      	movs	r3, #7
 80018c8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	a903      	add	r1, sp, #12
 80018cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d0:	f000 fd5a 	bl	8002388 <HAL_GPIO_Init>
}
 80018d4:	e7d8      	b.n	8001888 <HAL_UART_MspInit+0x18>
 80018d6:	bf00      	nop
 80018d8:	40013800 	.word	0x40013800

080018dc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <NMI_Handler>

080018de <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <HardFault_Handler>

080018e0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <MemManage_Handler>

080018e2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <BusFault_Handler>

080018e4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler>

080018e6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e6:	4770      	bx	lr

080018e8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e8:	4770      	bx	lr

080018ea <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ea:	4770      	bx	lr

080018ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ee:	f000 fae9 	bl	8001ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f2:	bd08      	pop	{r3, pc}

080018f4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f000 fe1e 	bl	8002538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80018fc:	bd08      	pop	{r3, pc}

080018fe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80018fe:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001900:	2008      	movs	r0, #8
 8001902:	f000 fe19 	bl	8002538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001906:	bd08      	pop	{r3, pc}

08001908 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001908:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800190a:	2010      	movs	r0, #16
 800190c:	f000 fe14 	bl	8002538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001910:	bd08      	pop	{r3, pc}
	...

08001914 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001914:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dma_generator0);
 8001916:	4802      	ldr	r0, [pc, #8]	; (8001920 <DMA1_Channel1_IRQHandler+0xc>)
 8001918:	f000 fc50 	bl	80021bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800191c:	bd08      	pop	{r3, pc}
 800191e:	bf00      	nop
 8001920:	20003ee4 	.word	0x20003ee4

08001924 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8001924:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_dma_generator0);
 8001926:	4802      	ldr	r0, [pc, #8]	; (8001930 <DMAMUX_OVR_IRQHandler+0xc>)
 8001928:	f000 fd01 	bl	800232e <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 800192c:	bd08      	pop	{r3, pc}
 800192e:	bf00      	nop
 8001930:	20003ee4 	.word	0x20003ee4

08001934 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001934:	2001      	movs	r0, #1
 8001936:	4770      	bx	lr

08001938 <_kill>:

int _kill(int pid, int sig)
{
 8001938:	b508      	push	{r3, lr}
	errno = EINVAL;
 800193a:	f002 ff2d 	bl	8004798 <__errno>
 800193e:	2316      	movs	r3, #22
 8001940:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001942:	f04f 30ff 	mov.w	r0, #4294967295
 8001946:	bd08      	pop	{r3, pc}

08001948 <_exit>:

void _exit (int status)
{
 8001948:	b508      	push	{r3, lr}
	_kill(status, -1);
 800194a:	f04f 31ff 	mov.w	r1, #4294967295
 800194e:	f7ff fff3 	bl	8001938 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001952:	e7fe      	b.n	8001952 <_exit+0xa>

08001954 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001954:	b570      	push	{r4, r5, r6, lr}
 8001956:	460c      	mov	r4, r1
 8001958:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	2500      	movs	r5, #0
 800195c:	42b5      	cmp	r5, r6
 800195e:	da07      	bge.n	8001970 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8001960:	f3af 8000 	nop.w
 8001964:	4621      	mov	r1, r4
 8001966:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800196c:	460c      	mov	r4, r1
 800196e:	e7f5      	b.n	800195c <_read+0x8>
	}

return len;
}
 8001970:	4630      	mov	r0, r6
 8001972:	bd70      	pop	{r4, r5, r6, pc}

08001974 <_close>:
}

int _close(int file)
{
	return -1;
}
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	4770      	bx	lr

0800197a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800197a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800197e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001980:	2000      	movs	r0, #0
 8001982:	4770      	bx	lr

08001984 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001984:	2001      	movs	r0, #1
 8001986:	4770      	bx	lr

08001988 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001988:	2000      	movs	r0, #0
 800198a:	4770      	bx	lr

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b510      	push	{r4, lr}
 800198e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001990:	4a0c      	ldr	r2, [pc, #48]	; (80019c4 <_sbrk+0x38>)
 8001992:	490d      	ldr	r1, [pc, #52]	; (80019c8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001994:	480d      	ldr	r0, [pc, #52]	; (80019cc <_sbrk+0x40>)
 8001996:	6800      	ldr	r0, [r0, #0]
 8001998:	b140      	cbz	r0, 80019ac <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199a:	480c      	ldr	r0, [pc, #48]	; (80019cc <_sbrk+0x40>)
 800199c:	6800      	ldr	r0, [r0, #0]
 800199e:	4403      	add	r3, r0
 80019a0:	1a52      	subs	r2, r2, r1
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d806      	bhi.n	80019b4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <_sbrk+0x40>)
 80019a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80019aa:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80019ac:	4807      	ldr	r0, [pc, #28]	; (80019cc <_sbrk+0x40>)
 80019ae:	4c08      	ldr	r4, [pc, #32]	; (80019d0 <_sbrk+0x44>)
 80019b0:	6004      	str	r4, [r0, #0]
 80019b2:	e7f2      	b.n	800199a <_sbrk+0xe>
    errno = ENOMEM;
 80019b4:	f002 fef0 	bl	8004798 <__errno>
 80019b8:	230c      	movs	r3, #12
 80019ba:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	e7f3      	b.n	80019aa <_sbrk+0x1e>
 80019c2:	bf00      	nop
 80019c4:	20008000 	.word	0x20008000
 80019c8:	00000400 	.word	0x00000400
 80019cc:	20002000 	.word	0x20002000
 80019d0:	20004040 	.word	0x20004040

080019d4 <PerformRhoSystemProcess>:
/************************************************************************
 *                      Functions Declarations                          *
 ***********************************************************************/
/* Main application process */
void PerformRhoSystemProcess( void )
{
 80019d4:	b508      	push	{r3, lr}
    if( RhoSystem.Variables.Flags->Active == false ) return;
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <PerformRhoSystemProcess+0x18>)
 80019d8:	f641 4370 	movw	r3, #7280	; 0x1c70
 80019dc:	58d3      	ldr	r3, [r2, r3]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b11b      	cbz	r3, 80019ea <PerformRhoSystemProcess+0x16>
    RhoSystem.Functions.Perform.FrameCapture();
 80019e2:	f641 4398 	movw	r3, #7320	; 0x1c98
 80019e6:	58d3      	ldr	r3, [r2, r3]
 80019e8:	4798      	blx	r3
//    RhoCore.Perform( &RhoSystem.Variables.Utility, RhoSystem.Variables.Flags->Backgrounding );
//    RhoSystem.Functions.Perform.TransmitPacket();
}
 80019ea:	bd08      	pop	{r3, pc}
 80019ec:	200000d8 	.word	0x200000d8

080019f0 <ActivateRhoSystem>:
    FilterPixelCount( PixelCount, NewCount );
    return ( *PixelCount < FactoredOldCount );
}

void ActivateRhoSystem( void  )
{
 80019f0:	b508      	push	{r3, lr}
    RhoSystem.Variables.Flags->Active = true;
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <ActivateRhoSystem+0x1c>)
 80019f4:	f641 4170 	movw	r1, #7280	; 0x1c70
 80019f8:	5858      	ldr	r0, [r3, r1]
 80019fa:	2201      	movs	r2, #1
 80019fc:	7002      	strb	r2, [r0, #0]
    RhoSystem.Variables.Flags->IRQ = true;
 80019fe:	5859      	ldr	r1, [r3, r1]
 8001a00:	704a      	strb	r2, [r1, #1]
    RhoSystem.Functions.Perform.TransmitPacket();
 8001a02:	f641 42a4 	movw	r2, #7332	; 0x1ca4
 8001a06:	589b      	ldr	r3, [r3, r2]
 8001a08:	4798      	blx	r3
}
 8001a0a:	bd08      	pop	{r3, pc}
 8001a0c:	200000d8 	.word	0x200000d8

08001a10 <DeactivateRhoSystem>:

void DeactivateRhoSystem( void )
{
 8001a10:	b508      	push	{r3, lr}
    // TODO: zero period
    RhoSystem.Variables.Flags->Active = false;
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <DeactivateRhoSystem+0x1c>)
 8001a14:	f641 4170 	movw	r1, #7280	; 0x1c70
 8001a18:	5858      	ldr	r0, [r3, r1]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	7002      	strb	r2, [r0, #0]
    RhoSystem.Variables.Flags->IRQ = false;
 8001a1e:	5859      	ldr	r1, [r3, r1]
 8001a20:	704a      	strb	r2, [r1, #1]
    RhoSystem.Functions.Perform.TransmitPacket();
 8001a22:	f641 42a4 	movw	r2, #7332	; 0x1ca4
 8001a26:	589b      	ldr	r3, [r3, r2]
 8001a28:	4798      	blx	r3
}
 8001a2a:	bd08      	pop	{r3, pc}
 8001a2c:	200000d8 	.word	0x200000d8

08001a30 <TransmitRhoSystemPacket>:

inline void TransmitRhoSystemPacket( void )
{
    //RhoSystem.Functions.Platform.Host.Transmit( (byte_t *)&RhoSystem.Variables.Utility.Packet, sizeof(packet_t) );
}
 8001a30:	4770      	bx	lr
	...

08001a34 <InitializeRhoSystem>:
/***************************************************************************************/
/*                                  Initializers                                       */
/***************************************************************************************/
void InitializeRhoSystem( uint32_t CameraPort, uint32_t HostTxPort )
{
 8001a34:	b508      	push	{r3, lr}
    /* Connect camera/hardware connection */
    RhoSystem.Variables.Addresses.CameraPort  = CameraPort;
 8001a36:	4c08      	ldr	r4, [pc, #32]	; (8001a58 <InitializeRhoSystem+0x24>)
 8001a38:	f641 4348 	movw	r3, #7240	; 0x1c48
 8001a3c:	50e0      	str	r0, [r4, r3]
    RhoSystem.Variables.Addresses.HostTxPort  = HostTxPort;
 8001a3e:	f641 434c 	movw	r3, #7244	; 0x1c4c
 8001a42:	50e1      	str	r1, [r4, r3]
    RhoSystem.Functions.Platform.DMA.Init( RhoSystem.Variables.Addresses.CameraPort, (uint32_t)RhoSystem.Variables.Buffers.Capture, CAPTURE_BUFFER_SIZE, true );
 8001a44:	f641 43c8 	movw	r3, #7368	; 0x1cc8
 8001a48:	58e5      	ldr	r5, [r4, r3]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	22a2      	movs	r2, #162	; 0xa2
 8001a4e:	f641 4174 	movw	r1, #7284	; 0x1c74
 8001a52:	5861      	ldr	r1, [r4, r1]
 8001a54:	47a8      	blx	r5
    while(1);
 8001a56:	e7fe      	b.n	8001a56 <InitializeRhoSystem+0x22>
 8001a58:	200000d8 	.word	0x200000d8

08001a5c <ConnectRhoSystemPlatformInterface>:
    /* Start with backgrounding disabled */
    DeactivateBackgrounding();
}

void ConnectRhoSystemPlatformInterface( platform_interface_functions * platform_interface, camera_application_flags * flags )
{
 8001a5c:	b510      	push	{r4, lr}
 8001a5e:	460c      	mov	r4, r1
  memcpy( (void *)&RhoSystem.Functions.Platform, platform_interface, sizeof(platform_interface_functions) );
 8001a60:	225c      	movs	r2, #92	; 0x5c
 8001a62:	4601      	mov	r1, r0
 8001a64:	4803      	ldr	r0, [pc, #12]	; (8001a74 <ConnectRhoSystemPlatformInterface+0x18>)
 8001a66:	f002 fec1 	bl	80047ec <memcpy>
  RhoSystem.Variables.Flags = flags;
 8001a6a:	4a03      	ldr	r2, [pc, #12]	; (8001a78 <ConnectRhoSystemPlatformInterface+0x1c>)
 8001a6c:	f641 4370 	movw	r3, #7280	; 0x1c70
 8001a70:	50d4      	str	r4, [r2, r3]
}
 8001a72:	bd10      	pop	{r4, pc}
 8001a74:	20001d88 	.word	0x20001d88
 8001a78:	200000d8 	.word	0x200000d8

08001a7c <ZeroRhoSystemMemory>:

void ZeroRhoSystemMemory( void )
{
 8001a7c:	b510      	push	{r4, lr}
    memset( RhoSystem.Variables.Buffers.Thresh,   0, sizeof(index_t)   * THRESH_BUFFER_SIZE );
 8001a7e:	4c08      	ldr	r4, [pc, #32]	; (8001aa0 <ZeroRhoSystemMemory+0x24>)
 8001a80:	f641 12cc 	movw	r2, #6604	; 0x19cc
 8001a84:	2100      	movs	r1, #0
 8001a86:	f641 4378 	movw	r3, #7288	; 0x1c78
 8001a8a:	58e0      	ldr	r0, [r4, r3]
 8001a8c:	f002 febc 	bl	8004808 <memset>
    memset( RhoSystem.Variables.Buffers.Quadrant, 0, sizeof(density_t) * 4                  );
 8001a90:	f641 4384 	movw	r3, #7300	; 0x1c84
 8001a94:	58e3      	ldr	r3, [r4, r3]
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
}
 8001a9c:	bd10      	pop	{r4, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200000d8 	.word	0x200000d8

08001aa4 <CaptureRow>:
{
 8001aa4:	b4f0      	push	{r4, r5, r6, r7}
    __asm volatile
 8001aa6:	9d04      	ldr	r5, [sp, #16]
 8001aa8:	9e05      	ldr	r6, [sp, #20]
 8001aaa:	9f06      	ldr	r7, [sp, #24]
 8001aac:	2400      	movs	r4, #0

08001aae <capture>:
 8001aae:	4418      	add	r0, r3
 8001ab0:	42a8      	cmp	r0, r5
 8001ab2:	da07      	bge.n	8001ac4 <end1>
 8001ab4:	7804      	ldrb	r4, [r0, #0]
 8001ab6:	4294      	cmp	r4, r2
 8001ab8:	dbf9      	blt.n	8001aae <capture>
 8001aba:	eba0 0406 	sub.w	r4, r0, r6
 8001abe:	f821 4b02 	strh.w	r4, [r1], #2
 8001ac2:	e7f4      	b.n	8001aae <capture>

08001ac4 <end1>:
}
 8001ac4:	bcf0      	pop	{r4, r5, r6, r7}
 8001ac6:	4770      	bx	lr

08001ac8 <CaptureRowCallback>:
{
 8001ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001acc:	b087      	sub	sp, #28
} rho_system_t;

extern rho_system_t RhoSystem;

static inline void EnableCaptureCallback(  void ) { RhoSystem.Variables.Flags->Capture.Flag  = 1; }
static inline void DisableCaptureCallback( void ) { RhoSystem.Variables.Flags->Capture.Flag  = 0; }
 8001ace:	4c27      	ldr	r4, [pc, #156]	; (8001b6c <CaptureRowCallback+0xa4>)
 8001ad0:	f641 4770 	movw	r7, #7280	; 0x1c70
 8001ad4:	59e3      	ldr	r3, [r4, r7]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	721a      	strb	r2, [r3, #8]
    RhoSystem.Variables.Addresses.CaptureIndex = (address_t)((uint32_t)RhoSystem.Variables.Buffers.Capture + (uint32_t)RhoSystem.Variables.Flags->EvenRowToggle);
 8001ada:	f641 4374 	movw	r3, #7284	; 0x1c74
 8001ade:	f854 a003 	ldr.w	sl, [r4, r3]
 8001ae2:	59e3      	ldr	r3, [r4, r7]
 8001ae4:	799e      	ldrb	r6, [r3, #6]
 8001ae6:	4456      	add	r6, sl
 8001ae8:	f641 4264 	movw	r2, #7268	; 0x1c64
 8001aec:	50a6      	str	r6, [r4, r2]
        (index_t *)RhoSystem.Variables.Addresses.ThreshIndex,
 8001aee:	f641 4568 	movw	r5, #7272	; 0x1c68
 8001af2:	f854 b005 	ldr.w	fp, [r4, r5]
        (byte_t)RhoSystem.Variables.Utility.subsample,
 8001af6:	f9b4 8344 	ldrsh.w	r8, [r4, #836]	; 0x344
        (address_t)RhoSystem.Variables.Addresses.CaptureEnd,
 8001afa:	f641 4250 	movw	r2, #7248	; 0x1c50
 8001afe:	58a2      	ldr	r2, [r4, r2]
 8001b00:	9205      	str	r2, [sp, #20]
        (address_t)RhoSystem.Variables.Flags->Row );
 8001b02:	f893 9003 	ldrb.w	r9, [r3, #3]
 8001b06:	fa5f f989 	uxtb.w	r9, r9
    CaptureRow(
 8001b0a:	fa5f f888 	uxtb.w	r8, r8
 8001b0e:	e9d4 01f4 	ldrd	r0, r1, [r4, #976]	; 0x3d0
 8001b12:	f7ff f871 	bl	8000bf8 <__aeabi_d2uiz>
 8001b16:	f8cd 9008 	str.w	r9, [sp, #8]
 8001b1a:	f8cd a004 	str.w	sl, [sp, #4]
 8001b1e:	9a05      	ldr	r2, [sp, #20]
 8001b20:	9200      	str	r2, [sp, #0]
 8001b22:	4643      	mov	r3, r8
 8001b24:	b2c2      	uxtb	r2, r0
 8001b26:	4659      	mov	r1, fp
 8001b28:	4630      	mov	r0, r6
 8001b2a:	f7ff ffbb 	bl	8001aa4 <CaptureRow>
        *(index_t *)(RhoSystem.Variables.Addresses.ThreshIndex++) = Y_DEL;
 8001b2e:	5963      	ldr	r3, [r4, r5]
 8001b30:	1d1a      	adds	r2, r3, #4
 8001b32:	5162      	str	r2, [r4, r5]
 8001b34:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001b38:	801a      	strh	r2, [r3, #0]
    RhoSystem.Variables.Flags->EvenRowToggle = !RhoSystem.Variables.Flags->EvenRowToggle;
 8001b3a:	59e2      	ldr	r2, [r4, r7]
 8001b3c:	7993      	ldrb	r3, [r2, #6]
 8001b3e:	f083 0301 	eor.w	r3, r3, #1
 8001b42:	7193      	strb	r3, [r2, #6]
    if( ( (uint32_t)RhoSystem.Variables.Addresses.ThreshIndex < (uint32_t)RhoSystem.Variables.Addresses.ThreshMax )
 8001b44:	5962      	ldr	r2, [r4, r5]
 8001b46:	f641 435c 	movw	r3, #7260	; 0x1c5c
 8001b4a:	58e3      	ldr	r3, [r4, r3]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d20a      	bcs.n	8001b66 <CaptureRowCallback+0x9e>
        && ( --RhoSystem.Variables.Utility.rows_left > 0 ))
 8001b50:	f9b4 3346 	ldrsh.w	r3, [r4, #838]	; 0x346
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	f8a4 3346 	strh.w	r3, [r4, #838]	; 0x346
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dd02      	ble.n	8001b66 <CaptureRowCallback+0x9e>
static inline void EnableCaptureCallback(  void ) { RhoSystem.Variables.Flags->Capture.Flag  = 1; }
 8001b60:	59e3      	ldr	r3, [r4, r7]
 8001b62:	2201      	movs	r2, #1
 8001b64:	721a      	strb	r2, [r3, #8]
}
 8001b66:	b007      	add	sp, #28
 8001b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b6c:	200000d8 	.word	0x200000d8

08001b70 <ProcessFrameSection>:
{
 8001b70:	b4f0      	push	{r4, r5, r6, r7}
        t_addr              = (uint32_t)RhoSystem.Variables.Addresses.CaptureIndex,
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <end2+0xc>)
 8001b74:	f641 4464 	movw	r4, #7268	; 0x1c64
 8001b78:	591d      	ldr	r5, [r3, r4]
        t_last              = (uint32_t)RhoSystem.Variables.Addresses.ThreshIndex,
 8001b7a:	f641 4468 	movw	r4, #7272	; 0x1c68
 8001b7e:	591e      	ldr	r6, [r3, r4]
        Cx                  = (uint32_t)RhoSystem.Variables.Utility.centroid.x,
 8001b80:	f9b3 7350 	ldrsh.w	r7, [r3, #848]	; 0x350
        Dy                  = (uint32_t)RhoSystem.Variables.Utility.density_map_pair.y.map,
 8001b84:	f8d3 c1a0 	ldr.w	ip, [r3, #416]	; 0x1a0
        Dx_i                = (uint32_t)RhoSystem.Variables.Utility.density_map_pair.x.map,
 8001b88:	681c      	ldr	r4, [r3, #0]
        Dx_end              = Dx_i + (uint32_t)rows,
 8001b8a:	4421      	add	r1, r4
    __asm volatile
 8001b8c:	2300      	movs	r3, #0

08001b8e <loop_process>:
 8001b8e:	f835 3b01 	ldrh.w	r3, [r5], #1
 8001b92:	2b50      	cmp	r3, #80	; 0x50
 8001b94:	da0d      	bge.n	8001bb2 <row_end>

08001b96 <left_value>:
 8001b96:	42bb      	cmp	r3, r7
 8001b98:	dc02      	bgt.n	8001ba0 <right_value>
 8001b9a:	f103 0301 	add.w	r3, r3, #1
 8001b9e:	e001      	b.n	8001ba4 <row_update>

08001ba0 <right_value>:
 8001ba0:	f103 0301 	add.w	r3, r3, #1

08001ba4 <row_update>:
 8001ba4:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8001ba8:	f103 0301 	add.w	r3, r3, #1
 8001bac:	f80c 3003 	strb.w	r3, [ip, r3]
 8001bb0:	e7ed      	b.n	8001b8e <loop_process>

08001bb2 <row_end>:
 8001bb2:	441b      	add	r3, r3
 8001bb4:	fad3 f353 	uqsub16	r3, r3, r3
 8001bb8:	f804 3b01 	strb.w	r3, [r4], #1
 8001bbc:	428c      	cmp	r4, r1
 8001bbe:	da03      	bge.n	8001bc8 <end2>
 8001bc0:	461b      	mov	r3, r3
 8001bc2:	42b5      	cmp	r5, r6
 8001bc4:	da00      	bge.n	8001bc8 <end2>
 8001bc6:	dbe2      	blt.n	8001b8e <loop_process>

08001bc8 <end2>:
    return (section_process_t){ Q_left, Q_right, complete };
 8001bc8:	6003      	str	r3, [r0, #0]
 8001bca:	6043      	str	r3, [r0, #4]
 8001bcc:	7203      	strb	r3, [r0, #8]
}
 8001bce:	bcf0      	pop	{r4, r5, r6, r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	200000d8 	.word	0x200000d8

08001bd8 <CaptureAndProcessFrame>:
{
 8001bd8:	b500      	push	{lr}
 8001bda:	b087      	sub	sp, #28
    RhoSystem.Variables.Addresses.ThreshIndex = (address_t)RhoSystem.Variables.Buffers.Thresh;
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <CaptureAndProcessFrame+0x9c>)
 8001bde:	f641 4278 	movw	r2, #7288	; 0x1c78
 8001be2:	589a      	ldr	r2, [r3, r2]
 8001be4:	f641 4168 	movw	r1, #7272	; 0x1c68
 8001be8:	505a      	str	r2, [r3, r1]
    RhoSystem.Variables.Utility.rows_left = (index_t)RhoSystem.Variables.Utility.height;
 8001bea:	f9b3 1342 	ldrsh.w	r1, [r3, #834]	; 0x342
 8001bee:	f8a3 1346 	strh.w	r1, [r3, #838]	; 0x346
    RhoSystem.Variables.Addresses.CaptureIndex = RhoSystem.Variables.Addresses.ThreshIndex;
 8001bf2:	f641 4164 	movw	r1, #7268	; 0x1c64
 8001bf6:	505a      	str	r2, [r3, r1]
    RhoSystem.Variables.Flags->EvenRowToggle = false;
 8001bf8:	f641 4270 	movw	r2, #7280	; 0x1c70
 8001bfc:	589a      	ldr	r2, [r3, r2]
 8001bfe:	2100      	movs	r1, #0
 8001c00:	7191      	strb	r1, [r2, #6]
    capture_buffer = (uint32_t)RhoSystem.Variables.Buffers.Capture;
 8001c02:	f641 4274 	movw	r2, #7284	; 0x1c74
 8001c06:	589a      	ldr	r2, [r3, r2]
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <CaptureAndProcessFrame+0xa0>)
 8001c0a:	601a      	str	r2, [r3, #0]
    while(!RhoSystem.Variables.Flags->Row);
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <CaptureAndProcessFrame+0x9c>)
 8001c0e:	f641 4370 	movw	r3, #7280	; 0x1c70
 8001c12:	58d3      	ldr	r3, [r2, r3]
 8001c14:	78db      	ldrb	r3, [r3, #3]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f8      	beq.n	8001c0c <CaptureAndProcessFrame+0x34>
    CaptureRowCallback();
 8001c1a:	f7ff ff55 	bl	8001ac8 <CaptureRowCallback>
    do{ ProcessedTopSectionData = ProcessFrameSection( RhoSystem.Variables.Utility.centroid.y );
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <CaptureAndProcessFrame+0x9c>)
 8001c20:	f9b3 1352 	ldrsh.w	r1, [r3, #850]	; 0x352
 8001c24:	a803      	add	r0, sp, #12
 8001c26:	f7ff ffa3 	bl	8001b70 <ProcessFrameSection>
    } while( !ProcessedTopSectionData.complete );
 8001c2a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f5      	beq.n	8001c1e <CaptureAndProcessFrame+0x46>
    do{ ProcessedBtmSectionData = ProcessFrameSection( RhoSystem.Variables.Utility.height );
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <CaptureAndProcessFrame+0x9c>)
 8001c34:	f9b3 1342 	ldrsh.w	r1, [r3, #834]	; 0x342
 8001c38:	4668      	mov	r0, sp
 8001c3a:	f7ff ff99 	bl	8001b70 <ProcessFrameSection>
    } while( !ProcessedBtmSectionData.complete );
 8001c3e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f5      	beq.n	8001c32 <CaptureAndProcessFrame+0x5a>
static inline void DisableCaptureCallback( void ) { RhoSystem.Variables.Flags->Capture.Flag  = 0; }
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <CaptureAndProcessFrame+0x9c>)
 8001c48:	f641 4270 	movw	r2, #7280	; 0x1c70
 8001c4c:	589a      	ldr	r2, [r3, r2]
 8001c4e:	2100      	movs	r1, #0
 8001c50:	7211      	strb	r1, [r2, #8]
    RhoSystem.Variables.Buffers.Quadrant[FRAME_QUADRANT_TOP_LEFT_INDEX]  = ProcessedTopSectionData.left;
 8001c52:	f641 4284 	movw	r2, #7300	; 0x1c84
 8001c56:	5899      	ldr	r1, [r3, r2]
 8001c58:	9803      	ldr	r0, [sp, #12]
 8001c5a:	6008      	str	r0, [r1, #0]
    RhoSystem.Variables.Buffers.Quadrant[FRAME_QUADRANT_TOP_RIGHT_INDEX] = ProcessedTopSectionData.right;
 8001c5c:	5899      	ldr	r1, [r3, r2]
 8001c5e:	9804      	ldr	r0, [sp, #16]
 8001c60:	6048      	str	r0, [r1, #4]
    RhoSystem.Variables.Buffers.Quadrant[FRAME_QUADRANT_BTM_LEFT_INDEX]  = ProcessedBtmSectionData.left;
 8001c62:	5899      	ldr	r1, [r3, r2]
 8001c64:	9800      	ldr	r0, [sp, #0]
 8001c66:	6088      	str	r0, [r1, #8]
    RhoSystem.Variables.Buffers.Quadrant[FRAME_QUADRANT_BTM_RIGHT_INDEX] = ProcessedBtmSectionData.right;
 8001c68:	589b      	ldr	r3, [r3, r2]
 8001c6a:	9a01      	ldr	r2, [sp, #4]
 8001c6c:	60da      	str	r2, [r3, #12]
}
 8001c6e:	b007      	add	sp, #28
 8001c70:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c74:	200000d8 	.word	0x200000d8
 8001c78:	20004020 	.word	0x20004020

08001c7c <ProcessRhoSystemFrameCapture>:
{
 8001c7c:	b510      	push	{r4, lr}
    RhoSystem.Functions.Memory.Zero();
 8001c7e:	4c08      	ldr	r4, [pc, #32]	; (8001ca0 <ProcessRhoSystemFrameCapture+0x24>)
 8001c80:	f641 530c 	movw	r3, #7436	; 0x1d0c
 8001c84:	58e3      	ldr	r3, [r4, r3]
 8001c86:	4798      	blx	r3
    RhoSystem.Functions.Platform.Interrupt.Enable();
 8001c88:	f504 53e6 	add.w	r3, r4, #7360	; 0x1cc0
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4798      	blx	r3
    CaptureAndProcessFrame();
 8001c90:	f7ff ffa2 	bl	8001bd8 <CaptureAndProcessFrame>
    RhoSystem.Functions.Platform.Interrupt.Disable();
 8001c94:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8001c98:	58e3      	ldr	r3, [r4, r3]
 8001c9a:	4798      	blx	r3
}
 8001c9c:	bd10      	pop	{r4, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200000d8 	.word	0x200000d8

08001ca4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ca4:	480d      	ldr	r0, [pc, #52]	; (8001cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ca6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca8:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001caa:	490e      	ldr	r1, [pc, #56]	; (8001ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cac:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <LoopForever+0xe>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cb0:	e002      	b.n	8001cb8 <LoopCopyDataInit>

08001cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb6:	3304      	adds	r3, #4

08001cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cbc:	d3f9      	bcc.n	8001cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cbe:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cc0:	4c0b      	ldr	r4, [pc, #44]	; (8001cf0 <LoopForever+0x16>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc4:	e001      	b.n	8001cca <LoopFillZerobss>

08001cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc8:	3204      	adds	r2, #4

08001cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ccc:	d3fb      	bcc.n	8001cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cce:	f000 f8b7 	bl	8001e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f002 fd67 	bl	80047a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cd6:	f7ff fd35 	bl	8001744 <main>

08001cda <LoopForever>:

LoopForever:
    b LoopForever
 8001cda:	e7fe      	b.n	8001cda <LoopForever>
  ldr   r0, =_estack
 8001cdc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce4:	20001fc4 	.word	0x20001fc4
  ldr r2, =_sidata
 8001ce8:	0800789c 	.word	0x0800789c
  ldr r2, =_sbss
 8001cec:	20001fc4 	.word	0x20001fc4
  ldr r4, =_ebss
 8001cf0:	20004040 	.word	0x20004040

08001cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <ADC1_2_IRQHandler>

08001cf6 <InitPlatform>:
/************************************************************************
 *                      Local Function Definitions                      *
 ***********************************************************************/
void InitPlatform( platform_t * platform, protocol_t host_communication_protocol, generic_handle_t host_communication_handle )
{
  *platform = (platform_t){ host_communication_protocol, host_communication_handle };
 8001cf6:	7001      	strb	r1, [r0, #0]
 8001cf8:	6042      	str	r2, [r0, #4]
}
 8001cfa:	4770      	bx	lr

08001cfc <PerformHostCommand>:
}

platform_status_enum PerformHostCommand(
  host_command_type_enum command,
  platform_wait_priority_level_enum priority )
{
 8001cfc:	b570      	push	{r4, r5, r6, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	4606      	mov	r6, r0
  platform_status_enum status = NO_STATUS;
  uint16_t return_data = 0;
  host_command_t packet = { HOST_ADDRESS, THIS_ID, priority, command };
 8001d02:	2301      	movs	r3, #1
 8001d04:	f88d 3004 	strb.w	r3, [sp, #4]
 8001d08:	f88d 3005 	strb.w	r3, [sp, #5]
 8001d0c:	f88d 1006 	strb.w	r1, [sp, #6]
 8001d10:	f88d 0007 	strb.w	r0, [sp, #7]
  for( uint8_t i = 0;
 8001d14:	2400      	movs	r4, #0
  platform_status_enum status = NO_STATUS;
 8001d16:	4625      	mov	r5, r4
  for( uint8_t i = 0;
 8001d18:	e00d      	b.n	8001d36 <PerformHostCommand+0x3a>
    i++ )
  {
    switch( command )
    {
      case PING_HOST:
        return_data = PlatformFunctions.Host.Transmit( (uint8_t *)&packet, sizeof(host_command_t) );
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	eb0d 0001 	add.w	r0, sp, r1
 8001d20:	f000 f816 	bl	8001d50 <TransmitToHost>
 8001d24:	b280      	uxth	r0, r0
        if( return_data == 0 )
 8001d26:	b170      	cbz	r0, 8001d46 <PerformHostCommand+0x4a>
        if( return_data == 0 )
        {
          status = INVALID_OUTPUT;
          continue;
        }
        status = OK;
 8001d28:	4635      	mov	r5, r6
        break;
      default:
        status = INVALID_INPUT;
        break;
    }
    PlatformFunctions.Wait( HOST_COMMAND_RETRY_TIME );
 8001d2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d2e:	f7ff fab1 	bl	8001294 <STM_Wait>
    i++ )
 8001d32:	3401      	adds	r4, #1
 8001d34:	b2e4      	uxtb	r4, r4
  for( uint8_t i = 0;
 8001d36:	2c02      	cmp	r4, #2
 8001d38:	d807      	bhi.n	8001d4a <PerformHostCommand+0x4e>
    && status != OK;
 8001d3a:	2d01      	cmp	r5, #1
 8001d3c:	d005      	beq.n	8001d4a <PerformHostCommand+0x4e>
    switch( command )
 8001d3e:	2e01      	cmp	r6, #1
 8001d40:	d0eb      	beq.n	8001d1a <PerformHostCommand+0x1e>
        status = INVALID_INPUT;
 8001d42:	2503      	movs	r5, #3
 8001d44:	e7f1      	b.n	8001d2a <PerformHostCommand+0x2e>
          status = FAILURE;
 8001d46:	2502      	movs	r5, #2
 8001d48:	e7f3      	b.n	8001d32 <PerformHostCommand+0x36>
  }
  return status;
}
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	b002      	add	sp, #8
 8001d4e:	bd70      	pop	{r4, r5, r6, pc}

08001d50 <TransmitToHost>:

uint8_t TransmitToHost( uint8_t * buffer, uint16_t length )
{
 8001d50:	b508      	push	{r3, lr}
 8001d52:	460a      	mov	r2, r1
#if HOST_COMMUNICATION_PROTOCOL == USART
  return PlatformFunctions.USART.Transmit( (UART_Handle_t *)Platform.HostHandle, buffer, length );
 8001d54:	4601      	mov	r1, r0
 8001d56:	4b02      	ldr	r3, [pc, #8]	; (8001d60 <TransmitToHost+0x10>)
 8001d58:	6858      	ldr	r0, [r3, #4]
 8001d5a:	f7ff fa76 	bl	800124a <STM_UartTxDMA>
#elif HOST_COMMUNICATION_PROTOCOL == USB
  return CDC_Transmit_FS(buffer, length);
#else
#error "Invalid host communication protocol!"
#endif
}
 8001d5e:	bd08      	pop	{r3, pc}
 8001d60:	20004024 	.word	0x20004024

08001d64 <ReceiveFromHost>:
uint16_t ReceiveFromHost( uint8_t * buffer )
{
 8001d64:	b508      	push	{r3, lr}
 8001d66:	4601      	mov	r1, r0
  #if HOST_COMMUNICATION_PROTOCOL == USART
    return PlatformFunctions.USART.Receive( (UART_Handle_t *)Platform.HostHandle, buffer );
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <ReceiveFromHost+0x10>)
 8001d6a:	6858      	ldr	r0, [r3, #4]
 8001d6c:	f7ff fa6f 	bl	800124e <STM_UartRxDMA>
    PlatformFunctions.I2C.Receive( (I2C_Handle_t *)Platform.HostHandle, HOST_ADDRESS, data, len );
    return 1;
  #else
  #error "Invalid host communication protocol!"
  #endif
}
 8001d70:	bd08      	pop	{r3, pc}
 8001d72:	bf00      	nop
 8001d74:	20004024 	.word	0x20004024

08001d78 <WritePin>:
{
 8001d78:	b508      	push	{r3, lr}
  PLATFORM_SPECIFIC(WritePin)( gpio->port, gpio->pin, val );
 8001d7a:	b2ca      	uxtb	r2, r1
 8001d7c:	8881      	ldrh	r1, [r0, #4]
 8001d7e:	6800      	ldr	r0, [r0, #0]
 8001d80:	f7ff fa80 	bl	8001284 <STM_WritePin>
}
 8001d84:	bd08      	pop	{r3, pc}

08001d86 <SetPortMode>:
{
 8001d86:	b508      	push	{r3, lr}
  PLATFORM_SPECIFIC(SetPortMode)( gpio->port, gpio->pin, val );
 8001d88:	b2ca      	uxtb	r2, r1
 8001d8a:	8881      	ldrh	r1, [r0, #4]
 8001d8c:	6800      	ldr	r0, [r0, #0]
 8001d8e:	f7ff fa68 	bl	8001262 <STM_SetPortMode>
}
 8001d92:	bd08      	pop	{r3, pc}

08001d94 <InitSystem>:
#include "printers.h"

void InitSystem(
  system_t * system,
  system_states_list_t * state_list )
{
 8001d94:	b508      	push	{r3, lr}
  system->state_list = state_list;
 8001d96:	6041      	str	r1, [r0, #4]
  SystemFunctions.State.Set( system, system->state );
 8001d98:	7841      	ldrb	r1, [r0, #1]
 8001d9a:	f000 f835 	bl	8001e08 <SetStateSystem>
}
 8001d9e:	bd08      	pop	{r3, pc}

08001da0 <GetStateSystem>:
{
  SystemFunctions.State.Enter( system, SystemFunctions.State.Get(system)->next );
}

system_state_t * GetStateSystem( system_t * system )
{
 8001da0:	b508      	push	{r3, lr}
  return SystemFunctions.State.GetFromList( system, system->state );
 8001da2:	7841      	ldrb	r1, [r0, #1]
 8001da4:	f000 f81a 	bl	8001ddc <GetStateFromListSystem>
}
 8001da8:	bd08      	pop	{r3, pc}

08001daa <PerformStateSystem>:
    LOG(STATE_DEBUG, "Entering %s", system_state_enum_strings[new_state]);
  system->state = new_state;
}

void PerformStateSystem( system_t * system )
{
 8001daa:	b508      	push	{r3, lr}
  void (*routine)(void) = SystemFunctions.State.Get(system)->routine;
 8001dac:	f7ff fff8 	bl	8001da0 <GetStateSystem>
 8001db0:	6843      	ldr	r3, [r0, #4]
  if( routine != NULL ) routine();
 8001db2:	b103      	cbz	r3, 8001db6 <PerformStateSystem+0xc>
 8001db4:	4798      	blx	r3
}
 8001db6:	bd08      	pop	{r3, pc}

08001db8 <EnterStateSystem>:

void EnterStateSystem( system_t * system, system_state_enum new_state )
{
 8001db8:	b510      	push	{r4, lr}
 8001dba:	4604      	mov	r4, r0
  SystemFunctions.State.Set( system, new_state );
 8001dbc:	f000 f824 	bl	8001e08 <SetStateSystem>
  SystemFunctions.State.Perform( system );
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7ff fff2 	bl	8001daa <PerformStateSystem>
}
 8001dc6:	bd10      	pop	{r4, pc}

08001dc8 <IsInStateSystem>:

bool IsInStateSystem( system_t * system, system_state_enum check_state )
{
 8001dc8:	b510      	push	{r4, lr}
 8001dca:	460c      	mov	r4, r1
  return ( SystemFunctions.State.Get( system )->state == check_state );
 8001dcc:	f7ff ffe8 	bl	8001da0 <GetStateSystem>
 8001dd0:	7800      	ldrb	r0, [r0, #0]
}
 8001dd2:	42a0      	cmp	r0, r4
 8001dd4:	bf14      	ite	ne
 8001dd6:	2000      	movne	r0, #0
 8001dd8:	2001      	moveq	r0, #1
 8001dda:	bd10      	pop	{r4, pc}

08001ddc <GetStateFromListSystem>:
system_state_t * GetStateFromListSystem( system_t * system, system_state_enum state )
{
    system_state_t * state_type;
    /* Cycle state list to find specified state.
        If not found, return is ERROR_STATE */
    for( uint8_t i = 0; i < SYS_ERROR; i++ )
 8001ddc:	2300      	movs	r3, #0
 8001dde:	2b07      	cmp	r3, #7
 8001de0:	d80f      	bhi.n	8001e02 <GetStateFromListSystem+0x26>
{
 8001de2:	b410      	push	{r4}
    {
        state_type = &(*system->state_list)[i];
 8001de4:	6842      	ldr	r2, [r0, #4]
 8001de6:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
        if( state_type->state == state ) break;
 8001dea:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8001dee:	428a      	cmp	r2, r1
 8001df0:	d003      	beq.n	8001dfa <GetStateFromListSystem+0x1e>
    for( uint8_t i = 0; i < SYS_ERROR; i++ )
 8001df2:	3301      	adds	r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b07      	cmp	r3, #7
 8001df8:	d9f4      	bls.n	8001de4 <GetStateFromListSystem+0x8>
    }
    return state_type;
}
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	4620      	mov	r0, r4
 8001e04:	4770      	bx	lr
	...

08001e08 <SetStateSystem>:
{
 8001e08:	b570      	push	{r4, r5, r6, lr}
 8001e0a:	4605      	mov	r5, r0
 8001e0c:	460c      	mov	r4, r1
  if( system->state != new_state )
 8001e0e:	7843      	ldrb	r3, [r0, #1]
 8001e10:	428b      	cmp	r3, r1
 8001e12:	d00e      	beq.n	8001e32 <SetStateSystem+0x2a>
    LOG(STATE_DEBUG, "Entering %s", system_state_enum_strings[new_state]);
 8001e14:	2603      	movs	r6, #3
 8001e16:	e004      	b.n	8001e22 <SetStateSystem+0x1a>
 8001e18:	2009      	movs	r0, #9
 8001e1a:	f003 f967 	bl	80050ec <putchar>
 8001e1e:	3601      	adds	r6, #1
 8001e20:	b2f6      	uxtb	r6, r6
 8001e22:	2e03      	cmp	r6, #3
 8001e24:	d9f8      	bls.n	8001e18 <SetStateSystem+0x10>
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <SetStateSystem+0x30>)
 8001e28:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8001e2c:	4803      	ldr	r0, [pc, #12]	; (8001e3c <SetStateSystem+0x34>)
 8001e2e:	f3af 8000 	nop.w
  system->state = new_state;
 8001e32:	706c      	strb	r4, [r5, #1]
}
 8001e34:	bd70      	pop	{r4, r5, r6, pc}
 8001e36:	bf00      	nop
 8001e38:	08007444 	.word	0x08007444
 8001e3c:	080073cc 	.word	0x080073cc

08001e40 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e40:	4a03      	ldr	r2, [pc, #12]	; (8001e50 <SystemInit+0x10>)
 8001e42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_InitTick+0x44>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	b90b      	cbnz	r3, 8001e5e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e5a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001e5c:	4770      	bx	lr
{
 8001e5e:	b510      	push	{r4, lr}
 8001e60:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <HAL_InitTick+0x48>)
 8001e6c:	6810      	ldr	r0, [r2, #0]
 8001e6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e72:	f000 f8b3 	bl	8001fdc <HAL_SYSTICK_Config>
 8001e76:	b968      	cbnz	r0, 8001e94 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e78:	2c0f      	cmp	r4, #15
 8001e7a:	d901      	bls.n	8001e80 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	e00a      	b.n	8001e96 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e80:	2200      	movs	r2, #0
 8001e82:	4621      	mov	r1, r4
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f000 f854 	bl	8001f34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <HAL_InitTick+0x4c>)
 8001e8e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e90:	2000      	movs	r0, #0
 8001e92:	e000      	b.n	8001e96 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8001e94:	2001      	movs	r0, #1
}
 8001e96:	bd10      	pop	{r4, pc}
 8001e98:	20001dec 	.word	0x20001dec
 8001e9c:	20001de8 	.word	0x20001de8
 8001ea0:	20001df0 	.word	0x20001df0

08001ea4 <HAL_Init>:
{
 8001ea4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea6:	2003      	movs	r0, #3
 8001ea8:	f000 f832 	bl	8001f10 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff ffd1 	bl	8001e54 <HAL_InitTick>
 8001eb2:	b110      	cbz	r0, 8001eba <HAL_Init+0x16>
    status = HAL_ERROR;
 8001eb4:	2401      	movs	r4, #1
}
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	bd10      	pop	{r4, pc}
 8001eba:	4604      	mov	r4, r0
    HAL_MspInit();
 8001ebc:	f7ff fc62 	bl	8001784 <HAL_MspInit>
 8001ec0:	e7f9      	b.n	8001eb6 <HAL_Init+0x12>
	...

08001ec4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ec4:	4a03      	ldr	r2, [pc, #12]	; (8001ed4 <HAL_IncTick+0x10>)
 8001ec6:	6813      	ldr	r3, [r2, #0]
 8001ec8:	4903      	ldr	r1, [pc, #12]	; (8001ed8 <HAL_IncTick+0x14>)
 8001eca:	6809      	ldr	r1, [r1, #0]
 8001ecc:	440b      	add	r3, r1
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	2000402c 	.word	0x2000402c
 8001ed8:	20001dec 	.word	0x20001dec

08001edc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001edc:	4b01      	ldr	r3, [pc, #4]	; (8001ee4 <HAL_GetTick+0x8>)
 8001ede:	6818      	ldr	r0, [r3, #0]
}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	2000402c 	.word	0x2000402c

08001ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee8:	b538      	push	{r3, r4, r5, lr}
 8001eea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff fff6 	bl	8001edc <HAL_GetTick>
 8001ef0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001ef6:	d002      	beq.n	8001efe <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <HAL_Delay+0x24>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001efe:	f7ff ffed 	bl	8001edc <HAL_GetTick>
 8001f02:	1b40      	subs	r0, r0, r5
 8001f04:	42a0      	cmp	r0, r4
 8001f06:	d3fa      	bcc.n	8001efe <HAL_Delay+0x16>
  {
  }
}
 8001f08:	bd38      	pop	{r3, r4, r5, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20001dec 	.word	0x20001dec

08001f10 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f10:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001f12:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f18:	041b      	lsls	r3, r3, #16
 8001f1a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f1c:	0200      	lsls	r0, r0, #8
 8001f1e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f22:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001f2c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f34:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_NVIC_SetPriority+0x60>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3e:	f1c3 0407 	rsb	r4, r3, #7
 8001f42:	2c04      	cmp	r4, #4
 8001f44:	bf28      	it	cs
 8001f46:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f48:	1d1d      	adds	r5, r3, #4
 8001f4a:	2d06      	cmp	r5, #6
 8001f4c:	d918      	bls.n	8001f80 <HAL_NVIC_SetPriority+0x4c>
 8001f4e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	f04f 35ff 	mov.w	r5, #4294967295
 8001f54:	fa05 f404 	lsl.w	r4, r5, r4
 8001f58:	ea21 0104 	bic.w	r1, r1, r4
 8001f5c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5e:	fa05 f303 	lsl.w	r3, r5, r3
 8001f62:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f66:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	db0b      	blt.n	8001f84 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	0109      	lsls	r1, r1, #4
 8001f6e:	b2c9      	uxtb	r1, r1
 8001f70:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001f74:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001f78:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f7c:	bc30      	pop	{r4, r5}
 8001f7e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f80:	2300      	movs	r3, #0
 8001f82:	e7e5      	b.n	8001f50 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f84:	f000 000f 	and.w	r0, r0, #15
 8001f88:	0109      	lsls	r1, r1, #4
 8001f8a:	b2c9      	uxtb	r1, r1
 8001f8c:	4b02      	ldr	r3, [pc, #8]	; (8001f98 <HAL_NVIC_SetPriority+0x64>)
 8001f8e:	5419      	strb	r1, [r3, r0]
 8001f90:	e7f4      	b.n	8001f7c <HAL_NVIC_SetPriority+0x48>
 8001f92:	bf00      	nop
 8001f94:	e000ed00 	.word	0xe000ed00
 8001f98:	e000ed14 	.word	0xe000ed14

08001f9c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	db07      	blt.n	8001fb0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa0:	f000 021f 	and.w	r2, r0, #31
 8001fa4:	0940      	lsrs	r0, r0, #5
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	4093      	lsls	r3, r2
 8001faa:	4a02      	ldr	r2, [pc, #8]	; (8001fb4 <HAL_NVIC_EnableIRQ+0x18>)
 8001fac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	db0c      	blt.n	8001fd6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fbc:	f000 021f 	and.w	r2, r0, #31
 8001fc0:	0940      	lsrs	r0, r0, #5
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	4093      	lsls	r3, r2
 8001fc6:	3020      	adds	r0, #32
 8001fc8:	4a03      	ldr	r2, [pc, #12]	; (8001fd8 <HAL_NVIC_DisableIRQ+0x20>)
 8001fca:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001fd2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fdc:	3801      	subs	r0, #1
 8001fde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001fe2:	d20a      	bcs.n	8001ffa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_SYSTICK_Config+0x24>)
 8001fe6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	4a06      	ldr	r2, [pc, #24]	; (8002004 <HAL_SYSTICK_Config+0x28>)
 8001fea:	21f0      	movs	r1, #240	; 0xf0
 8001fec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ffa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000e010 	.word	0xe000e010
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002008:	6803      	ldr	r3, [r0, #0]
 800200a:	4a0c      	ldr	r2, [pc, #48]	; (800203c <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d813      	bhi.n	8002038 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002010:	490b      	ldr	r1, [pc, #44]	; (8002040 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002012:	b2db      	uxtb	r3, r3
 8002014:	3b08      	subs	r3, #8
 8002016:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800201c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800201e:	f022 0203 	bic.w	r2, r2, #3
 8002022:	440a      	add	r2, r1
 8002024:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002026:	4a08      	ldr	r2, [pc, #32]	; (8002048 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8002028:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800202a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800202e:	2201      	movs	r2, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002036:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002038:	4904      	ldr	r1, [pc, #16]	; (800204c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 800203a:	e7ea      	b.n	8002012 <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 800203c:	40020407 	.word	0x40020407
 8002040:	40020800 	.word	0x40020800
 8002044:	cccccccd 	.word	0xcccccccd
 8002048:	40020880 	.word	0x40020880
 800204c:	40020820 	.word	0x40020820

08002050 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002050:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002052:	4a07      	ldr	r2, [pc, #28]	; (8002070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8002054:	441a      	add	r2, r3
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800205a:	4a06      	ldr	r2, [pc, #24]	; (8002074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 800205c:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800205e:	3b01      	subs	r3, #1
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2201      	movs	r2, #1
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	1000823f 	.word	0x1000823f
 8002074:	40020940 	.word	0x40020940

08002078 <HAL_DMA_Init>:
  if (hdma == NULL)
 8002078:	2800      	cmp	r0, #0
 800207a:	d05b      	beq.n	8002134 <HAL_DMA_Init+0xbc>
{
 800207c:	b510      	push	{r4, lr}
 800207e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002080:	6801      	ldr	r1, [r0, #0]
 8002082:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_DMA_Init+0xc0>)
 8002084:	4299      	cmp	r1, r3
 8002086:	d83d      	bhi.n	8002104 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002088:	4b2c      	ldr	r3, [pc, #176]	; (800213c <HAL_DMA_Init+0xc4>)
 800208a:	440b      	add	r3, r1
 800208c:	4a2c      	ldr	r2, [pc, #176]	; (8002140 <HAL_DMA_Init+0xc8>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002098:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <HAL_DMA_Init+0xcc>)
 800209a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800209c:	2302      	movs	r3, #2
 800209e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 80020a2:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80020a4:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80020a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 80020ac:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ae:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 80020b0:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b2:	6920      	ldr	r0, [r4, #16]
 80020b4:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b6:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b8:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ba:	69a0      	ldr	r0, [r4, #24]
 80020bc:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80020be:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c0:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80020c2:	6a20      	ldr	r0, [r4, #32]
 80020c4:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80020c6:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 80020c8:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020ca:	4620      	mov	r0, r4
 80020cc:	f7ff ff9c 	bl	8002008 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020d0:	68a3      	ldr	r3, [r4, #8]
 80020d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020d6:	d020      	beq.n	800211a <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80020da:	7922      	ldrb	r2, [r4, #4]
 80020dc:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80020e0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80020e2:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80020e4:	6863      	ldr	r3, [r4, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d919      	bls.n	8002120 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80020f0:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80020f2:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f4:	2000      	movs	r0, #0
 80020f6:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80020f8:	2301      	movs	r3, #1
 80020fa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80020fe:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002102:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002104:	4b10      	ldr	r3, [pc, #64]	; (8002148 <HAL_DMA_Init+0xd0>)
 8002106:	440b      	add	r3, r1
 8002108:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <HAL_DMA_Init+0xc8>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <HAL_DMA_Init+0xd4>)
 8002116:	6403      	str	r3, [r0, #64]	; 0x40
 8002118:	e7c0      	b.n	800209c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800211a:	2300      	movs	r3, #0
 800211c:	6063      	str	r3, [r4, #4]
 800211e:	e7db      	b.n	80020d8 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002120:	4620      	mov	r0, r4
 8002122:	f7ff ff95 	bl	8002050 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002126:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800212c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800212e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	e7df      	b.n	80020f4 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8002134:	2001      	movs	r0, #1
}
 8002136:	4770      	bx	lr
 8002138:	40020407 	.word	0x40020407
 800213c:	bffdfff8 	.word	0xbffdfff8
 8002140:	cccccccd 	.word	0xcccccccd
 8002144:	40020000 	.word	0x40020000
 8002148:	bffdfbf8 	.word	0xbffdfbf8
 800214c:	40020400 	.word	0x40020400

08002150 <HAL_DMA_Abort>:
{
 8002150:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002152:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	2a02      	cmp	r2, #2
 800215a:	d009      	beq.n	8002170 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800215c:	2204      	movs	r2, #4
 800215e:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8002160:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800216e:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002170:	6801      	ldr	r1, [r0, #0]
 8002172:	680a      	ldr	r2, [r1, #0]
 8002174:	f022 020e 	bic.w	r2, r2, #14
 8002178:	600a      	str	r2, [r1, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800217a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800217c:	680a      	ldr	r2, [r1, #0]
 800217e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002182:	600a      	str	r2, [r1, #0]
     __HAL_DMA_DISABLE(hdma);
 8002184:	6801      	ldr	r1, [r0, #0]
 8002186:	680a      	ldr	r2, [r1, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	600a      	str	r2, [r1, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800218e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002190:	f002 011f 	and.w	r1, r2, #31
 8002194:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002196:	2201      	movs	r2, #1
 8002198:	408a      	lsls	r2, r1
 800219a:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800219c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800219e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80021a0:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 80021a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021a4:	b142      	cbz	r2, 80021b8 <HAL_DMA_Abort+0x68>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021a6:	6811      	ldr	r1, [r2, #0]
 80021a8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80021ac:	6011      	str	r1, [r2, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021b0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80021b2:	6051      	str	r1, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b4:	2000      	movs	r0, #0
 80021b6:	e7d4      	b.n	8002162 <HAL_DMA_Abort+0x12>
 80021b8:	2000      	movs	r0, #0
 80021ba:	e7d2      	b.n	8002162 <HAL_DMA_Abort+0x12>

080021bc <HAL_DMA_IRQHandler>:
{
 80021bc:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80021c0:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80021c2:	6804      	ldr	r4, [r0, #0]
 80021c4:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80021c6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	2204      	movs	r2, #4
 80021ce:	409a      	lsls	r2, r3
 80021d0:	420a      	tst	r2, r1
 80021d2:	d015      	beq.n	8002200 <HAL_DMA_IRQHandler+0x44>
 80021d4:	f015 0f04 	tst.w	r5, #4
 80021d8:	d012      	beq.n	8002200 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	f013 0f20 	tst.w	r3, #32
 80021e0:	d103      	bne.n	80021ea <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80021ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80021ec:	f003 021f 	and.w	r2, r3, #31
 80021f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80021f2:	2304      	movs	r3, #4
 80021f4:	4093      	lsls	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80021f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80021fa:	b103      	cbz	r3, 80021fe <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 80021fc:	4798      	blx	r3
}
 80021fe:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002200:	2202      	movs	r2, #2
 8002202:	409a      	lsls	r2, r3
 8002204:	420a      	tst	r2, r1
 8002206:	d01c      	beq.n	8002242 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8002208:	f015 0f02 	tst.w	r5, #2
 800220c:	d019      	beq.n	8002242 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	f013 0f20 	tst.w	r3, #32
 8002214:	d106      	bne.n	8002224 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	f023 030a 	bic.w	r3, r3, #10
 800221c:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800221e:	2301      	movs	r3, #1
 8002220:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002224:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002226:	f003 021f 	and.w	r2, r3, #31
 800222a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800222c:	2302      	movs	r3, #2
 800222e:	4093      	lsls	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002232:	2300      	movs	r3, #0
 8002234:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8002238:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0df      	beq.n	80021fe <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800223e:	4798      	blx	r3
 8002240:	e7dd      	b.n	80021fe <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002242:	2208      	movs	r2, #8
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	420b      	tst	r3, r1
 800224a:	d0d8      	beq.n	80021fe <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 800224c:	f015 0f08 	tst.w	r5, #8
 8002250:	d0d5      	beq.n	80021fe <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	f023 030e 	bic.w	r3, r3, #14
 8002258:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800225a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002262:	2201      	movs	r2, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800226a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800226c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002270:	2300      	movs	r3, #0
 8002272:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002276:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0c0      	beq.n	80021fe <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800227c:	4798      	blx	r3
  return;
 800227e:	e7be      	b.n	80021fe <HAL_DMA_IRQHandler+0x42>

08002280 <HAL_DMAEx_ConfigMuxSync>:
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002280:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b01      	cmp	r3, #1
 8002288:	d120      	bne.n	80022cc <HAL_DMAEx_ConfigMuxSync+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800228a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800228e:	2b01      	cmp	r3, #1
 8002290:	d01e      	beq.n	80022d0 <HAL_DMAEx_ConfigMuxSync+0x50>
{
 8002292:	b430      	push	{r4, r5}
    __HAL_LOCK(hdma);
 8002294:	2301      	movs	r3, #1
 8002296:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 800229a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800229c:	6822      	ldr	r2, [r4, #0]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	680d      	ldr	r5, [r1, #0]
 80022a2:	68cb      	ldr	r3, [r1, #12]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	04db      	lsls	r3, r3, #19
 80022a8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80022ac:	684d      	ldr	r5, [r1, #4]
 80022ae:	432b      	orrs	r3, r5
 80022b0:	7a0d      	ldrb	r5, [r1, #8]
 80022b2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80022b6:	7a49      	ldrb	r1, [r1, #9]
 80022b8:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80022bc:	4313      	orrs	r3, r2
 80022be:	6023      	str	r3, [r4, #0]
               ((pSyncConfig->SyncSignalID) << DMAMUX_CxCR_SYNC_ID_Pos) | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80022c0:	2300      	movs	r3, #0
 80022c2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return HAL_OK;
 80022c6:	4618      	mov	r0, r3
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
  }
}
 80022c8:	bc30      	pop	{r4, r5}
 80022ca:	4770      	bx	lr
    return HAL_ERROR;
 80022cc:	2001      	movs	r0, #1
 80022ce:	4770      	bx	lr
    __HAL_LOCK(hdma);
 80022d0:	2002      	movs	r0, #2
}
 80022d2:	4770      	bx	lr

080022d4 <HAL_DMAEx_ConfigMuxRequestGenerator>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxRequestGenerator(DMA_HandleTypeDef *hdma,
                                                      HAL_DMA_MuxRequestGeneratorConfigTypeDef *pRequestGeneratorConfig)
{
 80022d4:	4602      	mov	r2, r0
  assert_param(IS_DMAMUX_REQUEST_GEN_REQUEST_NUMBER(pRequestGeneratorConfig->RequestNumber));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block
  */
  if ((hdma->State == HAL_DMA_STATE_READY) && (hdma->DMAmuxRequestGen != 0U))
 80022d6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80022da:	b2d8      	uxtb	r0, r3
 80022dc:	2801      	cmp	r0, #1
 80022de:	d122      	bne.n	8002326 <HAL_DMAEx_ConfigMuxRequestGenerator+0x52>
{
 80022e0:	b430      	push	{r4, r5}
  if ((hdma->State == HAL_DMA_STATE_READY) && (hdma->DMAmuxRequestGen != 0U))
 80022e2:	6d55      	ldr	r5, [r2, #84]	; 0x54
 80022e4:	b1dd      	cbz	r5, 800231e <HAL_DMAEx_ConfigMuxRequestGenerator+0x4a>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80022e6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d01d      	beq.n	800232a <HAL_DMAEx_ConfigMuxRequestGenerator+0x56>
 80022ee:	2301      	movs	r3, #1
 80022f0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

    /* Set the request generator new parameters */
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
 80022f4:	6808      	ldr	r0, [r1, #0]
                                   ((pRequestGeneratorConfig->RequestNumber - 1U) << (POSITION_VAL(DMAMUX_RGxCR_GNBREQ) & 0x1FU)) | \
 80022f6:	688b      	ldr	r3, [r1, #8]
 80022f8:	1e5c      	subs	r4, r3, #1
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f44f 0378 	mov.w	r3, #16252928	; 0xf80000
 80022fe:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002302:	b173      	cbz	r3, 8002322 <HAL_DMAEx_ConfigMuxRequestGenerator+0x4e>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	fa04 f303 	lsl.w	r3, r4, r3
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
 8002310:	4303      	orrs	r3, r0
                                   pRequestGeneratorConfig->Polarity;
 8002312:	6849      	ldr	r1, [r1, #4]
                                   ((pRequestGeneratorConfig->RequestNumber - 1U) << (POSITION_VAL(DMAMUX_RGxCR_GNBREQ) & 0x1FU)) | \
 8002314:	430b      	orrs	r3, r1
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
 8002316:	602b      	str	r3, [r5, #0]
    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8002318:	2000      	movs	r0, #0
 800231a:	f882 0024 	strb.w	r0, [r2, #36]	; 0x24
  }
  else
  {
    return HAL_ERROR;
  }
}
 800231e:	bc30      	pop	{r4, r5}
 8002320:	4770      	bx	lr
    return 32U;
 8002322:	2320      	movs	r3, #32
 8002324:	e7f0      	b.n	8002308 <HAL_DMAEx_ConfigMuxRequestGenerator+0x34>
    return HAL_ERROR;
 8002326:	2001      	movs	r0, #1
}
 8002328:	4770      	bx	lr
    __HAL_LOCK(hdma);
 800232a:	2002      	movs	r0, #2
 800232c:	e7f7      	b.n	800231e <HAL_DMAEx_ConfigMuxRequestGenerator+0x4a>

0800232e <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800232e:	b510      	push	{r4, lr}
 8002330:	4604      	mov	r4, r0
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002332:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002338:	421a      	tst	r2, r3
 800233a:	d00e      	beq.n	800235a <HAL_DMAEx_MUX_IRQHandler+0x2c>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800233c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800233e:	6813      	ldr	r3, [r2, #0]
 8002340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002344:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002346:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002348:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800234a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800234c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800234e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002352:	63c3      	str	r3, [r0, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8002354:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002356:	b103      	cbz	r3, 800235a <HAL_DMAEx_MUX_IRQHandler+0x2c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002358:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800235a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800235c:	b19b      	cbz	r3, 8002386 <HAL_DMAEx_MUX_IRQHandler+0x58>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 800235e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002360:	6811      	ldr	r1, [r2, #0]
 8002362:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002364:	4211      	tst	r1, r2
 8002366:	d00e      	beq.n	8002386 <HAL_DMAEx_MUX_IRQHandler+0x58>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800236e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002370:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002372:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002374:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002376:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002378:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800237c:	63e3      	str	r3, [r4, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 800237e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002380:	b10b      	cbz	r3, 8002386 <HAL_DMAEx_MUX_IRQHandler+0x58>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002382:	4620      	mov	r0, r4
 8002384:	4798      	blx	r3
      }
    }
  }
}
 8002386:	bd10      	pop	{r4, pc}

08002388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 800238c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800238e:	e036      	b.n	80023fe <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002390:	2405      	movs	r4, #5
 8002392:	e000      	b.n	8002396 <HAL_GPIO_Init+0xe>
 8002394:	2400      	movs	r4, #0
 8002396:	40b4      	lsls	r4, r6
 8002398:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800239a:	3502      	adds	r5, #2
 800239c:	4e5f      	ldr	r6, [pc, #380]	; (800251c <HAL_GPIO_Init+0x194>)
 800239e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023a2:	4c5f      	ldr	r4, [pc, #380]	; (8002520 <HAL_GPIO_Init+0x198>)
 80023a4:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80023a6:	43d4      	mvns	r4, r2
 80023a8:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ac:	684f      	ldr	r7, [r1, #4]
 80023ae:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80023b2:	d001      	beq.n	80023b8 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 80023b4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 80023b8:	4d59      	ldr	r5, [pc, #356]	; (8002520 <HAL_GPIO_Init+0x198>)
 80023ba:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 80023bc:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80023be:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023c2:	684f      	ldr	r7, [r1, #4]
 80023c4:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80023c8:	d001      	beq.n	80023ce <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 80023ca:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80023ce:	4d54      	ldr	r5, [pc, #336]	; (8002520 <HAL_GPIO_Init+0x198>)
 80023d0:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023d2:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 80023d4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023d8:	684f      	ldr	r7, [r1, #4]
 80023da:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80023de:	d001      	beq.n	80023e4 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 80023e0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80023e4:	4d4e      	ldr	r5, [pc, #312]	; (8002520 <HAL_GPIO_Init+0x198>)
 80023e6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80023e8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80023ea:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ec:	684e      	ldr	r6, [r1, #4]
 80023ee:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80023f2:	d001      	beq.n	80023f8 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 80023f4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80023f8:	4a49      	ldr	r2, [pc, #292]	; (8002520 <HAL_GPIO_Init+0x198>)
 80023fa:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80023fc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023fe:	680a      	ldr	r2, [r1, #0]
 8002400:	fa32 f403 	lsrs.w	r4, r2, r3
 8002404:	f000 8087 	beq.w	8002516 <HAL_GPIO_Init+0x18e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002408:	2401      	movs	r4, #1
 800240a:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 800240c:	4022      	ands	r2, r4
 800240e:	d0f5      	beq.n	80023fc <HAL_GPIO_Init+0x74>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002410:	684d      	ldr	r5, [r1, #4]
 8002412:	1e6e      	subs	r6, r5, #1
 8002414:	2e01      	cmp	r6, #1
 8002416:	d903      	bls.n	8002420 <HAL_GPIO_Init+0x98>
 8002418:	2d11      	cmp	r5, #17
 800241a:	d001      	beq.n	8002420 <HAL_GPIO_Init+0x98>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800241c:	2d12      	cmp	r5, #18
 800241e:	d112      	bne.n	8002446 <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR;
 8002420:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002422:	005f      	lsls	r7, r3, #1
 8002424:	2503      	movs	r5, #3
 8002426:	40bd      	lsls	r5, r7
 8002428:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242c:	68cd      	ldr	r5, [r1, #12]
 800242e:	40bd      	lsls	r5, r7
 8002430:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002432:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002434:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002436:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800243a:	684d      	ldr	r5, [r1, #4]
 800243c:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8002440:	409c      	lsls	r4, r3
 8002442:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8002444:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8002446:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002448:	005e      	lsls	r6, r3, #1
 800244a:	2503      	movs	r5, #3
 800244c:	40b5      	lsls	r5, r6
 800244e:	43ec      	mvns	r4, r5
 8002450:	ea27 0705 	bic.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002454:	688d      	ldr	r5, [r1, #8]
 8002456:	40b5      	lsls	r5, r6
 8002458:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800245a:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800245c:	684d      	ldr	r5, [r1, #4]
 800245e:	2d02      	cmp	r5, #2
 8002460:	d001      	beq.n	8002466 <HAL_GPIO_Init+0xde>
 8002462:	2d12      	cmp	r5, #18
 8002464:	d113      	bne.n	800248e <HAL_GPIO_Init+0x106>
        temp = GPIOx->AFR[position >> 3U];
 8002466:	08df      	lsrs	r7, r3, #3
 8002468:	3708      	adds	r7, #8
 800246a:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800246e:	f003 0507 	and.w	r5, r3, #7
 8002472:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8002476:	250f      	movs	r5, #15
 8002478:	fa05 f50c 	lsl.w	r5, r5, ip
 800247c:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002480:	690d      	ldr	r5, [r1, #16]
 8002482:	fa05 f50c 	lsl.w	r5, r5, ip
 8002486:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 800248a:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 800248e:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002490:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002492:	684c      	ldr	r4, [r1, #4]
 8002494:	f004 0403 	and.w	r4, r4, #3
 8002498:	40b4      	lsls	r4, r6
 800249a:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 800249c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800249e:	684c      	ldr	r4, [r1, #4]
 80024a0:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80024a4:	d0aa      	beq.n	80023fc <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	4c1f      	ldr	r4, [pc, #124]	; (8002524 <HAL_GPIO_Init+0x19c>)
 80024a8:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80024aa:	f045 0501 	orr.w	r5, r5, #1
 80024ae:	6625      	str	r5, [r4, #96]	; 0x60
 80024b0:	6e24      	ldr	r4, [r4, #96]	; 0x60
 80024b2:	f004 0401 	and.w	r4, r4, #1
 80024b6:	9401      	str	r4, [sp, #4]
 80024b8:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80024ba:	089d      	lsrs	r5, r3, #2
 80024bc:	1cae      	adds	r6, r5, #2
 80024be:	4c17      	ldr	r4, [pc, #92]	; (800251c <HAL_GPIO_Init+0x194>)
 80024c0:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024c4:	f003 0403 	and.w	r4, r3, #3
 80024c8:	00a6      	lsls	r6, r4, #2
 80024ca:	240f      	movs	r4, #15
 80024cc:	40b4      	lsls	r4, r6
 80024ce:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024d2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80024d6:	f43f af5d 	beq.w	8002394 <HAL_GPIO_Init+0xc>
 80024da:	4c13      	ldr	r4, [pc, #76]	; (8002528 <HAL_GPIO_Init+0x1a0>)
 80024dc:	42a0      	cmp	r0, r4
 80024de:	d012      	beq.n	8002506 <HAL_GPIO_Init+0x17e>
 80024e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024e4:	42a0      	cmp	r0, r4
 80024e6:	d010      	beq.n	800250a <HAL_GPIO_Init+0x182>
 80024e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024ec:	42a0      	cmp	r0, r4
 80024ee:	d00e      	beq.n	800250e <HAL_GPIO_Init+0x186>
 80024f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024f4:	42a0      	cmp	r0, r4
 80024f6:	d00c      	beq.n	8002512 <HAL_GPIO_Init+0x18a>
 80024f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024fc:	42a0      	cmp	r0, r4
 80024fe:	f43f af47 	beq.w	8002390 <HAL_GPIO_Init+0x8>
 8002502:	2406      	movs	r4, #6
 8002504:	e747      	b.n	8002396 <HAL_GPIO_Init+0xe>
 8002506:	2401      	movs	r4, #1
 8002508:	e745      	b.n	8002396 <HAL_GPIO_Init+0xe>
 800250a:	2402      	movs	r4, #2
 800250c:	e743      	b.n	8002396 <HAL_GPIO_Init+0xe>
 800250e:	2403      	movs	r4, #3
 8002510:	e741      	b.n	8002396 <HAL_GPIO_Init+0xe>
 8002512:	2404      	movs	r4, #4
 8002514:	e73f      	b.n	8002396 <HAL_GPIO_Init+0xe>
  }
}
 8002516:	b003      	add	sp, #12
 8002518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800251a:	bf00      	nop
 800251c:	40010000 	.word	0x40010000
 8002520:	40010400 	.word	0x40010400
 8002524:	40021000 	.word	0x40021000
 8002528:	48000400 	.word	0x48000400

0800252c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800252c:	b10a      	cbz	r2, 8002532 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800252e:	6181      	str	r1, [r0, #24]
 8002530:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002532:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002534:	4770      	bx	lr
	...

08002538 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002538:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800253a:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	4203      	tst	r3, r0
 8002540:	d100      	bne.n	8002544 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8002542:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002544:	4b02      	ldr	r3, [pc, #8]	; (8002550 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002546:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002548:	f7fe fe0c 	bl	8001164 <HAL_GPIO_EXTI_Callback>
}
 800254c:	e7f9      	b.n	8002542 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800254e:	bf00      	nop
 8002550:	40010400 	.word	0x40010400

08002554 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002554:	6803      	ldr	r3, [r0, #0]
 8002556:	699a      	ldr	r2, [r3, #24]
 8002558:	f012 0f02 	tst.w	r2, #2
 800255c:	d001      	beq.n	8002562 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800255e:	2200      	movs	r2, #0
 8002560:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002562:	6803      	ldr	r3, [r0, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	f012 0f01 	tst.w	r2, #1
 800256a:	d103      	bne.n	8002574 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800256c:	699a      	ldr	r2, [r3, #24]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	619a      	str	r2, [r3, #24]
  }
}
 8002574:	4770      	bx	lr

08002576 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002576:	b470      	push	{r4, r5, r6}
 8002578:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800257a:	6805      	ldr	r5, [r0, #0]
 800257c:	6868      	ldr	r0, [r5, #4]
 800257e:	0d74      	lsrs	r4, r6, #21
 8002580:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002584:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002588:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800258c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002590:	f044 0403 	orr.w	r4, r4, #3
 8002594:	ea20 0004 	bic.w	r0, r0, r4
 8002598:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800259c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80025a0:	4319      	orrs	r1, r3
 80025a2:	4331      	orrs	r1, r6
 80025a4:	4301      	orrs	r1, r0
 80025a6:	6069      	str	r1, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80025a8:	bc70      	pop	{r4, r5, r6}
 80025aa:	4770      	bx	lr

080025ac <I2C_IsAcknowledgeFailed>:
{
 80025ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ae:	4605      	mov	r5, r0
 80025b0:	460e      	mov	r6, r1
 80025b2:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025b4:	6803      	ldr	r3, [r0, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f013 0f10 	tst.w	r3, #16
 80025bc:	d101      	bne.n	80025c2 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 80025be:	2000      	movs	r0, #0
}
 80025c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025c2:	682b      	ldr	r3, [r5, #0]
 80025c4:	699c      	ldr	r4, [r3, #24]
 80025c6:	f014 0f20 	tst.w	r4, #32
 80025ca:	d117      	bne.n	80025fc <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80025cc:	f1b6 3fff 	cmp.w	r6, #4294967295
 80025d0:	d0f7      	beq.n	80025c2 <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d2:	f7ff fc83 	bl	8001edc <HAL_GetTick>
 80025d6:	1bc0      	subs	r0, r0, r7
 80025d8:	42b0      	cmp	r0, r6
 80025da:	d801      	bhi.n	80025e0 <I2C_IsAcknowledgeFailed+0x34>
 80025dc:	2e00      	cmp	r6, #0
 80025de:	d1f0      	bne.n	80025c2 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80025e2:	f043 0320 	orr.w	r3, r3, #32
 80025e6:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	2320      	movs	r3, #32
 80025ea:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80025f4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 80025f8:	2001      	movs	r0, #1
 80025fa:	e7e1      	b.n	80025c0 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025fc:	2210      	movs	r2, #16
 80025fe:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002600:	682b      	ldr	r3, [r5, #0]
 8002602:	2420      	movs	r4, #32
 8002604:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002606:	4628      	mov	r0, r5
 8002608:	f7ff ffa4 	bl	8002554 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800260c:	682a      	ldr	r2, [r5, #0]
 800260e:	6853      	ldr	r3, [r2, #4]
 8002610:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002614:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002618:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002622:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002624:	f043 0304 	orr.w	r3, r3, #4
 8002628:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800262a:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800262e:	2300      	movs	r3, #0
 8002630:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002634:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8002638:	2001      	movs	r0, #1
 800263a:	e7c1      	b.n	80025c0 <I2C_IsAcknowledgeFailed+0x14>

0800263c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	4604      	mov	r4, r0
 8002640:	460d      	mov	r5, r1
 8002642:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f013 0f02 	tst.w	r3, #2
 800264c:	d11d      	bne.n	800268a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800264e:	4632      	mov	r2, r6
 8002650:	4629      	mov	r1, r5
 8002652:	4620      	mov	r0, r4
 8002654:	f7ff ffaa 	bl	80025ac <I2C_IsAcknowledgeFailed>
 8002658:	b9c8      	cbnz	r0, 800268e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800265a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800265e:	d0f1      	beq.n	8002644 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002660:	f7ff fc3c 	bl	8001edc <HAL_GetTick>
 8002664:	1b80      	subs	r0, r0, r6
 8002666:	42a8      	cmp	r0, r5
 8002668:	d801      	bhi.n	800266e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800266a:	2d00      	cmp	r5, #0
 800266c:	d1ea      	bne.n	8002644 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800266e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002670:	f043 0320 	orr.w	r3, r3, #32
 8002674:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002676:	2320      	movs	r3, #32
 8002678:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800267c:	2300      	movs	r3, #0
 800267e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002682:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002686:	2001      	movs	r0, #1
 8002688:	e000      	b.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800268a:	2000      	movs	r0, #0
}
 800268c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800268e:	2001      	movs	r0, #1
 8002690:	e7fc      	b.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08002692 <I2C_WaitOnFlagUntilTimeout>:
{
 8002692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002696:	4606      	mov	r6, r0
 8002698:	4688      	mov	r8, r1
 800269a:	4617      	mov	r7, r2
 800269c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800269e:	6834      	ldr	r4, [r6, #0]
 80026a0:	69a4      	ldr	r4, [r4, #24]
 80026a2:	ea38 0304 	bics.w	r3, r8, r4
 80026a6:	bf0c      	ite	eq
 80026a8:	2401      	moveq	r4, #1
 80026aa:	2400      	movne	r4, #0
 80026ac:	42bc      	cmp	r4, r7
 80026ae:	d118      	bne.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80026b0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80026b4:	d0f3      	beq.n	800269e <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b6:	f7ff fc11 	bl	8001edc <HAL_GetTick>
 80026ba:	9b06      	ldr	r3, [sp, #24]
 80026bc:	1ac0      	subs	r0, r0, r3
 80026be:	42a8      	cmp	r0, r5
 80026c0:	d801      	bhi.n	80026c6 <I2C_WaitOnFlagUntilTimeout+0x34>
 80026c2:	2d00      	cmp	r5, #0
 80026c4:	d1eb      	bne.n	800269e <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80026c8:	f043 0320 	orr.w	r3, r3, #32
 80026cc:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026ce:	2320      	movs	r3, #32
 80026d0:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80026da:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80026de:	2001      	movs	r0, #1
 80026e0:	e000      	b.n	80026e4 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 80026e2:	2000      	movs	r0, #0
}
 80026e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080026e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80026e8:	b570      	push	{r4, r5, r6, lr}
 80026ea:	4605      	mov	r5, r0
 80026ec:	460c      	mov	r4, r1
 80026ee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f013 0f20 	tst.w	r3, #32
 80026f8:	d11a      	bne.n	8002730 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80026fa:	4632      	mov	r2, r6
 80026fc:	4621      	mov	r1, r4
 80026fe:	4628      	mov	r0, r5
 8002700:	f7ff ff54 	bl	80025ac <I2C_IsAcknowledgeFailed>
 8002704:	b9b0      	cbnz	r0, 8002734 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002706:	f7ff fbe9 	bl	8001edc <HAL_GetTick>
 800270a:	1b80      	subs	r0, r0, r6
 800270c:	42a0      	cmp	r0, r4
 800270e:	d801      	bhi.n	8002714 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8002710:	2c00      	cmp	r4, #0
 8002712:	d1ed      	bne.n	80026f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002714:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002716:	f043 0320 	orr.w	r3, r3, #32
 800271a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800271c:	2320      	movs	r3, #32
 800271e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002722:	2300      	movs	r3, #0
 8002724:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002728:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800272c:	2001      	movs	r0, #1
}
 800272e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002730:	2000      	movs	r0, #0
 8002732:	e7fc      	b.n	800272e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8002734:	2001      	movs	r0, #1
 8002736:	e7fa      	b.n	800272e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08002738 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002738:	2800      	cmp	r0, #0
 800273a:	d059      	beq.n	80027f0 <HAL_I2C_Init+0xb8>
{
 800273c:	b510      	push	{r4, lr}
 800273e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002740:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002744:	2b00      	cmp	r3, #0
 8002746:	d043      	beq.n	80027d0 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002748:	2324      	movs	r3, #36	; 0x24
 800274a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800274e:	6822      	ldr	r2, [r4, #0]
 8002750:	6813      	ldr	r3, [r2, #0]
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002758:	6863      	ldr	r3, [r4, #4]
 800275a:	6822      	ldr	r2, [r4, #0]
 800275c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002760:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002762:	6822      	ldr	r2, [r4, #0]
 8002764:	6893      	ldr	r3, [r2, #8]
 8002766:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800276a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800276c:	68e3      	ldr	r3, [r4, #12]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d033      	beq.n	80027da <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002772:	68a3      	ldr	r3, [r4, #8]
 8002774:	6822      	ldr	r2, [r4, #0]
 8002776:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800277a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800277c:	68e3      	ldr	r3, [r4, #12]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d031      	beq.n	80027e6 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002782:	6822      	ldr	r2, [r4, #0]
 8002784:	6853      	ldr	r3, [r2, #4]
 8002786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800278a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800278e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002790:	6822      	ldr	r2, [r4, #0]
 8002792:	68d3      	ldr	r3, [r2, #12]
 8002794:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002798:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800279a:	6923      	ldr	r3, [r4, #16]
 800279c:	6962      	ldr	r2, [r4, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	69a1      	ldr	r1, [r4, #24]
 80027a2:	6822      	ldr	r2, [r4, #0]
 80027a4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027a8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027aa:	69e3      	ldr	r3, [r4, #28]
 80027ac:	6a21      	ldr	r1, [r4, #32]
 80027ae:	6822      	ldr	r2, [r4, #0]
 80027b0:	430b      	orrs	r3, r1
 80027b2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80027b4:	6822      	ldr	r2, [r4, #0]
 80027b6:	6813      	ldr	r3, [r2, #0]
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027be:	2000      	movs	r0, #0
 80027c0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	2320      	movs	r3, #32
 80027c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027c8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ca:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80027ce:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80027d0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80027d4:	f7fe fffe 	bl	80017d4 <HAL_I2C_MspInit>
 80027d8:	e7b6      	b.n	8002748 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027da:	68a3      	ldr	r3, [r4, #8]
 80027dc:	6822      	ldr	r2, [r4, #0]
 80027de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027e2:	6093      	str	r3, [r2, #8]
 80027e4:	e7ca      	b.n	800277c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	e7c8      	b.n	8002782 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80027f0:	2001      	movs	r0, #1
}
 80027f2:	4770      	bx	lr

080027f4 <HAL_I2C_Master_Transmit>:
{
 80027f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	460f      	mov	r7, r1
 80027fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fe:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8002802:	b2c9      	uxtb	r1, r1
 8002804:	2920      	cmp	r1, #32
 8002806:	f040 80a3 	bne.w	8002950 <HAL_I2C_Master_Transmit+0x15c>
 800280a:	4604      	mov	r4, r0
 800280c:	4690      	mov	r8, r2
 800280e:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8002810:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002814:	2b01      	cmp	r3, #1
 8002816:	f000 809f 	beq.w	8002958 <HAL_I2C_Master_Transmit+0x164>
 800281a:	f04f 0a01 	mov.w	sl, #1
 800281e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002822:	f7ff fb5b 	bl	8001edc <HAL_GetTick>
 8002826:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002828:	9000      	str	r0, [sp, #0]
 800282a:	2319      	movs	r3, #25
 800282c:	4652      	mov	r2, sl
 800282e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002832:	4620      	mov	r0, r4
 8002834:	f7ff ff2d 	bl	8002692 <I2C_WaitOnFlagUntilTimeout>
 8002838:	2800      	cmp	r0, #0
 800283a:	f040 808f 	bne.w	800295c <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800283e:	2321      	movs	r3, #33	; 0x21
 8002840:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002844:	2310      	movs	r3, #16
 8002846:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800284a:	2300      	movs	r3, #0
 800284c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800284e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002852:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002856:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002858:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	2bff      	cmp	r3, #255	; 0xff
 800285e:	d90a      	bls.n	8002876 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002860:	22ff      	movs	r2, #255	; 0xff
 8002862:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002864:	4b41      	ldr	r3, [pc, #260]	; (800296c <HAL_I2C_Master_Transmit+0x178>)
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800286c:	4639      	mov	r1, r7
 800286e:	4620      	mov	r0, r4
 8002870:	f7ff fe81 	bl	8002576 <I2C_TransferConfig>
 8002874:	e018      	b.n	80028a8 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8002876:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002878:	b292      	uxth	r2, r2
 800287a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800287c:	4b3b      	ldr	r3, [pc, #236]	; (800296c <HAL_I2C_Master_Transmit+0x178>)
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	4639      	mov	r1, r7
 8002888:	4620      	mov	r0, r4
 800288a:	f7ff fe74 	bl	8002576 <I2C_TransferConfig>
 800288e:	e00b      	b.n	80028a8 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8002890:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002892:	b292      	uxth	r2, r2
 8002894:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002896:	2300      	movs	r3, #0
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	4639      	mov	r1, r7
 80028a2:	4620      	mov	r0, r4
 80028a4:	f7ff fe67 	bl	8002576 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d033      	beq.n	8002918 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b0:	462a      	mov	r2, r5
 80028b2:	4631      	mov	r1, r6
 80028b4:	4620      	mov	r0, r4
 80028b6:	f7ff fec1 	bl	800263c <I2C_WaitOnTXISFlagUntilTimeout>
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d150      	bne.n	8002960 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	7812      	ldrb	r2, [r2, #0]
 80028c4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80028c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028c8:	3301      	adds	r3, #1
 80028ca:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80028cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80028d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29b      	uxth	r3, r3
 80028dc:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80028e0:	b292      	uxth	r2, r2
 80028e2:	2a00      	cmp	r2, #0
 80028e4:	d0e0      	beq.n	80028a8 <HAL_I2C_Master_Transmit+0xb4>
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1de      	bne.n	80028a8 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028ea:	9500      	str	r5, [sp, #0]
 80028ec:	4633      	mov	r3, r6
 80028ee:	2200      	movs	r2, #0
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	4620      	mov	r0, r4
 80028f4:	f7ff fecd 	bl	8002692 <I2C_WaitOnFlagUntilTimeout>
 80028f8:	bba0      	cbnz	r0, 8002964 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2bff      	cmp	r3, #255	; 0xff
 8002900:	d9c6      	bls.n	8002890 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002902:	22ff      	movs	r2, #255	; 0xff
 8002904:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002906:	2300      	movs	r3, #0
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800290e:	4639      	mov	r1, r7
 8002910:	4620      	mov	r0, r4
 8002912:	f7ff fe30 	bl	8002576 <I2C_TransferConfig>
 8002916:	e7c7      	b.n	80028a8 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002918:	462a      	mov	r2, r5
 800291a:	4631      	mov	r1, r6
 800291c:	4620      	mov	r0, r4
 800291e:	f7ff fee3 	bl	80026e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002922:	bb08      	cbnz	r0, 8002968 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	2220      	movs	r2, #32
 8002928:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800292a:	6821      	ldr	r1, [r4, #0]
 800292c:	684b      	ldr	r3, [r1, #4]
 800292e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002932:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002936:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002940:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002944:	2300      	movs	r3, #0
 8002946:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800294a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800294e:	e000      	b.n	8002952 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8002950:	2002      	movs	r0, #2
}
 8002952:	b002      	add	sp, #8
 8002954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002958:	2002      	movs	r0, #2
 800295a:	e7fa      	b.n	8002952 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 800295c:	2001      	movs	r0, #1
 800295e:	e7f8      	b.n	8002952 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8002960:	2001      	movs	r0, #1
 8002962:	e7f6      	b.n	8002952 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8002964:	2001      	movs	r0, #1
 8002966:	e7f4      	b.n	8002952 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8002968:	2001      	movs	r0, #1
 800296a:	e7f2      	b.n	8002952 <HAL_I2C_Master_Transmit+0x15e>
 800296c:	80002000 	.word	0x80002000

08002970 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002970:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b20      	cmp	r3, #32
 8002978:	d124      	bne.n	80029c4 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800297e:	2b01      	cmp	r3, #1
 8002980:	d022      	beq.n	80029c8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002982:	2301      	movs	r3, #1
 8002984:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002988:	2324      	movs	r3, #36	; 0x24
 800298a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800298e:	6802      	ldr	r2, [r0, #0]
 8002990:	6813      	ldr	r3, [r2, #0]
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002998:	6802      	ldr	r2, [r0, #0]
 800299a:	6813      	ldr	r3, [r2, #0]
 800299c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029a0:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029a2:	6802      	ldr	r2, [r0, #0]
 80029a4:	6813      	ldr	r3, [r2, #0]
 80029a6:	4319      	orrs	r1, r3
 80029a8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029aa:	6802      	ldr	r2, [r0, #0]
 80029ac:	6813      	ldr	r3, [r2, #0]
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b4:	2320      	movs	r3, #32
 80029b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ba:	2300      	movs	r3, #0
 80029bc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80029c0:	4618      	mov	r0, r3
 80029c2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80029c4:	2002      	movs	r0, #2
 80029c6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80029c8:	2002      	movs	r0, #2
  }
}
 80029ca:	4770      	bx	lr

080029cc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029cc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d122      	bne.n	8002a1c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d020      	beq.n	8002a20 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80029de:	2301      	movs	r3, #1
 80029e0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029e4:	2324      	movs	r3, #36	; 0x24
 80029e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ea:	6802      	ldr	r2, [r0, #0]
 80029ec:	6813      	ldr	r3, [r2, #0]
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029f4:	6802      	ldr	r2, [r0, #0]
 80029f6:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029fc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a00:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a02:	6802      	ldr	r2, [r0, #0]
 8002a04:	6813      	ldr	r3, [r2, #0]
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a12:	2300      	movs	r3, #0
 8002a14:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002a18:	4618      	mov	r0, r3
 8002a1a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002a1c:	2002      	movs	r0, #2
 8002a1e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002a20:	2002      	movs	r0, #2
  }
}
 8002a22:	4770      	bx	lr

08002a24 <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8002a24:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <HAL_PWR_ConfigPVD+0x7c>)
 8002a26:	6853      	ldr	r3, [r2, #4]
 8002a28:	f023 030e 	bic.w	r3, r3, #14
 8002a2c:	6801      	ldr	r1, [r0, #0]
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	6053      	str	r3, [r2, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <HAL_PWR_ConfigPVD+0x80>)
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a3a:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a42:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a4a:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a52:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8002a54:	6843      	ldr	r3, [r0, #4]
 8002a56:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002a5a:	d004      	beq.n	8002a66 <HAL_PWR_ConfigPVD+0x42>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8002a5c:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <HAL_PWR_ConfigPVD+0x80>)
 8002a5e:	6813      	ldr	r3, [r2, #0]
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8002a66:	6843      	ldr	r3, [r0, #4]
 8002a68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002a6c:	d004      	beq.n	8002a78 <HAL_PWR_ConfigPVD+0x54>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8002a6e:	4a0d      	ldr	r2, [pc, #52]	; (8002aa4 <HAL_PWR_ConfigPVD+0x80>)
 8002a70:	6853      	ldr	r3, [r2, #4]
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a76:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8002a78:	6843      	ldr	r3, [r0, #4]
 8002a7a:	f013 0f01 	tst.w	r3, #1
 8002a7e:	d004      	beq.n	8002a8a <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8002a80:	4a08      	ldr	r2, [pc, #32]	; (8002aa4 <HAL_PWR_ConfigPVD+0x80>)
 8002a82:	6893      	ldr	r3, [r2, #8]
 8002a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a88:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8002a8a:	6843      	ldr	r3, [r0, #4]
 8002a8c:	f013 0f02 	tst.w	r3, #2
 8002a90:	d004      	beq.n	8002a9c <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8002a92:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <HAL_PWR_ConfigPVD+0x80>)
 8002a94:	68d3      	ldr	r3, [r2, #12]
 8002a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9a:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
}
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	4770      	bx	lr
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	40010400 	.word	0x40010400

08002aa8 <HAL_PWR_EnablePVD>:
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8002aa8:	4a02      	ldr	r2, [pc, #8]	; (8002ab4 <HAL_PWR_EnablePVD+0xc>)
 8002aaa:	6853      	ldr	r3, [r2, #4]
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6053      	str	r3, [r2, #4]
}
 8002ab2:	4770      	bx	lr
 8002ab4:	40007000 	.word	0x40007000

08002ab8 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	d136      	bne.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002abc:	4b3e      	ldr	r3, [pc, #248]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac8:	d008      	beq.n	8002adc <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aca:	4a3b      	ldr	r2, [pc, #236]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002acc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ad4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002ad8:	2000      	movs	r0, #0
 8002ada:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002adc:	4a36      	ldr	r2, [pc, #216]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002ade:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aea:	6813      	ldr	r3, [r2, #0]
 8002aec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002af0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af4:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002af6:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <HAL_PWREx_ControlVoltageScaling+0x104>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	2332      	movs	r3, #50	; 0x32
 8002afc:	fb03 f302 	mul.w	r3, r3, r2
 8002b00:	4a2f      	ldr	r2, [pc, #188]	; (8002bc0 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	0c9b      	lsrs	r3, r3, #18
 8002b08:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b0a:	e000      	b.n	8002b0e <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8002b0c:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b0e:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002b10:	6952      	ldr	r2, [r2, #20]
 8002b12:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002b16:	d001      	beq.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0x64>
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f7      	bne.n	8002b0c <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b1c:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002b24:	d144      	bne.n	8002bb0 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 8002b26:	2000      	movs	r0, #0
 8002b28:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b2a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002b2e:	d008      	beq.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b30:	4a21      	ldr	r2, [pc, #132]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002b32:	6813      	ldr	r3, [r2, #0]
 8002b34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b3c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002b3e:	2000      	movs	r0, #0
 8002b40:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b42:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4e:	d008      	beq.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b50:	4a19      	ldr	r2, [pc, #100]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002b52:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8002b5e:	2000      	movs	r0, #0
 8002b60:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b62:	4a15      	ldr	r2, [pc, #84]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002b64:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b70:	6813      	ldr	r3, [r2, #0]
 8002b72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b7a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <HAL_PWREx_ControlVoltageScaling+0x104>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	2332      	movs	r3, #50	; 0x32
 8002b82:	fb03 f302 	mul.w	r3, r3, r2
 8002b86:	4a0e      	ldr	r2, [pc, #56]	; (8002bc0 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	0c9b      	lsrs	r3, r3, #18
 8002b8e:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b90:	e000      	b.n	8002b94 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8002b92:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b94:	4a08      	ldr	r2, [pc, #32]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002b96:	6952      	ldr	r2, [r2, #20]
 8002b98:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002b9c:	d001      	beq.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0xea>
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f7      	bne.n	8002b92 <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ba2:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002baa:	d103      	bne.n	8002bb4 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8002bac:	2000      	movs	r0, #0
 8002bae:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002bb4:	2003      	movs	r0, #3
}
 8002bb6:	4770      	bx	lr
 8002bb8:	40007000 	.word	0x40007000
 8002bbc:	20001de8 	.word	0x20001de8
 8002bc0:	431bde83 	.word	0x431bde83

08002bc4 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002bc4:	4a02      	ldr	r2, [pc, #8]	; (8002bd0 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8002bc6:	6893      	ldr	r3, [r2, #8]
 8002bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bcc:	6093      	str	r3, [r2, #8]
}
 8002bce:	4770      	bx	lr
 8002bd0:	40007000 	.word	0x40007000

08002bd4 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bd4:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8002bd6:	68d3      	ldr	r3, [r2, #12]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bdc:	68d0      	ldr	r0, [r2, #12]
 8002bde:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002be2:	3001      	adds	r0, #1

  switch (pllsource)
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d011      	beq.n	8002c0c <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8002bea:	fbb3 f3f0 	udiv	r3, r3, r0
 8002bee:	4a0c      	ldr	r2, [pc, #48]	; (8002c20 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8002bf0:	68d0      	ldr	r0, [r2, #12]
 8002bf2:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002bf6:	fb00 f003 	mul.w	r0, r0, r3
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002c02:	3301      	adds	r3, #1
 8002c04:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8002c06:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c0a:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 8002c0e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002c12:	68d0      	ldr	r0, [r2, #12]
 8002c14:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002c18:	fb00 f003 	mul.w	r0, r0, r3
    break;
 8002c1c:	e7ed      	b.n	8002bfa <RCC_GetSysClockFreqFromPLLSource+0x26>
 8002c1e:	bf00      	nop
 8002c20:	40021000 	.word	0x40021000
 8002c24:	00f42400 	.word	0x00f42400
 8002c28:	007a1200 	.word	0x007a1200

08002c2c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	f000 8254 	beq.w	80030da <HAL_RCC_OscConfig+0x4ae>
{
 8002c32:	b570      	push	{r4, r5, r6, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c38:	6803      	ldr	r3, [r0, #0]
 8002c3a:	f013 0f01 	tst.w	r3, #1
 8002c3e:	d037      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c40:	4ab4      	ldr	r2, [pc, #720]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002c42:	6893      	ldr	r3, [r2, #8]
 8002c44:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c48:	68d2      	ldr	r2, [r2, #12]
 8002c4a:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c4e:	2b0c      	cmp	r3, #12
 8002c50:	d023      	beq.n	8002c9a <HAL_RCC_OscConfig+0x6e>
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d023      	beq.n	8002c9e <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c56:	6863      	ldr	r3, [r4, #4]
 8002c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5c:	d04e      	beq.n	8002cfc <HAL_RCC_OscConfig+0xd0>
 8002c5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c62:	d051      	beq.n	8002d08 <HAL_RCC_OscConfig+0xdc>
 8002c64:	4bab      	ldr	r3, [pc, #684]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c74:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c76:	6863      	ldr	r3, [r4, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d052      	beq.n	8002d22 <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8002c7c:	f7ff f92e 	bl	8001edc <HAL_GetTick>
 8002c80:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c82:	4ba4      	ldr	r3, [pc, #656]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c8a:	d111      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7ff f926 	bl	8001edc <HAL_GetTick>
 8002c90:	1b40      	subs	r0, r0, r5
 8002c92:	2864      	cmp	r0, #100	; 0x64
 8002c94:	d9f5      	bls.n	8002c82 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8002c96:	2003      	movs	r0, #3
 8002c98:	e228      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c9a:	2a03      	cmp	r2, #3
 8002c9c:	d1d9      	bne.n	8002c52 <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9e:	4b9d      	ldr	r3, [pc, #628]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ca6:	d003      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x84>
 8002ca8:	6863      	ldr	r3, [r4, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8217 	beq.w	80030de <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	f013 0f02 	tst.w	r3, #2
 8002cb6:	d05d      	beq.n	8002d74 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb8:	4a96      	ldr	r2, [pc, #600]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002cba:	6893      	ldr	r3, [r2, #8]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc0:	68d2      	ldr	r2, [r2, #12]
 8002cc2:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d03a      	beq.n	8002d40 <HAL_RCC_OscConfig+0x114>
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d03a      	beq.n	8002d44 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cce:	68e3      	ldr	r3, [r4, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d075      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8002cd4:	4a8f      	ldr	r2, [pc, #572]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002cd6:	6813      	ldr	r3, [r2, #0]
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002cde:	f7ff f8fd 	bl	8001edc <HAL_GetTick>
 8002ce2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce4:	4b8b      	ldr	r3, [pc, #556]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002cec:	d15f      	bne.n	8002dae <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cee:	f7ff f8f5 	bl	8001edc <HAL_GetTick>
 8002cf2:	1b40      	subs	r0, r0, r5
 8002cf4:	2802      	cmp	r0, #2
 8002cf6:	d9f5      	bls.n	8002ce4 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8002cf8:	2003      	movs	r0, #3
 8002cfa:	e1f7      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfc:	4a85      	ldr	r2, [pc, #532]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002cfe:	6813      	ldr	r3, [r2, #0]
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e7b6      	b.n	8002c76 <HAL_RCC_OscConfig+0x4a>
 8002d08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d0c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	e7a9      	b.n	8002c76 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8002d22:	f7ff f8db 	bl	8001edc <HAL_GetTick>
 8002d26:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d28:	4b7a      	ldr	r3, [pc, #488]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002d30:	d0be      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d32:	f7ff f8d3 	bl	8001edc <HAL_GetTick>
 8002d36:	1b40      	subs	r0, r0, r5
 8002d38:	2864      	cmp	r0, #100	; 0x64
 8002d3a:	d9f5      	bls.n	8002d28 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8002d3c:	2003      	movs	r0, #3
 8002d3e:	e1d5      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d40:	2a02      	cmp	r2, #2
 8002d42:	d1c2      	bne.n	8002cca <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d44:	4b73      	ldr	r3, [pc, #460]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCC_OscConfig+0x12a>
 8002d4e:	68e3      	ldr	r3, [r4, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 81c6 	beq.w	80030e2 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d56:	4a6f      	ldr	r2, [pc, #444]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002d58:	6853      	ldr	r3, [r2, #4]
 8002d5a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d5e:	6921      	ldr	r1, [r4, #16]
 8002d60:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002d64:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d66:	4b6c      	ldr	r3, [pc, #432]	; (8002f18 <HAL_RCC_OscConfig+0x2ec>)
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	f7ff f873 	bl	8001e54 <HAL_InitTick>
 8002d6e:	2800      	cmp	r0, #0
 8002d70:	f040 81b9 	bne.w	80030e6 <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	f013 0f08 	tst.w	r3, #8
 8002d7a:	d04c      	beq.n	8002e16 <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d7c:	6963      	ldr	r3, [r4, #20]
 8002d7e:	b39b      	cbz	r3, 8002de8 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 8002d80:	4a64      	ldr	r2, [pc, #400]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002d82:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002d8e:	f7ff f8a5 	bl	8001edc <HAL_GetTick>
 8002d92:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d94:	4b5f      	ldr	r3, [pc, #380]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9a:	f013 0f02 	tst.w	r3, #2
 8002d9e:	d13a      	bne.n	8002e16 <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da0:	f7ff f89c 	bl	8001edc <HAL_GetTick>
 8002da4:	1b40      	subs	r0, r0, r5
 8002da6:	2802      	cmp	r0, #2
 8002da8:	d9f4      	bls.n	8002d94 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 8002daa:	2003      	movs	r0, #3
 8002dac:	e19e      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dae:	4a59      	ldr	r2, [pc, #356]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002db0:	6853      	ldr	r3, [r2, #4]
 8002db2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002db6:	6921      	ldr	r1, [r4, #16]
 8002db8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002dbc:	6053      	str	r3, [r2, #4]
 8002dbe:	e7d9      	b.n	8002d74 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8002dc0:	4a54      	ldr	r2, [pc, #336]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002dc2:	6813      	ldr	r3, [r2, #0]
 8002dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002dca:	f7ff f887 	bl	8001edc <HAL_GetTick>
 8002dce:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dd0:	4b50      	ldr	r3, [pc, #320]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002dd8:	d0cc      	beq.n	8002d74 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dda:	f7ff f87f 	bl	8001edc <HAL_GetTick>
 8002dde:	1b40      	subs	r0, r0, r5
 8002de0:	2802      	cmp	r0, #2
 8002de2:	d9f5      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8002de4:	2003      	movs	r0, #3
 8002de6:	e181      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 8002de8:	4a4a      	ldr	r2, [pc, #296]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002dea:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002df6:	f7ff f871 	bl	8001edc <HAL_GetTick>
 8002dfa:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dfc:	4b45      	ldr	r3, [pc, #276]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e02:	f013 0f02 	tst.w	r3, #2
 8002e06:	d006      	beq.n	8002e16 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e08:	f7ff f868 	bl	8001edc <HAL_GetTick>
 8002e0c:	1b40      	subs	r0, r0, r5
 8002e0e:	2802      	cmp	r0, #2
 8002e10:	d9f4      	bls.n	8002dfc <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 8002e12:	2003      	movs	r0, #3
 8002e14:	e16a      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	f013 0f04 	tst.w	r3, #4
 8002e1c:	f000 8081 	beq.w	8002f22 <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e20:	4b3c      	ldr	r3, [pc, #240]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002e28:	d136      	bne.n	8002e98 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4b3a      	ldr	r3, [pc, #232]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002e2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e32:	659a      	str	r2, [r3, #88]	; 0x58
 8002e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e3e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e40:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <HAL_RCC_OscConfig+0x2f0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e48:	d028      	beq.n	8002e9c <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4a:	68a3      	ldr	r3, [r4, #8]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d039      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x298>
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d03f      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x2a8>
 8002e54:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002e56:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002e62:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002e66:	f022 0204 	bic.w	r2, r2, #4
 8002e6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e6e:	68a3      	ldr	r3, [r4, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d03d      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x2c4>
      tickstart = HAL_GetTick();
 8002e74:	f7ff f832 	bl	8001edc <HAL_GetTick>
 8002e78:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7a:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e80:	f013 0f02 	tst.w	r3, #2
 8002e84:	d14c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e86:	f7ff f829 	bl	8001edc <HAL_GetTick>
 8002e8a:	1b80      	subs	r0, r0, r6
 8002e8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e90:	4298      	cmp	r0, r3
 8002e92:	d9f2      	bls.n	8002e7a <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8002e94:	2003      	movs	r0, #3
 8002e96:	e129      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 8002e98:	2500      	movs	r5, #0
 8002e9a:	e7d1      	b.n	8002e40 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e9c:	4a1f      	ldr	r2, [pc, #124]	; (8002f1c <HAL_RCC_OscConfig+0x2f0>)
 8002e9e:	6813      	ldr	r3, [r2, #0]
 8002ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002ea6:	f7ff f819 	bl	8001edc <HAL_GetTick>
 8002eaa:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eac:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <HAL_RCC_OscConfig+0x2f0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002eb4:	d1c9      	bne.n	8002e4a <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb6:	f7ff f811 	bl	8001edc <HAL_GetTick>
 8002eba:	1b80      	subs	r0, r0, r6
 8002ebc:	2802      	cmp	r0, #2
 8002ebe:	d9f5      	bls.n	8002eac <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 8002ec0:	2003      	movs	r0, #3
 8002ec2:	e113      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec4:	4a13      	ldr	r2, [pc, #76]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002ec6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed2:	e7cc      	b.n	8002e6e <HAL_RCC_OscConfig+0x242>
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002ed6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002eda:	f042 0204 	orr.w	r2, r2, #4
 8002ede:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002ee2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002eee:	e7be      	b.n	8002e6e <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 8002ef0:	f7fe fff4 	bl	8001edc <HAL_GetTick>
 8002ef4:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ef6:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_RCC_OscConfig+0x2e8>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efc:	f013 0f02 	tst.w	r3, #2
 8002f00:	d00e      	beq.n	8002f20 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7fe ffeb 	bl	8001edc <HAL_GetTick>
 8002f06:	1b80      	subs	r0, r0, r6
 8002f08:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f0c:	4298      	cmp	r0, r3
 8002f0e:	d9f2      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x2ca>
          return HAL_TIMEOUT;
 8002f10:	2003      	movs	r0, #3
 8002f12:	e0eb      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
 8002f14:	40021000 	.word	0x40021000
 8002f18:	20001df0 	.word	0x20001df0
 8002f1c:	40007000 	.word	0x40007000
    if (pwrclkchanged == SET)
 8002f20:	b9e5      	cbnz	r5, 8002f5c <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	f013 0f20 	tst.w	r3, #32
 8002f28:	d035      	beq.n	8002f96 <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f2a:	69a3      	ldr	r3, [r4, #24]
 8002f2c:	b1e3      	cbz	r3, 8002f68 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 8002f2e:	4a77      	ldr	r2, [pc, #476]	; (800310c <HAL_RCC_OscConfig+0x4e0>)
 8002f30:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002f3c:	f7fe ffce 	bl	8001edc <HAL_GetTick>
 8002f40:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f42:	4b72      	ldr	r3, [pc, #456]	; (800310c <HAL_RCC_OscConfig+0x4e0>)
 8002f44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f48:	f013 0f02 	tst.w	r3, #2
 8002f4c:	d123      	bne.n	8002f96 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f4e:	f7fe ffc5 	bl	8001edc <HAL_GetTick>
 8002f52:	1b40      	subs	r0, r0, r5
 8002f54:	2802      	cmp	r0, #2
 8002f56:	d9f4      	bls.n	8002f42 <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8002f58:	2003      	movs	r0, #3
 8002f5a:	e0c7      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5c:	4a6b      	ldr	r2, [pc, #428]	; (800310c <HAL_RCC_OscConfig+0x4e0>)
 8002f5e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6593      	str	r3, [r2, #88]	; 0x58
 8002f66:	e7dc      	b.n	8002f22 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8002f68:	4a68      	ldr	r2, [pc, #416]	; (800310c <HAL_RCC_OscConfig+0x4e0>)
 8002f6a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002f76:	f7fe ffb1 	bl	8001edc <HAL_GetTick>
 8002f7a:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f7c:	4b63      	ldr	r3, [pc, #396]	; (800310c <HAL_RCC_OscConfig+0x4e0>)
 8002f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f82:	f013 0f02 	tst.w	r3, #2
 8002f86:	d006      	beq.n	8002f96 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f88:	f7fe ffa8 	bl	8001edc <HAL_GetTick>
 8002f8c:	1b40      	subs	r0, r0, r5
 8002f8e:	2802      	cmp	r0, #2
 8002f90:	d9f4      	bls.n	8002f7c <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 8002f92:	2003      	movs	r0, #3
 8002f94:	e0aa      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f96:	69e3      	ldr	r3, [r4, #28]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80a6 	beq.w	80030ea <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f9e:	4a5b      	ldr	r2, [pc, #364]	; (800310c <HAL_RCC_OscConfig+0x4e0>)
 8002fa0:	6892      	ldr	r2, [r2, #8]
 8002fa2:	f002 020c 	and.w	r2, r2, #12
 8002fa6:	2a0c      	cmp	r2, #12
 8002fa8:	d069      	beq.n	800307e <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d01d      	beq.n	8002fea <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 8002fae:	4b57      	ldr	r3, [pc, #348]	; (800310c <HAL_RCC_OscConfig+0x4e0>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002fb6:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	f022 0203 	bic.w	r2, r2, #3
 8002fbe:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8002fc6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fca:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8002fcc:	f7fe ff86 	bl	8001edc <HAL_GetTick>
 8002fd0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd2:	4b4e      	ldr	r3, [pc, #312]	; (800310c <HAL_RCC_OscConfig+0x4e0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002fda:	d04e      	beq.n	800307a <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fdc:	f7fe ff7e 	bl	8001edc <HAL_GetTick>
 8002fe0:	1b00      	subs	r0, r0, r4
 8002fe2:	2802      	cmp	r0, #2
 8002fe4:	d9f5      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 8002fe6:	2003      	movs	r0, #3
 8002fe8:	e080      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 8002fea:	4a48      	ldr	r2, [pc, #288]	; (800310c <HAL_RCC_OscConfig+0x4e0>)
 8002fec:	6813      	ldr	r3, [r2, #0]
 8002fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002ff4:	f7fe ff72 	bl	8001edc <HAL_GetTick>
 8002ff8:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ffa:	4b44      	ldr	r3, [pc, #272]	; (800310c <HAL_RCC_OscConfig+0x4e0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003002:	d006      	beq.n	8003012 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe ff6a 	bl	8001edc <HAL_GetTick>
 8003008:	1b40      	subs	r0, r0, r5
 800300a:	2802      	cmp	r0, #2
 800300c:	d9f5      	bls.n	8002ffa <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 800300e:	2003      	movs	r0, #3
 8003010:	e06c      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003012:	4a3e      	ldr	r2, [pc, #248]	; (800310c <HAL_RCC_OscConfig+0x4e0>)
 8003014:	68d3      	ldr	r3, [r2, #12]
 8003016:	493e      	ldr	r1, [pc, #248]	; (8003110 <HAL_RCC_OscConfig+0x4e4>)
 8003018:	4019      	ands	r1, r3
 800301a:	6a23      	ldr	r3, [r4, #32]
 800301c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800301e:	3801      	subs	r0, #1
 8003020:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003024:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003026:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800302a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800302c:	0840      	lsrs	r0, r0, #1
 800302e:	3801      	subs	r0, #1
 8003030:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8003034:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003036:	0840      	lsrs	r0, r0, #1
 8003038:	3801      	subs	r0, #1
 800303a:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800303e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003040:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8003044:	430b      	orrs	r3, r1
 8003046:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8003048:	6813      	ldr	r3, [r2, #0]
 800304a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304e:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003050:	68d3      	ldr	r3, [r2, #12]
 8003052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003056:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003058:	f7fe ff40 	bl	8001edc <HAL_GetTick>
 800305c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305e:	4b2b      	ldr	r3, [pc, #172]	; (800310c <HAL_RCC_OscConfig+0x4e0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe ff38 	bl	8001edc <HAL_GetTick>
 800306c:	1b00      	subs	r0, r0, r4
 800306e:	2802      	cmp	r0, #2
 8003070:	d9f5      	bls.n	800305e <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 8003072:	2003      	movs	r0, #3
 8003074:	e03a      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8003076:	2000      	movs	r0, #0
 8003078:	e038      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
 800307a:	2000      	movs	r0, #0
 800307c:	e036      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800307e:	2b01      	cmp	r3, #1
 8003080:	d036      	beq.n	80030f0 <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 8003082:	4b22      	ldr	r3, [pc, #136]	; (800310c <HAL_RCC_OscConfig+0x4e0>)
 8003084:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003086:	f003 0103 	and.w	r1, r3, #3
 800308a:	6a22      	ldr	r2, [r4, #32]
 800308c:	4291      	cmp	r1, r2
 800308e:	d131      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003090:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003094:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003096:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003098:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800309c:	d12c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800309e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030a2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030a4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80030a8:	d128      	bne.n	80030fc <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80030ae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80030b0:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80030b4:	d124      	bne.n	8003100 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030b6:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80030ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80030bc:	0852      	lsrs	r2, r2, #1
 80030be:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030c0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80030c4:	d11e      	bne.n	8003104 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030c6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80030ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80030cc:	0852      	lsrs	r2, r2, #1
 80030ce:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030d0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80030d4:	d118      	bne.n	8003108 <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 80030d6:	2000      	movs	r0, #0
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 80030da:	2001      	movs	r0, #1
}
 80030dc:	4770      	bx	lr
        return HAL_ERROR;
 80030de:	2001      	movs	r0, #1
 80030e0:	e004      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 80030e2:	2001      	movs	r0, #1
 80030e4:	e002      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 80030e6:	2001      	movs	r0, #1
 80030e8:	e000      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 80030ea:	2000      	movs	r0, #0
}
 80030ec:	b002      	add	sp, #8
 80030ee:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80030f0:	2001      	movs	r0, #1
 80030f2:	e7fb      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 80030f4:	2001      	movs	r0, #1
 80030f6:	e7f9      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
 80030f8:	2001      	movs	r0, #1
 80030fa:	e7f7      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
 80030fc:	2001      	movs	r0, #1
 80030fe:	e7f5      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
 8003100:	2001      	movs	r0, #1
 8003102:	e7f3      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
 8003104:	2001      	movs	r0, #1
 8003106:	e7f1      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
 8003108:	2001      	movs	r0, #1
 800310a:	e7ef      	b.n	80030ec <HAL_RCC_OscConfig+0x4c0>
 800310c:	40021000 	.word	0x40021000
 8003110:	019f800c 	.word	0x019f800c

08003114 <HAL_RCC_MCOConfig>:
{
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	460d      	mov	r5, r1
 800311a:	4616      	mov	r6, r2
  MCO1_CLK_ENABLE();
 800311c:	4c10      	ldr	r4, [pc, #64]	; (8003160 <HAL_RCC_MCOConfig+0x4c>)
 800311e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003126:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = MCO1_PIN;
 8003130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003134:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003136:	2302      	movs	r3, #2
 8003138:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313a:	2303      	movs	r3, #3
 800313c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003142:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003144:	a901      	add	r1, sp, #4
 8003146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800314a:	f7ff f91d 	bl	8002388 <HAL_GPIO_Init>
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 800314e:	68a3      	ldr	r3, [r4, #8]
 8003150:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003154:	ea45 0206 	orr.w	r2, r5, r6
 8003158:	431a      	orrs	r2, r3
 800315a:	60a2      	str	r2, [r4, #8]
}
 800315c:	b006      	add	sp, #24
 800315e:	bd70      	pop	{r4, r5, r6, pc}
 8003160:	40021000 	.word	0x40021000

08003164 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003164:	4b1e      	ldr	r3, [pc, #120]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b04      	cmp	r3, #4
 800316e:	d032      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0x72>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b08      	cmp	r3, #8
 800317a:	d02e      	beq.n	80031da <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800317c:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 030c 	and.w	r3, r3, #12
 8003184:	2b0c      	cmp	r3, #12
 8003186:	d001      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8003188:	2000      	movs	r0, #0
}
 800318a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800318c:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800318e:	68d3      	ldr	r3, [r2, #12]
 8003190:	f003 0303 	and.w	r3, r3, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003194:	68d0      	ldr	r0, [r2, #12]
 8003196:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800319a:	3001      	adds	r0, #1
    switch (pllsource)
 800319c:	2b03      	cmp	r3, #3
 800319e:	d011      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031a0:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x80>)
 80031a2:	fbb3 f3f0 	udiv	r3, r3, r0
 80031a6:	4a0e      	ldr	r2, [pc, #56]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x7c>)
 80031a8:	68d0      	ldr	r0, [r2, #12]
 80031aa:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80031ae:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x7c>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80031ba:	3301      	adds	r3, #1
 80031bc:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80031be:	fbb0 f0f3 	udiv	r0, r0, r3
 80031c2:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031c4:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x84>)
 80031c6:	fbb3 f3f0 	udiv	r3, r3, r0
 80031ca:	68d0      	ldr	r0, [r2, #12]
 80031cc:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80031d0:	fb00 f003 	mul.w	r0, r0, r3
      break;
 80031d4:	e7ed      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 80031d6:	4803      	ldr	r0, [pc, #12]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x80>)
 80031d8:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80031da:	4803      	ldr	r0, [pc, #12]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x84>)
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	00f42400 	.word	0x00f42400
 80031e8:	007a1200 	.word	0x007a1200

080031ec <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80031ec:	2800      	cmp	r0, #0
 80031ee:	f000 80e6 	beq.w	80033be <HAL_RCC_ClockConfig+0x1d2>
{
 80031f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f4:	460c      	mov	r4, r1
 80031f6:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031f8:	4b74      	ldr	r3, [pc, #464]	; (80033cc <HAL_RCC_ClockConfig+0x1e0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	428b      	cmp	r3, r1
 8003202:	d20b      	bcs.n	800321c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003204:	4a71      	ldr	r2, [pc, #452]	; (80033cc <HAL_RCC_ClockConfig+0x1e0>)
 8003206:	6813      	ldr	r3, [r2, #0]
 8003208:	f023 030f 	bic.w	r3, r3, #15
 800320c:	430b      	orrs	r3, r1
 800320e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003210:	6813      	ldr	r3, [r2, #0]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	428b      	cmp	r3, r1
 8003218:	f040 80d3 	bne.w	80033c2 <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321c:	682e      	ldr	r6, [r5, #0]
 800321e:	f016 0601 	ands.w	r6, r6, #1
 8003222:	d05f      	beq.n	80032e4 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003224:	686b      	ldr	r3, [r5, #4]
 8003226:	2b03      	cmp	r3, #3
 8003228:	d015      	beq.n	8003256 <HAL_RCC_ClockConfig+0x6a>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322a:	2b02      	cmp	r3, #2
 800322c:	d033      	beq.n	8003296 <HAL_RCC_ClockConfig+0xaa>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800322e:	4b68      	ldr	r3, [pc, #416]	; (80033d0 <HAL_RCC_ClockConfig+0x1e4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003236:	f000 80c6 	beq.w	80033c6 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800323a:	f7ff ff93 	bl	8003164 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800323e:	4b65      	ldr	r3, [pc, #404]	; (80033d4 <HAL_RCC_ClockConfig+0x1e8>)
 8003240:	4298      	cmp	r0, r3
 8003242:	d933      	bls.n	80032ac <HAL_RCC_ClockConfig+0xc0>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003244:	4a62      	ldr	r2, [pc, #392]	; (80033d0 <HAL_RCC_ClockConfig+0x1e4>)
 8003246:	6893      	ldr	r3, [r2, #8]
 8003248:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800324c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003250:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003252:	2680      	movs	r6, #128	; 0x80
 8003254:	e02b      	b.n	80032ae <HAL_RCC_ClockConfig+0xc2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003256:	4b5e      	ldr	r3, [pc, #376]	; (80033d0 <HAL_RCC_ClockConfig+0x1e4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8003260:	2001      	movs	r0, #1
 8003262:	e08b      	b.n	800337c <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003264:	f7ff fcb6 	bl	8002bd4 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8003268:	4b5a      	ldr	r3, [pc, #360]	; (80033d4 <HAL_RCC_ClockConfig+0x1e8>)
 800326a:	4298      	cmp	r0, r3
 800326c:	d91a      	bls.n	80032a4 <HAL_RCC_ClockConfig+0xb8>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800326e:	4b58      	ldr	r3, [pc, #352]	; (80033d0 <HAL_RCC_ClockConfig+0x1e4>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x98>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003278:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800327a:	f016 0602 	ands.w	r6, r6, #2
 800327e:	d016      	beq.n	80032ae <HAL_RCC_ClockConfig+0xc2>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003280:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003282:	b98b      	cbnz	r3, 80032a8 <HAL_RCC_ClockConfig+0xbc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003284:	4a52      	ldr	r2, [pc, #328]	; (80033d0 <HAL_RCC_ClockConfig+0x1e4>)
 8003286:	6893      	ldr	r3, [r2, #8]
 8003288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800328c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003290:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003292:	2680      	movs	r6, #128	; 0x80
 8003294:	e00b      	b.n	80032ae <HAL_RCC_ClockConfig+0xc2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003296:	4b4e      	ldr	r3, [pc, #312]	; (80033d0 <HAL_RCC_ClockConfig+0x1e4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800329e:	d1cc      	bne.n	800323a <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 80032a0:	2001      	movs	r0, #1
 80032a2:	e06b      	b.n	800337c <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80032a4:	2600      	movs	r6, #0
 80032a6:	e002      	b.n	80032ae <HAL_RCC_ClockConfig+0xc2>
 80032a8:	2600      	movs	r6, #0
 80032aa:	e000      	b.n	80032ae <HAL_RCC_ClockConfig+0xc2>
 80032ac:	2600      	movs	r6, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032ae:	4a48      	ldr	r2, [pc, #288]	; (80033d0 <HAL_RCC_ClockConfig+0x1e4>)
 80032b0:	6893      	ldr	r3, [r2, #8]
 80032b2:	f023 0303 	bic.w	r3, r3, #3
 80032b6:	6869      	ldr	r1, [r5, #4]
 80032b8:	430b      	orrs	r3, r1
 80032ba:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80032bc:	f7fe fe0e 	bl	8001edc <HAL_GetTick>
 80032c0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	4b43      	ldr	r3, [pc, #268]	; (80033d0 <HAL_RCC_ClockConfig+0x1e4>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	686a      	ldr	r2, [r5, #4]
 80032cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80032d0:	d008      	beq.n	80032e4 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d2:	f7fe fe03 	bl	8001edc <HAL_GetTick>
 80032d6:	1bc0      	subs	r0, r0, r7
 80032d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80032dc:	4298      	cmp	r0, r3
 80032de:	d9f0      	bls.n	80032c2 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80032e0:	2003      	movs	r0, #3
 80032e2:	e04b      	b.n	800337c <HAL_RCC_ClockConfig+0x190>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e4:	682b      	ldr	r3, [r5, #0]
 80032e6:	f013 0f02 	tst.w	r3, #2
 80032ea:	d048      	beq.n	800337e <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ec:	f013 0f04 	tst.w	r3, #4
 80032f0:	d004      	beq.n	80032fc <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f2:	4a37      	ldr	r2, [pc, #220]	; (80033d0 <HAL_RCC_ClockConfig+0x1e4>)
 80032f4:	6893      	ldr	r3, [r2, #8]
 80032f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032fa:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	f013 0f08 	tst.w	r3, #8
 8003302:	d006      	beq.n	8003312 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003304:	4a32      	ldr	r2, [pc, #200]	; (80033d0 <HAL_RCC_ClockConfig+0x1e4>)
 8003306:	6893      	ldr	r3, [r2, #8]
 8003308:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800330c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003310:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003312:	4a2f      	ldr	r2, [pc, #188]	; (80033d0 <HAL_RCC_ClockConfig+0x1e4>)
 8003314:	6893      	ldr	r3, [r2, #8]
 8003316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800331a:	68a9      	ldr	r1, [r5, #8]
 800331c:	430b      	orrs	r3, r1
 800331e:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003320:	4b2a      	ldr	r3, [pc, #168]	; (80033cc <HAL_RCC_ClockConfig+0x1e0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	42a3      	cmp	r3, r4
 800332a:	d830      	bhi.n	800338e <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332c:	682b      	ldr	r3, [r5, #0]
 800332e:	f013 0f04 	tst.w	r3, #4
 8003332:	d006      	beq.n	8003342 <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003334:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <HAL_RCC_ClockConfig+0x1e4>)
 8003336:	6893      	ldr	r3, [r2, #8]
 8003338:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800333c:	68e9      	ldr	r1, [r5, #12]
 800333e:	430b      	orrs	r3, r1
 8003340:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003342:	682b      	ldr	r3, [r5, #0]
 8003344:	f013 0f08 	tst.w	r3, #8
 8003348:	d007      	beq.n	800335a <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800334a:	4a21      	ldr	r2, [pc, #132]	; (80033d0 <HAL_RCC_ClockConfig+0x1e4>)
 800334c:	6893      	ldr	r3, [r2, #8]
 800334e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003352:	6929      	ldr	r1, [r5, #16]
 8003354:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003358:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800335a:	f7ff ff03 	bl	8003164 <HAL_RCC_GetSysClockFreq>
 800335e:	4b1c      	ldr	r3, [pc, #112]	; (80033d0 <HAL_RCC_ClockConfig+0x1e4>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003366:	4a1c      	ldr	r2, [pc, #112]	; (80033d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003368:	5cd3      	ldrb	r3, [r2, r3]
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	40d8      	lsrs	r0, r3
 8003370:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 8003372:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8003374:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_RCC_ClockConfig+0x1f4>)
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	f7fe fd6c 	bl	8001e54 <HAL_InitTick>
}
 800337c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 800337e:	2e80      	cmp	r6, #128	; 0x80
 8003380:	d1ce      	bne.n	8003320 <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003382:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <HAL_RCC_ClockConfig+0x1e4>)
 8003384:	6893      	ldr	r3, [r2, #8]
 8003386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800338a:	6093      	str	r3, [r2, #8]
 800338c:	e7c8      	b.n	8003320 <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4a0f      	ldr	r2, [pc, #60]	; (80033cc <HAL_RCC_ClockConfig+0x1e0>)
 8003390:	6813      	ldr	r3, [r2, #0]
 8003392:	f023 030f 	bic.w	r3, r3, #15
 8003396:	4323      	orrs	r3, r4
 8003398:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800339a:	f7fe fd9f 	bl	8001edc <HAL_GetTick>
 800339e:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <HAL_RCC_ClockConfig+0x1e0>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	42a3      	cmp	r3, r4
 80033aa:	d0bf      	beq.n	800332c <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ac:	f7fe fd96 	bl	8001edc <HAL_GetTick>
 80033b0:	1b80      	subs	r0, r0, r6
 80033b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80033b6:	4298      	cmp	r0, r3
 80033b8:	d9f2      	bls.n	80033a0 <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 80033ba:	2003      	movs	r0, #3
 80033bc:	e7de      	b.n	800337c <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 80033be:	2001      	movs	r0, #1
}
 80033c0:	4770      	bx	lr
      return HAL_ERROR;
 80033c2:	2001      	movs	r0, #1
 80033c4:	e7da      	b.n	800337c <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 80033c6:	2001      	movs	r0, #1
 80033c8:	e7d8      	b.n	800337c <HAL_RCC_ClockConfig+0x190>
 80033ca:	bf00      	nop
 80033cc:	40022000 	.word	0x40022000
 80033d0:	40021000 	.word	0x40021000
 80033d4:	04c4b400 	.word	0x04c4b400
 80033d8:	08007468 	.word	0x08007468
 80033dc:	20001de8 	.word	0x20001de8
 80033e0:	20001df0 	.word	0x20001df0

080033e4 <HAL_RCC_GetHCLKFreq>:
}
 80033e4:	4b01      	ldr	r3, [pc, #4]	; (80033ec <HAL_RCC_GetHCLKFreq+0x8>)
 80033e6:	6818      	ldr	r0, [r3, #0]
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20001de8 	.word	0x20001de8

080033f0 <HAL_RCC_GetPCLK1Freq>:
{
 80033f0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033f2:	f7ff fff7 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 80033f6:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80033fe:	4a04      	ldr	r2, [pc, #16]	; (8003410 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003400:	5cd3      	ldrb	r3, [r2, r3]
 8003402:	f003 031f 	and.w	r3, r3, #31
}
 8003406:	40d8      	lsrs	r0, r3
 8003408:	bd08      	pop	{r3, pc}
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	08007478 	.word	0x08007478

08003414 <HAL_RCC_GetPCLK2Freq>:
{
 8003414:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003416:	f7ff ffe5 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003422:	4a04      	ldr	r2, [pc, #16]	; (8003434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003424:	5cd3      	ldrb	r3, [r2, r3]
 8003426:	f003 031f 	and.w	r3, r3, #31
}
 800342a:	40d8      	lsrs	r0, r3
 800342c:	bd08      	pop	{r3, pc}
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	08007478 	.word	0x08007478

08003438 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800343a:	b083      	sub	sp, #12
 800343c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800343e:	6803      	ldr	r3, [r0, #0]
 8003440:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003444:	d069      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003446:	4bb3      	ldr	r3, [pc, #716]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800344e:	d11e      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003450:	4bb0      	ldr	r3, [pc, #704]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003452:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003454:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003458:	659a      	str	r2, [r3, #88]	; 0x58
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003464:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003466:	4aac      	ldr	r2, [pc, #688]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003468:	6813      	ldr	r3, [r2, #0]
 800346a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003470:	f7fe fd34 	bl	8001edc <HAL_GetTick>
 8003474:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003476:	4ba8      	ldr	r3, [pc, #672]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800347e:	d108      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003480:	f7fe fd2c 	bl	8001edc <HAL_GetTick>
 8003484:	1b40      	subs	r0, r0, r5
 8003486:	2802      	cmp	r0, #2
 8003488:	d9f5      	bls.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 800348a:	2503      	movs	r5, #3
 800348c:	e002      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 800348e:	2600      	movs	r6, #0
 8003490:	e7e9      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003492:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8003494:	bb45      	cbnz	r5, 80034e8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003496:	4b9f      	ldr	r3, [pc, #636]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800349c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80034a0:	d015      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x96>
 80034a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d012      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034a8:	4a9a      	ldr	r2, [pc, #616]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80034aa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80034ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034b2:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80034b6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80034ba:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034be:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80034c2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80034c6:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034ce:	f013 0f01 	tst.w	r3, #1
 80034d2:	d110      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 80034d4:	b945      	cbnz	r5, 80034e8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d6:	4a8f      	ldr	r2, [pc, #572]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80034d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80034dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80034e2:	430b      	orrs	r3, r1
 80034e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034e8:	b1c6      	cbz	r6, 800351c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ea:	4a8a      	ldr	r2, [pc, #552]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80034ec:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80034ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f2:	6593      	str	r3, [r2, #88]	; 0x58
 80034f4:	e012      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 80034f6:	f7fe fcf1 	bl	8001edc <HAL_GetTick>
 80034fa:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034fc:	4b85      	ldr	r3, [pc, #532]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	f013 0f02 	tst.w	r3, #2
 8003506:	d1e5      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003508:	f7fe fce8 	bl	8001edc <HAL_GetTick>
 800350c:	1bc0      	subs	r0, r0, r7
 800350e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003512:	4298      	cmp	r0, r3
 8003514:	d9f2      	bls.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8003516:	2503      	movs	r5, #3
 8003518:	e7dc      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800351a:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	f013 0f01 	tst.w	r3, #1
 8003522:	d008      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003524:	4a7b      	ldr	r2, [pc, #492]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003526:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800352a:	f023 0303 	bic.w	r3, r3, #3
 800352e:	6861      	ldr	r1, [r4, #4]
 8003530:	430b      	orrs	r3, r1
 8003532:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	f013 0f02 	tst.w	r3, #2
 800353c:	d008      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800353e:	4a75      	ldr	r2, [pc, #468]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003540:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003544:	f023 030c 	bic.w	r3, r3, #12
 8003548:	68a1      	ldr	r1, [r4, #8]
 800354a:	430b      	orrs	r3, r1
 800354c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	f013 0f04 	tst.w	r3, #4
 8003556:	d008      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003558:	4a6e      	ldr	r2, [pc, #440]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800355a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800355e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003562:	68e1      	ldr	r1, [r4, #12]
 8003564:	430b      	orrs	r3, r1
 8003566:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	f013 0f08 	tst.w	r3, #8
 8003570:	d008      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003572:	4a68      	ldr	r2, [pc, #416]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003574:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003578:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800357c:	6921      	ldr	r1, [r4, #16]
 800357e:	430b      	orrs	r3, r1
 8003580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	f013 0f20 	tst.w	r3, #32
 800358a:	d008      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800358c:	4a61      	ldr	r2, [pc, #388]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800358e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003592:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003596:	6961      	ldr	r1, [r4, #20]
 8003598:	430b      	orrs	r3, r1
 800359a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80035a4:	d008      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035a6:	4a5b      	ldr	r2, [pc, #364]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80035a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80035ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035b0:	69a1      	ldr	r1, [r4, #24]
 80035b2:	430b      	orrs	r3, r1
 80035b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 80035be:	d008      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035c0:	4a54      	ldr	r2, [pc, #336]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80035c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80035c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80035ca:	69e1      	ldr	r1, [r4, #28]
 80035cc:	430b      	orrs	r3, r1
 80035ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80035d8:	d008      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035da:	4a4e      	ldr	r2, [pc, #312]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80035dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80035e0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80035e4:	6a21      	ldr	r1, [r4, #32]
 80035e6:	430b      	orrs	r3, r1
 80035e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80035f2:	d008      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035f4:	4a47      	ldr	r2, [pc, #284]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80035f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80035fa:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80035fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003600:	430b      	orrs	r3, r1
 8003602:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800360c:	d00c      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800360e:	4a41      	ldr	r2, [pc, #260]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003610:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003614:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003618:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800361a:	430b      	orrs	r3, r1
 800361c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003620:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003626:	d057      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800362e:	d00c      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003630:	4a38      	ldr	r2, [pc, #224]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003632:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003636:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800363a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800363c:	430b      	orrs	r3, r1
 800363e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003642:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003648:	d04b      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003650:	d00c      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003652:	4a30      	ldr	r2, [pc, #192]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003654:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003658:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800365c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800365e:	430b      	orrs	r3, r1
 8003660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003664:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003666:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800366a:	d03f      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003672:	d00c      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003674:	4a27      	ldr	r2, [pc, #156]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003676:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800367a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800367e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003680:	430b      	orrs	r3, r1
 8003682:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800368c:	d033      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003694:	d00c      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003696:	4a1f      	ldr	r2, [pc, #124]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003698:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800369c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80036a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80036a2:	430b      	orrs	r3, r1
 80036a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ae:	d027      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80036b6:	d00c      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036b8:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80036ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80036be:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80036c2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80036c4:	430b      	orrs	r3, r1
 80036c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80036ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80036cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036d0:	d01b      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  }

#endif /* QUADSPI */

  return status;
}
 80036d2:	4628      	mov	r0, r5
 80036d4:	b003      	add	sp, #12
 80036d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d8:	68d3      	ldr	r3, [r2, #12]
 80036da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036de:	60d3      	str	r3, [r2, #12]
 80036e0:	e7a2      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e2:	68d3      	ldr	r3, [r2, #12]
 80036e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036e8:	60d3      	str	r3, [r2, #12]
 80036ea:	e7ae      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ec:	68d3      	ldr	r3, [r2, #12]
 80036ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036f2:	60d3      	str	r3, [r2, #12]
 80036f4:	e7ba      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f6:	68d3      	ldr	r3, [r2, #12]
 80036f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036fc:	60d3      	str	r3, [r2, #12]
 80036fe:	e7c6      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x256>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003700:	68d3      	ldr	r3, [r2, #12]
 8003702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003706:	60d3      	str	r3, [r2, #12]
 8003708:	e7d2      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800370a:	68d3      	ldr	r3, [r2, #12]
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	60d3      	str	r3, [r2, #12]
 8003712:	e7de      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003714:	40021000 	.word	0x40021000
 8003718:	40007000 	.word	0x40007000

0800371c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800371c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800371e:	6a03      	ldr	r3, [r0, #32]
 8003720:	f023 0301 	bic.w	r3, r3, #1
 8003724:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003726:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003728:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800372a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800372c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003730:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003734:	680d      	ldr	r5, [r1, #0]
 8003736:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003738:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800373c:	688d      	ldr	r5, [r1, #8]
 800373e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003740:	4d1c      	ldr	r5, [pc, #112]	; (80037b4 <TIM_OC1_SetConfig+0x98>)
 8003742:	42a8      	cmp	r0, r5
 8003744:	d00f      	beq.n	8003766 <TIM_OC1_SetConfig+0x4a>
 8003746:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800374a:	42a8      	cmp	r0, r5
 800374c:	d00b      	beq.n	8003766 <TIM_OC1_SetConfig+0x4a>
 800374e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003752:	42a8      	cmp	r0, r5
 8003754:	d007      	beq.n	8003766 <TIM_OC1_SetConfig+0x4a>
 8003756:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800375a:	42a8      	cmp	r0, r5
 800375c:	d003      	beq.n	8003766 <TIM_OC1_SetConfig+0x4a>
 800375e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003762:	42a8      	cmp	r0, r5
 8003764:	d105      	bne.n	8003772 <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003766:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800376a:	68cd      	ldr	r5, [r1, #12]
 800376c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800376e:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003772:	4d10      	ldr	r5, [pc, #64]	; (80037b4 <TIM_OC1_SetConfig+0x98>)
 8003774:	42a8      	cmp	r0, r5
 8003776:	d00f      	beq.n	8003798 <TIM_OC1_SetConfig+0x7c>
 8003778:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800377c:	42a8      	cmp	r0, r5
 800377e:	d00b      	beq.n	8003798 <TIM_OC1_SetConfig+0x7c>
 8003780:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003784:	42a8      	cmp	r0, r5
 8003786:	d007      	beq.n	8003798 <TIM_OC1_SetConfig+0x7c>
 8003788:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800378c:	42a8      	cmp	r0, r5
 800378e:	d003      	beq.n	8003798 <TIM_OC1_SetConfig+0x7c>
 8003790:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003794:	42a8      	cmp	r0, r5
 8003796:	d105      	bne.n	80037a4 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003798:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800379c:	694c      	ldr	r4, [r1, #20]
 800379e:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037a0:	698d      	ldr	r5, [r1, #24]
 80037a2:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037a6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037a8:	684a      	ldr	r2, [r1, #4]
 80037aa:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ac:	6203      	str	r3, [r0, #32]
}
 80037ae:	bc30      	pop	{r4, r5}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40012c00 	.word	0x40012c00

080037b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037ba:	6a03      	ldr	r3, [r0, #32]
 80037bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037c0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037c6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037cc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037d0:	680d      	ldr	r5, [r1, #0]
 80037d2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037d8:	688d      	ldr	r5, [r1, #8]
 80037da:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037de:	4d18      	ldr	r5, [pc, #96]	; (8003840 <TIM_OC3_SetConfig+0x88>)
 80037e0:	42a8      	cmp	r0, r5
 80037e2:	d003      	beq.n	80037ec <TIM_OC3_SetConfig+0x34>
 80037e4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80037e8:	42a8      	cmp	r0, r5
 80037ea:	d106      	bne.n	80037fa <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037f0:	68cd      	ldr	r5, [r1, #12]
 80037f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037fa:	4d11      	ldr	r5, [pc, #68]	; (8003840 <TIM_OC3_SetConfig+0x88>)
 80037fc:	42a8      	cmp	r0, r5
 80037fe:	d00f      	beq.n	8003820 <TIM_OC3_SetConfig+0x68>
 8003800:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003804:	42a8      	cmp	r0, r5
 8003806:	d00b      	beq.n	8003820 <TIM_OC3_SetConfig+0x68>
 8003808:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800380c:	42a8      	cmp	r0, r5
 800380e:	d007      	beq.n	8003820 <TIM_OC3_SetConfig+0x68>
 8003810:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003814:	42a8      	cmp	r0, r5
 8003816:	d003      	beq.n	8003820 <TIM_OC3_SetConfig+0x68>
 8003818:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800381c:	42a8      	cmp	r0, r5
 800381e:	d107      	bne.n	8003830 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003820:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003824:	694d      	ldr	r5, [r1, #20]
 8003826:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800382a:	698d      	ldr	r5, [r1, #24]
 800382c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003830:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003832:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003834:	684a      	ldr	r2, [r1, #4]
 8003836:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003838:	6203      	str	r3, [r0, #32]
}
 800383a:	bc30      	pop	{r4, r5}
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40012c00 	.word	0x40012c00

08003844 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003844:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003846:	6a03      	ldr	r3, [r0, #32]
 8003848:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800384c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003850:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003852:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003854:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003858:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800385c:	680d      	ldr	r5, [r1, #0]
 800385e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003862:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003866:	688d      	ldr	r5, [r1, #8]
 8003868:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800386c:	4d17      	ldr	r5, [pc, #92]	; (80038cc <TIM_OC4_SetConfig+0x88>)
 800386e:	42a8      	cmp	r0, r5
 8003870:	d003      	beq.n	800387a <TIM_OC4_SetConfig+0x36>
 8003872:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003876:	42a8      	cmp	r0, r5
 8003878:	d106      	bne.n	8003888 <TIM_OC4_SetConfig+0x44>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800387a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800387e:	68cd      	ldr	r5, [r1, #12]
 8003880:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003884:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003888:	4d10      	ldr	r5, [pc, #64]	; (80038cc <TIM_OC4_SetConfig+0x88>)
 800388a:	42a8      	cmp	r0, r5
 800388c:	d00f      	beq.n	80038ae <TIM_OC4_SetConfig+0x6a>
 800388e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003892:	42a8      	cmp	r0, r5
 8003894:	d00b      	beq.n	80038ae <TIM_OC4_SetConfig+0x6a>
 8003896:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800389a:	42a8      	cmp	r0, r5
 800389c:	d007      	beq.n	80038ae <TIM_OC4_SetConfig+0x6a>
 800389e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80038a2:	42a8      	cmp	r0, r5
 80038a4:	d003      	beq.n	80038ae <TIM_OC4_SetConfig+0x6a>
 80038a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80038aa:	42a8      	cmp	r0, r5
 80038ac:	d107      	bne.n	80038be <TIM_OC4_SetConfig+0x7a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80038ae:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038b2:	694d      	ldr	r5, [r1, #20]
 80038b4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80038b8:	698d      	ldr	r5, [r1, #24]
 80038ba:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038be:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038c0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038c2:	684a      	ldr	r2, [r1, #4]
 80038c4:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c6:	6203      	str	r3, [r0, #32]
}
 80038c8:	bc30      	pop	{r4, r5}
 80038ca:	4770      	bx	lr
 80038cc:	40012c00 	.word	0x40012c00

080038d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80038d0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80038d2:	6a03      	ldr	r3, [r0, #32]
 80038d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038da:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038dc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038de:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80038e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038e8:	680d      	ldr	r5, [r1, #0]
 80038ea:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80038ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80038f0:	688d      	ldr	r5, [r1, #8]
 80038f2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f6:	4d0f      	ldr	r5, [pc, #60]	; (8003934 <TIM_OC5_SetConfig+0x64>)
 80038f8:	42a8      	cmp	r0, r5
 80038fa:	d00f      	beq.n	800391c <TIM_OC5_SetConfig+0x4c>
 80038fc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003900:	42a8      	cmp	r0, r5
 8003902:	d00b      	beq.n	800391c <TIM_OC5_SetConfig+0x4c>
 8003904:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003908:	42a8      	cmp	r0, r5
 800390a:	d007      	beq.n	800391c <TIM_OC5_SetConfig+0x4c>
 800390c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003910:	42a8      	cmp	r0, r5
 8003912:	d003      	beq.n	800391c <TIM_OC5_SetConfig+0x4c>
 8003914:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003918:	42a8      	cmp	r0, r5
 800391a:	d104      	bne.n	8003926 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800391c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003920:	694d      	ldr	r5, [r1, #20]
 8003922:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003926:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003928:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800392a:	684a      	ldr	r2, [r1, #4]
 800392c:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392e:	6203      	str	r3, [r0, #32]
}
 8003930:	bc30      	pop	{r4, r5}
 8003932:	4770      	bx	lr
 8003934:	40012c00 	.word	0x40012c00

08003938 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003938:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800393a:	6a03      	ldr	r3, [r0, #32]
 800393c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003940:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003942:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003944:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003946:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003948:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800394c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003950:	680d      	ldr	r5, [r1, #0]
 8003952:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003956:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800395a:	688d      	ldr	r5, [r1, #8]
 800395c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003960:	4d0f      	ldr	r5, [pc, #60]	; (80039a0 <TIM_OC6_SetConfig+0x68>)
 8003962:	42a8      	cmp	r0, r5
 8003964:	d00f      	beq.n	8003986 <TIM_OC6_SetConfig+0x4e>
 8003966:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800396a:	42a8      	cmp	r0, r5
 800396c:	d00b      	beq.n	8003986 <TIM_OC6_SetConfig+0x4e>
 800396e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003972:	42a8      	cmp	r0, r5
 8003974:	d007      	beq.n	8003986 <TIM_OC6_SetConfig+0x4e>
 8003976:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800397a:	42a8      	cmp	r0, r5
 800397c:	d003      	beq.n	8003986 <TIM_OC6_SetConfig+0x4e>
 800397e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003982:	42a8      	cmp	r0, r5
 8003984:	d104      	bne.n	8003990 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003986:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800398a:	694d      	ldr	r5, [r1, #20]
 800398c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003990:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003992:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003994:	684a      	ldr	r2, [r1, #4]
 8003996:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003998:	6203      	str	r3, [r0, #32]
}
 800399a:	bc30      	pop	{r4, r5}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40012c00 	.word	0x40012c00

080039a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a4:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039a6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039a8:	6a05      	ldr	r5, [r0, #32]
 80039aa:	f025 0501 	bic.w	r5, r5, #1
 80039ae:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039b2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039b6:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ba:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80039be:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039c0:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80039c2:	6203      	str	r3, [r0, #32]
}
 80039c4:	bc30      	pop	{r4, r5}
 80039c6:	4770      	bx	lr

080039c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039c8:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ca:	6a05      	ldr	r5, [r0, #32]
 80039cc:	f025 0510 	bic.w	r5, r5, #16
 80039d0:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80039d4:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039d6:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039da:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80039e2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039e6:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80039e8:	6203      	str	r3, [r0, #32]
}
 80039ea:	bc30      	pop	{r4, r5}
 80039ec:	4770      	bx	lr

080039ee <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039ee:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80039f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039f8:	430b      	orrs	r3, r1
 80039fa:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039fe:	6083      	str	r3, [r0, #8]
}
 8003a00:	4770      	bx	lr

08003a02 <HAL_TIM_OC_MspInit>:
}
 8003a02:	4770      	bx	lr

08003a04 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003a04:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a06:	4a2c      	ldr	r2, [pc, #176]	; (8003ab8 <TIM_Base_SetConfig+0xb4>)
 8003a08:	4290      	cmp	r0, r2
 8003a0a:	d00e      	beq.n	8003a2a <TIM_Base_SetConfig+0x26>
 8003a0c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003a10:	d00b      	beq.n	8003a2a <TIM_Base_SetConfig+0x26>
 8003a12:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003a16:	4290      	cmp	r0, r2
 8003a18:	d007      	beq.n	8003a2a <TIM_Base_SetConfig+0x26>
 8003a1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a1e:	4290      	cmp	r0, r2
 8003a20:	d003      	beq.n	8003a2a <TIM_Base_SetConfig+0x26>
 8003a22:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003a26:	4290      	cmp	r0, r2
 8003a28:	d103      	bne.n	8003a32 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a2e:	684a      	ldr	r2, [r1, #4]
 8003a30:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a32:	4a21      	ldr	r2, [pc, #132]	; (8003ab8 <TIM_Base_SetConfig+0xb4>)
 8003a34:	4290      	cmp	r0, r2
 8003a36:	d01a      	beq.n	8003a6e <TIM_Base_SetConfig+0x6a>
 8003a38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003a3c:	d017      	beq.n	8003a6e <TIM_Base_SetConfig+0x6a>
 8003a3e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003a42:	4290      	cmp	r0, r2
 8003a44:	d013      	beq.n	8003a6e <TIM_Base_SetConfig+0x6a>
 8003a46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a4a:	4290      	cmp	r0, r2
 8003a4c:	d00f      	beq.n	8003a6e <TIM_Base_SetConfig+0x6a>
 8003a4e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003a52:	4290      	cmp	r0, r2
 8003a54:	d00b      	beq.n	8003a6e <TIM_Base_SetConfig+0x6a>
 8003a56:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003a5a:	4290      	cmp	r0, r2
 8003a5c:	d007      	beq.n	8003a6e <TIM_Base_SetConfig+0x6a>
 8003a5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a62:	4290      	cmp	r0, r2
 8003a64:	d003      	beq.n	8003a6e <TIM_Base_SetConfig+0x6a>
 8003a66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a6a:	4290      	cmp	r0, r2
 8003a6c:	d103      	bne.n	8003a76 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a72:	68ca      	ldr	r2, [r1, #12]
 8003a74:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a7a:	694a      	ldr	r2, [r1, #20]
 8003a7c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003a7e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a80:	688b      	ldr	r3, [r1, #8]
 8003a82:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a84:	680b      	ldr	r3, [r1, #0]
 8003a86:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <TIM_Base_SetConfig+0xb4>)
 8003a8a:	4298      	cmp	r0, r3
 8003a8c:	d00f      	beq.n	8003aae <TIM_Base_SetConfig+0xaa>
 8003a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a92:	4298      	cmp	r0, r3
 8003a94:	d00b      	beq.n	8003aae <TIM_Base_SetConfig+0xaa>
 8003a96:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003a9a:	4298      	cmp	r0, r3
 8003a9c:	d007      	beq.n	8003aae <TIM_Base_SetConfig+0xaa>
 8003a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aa2:	4298      	cmp	r0, r3
 8003aa4:	d003      	beq.n	8003aae <TIM_Base_SetConfig+0xaa>
 8003aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aaa:	4298      	cmp	r0, r3
 8003aac:	d101      	bne.n	8003ab2 <TIM_Base_SetConfig+0xae>
    TIMx->RCR = Structure->RepetitionCounter;
 8003aae:	690b      	ldr	r3, [r1, #16]
 8003ab0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	6143      	str	r3, [r0, #20]
}
 8003ab6:	4770      	bx	lr
 8003ab8:	40012c00 	.word	0x40012c00

08003abc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003abc:	b360      	cbz	r0, 8003b18 <HAL_TIM_Base_Init+0x5c>
{
 8003abe:	b510      	push	{r4, lr}
 8003ac0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ac6:	b313      	cbz	r3, 8003b0e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ace:	4621      	mov	r1, r4
 8003ad0:	f851 0b04 	ldr.w	r0, [r1], #4
 8003ad4:	f7ff ff96 	bl	8003a04 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ade:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003ae2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003ae6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003aea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003aee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003afa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003afe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003b02:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003b06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003b0a:	2000      	movs	r0, #0
}
 8003b0c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003b0e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003b12:	f7fd fe97 	bl	8001844 <HAL_TIM_Base_MspInit>
 8003b16:	e7d7      	b.n	8003ac8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003b18:	2001      	movs	r0, #1
}
 8003b1a:	4770      	bx	lr

08003b1c <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8003b1c:	b360      	cbz	r0, 8003b78 <HAL_TIM_OC_Init+0x5c>
{
 8003b1e:	b510      	push	{r4, lr}
 8003b20:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b22:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b26:	b313      	cbz	r3, 8003b6e <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003b2e:	4621      	mov	r1, r4
 8003b30:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b34:	f7ff ff66 	bl	8003a04 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003b42:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003b46:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003b4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003b4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003b5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b5e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003b62:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003b66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003b6a:	2000      	movs	r0, #0
}
 8003b6c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003b6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8003b72:	f7ff ff46 	bl	8003a02 <HAL_TIM_OC_MspInit>
 8003b76:	e7d7      	b.n	8003b28 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8003b78:	2001      	movs	r0, #1
}
 8003b7a:	4770      	bx	lr

08003b7c <TIM_OC2_SetConfig>:
{
 8003b7c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b7e:	6a03      	ldr	r3, [r0, #32]
 8003b80:	f023 0310 	bic.w	r3, r3, #16
 8003b84:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003b86:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003b88:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003b8a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b8c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003b90:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b94:	680d      	ldr	r5, [r1, #0]
 8003b96:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003b9a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b9e:	688d      	ldr	r5, [r1, #8]
 8003ba0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ba4:	4d17      	ldr	r5, [pc, #92]	; (8003c04 <TIM_OC2_SetConfig+0x88>)
 8003ba6:	42a8      	cmp	r0, r5
 8003ba8:	d003      	beq.n	8003bb2 <TIM_OC2_SetConfig+0x36>
 8003baa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003bae:	42a8      	cmp	r0, r5
 8003bb0:	d106      	bne.n	8003bc0 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bb6:	68cd      	ldr	r5, [r1, #12]
 8003bb8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc0:	4d10      	ldr	r5, [pc, #64]	; (8003c04 <TIM_OC2_SetConfig+0x88>)
 8003bc2:	42a8      	cmp	r0, r5
 8003bc4:	d00f      	beq.n	8003be6 <TIM_OC2_SetConfig+0x6a>
 8003bc6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003bca:	42a8      	cmp	r0, r5
 8003bcc:	d00b      	beq.n	8003be6 <TIM_OC2_SetConfig+0x6a>
 8003bce:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003bd2:	42a8      	cmp	r0, r5
 8003bd4:	d007      	beq.n	8003be6 <TIM_OC2_SetConfig+0x6a>
 8003bd6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003bda:	42a8      	cmp	r0, r5
 8003bdc:	d003      	beq.n	8003be6 <TIM_OC2_SetConfig+0x6a>
 8003bde:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003be2:	42a8      	cmp	r0, r5
 8003be4:	d107      	bne.n	8003bf6 <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003be6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bea:	694d      	ldr	r5, [r1, #20]
 8003bec:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bf0:	698d      	ldr	r5, [r1, #24]
 8003bf2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003bf6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003bf8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003bfa:	684a      	ldr	r2, [r1, #4]
 8003bfc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003bfe:	6203      	str	r3, [r0, #32]
}
 8003c00:	bc30      	pop	{r4, r5}
 8003c02:	4770      	bx	lr
 8003c04:	40012c00 	.word	0x40012c00

08003c08 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8003c08:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d02e      	beq.n	8003c6e <HAL_TIM_OC_ConfigChannel+0x66>
{
 8003c10:	b510      	push	{r4, lr}
 8003c12:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003c14:	2301      	movs	r3, #1
 8003c16:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003c1a:	2a14      	cmp	r2, #20
 8003c1c:	d80f      	bhi.n	8003c3e <HAL_TIM_OC_ConfigChannel+0x36>
 8003c1e:	e8df f002 	tbb	[pc, r2]
 8003c22:	0e0b      	.short	0x0e0b
 8003c24:	0e120e0e 	.word	0x0e120e0e
 8003c28:	0e160e0e 	.word	0x0e160e0e
 8003c2c:	0e1a0e0e 	.word	0x0e1a0e0e
 8003c30:	0e1e0e0e 	.word	0x0e1e0e0e
 8003c34:	0e0e      	.short	0x0e0e
 8003c36:	22          	.byte	0x22
 8003c37:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c38:	6800      	ldr	r0, [r0, #0]
 8003c3a:	f7ff fd6f 	bl	800371c <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003c44:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c46:	6800      	ldr	r0, [r0, #0]
 8003c48:	f7ff ff98 	bl	8003b7c <TIM_OC2_SetConfig>
      break;
 8003c4c:	e7f7      	b.n	8003c3e <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c4e:	6800      	ldr	r0, [r0, #0]
 8003c50:	f7ff fdb2 	bl	80037b8 <TIM_OC3_SetConfig>
      break;
 8003c54:	e7f3      	b.n	8003c3e <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c56:	6800      	ldr	r0, [r0, #0]
 8003c58:	f7ff fdf4 	bl	8003844 <TIM_OC4_SetConfig>
      break;
 8003c5c:	e7ef      	b.n	8003c3e <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c5e:	6800      	ldr	r0, [r0, #0]
 8003c60:	f7ff fe36 	bl	80038d0 <TIM_OC5_SetConfig>
      break;
 8003c64:	e7eb      	b.n	8003c3e <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c66:	6800      	ldr	r0, [r0, #0]
 8003c68:	f7ff fe66 	bl	8003938 <TIM_OC6_SetConfig>
      break;
 8003c6c:	e7e7      	b.n	8003c3e <HAL_TIM_OC_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 8003c6e:	2002      	movs	r0, #2
}
 8003c70:	4770      	bx	lr

08003c72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c72:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c74:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c76:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c7a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c82:	6082      	str	r2, [r0, #8]
}
 8003c84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003c8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d077      	beq.n	8003d84 <HAL_TIM_ConfigClockSource+0xf8>
{
 8003c94:	b510      	push	{r4, lr}
 8003c96:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003ca4:	6802      	ldr	r2, [r0, #0]
 8003ca6:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca8:	4b37      	ldr	r3, [pc, #220]	; (8003d88 <HAL_TIM_ConfigClockSource+0xfc>)
 8003caa:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8003cac:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003cae:	680b      	ldr	r3, [r1, #0]
 8003cb0:	2b60      	cmp	r3, #96	; 0x60
 8003cb2:	d053      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0xd0>
 8003cb4:	d90e      	bls.n	8003cd4 <HAL_TIM_ConfigClockSource+0x48>
 8003cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cba:	d043      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0xb8>
 8003cbc:	d92d      	bls.n	8003d1a <HAL_TIM_ConfigClockSource+0x8e>
 8003cbe:	4a33      	ldr	r2, [pc, #204]	; (8003d8c <HAL_TIM_ConfigClockSource+0x100>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d025      	beq.n	8003d10 <HAL_TIM_ConfigClockSource+0x84>
 8003cc4:	d937      	bls.n	8003d36 <HAL_TIM_ConfigClockSource+0xaa>
 8003cc6:	4a32      	ldr	r2, [pc, #200]	; (8003d90 <HAL_TIM_ConfigClockSource+0x104>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d021      	beq.n	8003d10 <HAL_TIM_ConfigClockSource+0x84>
 8003ccc:	3230      	adds	r2, #48	; 0x30
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01e      	beq.n	8003d10 <HAL_TIM_ConfigClockSource+0x84>
 8003cd2:	e013      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x70>
 8003cd4:	2b40      	cmp	r3, #64	; 0x40
 8003cd6:	d04b      	beq.n	8003d70 <HAL_TIM_ConfigClockSource+0xe4>
 8003cd8:	d90b      	bls.n	8003cf2 <HAL_TIM_ConfigClockSource+0x66>
 8003cda:	2b50      	cmp	r3, #80	; 0x50
 8003cdc:	d10e      	bne.n	8003cfc <HAL_TIM_ConfigClockSource+0x70>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cde:	68ca      	ldr	r2, [r1, #12]
 8003ce0:	6849      	ldr	r1, [r1, #4]
 8003ce2:	6820      	ldr	r0, [r4, #0]
 8003ce4:	f7ff fe5e 	bl	80039a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce8:	2150      	movs	r1, #80	; 0x50
 8003cea:	6820      	ldr	r0, [r4, #0]
 8003cec:	f7ff fe7f 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 8003cf0:	e004      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x70>
  switch (sClockSourceConfig->ClockSource)
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d00c      	beq.n	8003d10 <HAL_TIM_ConfigClockSource+0x84>
 8003cf6:	d908      	bls.n	8003d0a <HAL_TIM_ConfigClockSource+0x7e>
 8003cf8:	2b30      	cmp	r3, #48	; 0x30
 8003cfa:	d009      	beq.n	8003d10 <HAL_TIM_ConfigClockSource+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003d02:	2000      	movs	r0, #0
 8003d04:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003d08:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003d0a:	b10b      	cbz	r3, 8003d10 <HAL_TIM_ConfigClockSource+0x84>
 8003d0c:	2b10      	cmp	r3, #16
 8003d0e:	d1f5      	bne.n	8003cfc <HAL_TIM_ConfigClockSource+0x70>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d10:	4619      	mov	r1, r3
 8003d12:	6820      	ldr	r0, [r4, #0]
 8003d14:	f7ff fe6b 	bl	80039ee <TIM_ITRx_SetConfig>
        break;
 8003d18:	e7f0      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x70>
  switch (sClockSourceConfig->ClockSource)
 8003d1a:	2b70      	cmp	r3, #112	; 0x70
 8003d1c:	d1ee      	bne.n	8003cfc <HAL_TIM_ConfigClockSource+0x70>
      TIM_ETR_SetConfig(htim->Instance,
 8003d1e:	68cb      	ldr	r3, [r1, #12]
 8003d20:	684a      	ldr	r2, [r1, #4]
 8003d22:	6889      	ldr	r1, [r1, #8]
 8003d24:	6820      	ldr	r0, [r4, #0]
 8003d26:	f7ff ffa4 	bl	8003c72 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003d32:	6093      	str	r3, [r2, #8]
      break;
 8003d34:	e7e2      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x70>
  switch (sClockSourceConfig->ClockSource)
 8003d36:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003d3a:	d0e9      	beq.n	8003d10 <HAL_TIM_ConfigClockSource+0x84>
 8003d3c:	3a10      	subs	r2, #16
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d0e6      	beq.n	8003d10 <HAL_TIM_ConfigClockSource+0x84>
 8003d42:	e7db      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x70>
      TIM_ETR_SetConfig(htim->Instance,
 8003d44:	68cb      	ldr	r3, [r1, #12]
 8003d46:	684a      	ldr	r2, [r1, #4]
 8003d48:	6889      	ldr	r1, [r1, #8]
 8003d4a:	6820      	ldr	r0, [r4, #0]
 8003d4c:	f7ff ff91 	bl	8003c72 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d50:	6822      	ldr	r2, [r4, #0]
 8003d52:	6893      	ldr	r3, [r2, #8]
 8003d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d58:	6093      	str	r3, [r2, #8]
      break;
 8003d5a:	e7cf      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x70>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d5c:	68ca      	ldr	r2, [r1, #12]
 8003d5e:	6849      	ldr	r1, [r1, #4]
 8003d60:	6820      	ldr	r0, [r4, #0]
 8003d62:	f7ff fe31 	bl	80039c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d66:	2160      	movs	r1, #96	; 0x60
 8003d68:	6820      	ldr	r0, [r4, #0]
 8003d6a:	f7ff fe40 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 8003d6e:	e7c5      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x70>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d70:	68ca      	ldr	r2, [r1, #12]
 8003d72:	6849      	ldr	r1, [r1, #4]
 8003d74:	6820      	ldr	r0, [r4, #0]
 8003d76:	f7ff fe15 	bl	80039a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d7a:	2140      	movs	r1, #64	; 0x40
 8003d7c:	6820      	ldr	r0, [r4, #0]
 8003d7e:	f7ff fe36 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 8003d82:	e7bb      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x70>
  __HAL_LOCK(htim);
 8003d84:	2002      	movs	r0, #2
}
 8003d86:	4770      	bx	lr
 8003d88:	ffce0088 	.word	0xffce0088
 8003d8c:	00100030 	.word	0x00100030
 8003d90:	00100040 	.word	0x00100040

08003d94 <TIM_SlaveTimer_SetConfig>:
{
 8003d94:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8003d96:	6804      	ldr	r4, [r0, #0]
 8003d98:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d9a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003d9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003da2:	684b      	ldr	r3, [r1, #4]
 8003da4:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003daa:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003dae:	680a      	ldr	r2, [r1, #0]
 8003db0:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003db2:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8003db4:	684b      	ldr	r3, [r1, #4]
 8003db6:	2b60      	cmp	r3, #96	; 0x60
 8003db8:	d02f      	beq.n	8003e1a <TIM_SlaveTimer_SetConfig+0x86>
 8003dba:	d80c      	bhi.n	8003dd6 <TIM_SlaveTimer_SetConfig+0x42>
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	d014      	beq.n	8003dea <TIM_SlaveTimer_SetConfig+0x56>
 8003dc0:	2b50      	cmp	r3, #80	; 0x50
 8003dc2:	d106      	bne.n	8003dd2 <TIM_SlaveTimer_SetConfig+0x3e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc4:	690a      	ldr	r2, [r1, #16]
 8003dc6:	6889      	ldr	r1, [r1, #8]
 8003dc8:	6800      	ldr	r0, [r0, #0]
 8003dca:	f7ff fdeb 	bl	80039a4 <TIM_TI1_ConfigInputStage>
  return HAL_OK;
 8003dce:	2000      	movs	r0, #0
      break;
 8003dd0:	e02b      	b.n	8003e2a <TIM_SlaveTimer_SetConfig+0x96>
  switch (sSlaveConfig->InputTrigger)
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	e029      	b.n	8003e2a <TIM_SlaveTimer_SetConfig+0x96>
 8003dd6:	2b70      	cmp	r3, #112	; 0x70
 8003dd8:	d126      	bne.n	8003e28 <TIM_SlaveTimer_SetConfig+0x94>
      TIM_ETR_SetConfig(htim->Instance,
 8003dda:	690b      	ldr	r3, [r1, #16]
 8003ddc:	688a      	ldr	r2, [r1, #8]
 8003dde:	68c9      	ldr	r1, [r1, #12]
 8003de0:	6800      	ldr	r0, [r0, #0]
 8003de2:	f7ff ff46 	bl	8003c72 <TIM_ETR_SetConfig>
  return HAL_OK;
 8003de6:	2000      	movs	r0, #0
      break;
 8003de8:	e01f      	b.n	8003e2a <TIM_SlaveTimer_SetConfig+0x96>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8003dea:	680b      	ldr	r3, [r1, #0]
 8003dec:	2b05      	cmp	r3, #5
 8003dee:	d01d      	beq.n	8003e2c <TIM_SlaveTimer_SetConfig+0x98>
 8003df0:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003df4:	d01c      	beq.n	8003e30 <TIM_SlaveTimer_SetConfig+0x9c>
      tmpccer = htim->Instance->CCER;
 8003df6:	6803      	ldr	r3, [r0, #0]
 8003df8:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003dfa:	6a1a      	ldr	r2, [r3, #32]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003e02:	6802      	ldr	r2, [r0, #0]
 8003e04:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e0a:	6909      	ldr	r1, [r1, #16]
 8003e0c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8003e10:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8003e12:	6803      	ldr	r3, [r0, #0]
 8003e14:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 8003e16:	2000      	movs	r0, #0
      break;
 8003e18:	e007      	b.n	8003e2a <TIM_SlaveTimer_SetConfig+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e1a:	690a      	ldr	r2, [r1, #16]
 8003e1c:	6889      	ldr	r1, [r1, #8]
 8003e1e:	6800      	ldr	r0, [r0, #0]
 8003e20:	f7ff fdd2 	bl	80039c8 <TIM_TI2_ConfigInputStage>
  return HAL_OK;
 8003e24:	2000      	movs	r0, #0
      break;
 8003e26:	e000      	b.n	8003e2a <TIM_SlaveTimer_SetConfig+0x96>
  switch (sSlaveConfig->InputTrigger)
 8003e28:	2000      	movs	r0, #0
}
 8003e2a:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	e7fc      	b.n	8003e2a <TIM_SlaveTimer_SetConfig+0x96>
 8003e30:	2001      	movs	r0, #1
 8003e32:	e7fa      	b.n	8003e2a <TIM_SlaveTimer_SetConfig+0x96>

08003e34 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8003e34:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d022      	beq.n	8003e82 <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 8003e3c:	b510      	push	{r4, lr}
 8003e3e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003e40:	2301      	movs	r3, #1
 8003e42:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003e46:	2302      	movs	r3, #2
 8003e48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003e4c:	f7ff ffa2 	bl	8003d94 <TIM_SlaveTimer_SetConfig>
 8003e50:	b980      	cbnz	r0, 8003e74 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003e52:	6822      	ldr	r2, [r4, #0]
 8003e54:	68d3      	ldr	r3, [r2, #12]
 8003e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e5a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003e5c:	6822      	ldr	r2, [r4, #0]
 8003e5e:	68d3      	ldr	r3, [r2, #12]
 8003e60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e64:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003e72:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8003e74:	2001      	movs	r0, #1
 8003e76:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8003e80:	e7f7      	b.n	8003e72 <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8003e82:	2002      	movs	r0, #2
}
 8003e84:	4770      	bx	lr

08003e86 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e86:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e88:	f001 011f 	and.w	r1, r1, #31
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e92:	6a03      	ldr	r3, [r0, #32]
 8003e94:	ea23 0304 	bic.w	r3, r3, r4
 8003e98:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e9a:	6a03      	ldr	r3, [r0, #32]
 8003e9c:	fa02 f101 	lsl.w	r1, r2, r1
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	6203      	str	r3, [r0, #32]
}
 8003ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d040      	beq.n	8003f36 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
{
 8003eb4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec2:	6802      	ldr	r2, [r0, #0]
 8003ec4:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ec6:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ec8:	4c1c      	ldr	r4, [pc, #112]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8003eca:	42a2      	cmp	r2, r4
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8003ece:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003ed2:	42a2      	cmp	r2, r4
 8003ed4:	d103      	bne.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ed6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003eda:	684c      	ldr	r4, [r1, #4]
 8003edc:	4323      	orrs	r3, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ede:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ee6:	680c      	ldr	r4, [r1, #0]
 8003ee8:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eea:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eec:	6803      	ldr	r3, [r0, #0]
 8003eee:	4a13      	ldr	r2, [pc, #76]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d012      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef8:	d00f      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003efa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00b      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003f02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d007      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003f0a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d003      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003f12:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d104      	bne.n	8003f24 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f1a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f1e:	688a      	ldr	r2, [r1, #8]
 8003f20:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f22:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f24:	2301      	movs	r3, #1
 8003f26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003f30:	4618      	mov	r0, r3
}
 8003f32:	bc30      	pop	{r4, r5}
 8003f34:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003f36:	2002      	movs	r0, #2
}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40012c00 	.word	0x40012c00

08003f40 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f40:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d055      	beq.n	8003ff4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
{
 8003f48:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f50:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f56:	688a      	ldr	r2, [r1, #8]
 8003f58:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f5e:	684a      	ldr	r2, [r1, #4]
 8003f60:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f66:	680a      	ldr	r2, [r1, #0]
 8003f68:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f6e:	690a      	ldr	r2, [r1, #16]
 8003f70:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f76:	694a      	ldr	r2, [r1, #20]
 8003f78:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f7e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003f80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f82:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003f86:	698a      	ldr	r2, [r1, #24]
 8003f88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003f8c:	6802      	ldr	r2, [r0, #0]
 8003f8e:	4c1a      	ldr	r4, [pc, #104]	; (8003ff8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003f90:	42a2      	cmp	r2, r4
 8003f92:	d003      	beq.n	8003f9c <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
 8003f94:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003f98:	42a2      	cmp	r2, r4
 8003f9a:	d103      	bne.n	8003fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	69cc      	ldr	r4, [r1, #28]
 8003fa2:	4323      	orrs	r3, r4
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003fa4:	4c14      	ldr	r4, [pc, #80]	; (8003ff8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003fa6:	42a2      	cmp	r2, r4
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8003faa:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003fae:	42a2      	cmp	r2, r4
 8003fb0:	d007      	beq.n	8003fc2 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fb2:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003fba:	4618      	mov	r0, r3
}
 8003fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fc0:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003fc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003fc6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003fc8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003fcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd0:	6a0c      	ldr	r4, [r1, #32]
 8003fd2:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003fd4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003fd8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003fda:	4323      	orrs	r3, r4
    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003fdc:	4c06      	ldr	r4, [pc, #24]	; (8003ff8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003fde:	42a2      	cmp	r2, r4
 8003fe0:	d003      	beq.n	8003fea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003fe2:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003fe6:	42a2      	cmp	r2, r4
 8003fe8:	d1e3      	bne.n	8003fb2 <HAL_TIMEx_ConfigBreakDeadTime+0x72>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003fea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003fee:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	e7de      	b.n	8003fb2 <HAL_TIMEx_ConfigBreakDeadTime+0x72>
  __HAL_LOCK(htim);
 8003ff4:	2002      	movs	r0, #2
}
 8003ff6:	4770      	bx	lr
 8003ff8:	40012c00 	.word	0x40012c00

08003ffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004000:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8004002:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004004:	6883      	ldr	r3, [r0, #8]
 8004006:	6902      	ldr	r2, [r0, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	6942      	ldr	r2, [r0, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	69c2      	ldr	r2, [r0, #28]
 8004010:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004012:	6808      	ldr	r0, [r1, #0]
 8004014:	4a9d      	ldr	r2, [pc, #628]	; (800428c <UART_SetConfig+0x290>)
 8004016:	4002      	ands	r2, r0
 8004018:	4313      	orrs	r3, r2
 800401a:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800401c:	6822      	ldr	r2, [r4, #0]
 800401e:	6853      	ldr	r3, [r2, #4]
 8004020:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004024:	68e1      	ldr	r1, [r4, #12]
 8004026:	430b      	orrs	r3, r1
 8004028:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800402a:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800402c:	6822      	ldr	r2, [r4, #0]
 800402e:	4b98      	ldr	r3, [pc, #608]	; (8004290 <UART_SetConfig+0x294>)
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <UART_SetConfig+0x3c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004034:	6a23      	ldr	r3, [r4, #32]
 8004036:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004038:	6893      	ldr	r3, [r2, #8]
 800403a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800403e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004042:	430b      	orrs	r3, r1
 8004044:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004046:	6822      	ldr	r2, [r4, #0]
 8004048:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800404a:	f023 030f 	bic.w	r3, r3, #15
 800404e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004050:	430b      	orrs	r3, r1
 8004052:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004054:	6822      	ldr	r2, [r4, #0]
 8004056:	4b8f      	ldr	r3, [pc, #572]	; (8004294 <UART_SetConfig+0x298>)
 8004058:	429a      	cmp	r2, r3
 800405a:	d023      	beq.n	80040a4 <UART_SetConfig+0xa8>
 800405c:	4b8e      	ldr	r3, [pc, #568]	; (8004298 <UART_SetConfig+0x29c>)
 800405e:	429a      	cmp	r2, r3
 8004060:	d034      	beq.n	80040cc <UART_SetConfig+0xd0>
 8004062:	4b8e      	ldr	r3, [pc, #568]	; (800429c <UART_SetConfig+0x2a0>)
 8004064:	429a      	cmp	r2, r3
 8004066:	d04a      	beq.n	80040fe <UART_SetConfig+0x102>
 8004068:	4b8d      	ldr	r3, [pc, #564]	; (80042a0 <UART_SetConfig+0x2a4>)
 800406a:	429a      	cmp	r2, r3
 800406c:	d059      	beq.n	8004122 <UART_SetConfig+0x126>
 800406e:	4b88      	ldr	r3, [pc, #544]	; (8004290 <UART_SetConfig+0x294>)
 8004070:	429a      	cmp	r2, r3
 8004072:	d068      	beq.n	8004146 <UART_SetConfig+0x14a>
 8004074:	2310      	movs	r3, #16

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004076:	4986      	ldr	r1, [pc, #536]	; (8004290 <UART_SetConfig+0x294>)
 8004078:	428a      	cmp	r2, r1
 800407a:	f000 8095 	beq.w	80041a8 <UART_SetConfig+0x1ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800407e:	69e0      	ldr	r0, [r4, #28]
 8004080:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004084:	f000 80d4 	beq.w	8004230 <UART_SetConfig+0x234>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004088:	2b08      	cmp	r3, #8
 800408a:	f200 8152 	bhi.w	8004332 <UART_SetConfig+0x336>
 800408e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004092:	0114      	.short	0x0114
 8004094:	01120137 	.word	0x01120137
 8004098:	013a0150 	.word	0x013a0150
 800409c:	01500150 	.word	0x01500150
 80040a0:	013d0150 	.word	0x013d0150
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040a4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d809      	bhi.n	80040c8 <UART_SetConfig+0xcc>
 80040b4:	e8df f003 	tbb	[pc, r3]
 80040b8:	065c0402 	.word	0x065c0402
 80040bc:	2301      	movs	r3, #1
 80040be:	e7da      	b.n	8004076 <UART_SetConfig+0x7a>
 80040c0:	2304      	movs	r3, #4
 80040c2:	e7d8      	b.n	8004076 <UART_SetConfig+0x7a>
 80040c4:	2308      	movs	r3, #8
 80040c6:	e7d6      	b.n	8004076 <UART_SetConfig+0x7a>
 80040c8:	2310      	movs	r3, #16
 80040ca:	e7d4      	b.n	8004076 <UART_SetConfig+0x7a>
 80040cc:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b0c      	cmp	r3, #12
 80040da:	d80e      	bhi.n	80040fa <UART_SetConfig+0xfe>
 80040dc:	e8df f003 	tbb	[pc, r3]
 80040e0:	0d0d0d07 	.word	0x0d0d0d07
 80040e4:	0d0d0d09 	.word	0x0d0d0d09
 80040e8:	0d0d0d4a 	.word	0x0d0d0d4a
 80040ec:	0b          	.byte	0x0b
 80040ed:	00          	.byte	0x00
 80040ee:	2300      	movs	r3, #0
 80040f0:	e7c1      	b.n	8004076 <UART_SetConfig+0x7a>
 80040f2:	2304      	movs	r3, #4
 80040f4:	e7bf      	b.n	8004076 <UART_SetConfig+0x7a>
 80040f6:	2308      	movs	r3, #8
 80040f8:	e7bd      	b.n	8004076 <UART_SetConfig+0x7a>
 80040fa:	2310      	movs	r3, #16
 80040fc:	e7bb      	b.n	8004076 <UART_SetConfig+0x7a>
 80040fe:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004106:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800410a:	2b20      	cmp	r3, #32
 800410c:	d034      	beq.n	8004178 <UART_SetConfig+0x17c>
 800410e:	d804      	bhi.n	800411a <UART_SetConfig+0x11e>
 8004110:	b3a3      	cbz	r3, 800417c <UART_SetConfig+0x180>
 8004112:	2b10      	cmp	r3, #16
 8004114:	d134      	bne.n	8004180 <UART_SetConfig+0x184>
 8004116:	2304      	movs	r3, #4
 8004118:	e7ad      	b.n	8004076 <UART_SetConfig+0x7a>
 800411a:	2b30      	cmp	r3, #48	; 0x30
 800411c:	d132      	bne.n	8004184 <UART_SetConfig+0x188>
 800411e:	2308      	movs	r3, #8
 8004120:	e7a9      	b.n	8004076 <UART_SetConfig+0x7a>
 8004122:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800412e:	2b80      	cmp	r3, #128	; 0x80
 8004130:	d02a      	beq.n	8004188 <UART_SetConfig+0x18c>
 8004132:	d804      	bhi.n	800413e <UART_SetConfig+0x142>
 8004134:	b353      	cbz	r3, 800418c <UART_SetConfig+0x190>
 8004136:	2b40      	cmp	r3, #64	; 0x40
 8004138:	d12a      	bne.n	8004190 <UART_SetConfig+0x194>
 800413a:	2304      	movs	r3, #4
 800413c:	e79b      	b.n	8004076 <UART_SetConfig+0x7a>
 800413e:	2bc0      	cmp	r3, #192	; 0xc0
 8004140:	d128      	bne.n	8004194 <UART_SetConfig+0x198>
 8004142:	2308      	movs	r3, #8
 8004144:	e797      	b.n	8004076 <UART_SetConfig+0x7a>
 8004146:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004156:	d01f      	beq.n	8004198 <UART_SetConfig+0x19c>
 8004158:	d805      	bhi.n	8004166 <UART_SetConfig+0x16a>
 800415a:	b1fb      	cbz	r3, 800419c <UART_SetConfig+0x1a0>
 800415c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004160:	d11e      	bne.n	80041a0 <UART_SetConfig+0x1a4>
 8004162:	2304      	movs	r3, #4
 8004164:	e787      	b.n	8004076 <UART_SetConfig+0x7a>
 8004166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800416a:	d11b      	bne.n	80041a4 <UART_SetConfig+0x1a8>
 800416c:	2308      	movs	r3, #8
 800416e:	e782      	b.n	8004076 <UART_SetConfig+0x7a>
 8004170:	2302      	movs	r3, #2
 8004172:	e780      	b.n	8004076 <UART_SetConfig+0x7a>
 8004174:	2302      	movs	r3, #2
 8004176:	e77e      	b.n	8004076 <UART_SetConfig+0x7a>
 8004178:	2302      	movs	r3, #2
 800417a:	e77c      	b.n	8004076 <UART_SetConfig+0x7a>
 800417c:	2300      	movs	r3, #0
 800417e:	e77a      	b.n	8004076 <UART_SetConfig+0x7a>
 8004180:	2310      	movs	r3, #16
 8004182:	e778      	b.n	8004076 <UART_SetConfig+0x7a>
 8004184:	2310      	movs	r3, #16
 8004186:	e776      	b.n	8004076 <UART_SetConfig+0x7a>
 8004188:	2302      	movs	r3, #2
 800418a:	e774      	b.n	8004076 <UART_SetConfig+0x7a>
 800418c:	2300      	movs	r3, #0
 800418e:	e772      	b.n	8004076 <UART_SetConfig+0x7a>
 8004190:	2310      	movs	r3, #16
 8004192:	e770      	b.n	8004076 <UART_SetConfig+0x7a>
 8004194:	2310      	movs	r3, #16
 8004196:	e76e      	b.n	8004076 <UART_SetConfig+0x7a>
 8004198:	2302      	movs	r3, #2
 800419a:	e76c      	b.n	8004076 <UART_SetConfig+0x7a>
 800419c:	2300      	movs	r3, #0
 800419e:	e76a      	b.n	8004076 <UART_SetConfig+0x7a>
 80041a0:	2310      	movs	r3, #16
 80041a2:	e768      	b.n	8004076 <UART_SetConfig+0x7a>
 80041a4:	2310      	movs	r3, #16
 80041a6:	e766      	b.n	8004076 <UART_SetConfig+0x7a>
    switch (clocksource)
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	f200 80b2 	bhi.w	8004312 <UART_SetConfig+0x316>
 80041ae:	e8df f003 	tbb	[pc, r3]
 80041b2:	b008      	.short	0xb008
 80041b4:	b03ab03d 	.word	0xb03ab03d
 80041b8:	b0b0      	.short	0xb0b0
 80041ba:	05          	.byte	0x05
 80041bb:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 80041bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80041c0:	e004      	b.n	80041cc <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c2:	f7ff f915 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80041c6:	2800      	cmp	r0, #0
 80041c8:	f000 80a5 	beq.w	8004316 <UART_SetConfig+0x31a>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041ce:	4b35      	ldr	r3, [pc, #212]	; (80042a4 <UART_SetConfig+0x2a8>)
 80041d0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80041d4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041d8:	6865      	ldr	r5, [r4, #4]
 80041da:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80041de:	4299      	cmp	r1, r3
 80041e0:	f200 809b 	bhi.w	800431a <UART_SetConfig+0x31e>
 80041e4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80041e8:	f200 8099 	bhi.w	800431e <UART_SetConfig+0x322>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041ec:	f04f 0800 	mov.w	r8, #0
 80041f0:	b292      	uxth	r2, r2
 80041f2:	2300      	movs	r3, #0
 80041f4:	4641      	mov	r1, r8
 80041f6:	f7fc fd1f 	bl	8000c38 <__aeabi_uldivmod>
 80041fa:	020f      	lsls	r7, r1, #8
 80041fc:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8004200:	0206      	lsls	r6, r0, #8
 8004202:	0868      	lsrs	r0, r5, #1
 8004204:	462a      	mov	r2, r5
 8004206:	4643      	mov	r3, r8
 8004208:	1830      	adds	r0, r6, r0
 800420a:	f147 0100 	adc.w	r1, r7, #0
 800420e:	f7fc fd13 	bl	8000c38 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004212:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004216:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <UART_SetConfig+0x2ac>)
 8004218:	429a      	cmp	r2, r3
 800421a:	f200 8082 	bhi.w	8004322 <UART_SetConfig+0x326>
          huart->Instance->BRR = usartdiv;
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	60d8      	str	r0, [r3, #12]
 8004222:	4640      	mov	r0, r8
 8004224:	e062      	b.n	80042ec <UART_SetConfig+0x2f0>
        pclk = HAL_RCC_GetSysClockFreq();
 8004226:	f7fe ff9d 	bl	8003164 <HAL_RCC_GetSysClockFreq>
        break;
 800422a:	e7cc      	b.n	80041c6 <UART_SetConfig+0x1ca>
        pclk = (uint32_t) HSI_VALUE;
 800422c:	481f      	ldr	r0, [pc, #124]	; (80042ac <UART_SetConfig+0x2b0>)
 800422e:	e7cd      	b.n	80041cc <UART_SetConfig+0x1d0>
    switch (clocksource)
 8004230:	2b08      	cmp	r3, #8
 8004232:	d878      	bhi.n	8004326 <UART_SetConfig+0x32a>
 8004234:	e8df f003 	tbb	[pc, r3]
 8004238:	77052707 	.word	0x77052707
 800423c:	7777773c 	.word	0x7777773c
 8004240:	0b          	.byte	0x0b
 8004241:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004242:	481a      	ldr	r0, [pc, #104]	; (80042ac <UART_SetConfig+0x2b0>)
 8004244:	e003      	b.n	800424e <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004246:	f7ff f8d3 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800424a:	2800      	cmp	r0, #0
 800424c:	d06d      	beq.n	800432a <UART_SetConfig+0x32e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800424e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004250:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <UART_SetConfig+0x2a8>)
 8004252:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004256:	fbb0 f0f3 	udiv	r0, r0, r3
 800425a:	6862      	ldr	r2, [r4, #4]
 800425c:	0853      	lsrs	r3, r2, #1
 800425e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004262:	fbb0 f0f2 	udiv	r0, r0, r2
 8004266:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004268:	f1a0 0210 	sub.w	r2, r0, #16
 800426c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004270:	429a      	cmp	r2, r3
 8004272:	d85c      	bhi.n	800432e <UART_SetConfig+0x332>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004274:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004278:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800427c:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	60d8      	str	r0, [r3, #12]
 8004282:	2000      	movs	r0, #0
 8004284:	e032      	b.n	80042ec <UART_SetConfig+0x2f0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004286:	f7ff f8c5 	bl	8003414 <HAL_RCC_GetPCLK2Freq>
        break;
 800428a:	e7de      	b.n	800424a <UART_SetConfig+0x24e>
 800428c:	cfff69f3 	.word	0xcfff69f3
 8004290:	40008000 	.word	0x40008000
 8004294:	40013800 	.word	0x40013800
 8004298:	40004400 	.word	0x40004400
 800429c:	40004800 	.word	0x40004800
 80042a0:	40004c00 	.word	0x40004c00
 80042a4:	08007480 	.word	0x08007480
 80042a8:	000ffcff 	.word	0x000ffcff
 80042ac:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetSysClockFreq();
 80042b0:	f7fe ff58 	bl	8003164 <HAL_RCC_GetSysClockFreq>
        break;
 80042b4:	e7c9      	b.n	800424a <UART_SetConfig+0x24e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042b6:	4822      	ldr	r0, [pc, #136]	; (8004340 <UART_SetConfig+0x344>)
 80042b8:	e003      	b.n	80042c2 <UART_SetConfig+0x2c6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ba:	f7ff f899 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80042be:	2800      	cmp	r0, #0
 80042c0:	d039      	beq.n	8004336 <UART_SetConfig+0x33a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042c4:	4b1f      	ldr	r3, [pc, #124]	; (8004344 <UART_SetConfig+0x348>)
 80042c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80042ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80042ce:	6863      	ldr	r3, [r4, #4]
 80042d0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80042d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80042d8:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042da:	f1a0 0210 	sub.w	r2, r0, #16
 80042de:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d829      	bhi.n	800433a <UART_SetConfig+0x33e>
      {
        huart->Instance->BRR = usartdiv;
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	60d8      	str	r0, [r3, #12]
 80042ea:	2000      	movs	r0, #0
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80042f2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 80042fa:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 80042fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8004300:	f7ff f888 	bl	8003414 <HAL_RCC_GetPCLK2Freq>
        break;
 8004304:	e7db      	b.n	80042be <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetSysClockFreq();
 8004306:	f7fe ff2d 	bl	8003164 <HAL_RCC_GetSysClockFreq>
        break;
 800430a:	e7d8      	b.n	80042be <UART_SetConfig+0x2c2>
        pclk = (uint32_t) LSE_VALUE;
 800430c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004310:	e7d7      	b.n	80042c2 <UART_SetConfig+0x2c6>
  if (UART_INSTANCE_LOWPOWER(huart))
 8004312:	2001      	movs	r0, #1
 8004314:	e7ea      	b.n	80042ec <UART_SetConfig+0x2f0>
 8004316:	2000      	movs	r0, #0
 8004318:	e7e8      	b.n	80042ec <UART_SetConfig+0x2f0>
        ret = HAL_ERROR;
 800431a:	2001      	movs	r0, #1
 800431c:	e7e6      	b.n	80042ec <UART_SetConfig+0x2f0>
 800431e:	2001      	movs	r0, #1
 8004320:	e7e4      	b.n	80042ec <UART_SetConfig+0x2f0>
          ret = HAL_ERROR;
 8004322:	2001      	movs	r0, #1
 8004324:	e7e2      	b.n	80042ec <UART_SetConfig+0x2f0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004326:	2001      	movs	r0, #1
 8004328:	e7e0      	b.n	80042ec <UART_SetConfig+0x2f0>
 800432a:	2000      	movs	r0, #0
 800432c:	e7de      	b.n	80042ec <UART_SetConfig+0x2f0>
        ret = HAL_ERROR;
 800432e:	2001      	movs	r0, #1
 8004330:	e7dc      	b.n	80042ec <UART_SetConfig+0x2f0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004332:	2001      	movs	r0, #1
 8004334:	e7da      	b.n	80042ec <UART_SetConfig+0x2f0>
 8004336:	2000      	movs	r0, #0
 8004338:	e7d8      	b.n	80042ec <UART_SetConfig+0x2f0>
        ret = HAL_ERROR;
 800433a:	2001      	movs	r0, #1
 800433c:	e7d6      	b.n	80042ec <UART_SetConfig+0x2f0>
 800433e:	bf00      	nop
 8004340:	00f42400 	.word	0x00f42400
 8004344:	08007480 	.word	0x08007480

08004348 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004348:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800434a:	f013 0f01 	tst.w	r3, #1
 800434e:	d006      	beq.n	800435e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004350:	6802      	ldr	r2, [r0, #0]
 8004352:	6853      	ldr	r3, [r2, #4]
 8004354:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004358:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800435a:	430b      	orrs	r3, r1
 800435c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800435e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004360:	f013 0f02 	tst.w	r3, #2
 8004364:	d006      	beq.n	8004374 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004366:	6802      	ldr	r2, [r0, #0]
 8004368:	6853      	ldr	r3, [r2, #4]
 800436a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004370:	430b      	orrs	r3, r1
 8004372:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004374:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004376:	f013 0f04 	tst.w	r3, #4
 800437a:	d006      	beq.n	800438a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800437c:	6802      	ldr	r2, [r0, #0]
 800437e:	6853      	ldr	r3, [r2, #4]
 8004380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004384:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004386:	430b      	orrs	r3, r1
 8004388:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800438a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800438c:	f013 0f08 	tst.w	r3, #8
 8004390:	d006      	beq.n	80043a0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004392:	6802      	ldr	r2, [r0, #0]
 8004394:	6853      	ldr	r3, [r2, #4]
 8004396:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800439a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800439c:	430b      	orrs	r3, r1
 800439e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043a2:	f013 0f10 	tst.w	r3, #16
 80043a6:	d006      	beq.n	80043b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043a8:	6802      	ldr	r2, [r0, #0]
 80043aa:	6893      	ldr	r3, [r2, #8]
 80043ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80043b2:	430b      	orrs	r3, r1
 80043b4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043b8:	f013 0f20 	tst.w	r3, #32
 80043bc:	d006      	beq.n	80043cc <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043be:	6802      	ldr	r2, [r0, #0]
 80043c0:	6893      	ldr	r3, [r2, #8]
 80043c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80043c8:	430b      	orrs	r3, r1
 80043ca:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043ce:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043d2:	d00a      	beq.n	80043ea <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043d4:	6802      	ldr	r2, [r0, #0]
 80043d6:	6853      	ldr	r3, [r2, #4]
 80043d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80043dc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80043de:	430b      	orrs	r3, r1
 80043e0:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80043e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043e8:	d00b      	beq.n	8004402 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043f0:	d006      	beq.n	8004400 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043f2:	6802      	ldr	r2, [r0, #0]
 80043f4:	6853      	ldr	r3, [r2, #4]
 80043f6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80043fa:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6053      	str	r3, [r2, #4]
  }
}
 8004400:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004402:	6802      	ldr	r2, [r0, #0]
 8004404:	6853      	ldr	r3, [r2, #4]
 8004406:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800440a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800440c:	430b      	orrs	r3, r1
 800440e:	6053      	str	r3, [r2, #4]
 8004410:	e7eb      	b.n	80043ea <UART_AdvFeatureConfig+0xa2>

08004412 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004412:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004416:	4605      	mov	r5, r0
 8004418:	460f      	mov	r7, r1
 800441a:	4616      	mov	r6, r2
 800441c:	4699      	mov	r9, r3
 800441e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004422:	682c      	ldr	r4, [r5, #0]
 8004424:	69e4      	ldr	r4, [r4, #28]
 8004426:	ea37 0304 	bics.w	r3, r7, r4
 800442a:	bf0c      	ite	eq
 800442c:	2401      	moveq	r4, #1
 800442e:	2400      	movne	r4, #0
 8004430:	42b4      	cmp	r4, r6
 8004432:	d141      	bne.n	80044b8 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004434:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004438:	d0f3      	beq.n	8004422 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443a:	f7fd fd4f 	bl	8001edc <HAL_GetTick>
 800443e:	eba0 0009 	sub.w	r0, r0, r9
 8004442:	4540      	cmp	r0, r8
 8004444:	d824      	bhi.n	8004490 <UART_WaitOnFlagUntilTimeout+0x7e>
 8004446:	f1b8 0f00 	cmp.w	r8, #0
 800444a:	d021      	beq.n	8004490 <UART_WaitOnFlagUntilTimeout+0x7e>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800444c:	682b      	ldr	r3, [r5, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	f012 0f04 	tst.w	r2, #4
 8004454:	d0e5      	beq.n	8004422 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800445c:	d0e1      	beq.n	8004422 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800445e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004462:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004464:	682a      	ldr	r2, [r5, #0]
 8004466:	6813      	ldr	r3, [r2, #0]
 8004468:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800446c:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446e:	682a      	ldr	r2, [r5, #0]
 8004470:	6893      	ldr	r3, [r2, #8]
 8004472:	f023 0301 	bic.w	r3, r3, #1
 8004476:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004478:	2320      	movs	r3, #32
 800447a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800447e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004482:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004486:	2300      	movs	r3, #0
 8004488:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 800448c:	2003      	movs	r0, #3
 800448e:	e014      	b.n	80044ba <UART_WaitOnFlagUntilTimeout+0xa8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004490:	682a      	ldr	r2, [r5, #0]
 8004492:	6813      	ldr	r3, [r2, #0]
 8004494:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004498:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449a:	682a      	ldr	r2, [r5, #0]
 800449c:	6893      	ldr	r3, [r2, #8]
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80044a4:	2320      	movs	r3, #32
 80044a6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80044aa:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 80044ae:	2300      	movs	r3, #0
 80044b0:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 80044b4:	2003      	movs	r0, #3
 80044b6:	e000      	b.n	80044ba <UART_WaitOnFlagUntilTimeout+0xa8>
        }
      }
    }
  }
  return HAL_OK;
 80044b8:	2000      	movs	r0, #0
}
 80044ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080044be <HAL_UART_Transmit>:
{
 80044be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80044c6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d158      	bne.n	8004580 <HAL_UART_Transmit+0xc2>
 80044ce:	4604      	mov	r4, r0
 80044d0:	460d      	mov	r5, r1
 80044d2:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80044d4:	2900      	cmp	r1, #0
 80044d6:	d057      	beq.n	8004588 <HAL_UART_Transmit+0xca>
 80044d8:	2a00      	cmp	r2, #0
 80044da:	d057      	beq.n	800458c <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 80044dc:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d055      	beq.n	8004590 <HAL_UART_Transmit+0xd2>
 80044e4:	2301      	movs	r3, #1
 80044e6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ea:	2300      	movs	r3, #0
 80044ec:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044f0:	2321      	movs	r3, #33	; 0x21
 80044f2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 80044f6:	f7fd fcf1 	bl	8001edc <HAL_GetTick>
 80044fa:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80044fc:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 8004500:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004504:	68a3      	ldr	r3, [r4, #8]
 8004506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450a:	d005      	beq.n	8004518 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 800450c:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8004510:	2300      	movs	r3, #0
 8004512:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8004516:	e014      	b.n	8004542 <HAL_UART_Transmit+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004518:	6923      	ldr	r3, [r4, #16]
 800451a:	b113      	cbz	r3, 8004522 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 800451c:	f04f 0800 	mov.w	r8, #0
 8004520:	e7f6      	b.n	8004510 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 8004522:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004524:	2500      	movs	r5, #0
 8004526:	e7f3      	b.n	8004510 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004528:	f838 3b02 	ldrh.w	r3, [r8], #2
 800452c:	6822      	ldr	r2, [r4, #0]
 800452e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004532:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004534:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8004538:	b292      	uxth	r2, r2
 800453a:	3a01      	subs	r2, #1
 800453c:	b292      	uxth	r2, r2
 800453e:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004542:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8004546:	b29b      	uxth	r3, r3
 8004548:	b173      	cbz	r3, 8004568 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800454a:	9600      	str	r6, [sp, #0]
 800454c:	463b      	mov	r3, r7
 800454e:	2200      	movs	r2, #0
 8004550:	2180      	movs	r1, #128	; 0x80
 8004552:	4620      	mov	r0, r4
 8004554:	f7ff ff5d 	bl	8004412 <UART_WaitOnFlagUntilTimeout>
 8004558:	b9e0      	cbnz	r0, 8004594 <HAL_UART_Transmit+0xd6>
      if (pdata8bits == NULL)
 800455a:	2d00      	cmp	r5, #0
 800455c:	d0e4      	beq.n	8004528 <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800455e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004566:	e7e5      	b.n	8004534 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004568:	9600      	str	r6, [sp, #0]
 800456a:	463b      	mov	r3, r7
 800456c:	2200      	movs	r2, #0
 800456e:	2140      	movs	r1, #64	; 0x40
 8004570:	4620      	mov	r0, r4
 8004572:	f7ff ff4e 	bl	8004412 <UART_WaitOnFlagUntilTimeout>
 8004576:	b978      	cbnz	r0, 8004598 <HAL_UART_Transmit+0xda>
    huart->gState = HAL_UART_STATE_READY;
 8004578:	2320      	movs	r3, #32
 800457a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 800457e:	e000      	b.n	8004582 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8004580:	2002      	movs	r0, #2
}
 8004582:	b002      	add	sp, #8
 8004584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004588:	2001      	movs	r0, #1
 800458a:	e7fa      	b.n	8004582 <HAL_UART_Transmit+0xc4>
 800458c:	2001      	movs	r0, #1
 800458e:	e7f8      	b.n	8004582 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8004590:	2002      	movs	r0, #2
 8004592:	e7f6      	b.n	8004582 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8004594:	2003      	movs	r0, #3
 8004596:	e7f4      	b.n	8004582 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8004598:	2003      	movs	r0, #3
 800459a:	e7f2      	b.n	8004582 <HAL_UART_Transmit+0xc4>

0800459c <UART_CheckIdleState>:
{
 800459c:	b530      	push	{r4, r5, lr}
 800459e:	b083      	sub	sp, #12
 80045a0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a2:	2300      	movs	r3, #0
 80045a4:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80045a8:	f7fd fc98 	bl	8001edc <HAL_GetTick>
 80045ac:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f013 0f08 	tst.w	r3, #8
 80045b6:	d10f      	bne.n	80045d8 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f013 0f04 	tst.w	r3, #4
 80045c0:	d118      	bne.n	80045f4 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80045c2:	2320      	movs	r3, #32
 80045c4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80045c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045cc:	2000      	movs	r0, #0
 80045ce:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80045d0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80045d4:	b003      	add	sp, #12
 80045d6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	4603      	mov	r3, r0
 80045e0:	2200      	movs	r2, #0
 80045e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045e6:	4620      	mov	r0, r4
 80045e8:	f7ff ff13 	bl	8004412 <UART_WaitOnFlagUntilTimeout>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d0e3      	beq.n	80045b8 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80045f0:	2003      	movs	r0, #3
 80045f2:	e7ef      	b.n	80045d4 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	462b      	mov	r3, r5
 80045fc:	2200      	movs	r2, #0
 80045fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004602:	4620      	mov	r0, r4
 8004604:	f7ff ff05 	bl	8004412 <UART_WaitOnFlagUntilTimeout>
 8004608:	2800      	cmp	r0, #0
 800460a:	d0da      	beq.n	80045c2 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800460c:	2003      	movs	r0, #3
 800460e:	e7e1      	b.n	80045d4 <UART_CheckIdleState+0x38>

08004610 <HAL_UART_Init>:
  if (huart == NULL)
 8004610:	b378      	cbz	r0, 8004672 <HAL_UART_Init+0x62>
{
 8004612:	b510      	push	{r4, lr}
 8004614:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004616:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800461a:	b30b      	cbz	r3, 8004660 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800461c:	2324      	movs	r3, #36	; 0x24
 800461e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8004622:	6822      	ldr	r2, [r4, #0]
 8004624:	6813      	ldr	r3, [r2, #0]
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800462c:	4620      	mov	r0, r4
 800462e:	f7ff fce5 	bl	8003ffc <UART_SetConfig>
 8004632:	2801      	cmp	r0, #1
 8004634:	d013      	beq.n	800465e <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004636:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004638:	b9bb      	cbnz	r3, 800466a <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800463a:	6822      	ldr	r2, [r4, #0]
 800463c:	6853      	ldr	r3, [r2, #4]
 800463e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004642:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004644:	6822      	ldr	r2, [r4, #0]
 8004646:	6893      	ldr	r3, [r2, #8]
 8004648:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800464c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800464e:	6822      	ldr	r2, [r4, #0]
 8004650:	6813      	ldr	r3, [r2, #0]
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004658:	4620      	mov	r0, r4
 800465a:	f7ff ff9f 	bl	800459c <UART_CheckIdleState>
}
 800465e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004660:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8004664:	f7fd f904 	bl	8001870 <HAL_UART_MspInit>
 8004668:	e7d8      	b.n	800461c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800466a:	4620      	mov	r0, r4
 800466c:	f7ff fe6c 	bl	8004348 <UART_AdvFeatureConfig>
 8004670:	e7e3      	b.n	800463a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8004672:	2001      	movs	r0, #1
}
 8004674:	4770      	bx	lr
	...

08004678 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004678:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800467a:	b92b      	cbnz	r3, 8004688 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800467c:	2301      	movs	r3, #1
 800467e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004682:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8004686:	4770      	bx	lr
{
 8004688:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800468a:	6803      	ldr	r3, [r0, #0]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004692:	6899      	ldr	r1, [r3, #8]
 8004694:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004696:	4d09      	ldr	r5, [pc, #36]	; (80046bc <UARTEx_SetNbDataToProcess+0x44>)
 8004698:	5c6b      	ldrb	r3, [r5, r1]
 800469a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800469c:	4c08      	ldr	r4, [pc, #32]	; (80046c0 <UARTEx_SetNbDataToProcess+0x48>)
 800469e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046a0:	fb93 f3f1 	sdiv	r3, r3, r1
 80046a4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046a8:	5cab      	ldrb	r3, [r5, r2]
 80046aa:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80046ac:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80046b2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80046b6:	bc30      	pop	{r4, r5}
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	080074a0 	.word	0x080074a0
 80046c0:	08007498 	.word	0x08007498

080046c4 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80046c4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d018      	beq.n	80046fe <HAL_UARTEx_DisableFifoMode+0x3a>
 80046cc:	2301      	movs	r3, #1
 80046ce:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80046d2:	2324      	movs	r3, #36	; 0x24
 80046d4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046d8:	6803      	ldr	r3, [r0, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80046dc:	6819      	ldr	r1, [r3, #0]
 80046de:	f021 0101 	bic.w	r1, r1, #1
 80046e2:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046e4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046e8:	2300      	movs	r3, #0
 80046ea:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046ec:	6801      	ldr	r1, [r0, #0]
 80046ee:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80046f0:	2220      	movs	r2, #32
 80046f2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80046f6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 80046fa:	4618      	mov	r0, r3
 80046fc:	4770      	bx	lr
  __HAL_LOCK(huart);
 80046fe:	2002      	movs	r0, #2
}
 8004700:	4770      	bx	lr

08004702 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004702:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004704:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004708:	2b01      	cmp	r3, #1
 800470a:	d01d      	beq.n	8004748 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800470c:	4604      	mov	r4, r0
 800470e:	2301      	movs	r3, #1
 8004710:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8004714:	2324      	movs	r3, #36	; 0x24
 8004716:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800471a:	6803      	ldr	r3, [r0, #0]
 800471c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004726:	6802      	ldr	r2, [r0, #0]
 8004728:	6893      	ldr	r3, [r2, #8]
 800472a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800472e:	4319      	orrs	r1, r3
 8004730:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004732:	f7ff ffa1 	bl	8004678 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800473a:	2320      	movs	r3, #32
 800473c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8004740:	2000      	movs	r0, #0
 8004742:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8004746:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004748:	2002      	movs	r0, #2
 800474a:	e7fc      	b.n	8004746 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800474c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800474c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800474e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004752:	2b01      	cmp	r3, #1
 8004754:	d01d      	beq.n	8004792 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8004756:	4604      	mov	r4, r0
 8004758:	2301      	movs	r3, #1
 800475a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800475e:	2324      	movs	r3, #36	; 0x24
 8004760:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004764:	6803      	ldr	r3, [r0, #0]
 8004766:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	f022 0201 	bic.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004770:	6802      	ldr	r2, [r0, #0]
 8004772:	6893      	ldr	r3, [r2, #8]
 8004774:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8004778:	4319      	orrs	r1, r3
 800477a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800477c:	f7ff ff7c 	bl	8004678 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004784:	2320      	movs	r3, #32
 8004786:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800478a:	2000      	movs	r0, #0
 800478c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8004790:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004792:	2002      	movs	r0, #2
 8004794:	e7fc      	b.n	8004790 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08004798 <__errno>:
 8004798:	4b01      	ldr	r3, [pc, #4]	; (80047a0 <__errno+0x8>)
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20001df4 	.word	0x20001df4

080047a4 <__libc_init_array>:
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	4d0d      	ldr	r5, [pc, #52]	; (80047dc <__libc_init_array+0x38>)
 80047a8:	4c0d      	ldr	r4, [pc, #52]	; (80047e0 <__libc_init_array+0x3c>)
 80047aa:	1b64      	subs	r4, r4, r5
 80047ac:	10a4      	asrs	r4, r4, #2
 80047ae:	2600      	movs	r6, #0
 80047b0:	42a6      	cmp	r6, r4
 80047b2:	d109      	bne.n	80047c8 <__libc_init_array+0x24>
 80047b4:	4d0b      	ldr	r5, [pc, #44]	; (80047e4 <__libc_init_array+0x40>)
 80047b6:	4c0c      	ldr	r4, [pc, #48]	; (80047e8 <__libc_init_array+0x44>)
 80047b8:	f002 fdc6 	bl	8007348 <_init>
 80047bc:	1b64      	subs	r4, r4, r5
 80047be:	10a4      	asrs	r4, r4, #2
 80047c0:	2600      	movs	r6, #0
 80047c2:	42a6      	cmp	r6, r4
 80047c4:	d105      	bne.n	80047d2 <__libc_init_array+0x2e>
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
 80047c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047cc:	4798      	blx	r3
 80047ce:	3601      	adds	r6, #1
 80047d0:	e7ee      	b.n	80047b0 <__libc_init_array+0xc>
 80047d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d6:	4798      	blx	r3
 80047d8:	3601      	adds	r6, #1
 80047da:	e7f2      	b.n	80047c2 <__libc_init_array+0x1e>
 80047dc:	08007894 	.word	0x08007894
 80047e0:	08007894 	.word	0x08007894
 80047e4:	08007894 	.word	0x08007894
 80047e8:	08007898 	.word	0x08007898

080047ec <memcpy>:
 80047ec:	440a      	add	r2, r1
 80047ee:	4291      	cmp	r1, r2
 80047f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80047f4:	d100      	bne.n	80047f8 <memcpy+0xc>
 80047f6:	4770      	bx	lr
 80047f8:	b510      	push	{r4, lr}
 80047fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004802:	4291      	cmp	r1, r2
 8004804:	d1f9      	bne.n	80047fa <memcpy+0xe>
 8004806:	bd10      	pop	{r4, pc}

08004808 <memset>:
 8004808:	4402      	add	r2, r0
 800480a:	4603      	mov	r3, r0
 800480c:	4293      	cmp	r3, r2
 800480e:	d100      	bne.n	8004812 <memset+0xa>
 8004810:	4770      	bx	lr
 8004812:	f803 1b01 	strb.w	r1, [r3], #1
 8004816:	e7f9      	b.n	800480c <memset+0x4>

08004818 <__cvt>:
 8004818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800481c:	ec55 4b10 	vmov	r4, r5, d0
 8004820:	2d00      	cmp	r5, #0
 8004822:	460e      	mov	r6, r1
 8004824:	4619      	mov	r1, r3
 8004826:	462b      	mov	r3, r5
 8004828:	bfbb      	ittet	lt
 800482a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800482e:	461d      	movlt	r5, r3
 8004830:	2300      	movge	r3, #0
 8004832:	232d      	movlt	r3, #45	; 0x2d
 8004834:	700b      	strb	r3, [r1, #0]
 8004836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004838:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800483c:	4691      	mov	r9, r2
 800483e:	f023 0820 	bic.w	r8, r3, #32
 8004842:	bfbc      	itt	lt
 8004844:	4622      	movlt	r2, r4
 8004846:	4614      	movlt	r4, r2
 8004848:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800484c:	d005      	beq.n	800485a <__cvt+0x42>
 800484e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004852:	d100      	bne.n	8004856 <__cvt+0x3e>
 8004854:	3601      	adds	r6, #1
 8004856:	2102      	movs	r1, #2
 8004858:	e000      	b.n	800485c <__cvt+0x44>
 800485a:	2103      	movs	r1, #3
 800485c:	ab03      	add	r3, sp, #12
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	ab02      	add	r3, sp, #8
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	ec45 4b10 	vmov	d0, r4, r5
 8004868:	4653      	mov	r3, sl
 800486a:	4632      	mov	r2, r6
 800486c:	f000 fe18 	bl	80054a0 <_dtoa_r>
 8004870:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004874:	4607      	mov	r7, r0
 8004876:	d102      	bne.n	800487e <__cvt+0x66>
 8004878:	f019 0f01 	tst.w	r9, #1
 800487c:	d022      	beq.n	80048c4 <__cvt+0xac>
 800487e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004882:	eb07 0906 	add.w	r9, r7, r6
 8004886:	d110      	bne.n	80048aa <__cvt+0x92>
 8004888:	783b      	ldrb	r3, [r7, #0]
 800488a:	2b30      	cmp	r3, #48	; 0x30
 800488c:	d10a      	bne.n	80048a4 <__cvt+0x8c>
 800488e:	2200      	movs	r2, #0
 8004890:	2300      	movs	r3, #0
 8004892:	4620      	mov	r0, r4
 8004894:	4629      	mov	r1, r5
 8004896:	f7fc f93f 	bl	8000b18 <__aeabi_dcmpeq>
 800489a:	b918      	cbnz	r0, 80048a4 <__cvt+0x8c>
 800489c:	f1c6 0601 	rsb	r6, r6, #1
 80048a0:	f8ca 6000 	str.w	r6, [sl]
 80048a4:	f8da 3000 	ldr.w	r3, [sl]
 80048a8:	4499      	add	r9, r3
 80048aa:	2200      	movs	r2, #0
 80048ac:	2300      	movs	r3, #0
 80048ae:	4620      	mov	r0, r4
 80048b0:	4629      	mov	r1, r5
 80048b2:	f7fc f931 	bl	8000b18 <__aeabi_dcmpeq>
 80048b6:	b108      	cbz	r0, 80048bc <__cvt+0xa4>
 80048b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80048bc:	2230      	movs	r2, #48	; 0x30
 80048be:	9b03      	ldr	r3, [sp, #12]
 80048c0:	454b      	cmp	r3, r9
 80048c2:	d307      	bcc.n	80048d4 <__cvt+0xbc>
 80048c4:	9b03      	ldr	r3, [sp, #12]
 80048c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048c8:	1bdb      	subs	r3, r3, r7
 80048ca:	4638      	mov	r0, r7
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	b004      	add	sp, #16
 80048d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d4:	1c59      	adds	r1, r3, #1
 80048d6:	9103      	str	r1, [sp, #12]
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	e7f0      	b.n	80048be <__cvt+0xa6>

080048dc <__exponent>:
 80048dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048de:	4603      	mov	r3, r0
 80048e0:	2900      	cmp	r1, #0
 80048e2:	bfb8      	it	lt
 80048e4:	4249      	neglt	r1, r1
 80048e6:	f803 2b02 	strb.w	r2, [r3], #2
 80048ea:	bfb4      	ite	lt
 80048ec:	222d      	movlt	r2, #45	; 0x2d
 80048ee:	222b      	movge	r2, #43	; 0x2b
 80048f0:	2909      	cmp	r1, #9
 80048f2:	7042      	strb	r2, [r0, #1]
 80048f4:	dd2a      	ble.n	800494c <__exponent+0x70>
 80048f6:	f10d 0407 	add.w	r4, sp, #7
 80048fa:	46a4      	mov	ip, r4
 80048fc:	270a      	movs	r7, #10
 80048fe:	46a6      	mov	lr, r4
 8004900:	460a      	mov	r2, r1
 8004902:	fb91 f6f7 	sdiv	r6, r1, r7
 8004906:	fb07 1516 	mls	r5, r7, r6, r1
 800490a:	3530      	adds	r5, #48	; 0x30
 800490c:	2a63      	cmp	r2, #99	; 0x63
 800490e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004912:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004916:	4631      	mov	r1, r6
 8004918:	dcf1      	bgt.n	80048fe <__exponent+0x22>
 800491a:	3130      	adds	r1, #48	; 0x30
 800491c:	f1ae 0502 	sub.w	r5, lr, #2
 8004920:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004924:	1c44      	adds	r4, r0, #1
 8004926:	4629      	mov	r1, r5
 8004928:	4561      	cmp	r1, ip
 800492a:	d30a      	bcc.n	8004942 <__exponent+0x66>
 800492c:	f10d 0209 	add.w	r2, sp, #9
 8004930:	eba2 020e 	sub.w	r2, r2, lr
 8004934:	4565      	cmp	r5, ip
 8004936:	bf88      	it	hi
 8004938:	2200      	movhi	r2, #0
 800493a:	4413      	add	r3, r2
 800493c:	1a18      	subs	r0, r3, r0
 800493e:	b003      	add	sp, #12
 8004940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004942:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004946:	f804 2f01 	strb.w	r2, [r4, #1]!
 800494a:	e7ed      	b.n	8004928 <__exponent+0x4c>
 800494c:	2330      	movs	r3, #48	; 0x30
 800494e:	3130      	adds	r1, #48	; 0x30
 8004950:	7083      	strb	r3, [r0, #2]
 8004952:	70c1      	strb	r1, [r0, #3]
 8004954:	1d03      	adds	r3, r0, #4
 8004956:	e7f1      	b.n	800493c <__exponent+0x60>

08004958 <_printf_float>:
 8004958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495c:	ed2d 8b02 	vpush	{d8}
 8004960:	b08d      	sub	sp, #52	; 0x34
 8004962:	460c      	mov	r4, r1
 8004964:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004968:	4616      	mov	r6, r2
 800496a:	461f      	mov	r7, r3
 800496c:	4605      	mov	r5, r0
 800496e:	f001 fd3b 	bl	80063e8 <_localeconv_r>
 8004972:	f8d0 a000 	ldr.w	sl, [r0]
 8004976:	4650      	mov	r0, sl
 8004978:	f7fb fc52 	bl	8000220 <strlen>
 800497c:	2300      	movs	r3, #0
 800497e:	930a      	str	r3, [sp, #40]	; 0x28
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	9305      	str	r3, [sp, #20]
 8004984:	f8d8 3000 	ldr.w	r3, [r8]
 8004988:	f894 b018 	ldrb.w	fp, [r4, #24]
 800498c:	3307      	adds	r3, #7
 800498e:	f023 0307 	bic.w	r3, r3, #7
 8004992:	f103 0208 	add.w	r2, r3, #8
 8004996:	f8c8 2000 	str.w	r2, [r8]
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80049a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80049a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049aa:	9307      	str	r3, [sp, #28]
 80049ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80049b0:	ee08 0a10 	vmov	s16, r0
 80049b4:	4b9f      	ldr	r3, [pc, #636]	; (8004c34 <_printf_float+0x2dc>)
 80049b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049ba:	f04f 32ff 	mov.w	r2, #4294967295
 80049be:	f7fc f8dd 	bl	8000b7c <__aeabi_dcmpun>
 80049c2:	bb88      	cbnz	r0, 8004a28 <_printf_float+0xd0>
 80049c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049c8:	4b9a      	ldr	r3, [pc, #616]	; (8004c34 <_printf_float+0x2dc>)
 80049ca:	f04f 32ff 	mov.w	r2, #4294967295
 80049ce:	f7fc f8b7 	bl	8000b40 <__aeabi_dcmple>
 80049d2:	bb48      	cbnz	r0, 8004a28 <_printf_float+0xd0>
 80049d4:	2200      	movs	r2, #0
 80049d6:	2300      	movs	r3, #0
 80049d8:	4640      	mov	r0, r8
 80049da:	4649      	mov	r1, r9
 80049dc:	f7fc f8a6 	bl	8000b2c <__aeabi_dcmplt>
 80049e0:	b110      	cbz	r0, 80049e8 <_printf_float+0x90>
 80049e2:	232d      	movs	r3, #45	; 0x2d
 80049e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049e8:	4b93      	ldr	r3, [pc, #588]	; (8004c38 <_printf_float+0x2e0>)
 80049ea:	4894      	ldr	r0, [pc, #592]	; (8004c3c <_printf_float+0x2e4>)
 80049ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80049f0:	bf94      	ite	ls
 80049f2:	4698      	movls	r8, r3
 80049f4:	4680      	movhi	r8, r0
 80049f6:	2303      	movs	r3, #3
 80049f8:	6123      	str	r3, [r4, #16]
 80049fa:	9b05      	ldr	r3, [sp, #20]
 80049fc:	f023 0204 	bic.w	r2, r3, #4
 8004a00:	6022      	str	r2, [r4, #0]
 8004a02:	f04f 0900 	mov.w	r9, #0
 8004a06:	9700      	str	r7, [sp, #0]
 8004a08:	4633      	mov	r3, r6
 8004a0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	4628      	mov	r0, r5
 8004a10:	f000 f9d8 	bl	8004dc4 <_printf_common>
 8004a14:	3001      	adds	r0, #1
 8004a16:	f040 8090 	bne.w	8004b3a <_printf_float+0x1e2>
 8004a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1e:	b00d      	add	sp, #52	; 0x34
 8004a20:	ecbd 8b02 	vpop	{d8}
 8004a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a28:	4642      	mov	r2, r8
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	4640      	mov	r0, r8
 8004a2e:	4649      	mov	r1, r9
 8004a30:	f7fc f8a4 	bl	8000b7c <__aeabi_dcmpun>
 8004a34:	b140      	cbz	r0, 8004a48 <_printf_float+0xf0>
 8004a36:	464b      	mov	r3, r9
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bfbc      	itt	lt
 8004a3c:	232d      	movlt	r3, #45	; 0x2d
 8004a3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a42:	487f      	ldr	r0, [pc, #508]	; (8004c40 <_printf_float+0x2e8>)
 8004a44:	4b7f      	ldr	r3, [pc, #508]	; (8004c44 <_printf_float+0x2ec>)
 8004a46:	e7d1      	b.n	80049ec <_printf_float+0x94>
 8004a48:	6863      	ldr	r3, [r4, #4]
 8004a4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004a4e:	9206      	str	r2, [sp, #24]
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	d13f      	bne.n	8004ad4 <_printf_float+0x17c>
 8004a54:	2306      	movs	r3, #6
 8004a56:	6063      	str	r3, [r4, #4]
 8004a58:	9b05      	ldr	r3, [sp, #20]
 8004a5a:	6861      	ldr	r1, [r4, #4]
 8004a5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a60:	2300      	movs	r3, #0
 8004a62:	9303      	str	r3, [sp, #12]
 8004a64:	ab0a      	add	r3, sp, #40	; 0x28
 8004a66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004a6a:	ab09      	add	r3, sp, #36	; 0x24
 8004a6c:	ec49 8b10 	vmov	d0, r8, r9
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	6022      	str	r2, [r4, #0]
 8004a74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f7ff fecd 	bl	8004818 <__cvt>
 8004a7e:	9b06      	ldr	r3, [sp, #24]
 8004a80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a82:	2b47      	cmp	r3, #71	; 0x47
 8004a84:	4680      	mov	r8, r0
 8004a86:	d108      	bne.n	8004a9a <_printf_float+0x142>
 8004a88:	1cc8      	adds	r0, r1, #3
 8004a8a:	db02      	blt.n	8004a92 <_printf_float+0x13a>
 8004a8c:	6863      	ldr	r3, [r4, #4]
 8004a8e:	4299      	cmp	r1, r3
 8004a90:	dd41      	ble.n	8004b16 <_printf_float+0x1be>
 8004a92:	f1ab 0b02 	sub.w	fp, fp, #2
 8004a96:	fa5f fb8b 	uxtb.w	fp, fp
 8004a9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a9e:	d820      	bhi.n	8004ae2 <_printf_float+0x18a>
 8004aa0:	3901      	subs	r1, #1
 8004aa2:	465a      	mov	r2, fp
 8004aa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004aa8:	9109      	str	r1, [sp, #36]	; 0x24
 8004aaa:	f7ff ff17 	bl	80048dc <__exponent>
 8004aae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ab0:	1813      	adds	r3, r2, r0
 8004ab2:	2a01      	cmp	r2, #1
 8004ab4:	4681      	mov	r9, r0
 8004ab6:	6123      	str	r3, [r4, #16]
 8004ab8:	dc02      	bgt.n	8004ac0 <_printf_float+0x168>
 8004aba:	6822      	ldr	r2, [r4, #0]
 8004abc:	07d2      	lsls	r2, r2, #31
 8004abe:	d501      	bpl.n	8004ac4 <_printf_float+0x16c>
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d09c      	beq.n	8004a06 <_printf_float+0xae>
 8004acc:	232d      	movs	r3, #45	; 0x2d
 8004ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad2:	e798      	b.n	8004a06 <_printf_float+0xae>
 8004ad4:	9a06      	ldr	r2, [sp, #24]
 8004ad6:	2a47      	cmp	r2, #71	; 0x47
 8004ad8:	d1be      	bne.n	8004a58 <_printf_float+0x100>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1bc      	bne.n	8004a58 <_printf_float+0x100>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e7b9      	b.n	8004a56 <_printf_float+0xfe>
 8004ae2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004ae6:	d118      	bne.n	8004b1a <_printf_float+0x1c2>
 8004ae8:	2900      	cmp	r1, #0
 8004aea:	6863      	ldr	r3, [r4, #4]
 8004aec:	dd0b      	ble.n	8004b06 <_printf_float+0x1ae>
 8004aee:	6121      	str	r1, [r4, #16]
 8004af0:	b913      	cbnz	r3, 8004af8 <_printf_float+0x1a0>
 8004af2:	6822      	ldr	r2, [r4, #0]
 8004af4:	07d0      	lsls	r0, r2, #31
 8004af6:	d502      	bpl.n	8004afe <_printf_float+0x1a6>
 8004af8:	3301      	adds	r3, #1
 8004afa:	440b      	add	r3, r1
 8004afc:	6123      	str	r3, [r4, #16]
 8004afe:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b00:	f04f 0900 	mov.w	r9, #0
 8004b04:	e7de      	b.n	8004ac4 <_printf_float+0x16c>
 8004b06:	b913      	cbnz	r3, 8004b0e <_printf_float+0x1b6>
 8004b08:	6822      	ldr	r2, [r4, #0]
 8004b0a:	07d2      	lsls	r2, r2, #31
 8004b0c:	d501      	bpl.n	8004b12 <_printf_float+0x1ba>
 8004b0e:	3302      	adds	r3, #2
 8004b10:	e7f4      	b.n	8004afc <_printf_float+0x1a4>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e7f2      	b.n	8004afc <_printf_float+0x1a4>
 8004b16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b1c:	4299      	cmp	r1, r3
 8004b1e:	db05      	blt.n	8004b2c <_printf_float+0x1d4>
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	6121      	str	r1, [r4, #16]
 8004b24:	07d8      	lsls	r0, r3, #31
 8004b26:	d5ea      	bpl.n	8004afe <_printf_float+0x1a6>
 8004b28:	1c4b      	adds	r3, r1, #1
 8004b2a:	e7e7      	b.n	8004afc <_printf_float+0x1a4>
 8004b2c:	2900      	cmp	r1, #0
 8004b2e:	bfd4      	ite	le
 8004b30:	f1c1 0202 	rsble	r2, r1, #2
 8004b34:	2201      	movgt	r2, #1
 8004b36:	4413      	add	r3, r2
 8004b38:	e7e0      	b.n	8004afc <_printf_float+0x1a4>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	055a      	lsls	r2, r3, #21
 8004b3e:	d407      	bmi.n	8004b50 <_printf_float+0x1f8>
 8004b40:	6923      	ldr	r3, [r4, #16]
 8004b42:	4642      	mov	r2, r8
 8004b44:	4631      	mov	r1, r6
 8004b46:	4628      	mov	r0, r5
 8004b48:	47b8      	blx	r7
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	d12c      	bne.n	8004ba8 <_printf_float+0x250>
 8004b4e:	e764      	b.n	8004a1a <_printf_float+0xc2>
 8004b50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b54:	f240 80e0 	bls.w	8004d18 <_printf_float+0x3c0>
 8004b58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f7fb ffda 	bl	8000b18 <__aeabi_dcmpeq>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d034      	beq.n	8004bd2 <_printf_float+0x27a>
 8004b68:	4a37      	ldr	r2, [pc, #220]	; (8004c48 <_printf_float+0x2f0>)
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4631      	mov	r1, r6
 8004b6e:	4628      	mov	r0, r5
 8004b70:	47b8      	blx	r7
 8004b72:	3001      	adds	r0, #1
 8004b74:	f43f af51 	beq.w	8004a1a <_printf_float+0xc2>
 8004b78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	db02      	blt.n	8004b86 <_printf_float+0x22e>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	07d8      	lsls	r0, r3, #31
 8004b84:	d510      	bpl.n	8004ba8 <_printf_float+0x250>
 8004b86:	ee18 3a10 	vmov	r3, s16
 8004b8a:	4652      	mov	r2, sl
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	4628      	mov	r0, r5
 8004b90:	47b8      	blx	r7
 8004b92:	3001      	adds	r0, #1
 8004b94:	f43f af41 	beq.w	8004a1a <_printf_float+0xc2>
 8004b98:	f04f 0800 	mov.w	r8, #0
 8004b9c:	f104 091a 	add.w	r9, r4, #26
 8004ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	4543      	cmp	r3, r8
 8004ba6:	dc09      	bgt.n	8004bbc <_printf_float+0x264>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	079b      	lsls	r3, r3, #30
 8004bac:	f100 8105 	bmi.w	8004dba <_printf_float+0x462>
 8004bb0:	68e0      	ldr	r0, [r4, #12]
 8004bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bb4:	4298      	cmp	r0, r3
 8004bb6:	bfb8      	it	lt
 8004bb8:	4618      	movlt	r0, r3
 8004bba:	e730      	b.n	8004a1e <_printf_float+0xc6>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	464a      	mov	r2, r9
 8004bc0:	4631      	mov	r1, r6
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	47b8      	blx	r7
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	f43f af27 	beq.w	8004a1a <_printf_float+0xc2>
 8004bcc:	f108 0801 	add.w	r8, r8, #1
 8004bd0:	e7e6      	b.n	8004ba0 <_printf_float+0x248>
 8004bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	dc39      	bgt.n	8004c4c <_printf_float+0x2f4>
 8004bd8:	4a1b      	ldr	r2, [pc, #108]	; (8004c48 <_printf_float+0x2f0>)
 8004bda:	2301      	movs	r3, #1
 8004bdc:	4631      	mov	r1, r6
 8004bde:	4628      	mov	r0, r5
 8004be0:	47b8      	blx	r7
 8004be2:	3001      	adds	r0, #1
 8004be4:	f43f af19 	beq.w	8004a1a <_printf_float+0xc2>
 8004be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bec:	4313      	orrs	r3, r2
 8004bee:	d102      	bne.n	8004bf6 <_printf_float+0x29e>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	07d9      	lsls	r1, r3, #31
 8004bf4:	d5d8      	bpl.n	8004ba8 <_printf_float+0x250>
 8004bf6:	ee18 3a10 	vmov	r3, s16
 8004bfa:	4652      	mov	r2, sl
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4628      	mov	r0, r5
 8004c00:	47b8      	blx	r7
 8004c02:	3001      	adds	r0, #1
 8004c04:	f43f af09 	beq.w	8004a1a <_printf_float+0xc2>
 8004c08:	f04f 0900 	mov.w	r9, #0
 8004c0c:	f104 0a1a 	add.w	sl, r4, #26
 8004c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c12:	425b      	negs	r3, r3
 8004c14:	454b      	cmp	r3, r9
 8004c16:	dc01      	bgt.n	8004c1c <_printf_float+0x2c4>
 8004c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c1a:	e792      	b.n	8004b42 <_printf_float+0x1ea>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4652      	mov	r2, sl
 8004c20:	4631      	mov	r1, r6
 8004c22:	4628      	mov	r0, r5
 8004c24:	47b8      	blx	r7
 8004c26:	3001      	adds	r0, #1
 8004c28:	f43f aef7 	beq.w	8004a1a <_printf_float+0xc2>
 8004c2c:	f109 0901 	add.w	r9, r9, #1
 8004c30:	e7ee      	b.n	8004c10 <_printf_float+0x2b8>
 8004c32:	bf00      	nop
 8004c34:	7fefffff 	.word	0x7fefffff
 8004c38:	080074ac 	.word	0x080074ac
 8004c3c:	080074b0 	.word	0x080074b0
 8004c40:	080074b8 	.word	0x080074b8
 8004c44:	080074b4 	.word	0x080074b4
 8004c48:	080074bc 	.word	0x080074bc
 8004c4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c50:	429a      	cmp	r2, r3
 8004c52:	bfa8      	it	ge
 8004c54:	461a      	movge	r2, r3
 8004c56:	2a00      	cmp	r2, #0
 8004c58:	4691      	mov	r9, r2
 8004c5a:	dc37      	bgt.n	8004ccc <_printf_float+0x374>
 8004c5c:	f04f 0b00 	mov.w	fp, #0
 8004c60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c64:	f104 021a 	add.w	r2, r4, #26
 8004c68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c6a:	9305      	str	r3, [sp, #20]
 8004c6c:	eba3 0309 	sub.w	r3, r3, r9
 8004c70:	455b      	cmp	r3, fp
 8004c72:	dc33      	bgt.n	8004cdc <_printf_float+0x384>
 8004c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	db3b      	blt.n	8004cf4 <_printf_float+0x39c>
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	07da      	lsls	r2, r3, #31
 8004c80:	d438      	bmi.n	8004cf4 <_printf_float+0x39c>
 8004c82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c84:	9b05      	ldr	r3, [sp, #20]
 8004c86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	eba2 0901 	sub.w	r9, r2, r1
 8004c8e:	4599      	cmp	r9, r3
 8004c90:	bfa8      	it	ge
 8004c92:	4699      	movge	r9, r3
 8004c94:	f1b9 0f00 	cmp.w	r9, #0
 8004c98:	dc35      	bgt.n	8004d06 <_printf_float+0x3ae>
 8004c9a:	f04f 0800 	mov.w	r8, #0
 8004c9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ca2:	f104 0a1a 	add.w	sl, r4, #26
 8004ca6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	eba3 0309 	sub.w	r3, r3, r9
 8004cb0:	4543      	cmp	r3, r8
 8004cb2:	f77f af79 	ble.w	8004ba8 <_printf_float+0x250>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4652      	mov	r2, sl
 8004cba:	4631      	mov	r1, r6
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	47b8      	blx	r7
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	f43f aeaa 	beq.w	8004a1a <_printf_float+0xc2>
 8004cc6:	f108 0801 	add.w	r8, r8, #1
 8004cca:	e7ec      	b.n	8004ca6 <_printf_float+0x34e>
 8004ccc:	4613      	mov	r3, r2
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	47b8      	blx	r7
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	d1c0      	bne.n	8004c5c <_printf_float+0x304>
 8004cda:	e69e      	b.n	8004a1a <_printf_float+0xc2>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	9205      	str	r2, [sp, #20]
 8004ce4:	47b8      	blx	r7
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	f43f ae97 	beq.w	8004a1a <_printf_float+0xc2>
 8004cec:	9a05      	ldr	r2, [sp, #20]
 8004cee:	f10b 0b01 	add.w	fp, fp, #1
 8004cf2:	e7b9      	b.n	8004c68 <_printf_float+0x310>
 8004cf4:	ee18 3a10 	vmov	r3, s16
 8004cf8:	4652      	mov	r2, sl
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	47b8      	blx	r7
 8004d00:	3001      	adds	r0, #1
 8004d02:	d1be      	bne.n	8004c82 <_printf_float+0x32a>
 8004d04:	e689      	b.n	8004a1a <_printf_float+0xc2>
 8004d06:	9a05      	ldr	r2, [sp, #20]
 8004d08:	464b      	mov	r3, r9
 8004d0a:	4442      	add	r2, r8
 8004d0c:	4631      	mov	r1, r6
 8004d0e:	4628      	mov	r0, r5
 8004d10:	47b8      	blx	r7
 8004d12:	3001      	adds	r0, #1
 8004d14:	d1c1      	bne.n	8004c9a <_printf_float+0x342>
 8004d16:	e680      	b.n	8004a1a <_printf_float+0xc2>
 8004d18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d1a:	2a01      	cmp	r2, #1
 8004d1c:	dc01      	bgt.n	8004d22 <_printf_float+0x3ca>
 8004d1e:	07db      	lsls	r3, r3, #31
 8004d20:	d538      	bpl.n	8004d94 <_printf_float+0x43c>
 8004d22:	2301      	movs	r3, #1
 8004d24:	4642      	mov	r2, r8
 8004d26:	4631      	mov	r1, r6
 8004d28:	4628      	mov	r0, r5
 8004d2a:	47b8      	blx	r7
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	f43f ae74 	beq.w	8004a1a <_printf_float+0xc2>
 8004d32:	ee18 3a10 	vmov	r3, s16
 8004d36:	4652      	mov	r2, sl
 8004d38:	4631      	mov	r1, r6
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	47b8      	blx	r7
 8004d3e:	3001      	adds	r0, #1
 8004d40:	f43f ae6b 	beq.w	8004a1a <_printf_float+0xc2>
 8004d44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f7fb fee4 	bl	8000b18 <__aeabi_dcmpeq>
 8004d50:	b9d8      	cbnz	r0, 8004d8a <_printf_float+0x432>
 8004d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d54:	f108 0201 	add.w	r2, r8, #1
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	47b8      	blx	r7
 8004d60:	3001      	adds	r0, #1
 8004d62:	d10e      	bne.n	8004d82 <_printf_float+0x42a>
 8004d64:	e659      	b.n	8004a1a <_printf_float+0xc2>
 8004d66:	2301      	movs	r3, #1
 8004d68:	4652      	mov	r2, sl
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b8      	blx	r7
 8004d70:	3001      	adds	r0, #1
 8004d72:	f43f ae52 	beq.w	8004a1a <_printf_float+0xc2>
 8004d76:	f108 0801 	add.w	r8, r8, #1
 8004d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	4543      	cmp	r3, r8
 8004d80:	dcf1      	bgt.n	8004d66 <_printf_float+0x40e>
 8004d82:	464b      	mov	r3, r9
 8004d84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d88:	e6dc      	b.n	8004b44 <_printf_float+0x1ec>
 8004d8a:	f04f 0800 	mov.w	r8, #0
 8004d8e:	f104 0a1a 	add.w	sl, r4, #26
 8004d92:	e7f2      	b.n	8004d7a <_printf_float+0x422>
 8004d94:	2301      	movs	r3, #1
 8004d96:	4642      	mov	r2, r8
 8004d98:	e7df      	b.n	8004d5a <_printf_float+0x402>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	464a      	mov	r2, r9
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b8      	blx	r7
 8004da4:	3001      	adds	r0, #1
 8004da6:	f43f ae38 	beq.w	8004a1a <_printf_float+0xc2>
 8004daa:	f108 0801 	add.w	r8, r8, #1
 8004dae:	68e3      	ldr	r3, [r4, #12]
 8004db0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004db2:	1a5b      	subs	r3, r3, r1
 8004db4:	4543      	cmp	r3, r8
 8004db6:	dcf0      	bgt.n	8004d9a <_printf_float+0x442>
 8004db8:	e6fa      	b.n	8004bb0 <_printf_float+0x258>
 8004dba:	f04f 0800 	mov.w	r8, #0
 8004dbe:	f104 0919 	add.w	r9, r4, #25
 8004dc2:	e7f4      	b.n	8004dae <_printf_float+0x456>

08004dc4 <_printf_common>:
 8004dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc8:	4616      	mov	r6, r2
 8004dca:	4699      	mov	r9, r3
 8004dcc:	688a      	ldr	r2, [r1, #8]
 8004dce:	690b      	ldr	r3, [r1, #16]
 8004dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	bfb8      	it	lt
 8004dd8:	4613      	movlt	r3, r2
 8004dda:	6033      	str	r3, [r6, #0]
 8004ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004de0:	4607      	mov	r7, r0
 8004de2:	460c      	mov	r4, r1
 8004de4:	b10a      	cbz	r2, 8004dea <_printf_common+0x26>
 8004de6:	3301      	adds	r3, #1
 8004de8:	6033      	str	r3, [r6, #0]
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	0699      	lsls	r1, r3, #26
 8004dee:	bf42      	ittt	mi
 8004df0:	6833      	ldrmi	r3, [r6, #0]
 8004df2:	3302      	addmi	r3, #2
 8004df4:	6033      	strmi	r3, [r6, #0]
 8004df6:	6825      	ldr	r5, [r4, #0]
 8004df8:	f015 0506 	ands.w	r5, r5, #6
 8004dfc:	d106      	bne.n	8004e0c <_printf_common+0x48>
 8004dfe:	f104 0a19 	add.w	sl, r4, #25
 8004e02:	68e3      	ldr	r3, [r4, #12]
 8004e04:	6832      	ldr	r2, [r6, #0]
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	42ab      	cmp	r3, r5
 8004e0a:	dc26      	bgt.n	8004e5a <_printf_common+0x96>
 8004e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e10:	1e13      	subs	r3, r2, #0
 8004e12:	6822      	ldr	r2, [r4, #0]
 8004e14:	bf18      	it	ne
 8004e16:	2301      	movne	r3, #1
 8004e18:	0692      	lsls	r2, r2, #26
 8004e1a:	d42b      	bmi.n	8004e74 <_printf_common+0xb0>
 8004e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e20:	4649      	mov	r1, r9
 8004e22:	4638      	mov	r0, r7
 8004e24:	47c0      	blx	r8
 8004e26:	3001      	adds	r0, #1
 8004e28:	d01e      	beq.n	8004e68 <_printf_common+0xa4>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	68e5      	ldr	r5, [r4, #12]
 8004e2e:	6832      	ldr	r2, [r6, #0]
 8004e30:	f003 0306 	and.w	r3, r3, #6
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	bf08      	it	eq
 8004e38:	1aad      	subeq	r5, r5, r2
 8004e3a:	68a3      	ldr	r3, [r4, #8]
 8004e3c:	6922      	ldr	r2, [r4, #16]
 8004e3e:	bf0c      	ite	eq
 8004e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e44:	2500      	movne	r5, #0
 8004e46:	4293      	cmp	r3, r2
 8004e48:	bfc4      	itt	gt
 8004e4a:	1a9b      	subgt	r3, r3, r2
 8004e4c:	18ed      	addgt	r5, r5, r3
 8004e4e:	2600      	movs	r6, #0
 8004e50:	341a      	adds	r4, #26
 8004e52:	42b5      	cmp	r5, r6
 8004e54:	d11a      	bne.n	8004e8c <_printf_common+0xc8>
 8004e56:	2000      	movs	r0, #0
 8004e58:	e008      	b.n	8004e6c <_printf_common+0xa8>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4652      	mov	r2, sl
 8004e5e:	4649      	mov	r1, r9
 8004e60:	4638      	mov	r0, r7
 8004e62:	47c0      	blx	r8
 8004e64:	3001      	adds	r0, #1
 8004e66:	d103      	bne.n	8004e70 <_printf_common+0xac>
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e70:	3501      	adds	r5, #1
 8004e72:	e7c6      	b.n	8004e02 <_printf_common+0x3e>
 8004e74:	18e1      	adds	r1, r4, r3
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	2030      	movs	r0, #48	; 0x30
 8004e7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e7e:	4422      	add	r2, r4
 8004e80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e88:	3302      	adds	r3, #2
 8004e8a:	e7c7      	b.n	8004e1c <_printf_common+0x58>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	4622      	mov	r2, r4
 8004e90:	4649      	mov	r1, r9
 8004e92:	4638      	mov	r0, r7
 8004e94:	47c0      	blx	r8
 8004e96:	3001      	adds	r0, #1
 8004e98:	d0e6      	beq.n	8004e68 <_printf_common+0xa4>
 8004e9a:	3601      	adds	r6, #1
 8004e9c:	e7d9      	b.n	8004e52 <_printf_common+0x8e>
	...

08004ea0 <_printf_i>:
 8004ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	4691      	mov	r9, r2
 8004ea8:	7e27      	ldrb	r7, [r4, #24]
 8004eaa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004eac:	2f78      	cmp	r7, #120	; 0x78
 8004eae:	4680      	mov	r8, r0
 8004eb0:	469a      	mov	sl, r3
 8004eb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eb6:	d807      	bhi.n	8004ec8 <_printf_i+0x28>
 8004eb8:	2f62      	cmp	r7, #98	; 0x62
 8004eba:	d80a      	bhi.n	8004ed2 <_printf_i+0x32>
 8004ebc:	2f00      	cmp	r7, #0
 8004ebe:	f000 80d8 	beq.w	8005072 <_printf_i+0x1d2>
 8004ec2:	2f58      	cmp	r7, #88	; 0x58
 8004ec4:	f000 80a3 	beq.w	800500e <_printf_i+0x16e>
 8004ec8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ed0:	e03a      	b.n	8004f48 <_printf_i+0xa8>
 8004ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ed6:	2b15      	cmp	r3, #21
 8004ed8:	d8f6      	bhi.n	8004ec8 <_printf_i+0x28>
 8004eda:	a001      	add	r0, pc, #4	; (adr r0, 8004ee0 <_printf_i+0x40>)
 8004edc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ee0:	08004f39 	.word	0x08004f39
 8004ee4:	08004f4d 	.word	0x08004f4d
 8004ee8:	08004ec9 	.word	0x08004ec9
 8004eec:	08004ec9 	.word	0x08004ec9
 8004ef0:	08004ec9 	.word	0x08004ec9
 8004ef4:	08004ec9 	.word	0x08004ec9
 8004ef8:	08004f4d 	.word	0x08004f4d
 8004efc:	08004ec9 	.word	0x08004ec9
 8004f00:	08004ec9 	.word	0x08004ec9
 8004f04:	08004ec9 	.word	0x08004ec9
 8004f08:	08004ec9 	.word	0x08004ec9
 8004f0c:	08005059 	.word	0x08005059
 8004f10:	08004f7d 	.word	0x08004f7d
 8004f14:	0800503b 	.word	0x0800503b
 8004f18:	08004ec9 	.word	0x08004ec9
 8004f1c:	08004ec9 	.word	0x08004ec9
 8004f20:	0800507b 	.word	0x0800507b
 8004f24:	08004ec9 	.word	0x08004ec9
 8004f28:	08004f7d 	.word	0x08004f7d
 8004f2c:	08004ec9 	.word	0x08004ec9
 8004f30:	08004ec9 	.word	0x08004ec9
 8004f34:	08005043 	.word	0x08005043
 8004f38:	680b      	ldr	r3, [r1, #0]
 8004f3a:	1d1a      	adds	r2, r3, #4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	600a      	str	r2, [r1, #0]
 8004f40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0a3      	b.n	8005094 <_printf_i+0x1f4>
 8004f4c:	6825      	ldr	r5, [r4, #0]
 8004f4e:	6808      	ldr	r0, [r1, #0]
 8004f50:	062e      	lsls	r6, r5, #24
 8004f52:	f100 0304 	add.w	r3, r0, #4
 8004f56:	d50a      	bpl.n	8004f6e <_printf_i+0xce>
 8004f58:	6805      	ldr	r5, [r0, #0]
 8004f5a:	600b      	str	r3, [r1, #0]
 8004f5c:	2d00      	cmp	r5, #0
 8004f5e:	da03      	bge.n	8004f68 <_printf_i+0xc8>
 8004f60:	232d      	movs	r3, #45	; 0x2d
 8004f62:	426d      	negs	r5, r5
 8004f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f68:	485e      	ldr	r0, [pc, #376]	; (80050e4 <_printf_i+0x244>)
 8004f6a:	230a      	movs	r3, #10
 8004f6c:	e019      	b.n	8004fa2 <_printf_i+0x102>
 8004f6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f72:	6805      	ldr	r5, [r0, #0]
 8004f74:	600b      	str	r3, [r1, #0]
 8004f76:	bf18      	it	ne
 8004f78:	b22d      	sxthne	r5, r5
 8004f7a:	e7ef      	b.n	8004f5c <_printf_i+0xbc>
 8004f7c:	680b      	ldr	r3, [r1, #0]
 8004f7e:	6825      	ldr	r5, [r4, #0]
 8004f80:	1d18      	adds	r0, r3, #4
 8004f82:	6008      	str	r0, [r1, #0]
 8004f84:	0628      	lsls	r0, r5, #24
 8004f86:	d501      	bpl.n	8004f8c <_printf_i+0xec>
 8004f88:	681d      	ldr	r5, [r3, #0]
 8004f8a:	e002      	b.n	8004f92 <_printf_i+0xf2>
 8004f8c:	0669      	lsls	r1, r5, #25
 8004f8e:	d5fb      	bpl.n	8004f88 <_printf_i+0xe8>
 8004f90:	881d      	ldrh	r5, [r3, #0]
 8004f92:	4854      	ldr	r0, [pc, #336]	; (80050e4 <_printf_i+0x244>)
 8004f94:	2f6f      	cmp	r7, #111	; 0x6f
 8004f96:	bf0c      	ite	eq
 8004f98:	2308      	moveq	r3, #8
 8004f9a:	230a      	movne	r3, #10
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fa2:	6866      	ldr	r6, [r4, #4]
 8004fa4:	60a6      	str	r6, [r4, #8]
 8004fa6:	2e00      	cmp	r6, #0
 8004fa8:	bfa2      	ittt	ge
 8004faa:	6821      	ldrge	r1, [r4, #0]
 8004fac:	f021 0104 	bicge.w	r1, r1, #4
 8004fb0:	6021      	strge	r1, [r4, #0]
 8004fb2:	b90d      	cbnz	r5, 8004fb8 <_printf_i+0x118>
 8004fb4:	2e00      	cmp	r6, #0
 8004fb6:	d04d      	beq.n	8005054 <_printf_i+0x1b4>
 8004fb8:	4616      	mov	r6, r2
 8004fba:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fbe:	fb03 5711 	mls	r7, r3, r1, r5
 8004fc2:	5dc7      	ldrb	r7, [r0, r7]
 8004fc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fc8:	462f      	mov	r7, r5
 8004fca:	42bb      	cmp	r3, r7
 8004fcc:	460d      	mov	r5, r1
 8004fce:	d9f4      	bls.n	8004fba <_printf_i+0x11a>
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d10b      	bne.n	8004fec <_printf_i+0x14c>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	07df      	lsls	r7, r3, #31
 8004fd8:	d508      	bpl.n	8004fec <_printf_i+0x14c>
 8004fda:	6923      	ldr	r3, [r4, #16]
 8004fdc:	6861      	ldr	r1, [r4, #4]
 8004fde:	4299      	cmp	r1, r3
 8004fe0:	bfde      	ittt	le
 8004fe2:	2330      	movle	r3, #48	; 0x30
 8004fe4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fe8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fec:	1b92      	subs	r2, r2, r6
 8004fee:	6122      	str	r2, [r4, #16]
 8004ff0:	f8cd a000 	str.w	sl, [sp]
 8004ff4:	464b      	mov	r3, r9
 8004ff6:	aa03      	add	r2, sp, #12
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	f7ff fee2 	bl	8004dc4 <_printf_common>
 8005000:	3001      	adds	r0, #1
 8005002:	d14c      	bne.n	800509e <_printf_i+0x1fe>
 8005004:	f04f 30ff 	mov.w	r0, #4294967295
 8005008:	b004      	add	sp, #16
 800500a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800500e:	4835      	ldr	r0, [pc, #212]	; (80050e4 <_printf_i+0x244>)
 8005010:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	680e      	ldr	r6, [r1, #0]
 8005018:	061f      	lsls	r7, r3, #24
 800501a:	f856 5b04 	ldr.w	r5, [r6], #4
 800501e:	600e      	str	r6, [r1, #0]
 8005020:	d514      	bpl.n	800504c <_printf_i+0x1ac>
 8005022:	07d9      	lsls	r1, r3, #31
 8005024:	bf44      	itt	mi
 8005026:	f043 0320 	orrmi.w	r3, r3, #32
 800502a:	6023      	strmi	r3, [r4, #0]
 800502c:	b91d      	cbnz	r5, 8005036 <_printf_i+0x196>
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	f023 0320 	bic.w	r3, r3, #32
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	2310      	movs	r3, #16
 8005038:	e7b0      	b.n	8004f9c <_printf_i+0xfc>
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	f043 0320 	orr.w	r3, r3, #32
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	2378      	movs	r3, #120	; 0x78
 8005044:	4828      	ldr	r0, [pc, #160]	; (80050e8 <_printf_i+0x248>)
 8005046:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800504a:	e7e3      	b.n	8005014 <_printf_i+0x174>
 800504c:	065e      	lsls	r6, r3, #25
 800504e:	bf48      	it	mi
 8005050:	b2ad      	uxthmi	r5, r5
 8005052:	e7e6      	b.n	8005022 <_printf_i+0x182>
 8005054:	4616      	mov	r6, r2
 8005056:	e7bb      	b.n	8004fd0 <_printf_i+0x130>
 8005058:	680b      	ldr	r3, [r1, #0]
 800505a:	6826      	ldr	r6, [r4, #0]
 800505c:	6960      	ldr	r0, [r4, #20]
 800505e:	1d1d      	adds	r5, r3, #4
 8005060:	600d      	str	r5, [r1, #0]
 8005062:	0635      	lsls	r5, r6, #24
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	d501      	bpl.n	800506c <_printf_i+0x1cc>
 8005068:	6018      	str	r0, [r3, #0]
 800506a:	e002      	b.n	8005072 <_printf_i+0x1d2>
 800506c:	0671      	lsls	r1, r6, #25
 800506e:	d5fb      	bpl.n	8005068 <_printf_i+0x1c8>
 8005070:	8018      	strh	r0, [r3, #0]
 8005072:	2300      	movs	r3, #0
 8005074:	6123      	str	r3, [r4, #16]
 8005076:	4616      	mov	r6, r2
 8005078:	e7ba      	b.n	8004ff0 <_printf_i+0x150>
 800507a:	680b      	ldr	r3, [r1, #0]
 800507c:	1d1a      	adds	r2, r3, #4
 800507e:	600a      	str	r2, [r1, #0]
 8005080:	681e      	ldr	r6, [r3, #0]
 8005082:	6862      	ldr	r2, [r4, #4]
 8005084:	2100      	movs	r1, #0
 8005086:	4630      	mov	r0, r6
 8005088:	f7fb f8d2 	bl	8000230 <memchr>
 800508c:	b108      	cbz	r0, 8005092 <_printf_i+0x1f2>
 800508e:	1b80      	subs	r0, r0, r6
 8005090:	6060      	str	r0, [r4, #4]
 8005092:	6863      	ldr	r3, [r4, #4]
 8005094:	6123      	str	r3, [r4, #16]
 8005096:	2300      	movs	r3, #0
 8005098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800509c:	e7a8      	b.n	8004ff0 <_printf_i+0x150>
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	4632      	mov	r2, r6
 80050a2:	4649      	mov	r1, r9
 80050a4:	4640      	mov	r0, r8
 80050a6:	47d0      	blx	sl
 80050a8:	3001      	adds	r0, #1
 80050aa:	d0ab      	beq.n	8005004 <_printf_i+0x164>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	079b      	lsls	r3, r3, #30
 80050b0:	d413      	bmi.n	80050da <_printf_i+0x23a>
 80050b2:	68e0      	ldr	r0, [r4, #12]
 80050b4:	9b03      	ldr	r3, [sp, #12]
 80050b6:	4298      	cmp	r0, r3
 80050b8:	bfb8      	it	lt
 80050ba:	4618      	movlt	r0, r3
 80050bc:	e7a4      	b.n	8005008 <_printf_i+0x168>
 80050be:	2301      	movs	r3, #1
 80050c0:	4632      	mov	r2, r6
 80050c2:	4649      	mov	r1, r9
 80050c4:	4640      	mov	r0, r8
 80050c6:	47d0      	blx	sl
 80050c8:	3001      	adds	r0, #1
 80050ca:	d09b      	beq.n	8005004 <_printf_i+0x164>
 80050cc:	3501      	adds	r5, #1
 80050ce:	68e3      	ldr	r3, [r4, #12]
 80050d0:	9903      	ldr	r1, [sp, #12]
 80050d2:	1a5b      	subs	r3, r3, r1
 80050d4:	42ab      	cmp	r3, r5
 80050d6:	dcf2      	bgt.n	80050be <_printf_i+0x21e>
 80050d8:	e7eb      	b.n	80050b2 <_printf_i+0x212>
 80050da:	2500      	movs	r5, #0
 80050dc:	f104 0619 	add.w	r6, r4, #25
 80050e0:	e7f5      	b.n	80050ce <_printf_i+0x22e>
 80050e2:	bf00      	nop
 80050e4:	080074be 	.word	0x080074be
 80050e8:	080074cf 	.word	0x080074cf

080050ec <putchar>:
 80050ec:	4b09      	ldr	r3, [pc, #36]	; (8005114 <putchar+0x28>)
 80050ee:	b513      	push	{r0, r1, r4, lr}
 80050f0:	681c      	ldr	r4, [r3, #0]
 80050f2:	4601      	mov	r1, r0
 80050f4:	b134      	cbz	r4, 8005104 <putchar+0x18>
 80050f6:	69a3      	ldr	r3, [r4, #24]
 80050f8:	b923      	cbnz	r3, 8005104 <putchar+0x18>
 80050fa:	9001      	str	r0, [sp, #4]
 80050fc:	4620      	mov	r0, r4
 80050fe:	f001 f8d5 	bl	80062ac <__sinit>
 8005102:	9901      	ldr	r1, [sp, #4]
 8005104:	68a2      	ldr	r2, [r4, #8]
 8005106:	4620      	mov	r0, r4
 8005108:	b002      	add	sp, #8
 800510a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800510e:	f001 be17 	b.w	8006d40 <_putc_r>
 8005112:	bf00      	nop
 8005114:	20001df4 	.word	0x20001df4

08005118 <_puts_r>:
 8005118:	b570      	push	{r4, r5, r6, lr}
 800511a:	460e      	mov	r6, r1
 800511c:	4605      	mov	r5, r0
 800511e:	b118      	cbz	r0, 8005128 <_puts_r+0x10>
 8005120:	6983      	ldr	r3, [r0, #24]
 8005122:	b90b      	cbnz	r3, 8005128 <_puts_r+0x10>
 8005124:	f001 f8c2 	bl	80062ac <__sinit>
 8005128:	69ab      	ldr	r3, [r5, #24]
 800512a:	68ac      	ldr	r4, [r5, #8]
 800512c:	b913      	cbnz	r3, 8005134 <_puts_r+0x1c>
 800512e:	4628      	mov	r0, r5
 8005130:	f001 f8bc 	bl	80062ac <__sinit>
 8005134:	4b2c      	ldr	r3, [pc, #176]	; (80051e8 <_puts_r+0xd0>)
 8005136:	429c      	cmp	r4, r3
 8005138:	d120      	bne.n	800517c <_puts_r+0x64>
 800513a:	686c      	ldr	r4, [r5, #4]
 800513c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800513e:	07db      	lsls	r3, r3, #31
 8005140:	d405      	bmi.n	800514e <_puts_r+0x36>
 8005142:	89a3      	ldrh	r3, [r4, #12]
 8005144:	0598      	lsls	r0, r3, #22
 8005146:	d402      	bmi.n	800514e <_puts_r+0x36>
 8005148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800514a:	f001 f952 	bl	80063f2 <__retarget_lock_acquire_recursive>
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	0719      	lsls	r1, r3, #28
 8005152:	d51d      	bpl.n	8005190 <_puts_r+0x78>
 8005154:	6923      	ldr	r3, [r4, #16]
 8005156:	b1db      	cbz	r3, 8005190 <_puts_r+0x78>
 8005158:	3e01      	subs	r6, #1
 800515a:	68a3      	ldr	r3, [r4, #8]
 800515c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005160:	3b01      	subs	r3, #1
 8005162:	60a3      	str	r3, [r4, #8]
 8005164:	bb39      	cbnz	r1, 80051b6 <_puts_r+0x9e>
 8005166:	2b00      	cmp	r3, #0
 8005168:	da38      	bge.n	80051dc <_puts_r+0xc4>
 800516a:	4622      	mov	r2, r4
 800516c:	210a      	movs	r1, #10
 800516e:	4628      	mov	r0, r5
 8005170:	f000 f848 	bl	8005204 <__swbuf_r>
 8005174:	3001      	adds	r0, #1
 8005176:	d011      	beq.n	800519c <_puts_r+0x84>
 8005178:	250a      	movs	r5, #10
 800517a:	e011      	b.n	80051a0 <_puts_r+0x88>
 800517c:	4b1b      	ldr	r3, [pc, #108]	; (80051ec <_puts_r+0xd4>)
 800517e:	429c      	cmp	r4, r3
 8005180:	d101      	bne.n	8005186 <_puts_r+0x6e>
 8005182:	68ac      	ldr	r4, [r5, #8]
 8005184:	e7da      	b.n	800513c <_puts_r+0x24>
 8005186:	4b1a      	ldr	r3, [pc, #104]	; (80051f0 <_puts_r+0xd8>)
 8005188:	429c      	cmp	r4, r3
 800518a:	bf08      	it	eq
 800518c:	68ec      	ldreq	r4, [r5, #12]
 800518e:	e7d5      	b.n	800513c <_puts_r+0x24>
 8005190:	4621      	mov	r1, r4
 8005192:	4628      	mov	r0, r5
 8005194:	f000 f888 	bl	80052a8 <__swsetup_r>
 8005198:	2800      	cmp	r0, #0
 800519a:	d0dd      	beq.n	8005158 <_puts_r+0x40>
 800519c:	f04f 35ff 	mov.w	r5, #4294967295
 80051a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051a2:	07da      	lsls	r2, r3, #31
 80051a4:	d405      	bmi.n	80051b2 <_puts_r+0x9a>
 80051a6:	89a3      	ldrh	r3, [r4, #12]
 80051a8:	059b      	lsls	r3, r3, #22
 80051aa:	d402      	bmi.n	80051b2 <_puts_r+0x9a>
 80051ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ae:	f001 f921 	bl	80063f4 <__retarget_lock_release_recursive>
 80051b2:	4628      	mov	r0, r5
 80051b4:	bd70      	pop	{r4, r5, r6, pc}
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	da04      	bge.n	80051c4 <_puts_r+0xac>
 80051ba:	69a2      	ldr	r2, [r4, #24]
 80051bc:	429a      	cmp	r2, r3
 80051be:	dc06      	bgt.n	80051ce <_puts_r+0xb6>
 80051c0:	290a      	cmp	r1, #10
 80051c2:	d004      	beq.n	80051ce <_puts_r+0xb6>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	6022      	str	r2, [r4, #0]
 80051ca:	7019      	strb	r1, [r3, #0]
 80051cc:	e7c5      	b.n	800515a <_puts_r+0x42>
 80051ce:	4622      	mov	r2, r4
 80051d0:	4628      	mov	r0, r5
 80051d2:	f000 f817 	bl	8005204 <__swbuf_r>
 80051d6:	3001      	adds	r0, #1
 80051d8:	d1bf      	bne.n	800515a <_puts_r+0x42>
 80051da:	e7df      	b.n	800519c <_puts_r+0x84>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	250a      	movs	r5, #10
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	6022      	str	r2, [r4, #0]
 80051e4:	701d      	strb	r5, [r3, #0]
 80051e6:	e7db      	b.n	80051a0 <_puts_r+0x88>
 80051e8:	08007594 	.word	0x08007594
 80051ec:	080075b4 	.word	0x080075b4
 80051f0:	08007574 	.word	0x08007574

080051f4 <puts>:
 80051f4:	4b02      	ldr	r3, [pc, #8]	; (8005200 <puts+0xc>)
 80051f6:	4601      	mov	r1, r0
 80051f8:	6818      	ldr	r0, [r3, #0]
 80051fa:	f7ff bf8d 	b.w	8005118 <_puts_r>
 80051fe:	bf00      	nop
 8005200:	20001df4 	.word	0x20001df4

08005204 <__swbuf_r>:
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	460e      	mov	r6, r1
 8005208:	4614      	mov	r4, r2
 800520a:	4605      	mov	r5, r0
 800520c:	b118      	cbz	r0, 8005216 <__swbuf_r+0x12>
 800520e:	6983      	ldr	r3, [r0, #24]
 8005210:	b90b      	cbnz	r3, 8005216 <__swbuf_r+0x12>
 8005212:	f001 f84b 	bl	80062ac <__sinit>
 8005216:	4b21      	ldr	r3, [pc, #132]	; (800529c <__swbuf_r+0x98>)
 8005218:	429c      	cmp	r4, r3
 800521a:	d12b      	bne.n	8005274 <__swbuf_r+0x70>
 800521c:	686c      	ldr	r4, [r5, #4]
 800521e:	69a3      	ldr	r3, [r4, #24]
 8005220:	60a3      	str	r3, [r4, #8]
 8005222:	89a3      	ldrh	r3, [r4, #12]
 8005224:	071a      	lsls	r2, r3, #28
 8005226:	d52f      	bpl.n	8005288 <__swbuf_r+0x84>
 8005228:	6923      	ldr	r3, [r4, #16]
 800522a:	b36b      	cbz	r3, 8005288 <__swbuf_r+0x84>
 800522c:	6923      	ldr	r3, [r4, #16]
 800522e:	6820      	ldr	r0, [r4, #0]
 8005230:	1ac0      	subs	r0, r0, r3
 8005232:	6963      	ldr	r3, [r4, #20]
 8005234:	b2f6      	uxtb	r6, r6
 8005236:	4283      	cmp	r3, r0
 8005238:	4637      	mov	r7, r6
 800523a:	dc04      	bgt.n	8005246 <__swbuf_r+0x42>
 800523c:	4621      	mov	r1, r4
 800523e:	4628      	mov	r0, r5
 8005240:	f000 ffa0 	bl	8006184 <_fflush_r>
 8005244:	bb30      	cbnz	r0, 8005294 <__swbuf_r+0x90>
 8005246:	68a3      	ldr	r3, [r4, #8]
 8005248:	3b01      	subs	r3, #1
 800524a:	60a3      	str	r3, [r4, #8]
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	6022      	str	r2, [r4, #0]
 8005252:	701e      	strb	r6, [r3, #0]
 8005254:	6963      	ldr	r3, [r4, #20]
 8005256:	3001      	adds	r0, #1
 8005258:	4283      	cmp	r3, r0
 800525a:	d004      	beq.n	8005266 <__swbuf_r+0x62>
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	07db      	lsls	r3, r3, #31
 8005260:	d506      	bpl.n	8005270 <__swbuf_r+0x6c>
 8005262:	2e0a      	cmp	r6, #10
 8005264:	d104      	bne.n	8005270 <__swbuf_r+0x6c>
 8005266:	4621      	mov	r1, r4
 8005268:	4628      	mov	r0, r5
 800526a:	f000 ff8b 	bl	8006184 <_fflush_r>
 800526e:	b988      	cbnz	r0, 8005294 <__swbuf_r+0x90>
 8005270:	4638      	mov	r0, r7
 8005272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005274:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <__swbuf_r+0x9c>)
 8005276:	429c      	cmp	r4, r3
 8005278:	d101      	bne.n	800527e <__swbuf_r+0x7a>
 800527a:	68ac      	ldr	r4, [r5, #8]
 800527c:	e7cf      	b.n	800521e <__swbuf_r+0x1a>
 800527e:	4b09      	ldr	r3, [pc, #36]	; (80052a4 <__swbuf_r+0xa0>)
 8005280:	429c      	cmp	r4, r3
 8005282:	bf08      	it	eq
 8005284:	68ec      	ldreq	r4, [r5, #12]
 8005286:	e7ca      	b.n	800521e <__swbuf_r+0x1a>
 8005288:	4621      	mov	r1, r4
 800528a:	4628      	mov	r0, r5
 800528c:	f000 f80c 	bl	80052a8 <__swsetup_r>
 8005290:	2800      	cmp	r0, #0
 8005292:	d0cb      	beq.n	800522c <__swbuf_r+0x28>
 8005294:	f04f 37ff 	mov.w	r7, #4294967295
 8005298:	e7ea      	b.n	8005270 <__swbuf_r+0x6c>
 800529a:	bf00      	nop
 800529c:	08007594 	.word	0x08007594
 80052a0:	080075b4 	.word	0x080075b4
 80052a4:	08007574 	.word	0x08007574

080052a8 <__swsetup_r>:
 80052a8:	4b32      	ldr	r3, [pc, #200]	; (8005374 <__swsetup_r+0xcc>)
 80052aa:	b570      	push	{r4, r5, r6, lr}
 80052ac:	681d      	ldr	r5, [r3, #0]
 80052ae:	4606      	mov	r6, r0
 80052b0:	460c      	mov	r4, r1
 80052b2:	b125      	cbz	r5, 80052be <__swsetup_r+0x16>
 80052b4:	69ab      	ldr	r3, [r5, #24]
 80052b6:	b913      	cbnz	r3, 80052be <__swsetup_r+0x16>
 80052b8:	4628      	mov	r0, r5
 80052ba:	f000 fff7 	bl	80062ac <__sinit>
 80052be:	4b2e      	ldr	r3, [pc, #184]	; (8005378 <__swsetup_r+0xd0>)
 80052c0:	429c      	cmp	r4, r3
 80052c2:	d10f      	bne.n	80052e4 <__swsetup_r+0x3c>
 80052c4:	686c      	ldr	r4, [r5, #4]
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052cc:	0719      	lsls	r1, r3, #28
 80052ce:	d42c      	bmi.n	800532a <__swsetup_r+0x82>
 80052d0:	06dd      	lsls	r5, r3, #27
 80052d2:	d411      	bmi.n	80052f8 <__swsetup_r+0x50>
 80052d4:	2309      	movs	r3, #9
 80052d6:	6033      	str	r3, [r6, #0]
 80052d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80052dc:	81a3      	strh	r3, [r4, #12]
 80052de:	f04f 30ff 	mov.w	r0, #4294967295
 80052e2:	e03e      	b.n	8005362 <__swsetup_r+0xba>
 80052e4:	4b25      	ldr	r3, [pc, #148]	; (800537c <__swsetup_r+0xd4>)
 80052e6:	429c      	cmp	r4, r3
 80052e8:	d101      	bne.n	80052ee <__swsetup_r+0x46>
 80052ea:	68ac      	ldr	r4, [r5, #8]
 80052ec:	e7eb      	b.n	80052c6 <__swsetup_r+0x1e>
 80052ee:	4b24      	ldr	r3, [pc, #144]	; (8005380 <__swsetup_r+0xd8>)
 80052f0:	429c      	cmp	r4, r3
 80052f2:	bf08      	it	eq
 80052f4:	68ec      	ldreq	r4, [r5, #12]
 80052f6:	e7e6      	b.n	80052c6 <__swsetup_r+0x1e>
 80052f8:	0758      	lsls	r0, r3, #29
 80052fa:	d512      	bpl.n	8005322 <__swsetup_r+0x7a>
 80052fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052fe:	b141      	cbz	r1, 8005312 <__swsetup_r+0x6a>
 8005300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005304:	4299      	cmp	r1, r3
 8005306:	d002      	beq.n	800530e <__swsetup_r+0x66>
 8005308:	4630      	mov	r0, r6
 800530a:	f001 fc6f 	bl	8006bec <_free_r>
 800530e:	2300      	movs	r3, #0
 8005310:	6363      	str	r3, [r4, #52]	; 0x34
 8005312:	89a3      	ldrh	r3, [r4, #12]
 8005314:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005318:	81a3      	strh	r3, [r4, #12]
 800531a:	2300      	movs	r3, #0
 800531c:	6063      	str	r3, [r4, #4]
 800531e:	6923      	ldr	r3, [r4, #16]
 8005320:	6023      	str	r3, [r4, #0]
 8005322:	89a3      	ldrh	r3, [r4, #12]
 8005324:	f043 0308 	orr.w	r3, r3, #8
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	6923      	ldr	r3, [r4, #16]
 800532c:	b94b      	cbnz	r3, 8005342 <__swsetup_r+0x9a>
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005338:	d003      	beq.n	8005342 <__swsetup_r+0x9a>
 800533a:	4621      	mov	r1, r4
 800533c:	4630      	mov	r0, r6
 800533e:	f001 f87f 	bl	8006440 <__smakebuf_r>
 8005342:	89a0      	ldrh	r0, [r4, #12]
 8005344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005348:	f010 0301 	ands.w	r3, r0, #1
 800534c:	d00a      	beq.n	8005364 <__swsetup_r+0xbc>
 800534e:	2300      	movs	r3, #0
 8005350:	60a3      	str	r3, [r4, #8]
 8005352:	6963      	ldr	r3, [r4, #20]
 8005354:	425b      	negs	r3, r3
 8005356:	61a3      	str	r3, [r4, #24]
 8005358:	6923      	ldr	r3, [r4, #16]
 800535a:	b943      	cbnz	r3, 800536e <__swsetup_r+0xc6>
 800535c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005360:	d1ba      	bne.n	80052d8 <__swsetup_r+0x30>
 8005362:	bd70      	pop	{r4, r5, r6, pc}
 8005364:	0781      	lsls	r1, r0, #30
 8005366:	bf58      	it	pl
 8005368:	6963      	ldrpl	r3, [r4, #20]
 800536a:	60a3      	str	r3, [r4, #8]
 800536c:	e7f4      	b.n	8005358 <__swsetup_r+0xb0>
 800536e:	2000      	movs	r0, #0
 8005370:	e7f7      	b.n	8005362 <__swsetup_r+0xba>
 8005372:	bf00      	nop
 8005374:	20001df4 	.word	0x20001df4
 8005378:	08007594 	.word	0x08007594
 800537c:	080075b4 	.word	0x080075b4
 8005380:	08007574 	.word	0x08007574

08005384 <quorem>:
 8005384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005388:	6903      	ldr	r3, [r0, #16]
 800538a:	690c      	ldr	r4, [r1, #16]
 800538c:	42a3      	cmp	r3, r4
 800538e:	4607      	mov	r7, r0
 8005390:	f2c0 8081 	blt.w	8005496 <quorem+0x112>
 8005394:	3c01      	subs	r4, #1
 8005396:	f101 0814 	add.w	r8, r1, #20
 800539a:	f100 0514 	add.w	r5, r0, #20
 800539e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053a2:	9301      	str	r3, [sp, #4]
 80053a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80053a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053ac:	3301      	adds	r3, #1
 80053ae:	429a      	cmp	r2, r3
 80053b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80053b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80053b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80053bc:	d331      	bcc.n	8005422 <quorem+0x9e>
 80053be:	f04f 0e00 	mov.w	lr, #0
 80053c2:	4640      	mov	r0, r8
 80053c4:	46ac      	mov	ip, r5
 80053c6:	46f2      	mov	sl, lr
 80053c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80053cc:	b293      	uxth	r3, r2
 80053ce:	fb06 e303 	mla	r3, r6, r3, lr
 80053d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	ebaa 0303 	sub.w	r3, sl, r3
 80053dc:	0c12      	lsrs	r2, r2, #16
 80053de:	f8dc a000 	ldr.w	sl, [ip]
 80053e2:	fb06 e202 	mla	r2, r6, r2, lr
 80053e6:	fa13 f38a 	uxtah	r3, r3, sl
 80053ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80053ee:	fa1f fa82 	uxth.w	sl, r2
 80053f2:	f8dc 2000 	ldr.w	r2, [ip]
 80053f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80053fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053fe:	b29b      	uxth	r3, r3
 8005400:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005404:	4581      	cmp	r9, r0
 8005406:	f84c 3b04 	str.w	r3, [ip], #4
 800540a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800540e:	d2db      	bcs.n	80053c8 <quorem+0x44>
 8005410:	f855 300b 	ldr.w	r3, [r5, fp]
 8005414:	b92b      	cbnz	r3, 8005422 <quorem+0x9e>
 8005416:	9b01      	ldr	r3, [sp, #4]
 8005418:	3b04      	subs	r3, #4
 800541a:	429d      	cmp	r5, r3
 800541c:	461a      	mov	r2, r3
 800541e:	d32e      	bcc.n	800547e <quorem+0xfa>
 8005420:	613c      	str	r4, [r7, #16]
 8005422:	4638      	mov	r0, r7
 8005424:	f001 fad2 	bl	80069cc <__mcmp>
 8005428:	2800      	cmp	r0, #0
 800542a:	db24      	blt.n	8005476 <quorem+0xf2>
 800542c:	3601      	adds	r6, #1
 800542e:	4628      	mov	r0, r5
 8005430:	f04f 0c00 	mov.w	ip, #0
 8005434:	f858 2b04 	ldr.w	r2, [r8], #4
 8005438:	f8d0 e000 	ldr.w	lr, [r0]
 800543c:	b293      	uxth	r3, r2
 800543e:	ebac 0303 	sub.w	r3, ip, r3
 8005442:	0c12      	lsrs	r2, r2, #16
 8005444:	fa13 f38e 	uxtah	r3, r3, lr
 8005448:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800544c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005450:	b29b      	uxth	r3, r3
 8005452:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005456:	45c1      	cmp	r9, r8
 8005458:	f840 3b04 	str.w	r3, [r0], #4
 800545c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005460:	d2e8      	bcs.n	8005434 <quorem+0xb0>
 8005462:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005466:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800546a:	b922      	cbnz	r2, 8005476 <quorem+0xf2>
 800546c:	3b04      	subs	r3, #4
 800546e:	429d      	cmp	r5, r3
 8005470:	461a      	mov	r2, r3
 8005472:	d30a      	bcc.n	800548a <quorem+0x106>
 8005474:	613c      	str	r4, [r7, #16]
 8005476:	4630      	mov	r0, r6
 8005478:	b003      	add	sp, #12
 800547a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	3b04      	subs	r3, #4
 8005482:	2a00      	cmp	r2, #0
 8005484:	d1cc      	bne.n	8005420 <quorem+0x9c>
 8005486:	3c01      	subs	r4, #1
 8005488:	e7c7      	b.n	800541a <quorem+0x96>
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	3b04      	subs	r3, #4
 800548e:	2a00      	cmp	r2, #0
 8005490:	d1f0      	bne.n	8005474 <quorem+0xf0>
 8005492:	3c01      	subs	r4, #1
 8005494:	e7eb      	b.n	800546e <quorem+0xea>
 8005496:	2000      	movs	r0, #0
 8005498:	e7ee      	b.n	8005478 <quorem+0xf4>
 800549a:	0000      	movs	r0, r0
 800549c:	0000      	movs	r0, r0
	...

080054a0 <_dtoa_r>:
 80054a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a4:	ed2d 8b02 	vpush	{d8}
 80054a8:	ec57 6b10 	vmov	r6, r7, d0
 80054ac:	b095      	sub	sp, #84	; 0x54
 80054ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80054b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80054b4:	9105      	str	r1, [sp, #20]
 80054b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80054ba:	4604      	mov	r4, r0
 80054bc:	9209      	str	r2, [sp, #36]	; 0x24
 80054be:	930f      	str	r3, [sp, #60]	; 0x3c
 80054c0:	b975      	cbnz	r5, 80054e0 <_dtoa_r+0x40>
 80054c2:	2010      	movs	r0, #16
 80054c4:	f000 fffc 	bl	80064c0 <malloc>
 80054c8:	4602      	mov	r2, r0
 80054ca:	6260      	str	r0, [r4, #36]	; 0x24
 80054cc:	b920      	cbnz	r0, 80054d8 <_dtoa_r+0x38>
 80054ce:	4bb2      	ldr	r3, [pc, #712]	; (8005798 <_dtoa_r+0x2f8>)
 80054d0:	21ea      	movs	r1, #234	; 0xea
 80054d2:	48b2      	ldr	r0, [pc, #712]	; (800579c <_dtoa_r+0x2fc>)
 80054d4:	f001 fce2 	bl	8006e9c <__assert_func>
 80054d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80054dc:	6005      	str	r5, [r0, #0]
 80054de:	60c5      	str	r5, [r0, #12]
 80054e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054e2:	6819      	ldr	r1, [r3, #0]
 80054e4:	b151      	cbz	r1, 80054fc <_dtoa_r+0x5c>
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	604a      	str	r2, [r1, #4]
 80054ea:	2301      	movs	r3, #1
 80054ec:	4093      	lsls	r3, r2
 80054ee:	608b      	str	r3, [r1, #8]
 80054f0:	4620      	mov	r0, r4
 80054f2:	f001 f82d 	bl	8006550 <_Bfree>
 80054f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	1e3b      	subs	r3, r7, #0
 80054fe:	bfb9      	ittee	lt
 8005500:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005504:	9303      	strlt	r3, [sp, #12]
 8005506:	2300      	movge	r3, #0
 8005508:	f8c8 3000 	strge.w	r3, [r8]
 800550c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005510:	4ba3      	ldr	r3, [pc, #652]	; (80057a0 <_dtoa_r+0x300>)
 8005512:	bfbc      	itt	lt
 8005514:	2201      	movlt	r2, #1
 8005516:	f8c8 2000 	strlt.w	r2, [r8]
 800551a:	ea33 0309 	bics.w	r3, r3, r9
 800551e:	d11b      	bne.n	8005558 <_dtoa_r+0xb8>
 8005520:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005522:	f242 730f 	movw	r3, #9999	; 0x270f
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800552c:	4333      	orrs	r3, r6
 800552e:	f000 857a 	beq.w	8006026 <_dtoa_r+0xb86>
 8005532:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005534:	b963      	cbnz	r3, 8005550 <_dtoa_r+0xb0>
 8005536:	4b9b      	ldr	r3, [pc, #620]	; (80057a4 <_dtoa_r+0x304>)
 8005538:	e024      	b.n	8005584 <_dtoa_r+0xe4>
 800553a:	4b9b      	ldr	r3, [pc, #620]	; (80057a8 <_dtoa_r+0x308>)
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	3308      	adds	r3, #8
 8005540:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	9800      	ldr	r0, [sp, #0]
 8005546:	b015      	add	sp, #84	; 0x54
 8005548:	ecbd 8b02 	vpop	{d8}
 800554c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005550:	4b94      	ldr	r3, [pc, #592]	; (80057a4 <_dtoa_r+0x304>)
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	3303      	adds	r3, #3
 8005556:	e7f3      	b.n	8005540 <_dtoa_r+0xa0>
 8005558:	ed9d 7b02 	vldr	d7, [sp, #8]
 800555c:	2200      	movs	r2, #0
 800555e:	ec51 0b17 	vmov	r0, r1, d7
 8005562:	2300      	movs	r3, #0
 8005564:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005568:	f7fb fad6 	bl	8000b18 <__aeabi_dcmpeq>
 800556c:	4680      	mov	r8, r0
 800556e:	b158      	cbz	r0, 8005588 <_dtoa_r+0xe8>
 8005570:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005572:	2301      	movs	r3, #1
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8551 	beq.w	8006020 <_dtoa_r+0xb80>
 800557e:	488b      	ldr	r0, [pc, #556]	; (80057ac <_dtoa_r+0x30c>)
 8005580:	6018      	str	r0, [r3, #0]
 8005582:	1e43      	subs	r3, r0, #1
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	e7dd      	b.n	8005544 <_dtoa_r+0xa4>
 8005588:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800558c:	aa12      	add	r2, sp, #72	; 0x48
 800558e:	a913      	add	r1, sp, #76	; 0x4c
 8005590:	4620      	mov	r0, r4
 8005592:	f001 fabf 	bl	8006b14 <__d2b>
 8005596:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800559a:	4683      	mov	fp, r0
 800559c:	2d00      	cmp	r5, #0
 800559e:	d07c      	beq.n	800569a <_dtoa_r+0x1fa>
 80055a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80055a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80055ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80055b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80055b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80055ba:	4b7d      	ldr	r3, [pc, #500]	; (80057b0 <_dtoa_r+0x310>)
 80055bc:	2200      	movs	r2, #0
 80055be:	4630      	mov	r0, r6
 80055c0:	4639      	mov	r1, r7
 80055c2:	f7fa fe89 	bl	80002d8 <__aeabi_dsub>
 80055c6:	a36e      	add	r3, pc, #440	; (adr r3, 8005780 <_dtoa_r+0x2e0>)
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f7fb f83c 	bl	8000648 <__aeabi_dmul>
 80055d0:	a36d      	add	r3, pc, #436	; (adr r3, 8005788 <_dtoa_r+0x2e8>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fa fe81 	bl	80002dc <__adddf3>
 80055da:	4606      	mov	r6, r0
 80055dc:	4628      	mov	r0, r5
 80055de:	460f      	mov	r7, r1
 80055e0:	f7fa ffc8 	bl	8000574 <__aeabi_i2d>
 80055e4:	a36a      	add	r3, pc, #424	; (adr r3, 8005790 <_dtoa_r+0x2f0>)
 80055e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ea:	f7fb f82d 	bl	8000648 <__aeabi_dmul>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4630      	mov	r0, r6
 80055f4:	4639      	mov	r1, r7
 80055f6:	f7fa fe71 	bl	80002dc <__adddf3>
 80055fa:	4606      	mov	r6, r0
 80055fc:	460f      	mov	r7, r1
 80055fe:	f7fb fad3 	bl	8000ba8 <__aeabi_d2iz>
 8005602:	2200      	movs	r2, #0
 8005604:	4682      	mov	sl, r0
 8005606:	2300      	movs	r3, #0
 8005608:	4630      	mov	r0, r6
 800560a:	4639      	mov	r1, r7
 800560c:	f7fb fa8e 	bl	8000b2c <__aeabi_dcmplt>
 8005610:	b148      	cbz	r0, 8005626 <_dtoa_r+0x186>
 8005612:	4650      	mov	r0, sl
 8005614:	f7fa ffae 	bl	8000574 <__aeabi_i2d>
 8005618:	4632      	mov	r2, r6
 800561a:	463b      	mov	r3, r7
 800561c:	f7fb fa7c 	bl	8000b18 <__aeabi_dcmpeq>
 8005620:	b908      	cbnz	r0, 8005626 <_dtoa_r+0x186>
 8005622:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005626:	f1ba 0f16 	cmp.w	sl, #22
 800562a:	d854      	bhi.n	80056d6 <_dtoa_r+0x236>
 800562c:	4b61      	ldr	r3, [pc, #388]	; (80057b4 <_dtoa_r+0x314>)
 800562e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005636:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800563a:	f7fb fa77 	bl	8000b2c <__aeabi_dcmplt>
 800563e:	2800      	cmp	r0, #0
 8005640:	d04b      	beq.n	80056da <_dtoa_r+0x23a>
 8005642:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005646:	2300      	movs	r3, #0
 8005648:	930e      	str	r3, [sp, #56]	; 0x38
 800564a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800564c:	1b5d      	subs	r5, r3, r5
 800564e:	1e6b      	subs	r3, r5, #1
 8005650:	9304      	str	r3, [sp, #16]
 8005652:	bf43      	ittte	mi
 8005654:	2300      	movmi	r3, #0
 8005656:	f1c5 0801 	rsbmi	r8, r5, #1
 800565a:	9304      	strmi	r3, [sp, #16]
 800565c:	f04f 0800 	movpl.w	r8, #0
 8005660:	f1ba 0f00 	cmp.w	sl, #0
 8005664:	db3b      	blt.n	80056de <_dtoa_r+0x23e>
 8005666:	9b04      	ldr	r3, [sp, #16]
 8005668:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800566c:	4453      	add	r3, sl
 800566e:	9304      	str	r3, [sp, #16]
 8005670:	2300      	movs	r3, #0
 8005672:	9306      	str	r3, [sp, #24]
 8005674:	9b05      	ldr	r3, [sp, #20]
 8005676:	2b09      	cmp	r3, #9
 8005678:	d869      	bhi.n	800574e <_dtoa_r+0x2ae>
 800567a:	2b05      	cmp	r3, #5
 800567c:	bfc4      	itt	gt
 800567e:	3b04      	subgt	r3, #4
 8005680:	9305      	strgt	r3, [sp, #20]
 8005682:	9b05      	ldr	r3, [sp, #20]
 8005684:	f1a3 0302 	sub.w	r3, r3, #2
 8005688:	bfcc      	ite	gt
 800568a:	2500      	movgt	r5, #0
 800568c:	2501      	movle	r5, #1
 800568e:	2b03      	cmp	r3, #3
 8005690:	d869      	bhi.n	8005766 <_dtoa_r+0x2c6>
 8005692:	e8df f003 	tbb	[pc, r3]
 8005696:	4e2c      	.short	0x4e2c
 8005698:	5a4c      	.short	0x5a4c
 800569a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800569e:	441d      	add	r5, r3
 80056a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	bfc1      	itttt	gt
 80056a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80056ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80056b0:	fa09 f303 	lslgt.w	r3, r9, r3
 80056b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80056b8:	bfda      	itte	le
 80056ba:	f1c3 0320 	rsble	r3, r3, #32
 80056be:	fa06 f003 	lslle.w	r0, r6, r3
 80056c2:	4318      	orrgt	r0, r3
 80056c4:	f7fa ff46 	bl	8000554 <__aeabi_ui2d>
 80056c8:	2301      	movs	r3, #1
 80056ca:	4606      	mov	r6, r0
 80056cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80056d0:	3d01      	subs	r5, #1
 80056d2:	9310      	str	r3, [sp, #64]	; 0x40
 80056d4:	e771      	b.n	80055ba <_dtoa_r+0x11a>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e7b6      	b.n	8005648 <_dtoa_r+0x1a8>
 80056da:	900e      	str	r0, [sp, #56]	; 0x38
 80056dc:	e7b5      	b.n	800564a <_dtoa_r+0x1aa>
 80056de:	f1ca 0300 	rsb	r3, sl, #0
 80056e2:	9306      	str	r3, [sp, #24]
 80056e4:	2300      	movs	r3, #0
 80056e6:	eba8 080a 	sub.w	r8, r8, sl
 80056ea:	930d      	str	r3, [sp, #52]	; 0x34
 80056ec:	e7c2      	b.n	8005674 <_dtoa_r+0x1d4>
 80056ee:	2300      	movs	r3, #0
 80056f0:	9308      	str	r3, [sp, #32]
 80056f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	dc39      	bgt.n	800576c <_dtoa_r+0x2cc>
 80056f8:	f04f 0901 	mov.w	r9, #1
 80056fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005700:	464b      	mov	r3, r9
 8005702:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005706:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005708:	2200      	movs	r2, #0
 800570a:	6042      	str	r2, [r0, #4]
 800570c:	2204      	movs	r2, #4
 800570e:	f102 0614 	add.w	r6, r2, #20
 8005712:	429e      	cmp	r6, r3
 8005714:	6841      	ldr	r1, [r0, #4]
 8005716:	d92f      	bls.n	8005778 <_dtoa_r+0x2d8>
 8005718:	4620      	mov	r0, r4
 800571a:	f000 fed9 	bl	80064d0 <_Balloc>
 800571e:	9000      	str	r0, [sp, #0]
 8005720:	2800      	cmp	r0, #0
 8005722:	d14b      	bne.n	80057bc <_dtoa_r+0x31c>
 8005724:	4b24      	ldr	r3, [pc, #144]	; (80057b8 <_dtoa_r+0x318>)
 8005726:	4602      	mov	r2, r0
 8005728:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800572c:	e6d1      	b.n	80054d2 <_dtoa_r+0x32>
 800572e:	2301      	movs	r3, #1
 8005730:	e7de      	b.n	80056f0 <_dtoa_r+0x250>
 8005732:	2300      	movs	r3, #0
 8005734:	9308      	str	r3, [sp, #32]
 8005736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005738:	eb0a 0903 	add.w	r9, sl, r3
 800573c:	f109 0301 	add.w	r3, r9, #1
 8005740:	2b01      	cmp	r3, #1
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	bfb8      	it	lt
 8005746:	2301      	movlt	r3, #1
 8005748:	e7dd      	b.n	8005706 <_dtoa_r+0x266>
 800574a:	2301      	movs	r3, #1
 800574c:	e7f2      	b.n	8005734 <_dtoa_r+0x294>
 800574e:	2501      	movs	r5, #1
 8005750:	2300      	movs	r3, #0
 8005752:	9305      	str	r3, [sp, #20]
 8005754:	9508      	str	r5, [sp, #32]
 8005756:	f04f 39ff 	mov.w	r9, #4294967295
 800575a:	2200      	movs	r2, #0
 800575c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005760:	2312      	movs	r3, #18
 8005762:	9209      	str	r2, [sp, #36]	; 0x24
 8005764:	e7cf      	b.n	8005706 <_dtoa_r+0x266>
 8005766:	2301      	movs	r3, #1
 8005768:	9308      	str	r3, [sp, #32]
 800576a:	e7f4      	b.n	8005756 <_dtoa_r+0x2b6>
 800576c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005770:	f8cd 9004 	str.w	r9, [sp, #4]
 8005774:	464b      	mov	r3, r9
 8005776:	e7c6      	b.n	8005706 <_dtoa_r+0x266>
 8005778:	3101      	adds	r1, #1
 800577a:	6041      	str	r1, [r0, #4]
 800577c:	0052      	lsls	r2, r2, #1
 800577e:	e7c6      	b.n	800570e <_dtoa_r+0x26e>
 8005780:	636f4361 	.word	0x636f4361
 8005784:	3fd287a7 	.word	0x3fd287a7
 8005788:	8b60c8b3 	.word	0x8b60c8b3
 800578c:	3fc68a28 	.word	0x3fc68a28
 8005790:	509f79fb 	.word	0x509f79fb
 8005794:	3fd34413 	.word	0x3fd34413
 8005798:	080074ed 	.word	0x080074ed
 800579c:	08007504 	.word	0x08007504
 80057a0:	7ff00000 	.word	0x7ff00000
 80057a4:	080074e9 	.word	0x080074e9
 80057a8:	080074e0 	.word	0x080074e0
 80057ac:	080074bd 	.word	0x080074bd
 80057b0:	3ff80000 	.word	0x3ff80000
 80057b4:	08007660 	.word	0x08007660
 80057b8:	08007563 	.word	0x08007563
 80057bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057be:	9a00      	ldr	r2, [sp, #0]
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	9b01      	ldr	r3, [sp, #4]
 80057c4:	2b0e      	cmp	r3, #14
 80057c6:	f200 80ad 	bhi.w	8005924 <_dtoa_r+0x484>
 80057ca:	2d00      	cmp	r5, #0
 80057cc:	f000 80aa 	beq.w	8005924 <_dtoa_r+0x484>
 80057d0:	f1ba 0f00 	cmp.w	sl, #0
 80057d4:	dd36      	ble.n	8005844 <_dtoa_r+0x3a4>
 80057d6:	4ac3      	ldr	r2, [pc, #780]	; (8005ae4 <_dtoa_r+0x644>)
 80057d8:	f00a 030f 	and.w	r3, sl, #15
 80057dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80057e0:	ed93 7b00 	vldr	d7, [r3]
 80057e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80057e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80057ec:	eeb0 8a47 	vmov.f32	s16, s14
 80057f0:	eef0 8a67 	vmov.f32	s17, s15
 80057f4:	d016      	beq.n	8005824 <_dtoa_r+0x384>
 80057f6:	4bbc      	ldr	r3, [pc, #752]	; (8005ae8 <_dtoa_r+0x648>)
 80057f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005800:	f7fb f84c 	bl	800089c <__aeabi_ddiv>
 8005804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005808:	f007 070f 	and.w	r7, r7, #15
 800580c:	2503      	movs	r5, #3
 800580e:	4eb6      	ldr	r6, [pc, #728]	; (8005ae8 <_dtoa_r+0x648>)
 8005810:	b957      	cbnz	r7, 8005828 <_dtoa_r+0x388>
 8005812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005816:	ec53 2b18 	vmov	r2, r3, d8
 800581a:	f7fb f83f 	bl	800089c <__aeabi_ddiv>
 800581e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005822:	e029      	b.n	8005878 <_dtoa_r+0x3d8>
 8005824:	2502      	movs	r5, #2
 8005826:	e7f2      	b.n	800580e <_dtoa_r+0x36e>
 8005828:	07f9      	lsls	r1, r7, #31
 800582a:	d508      	bpl.n	800583e <_dtoa_r+0x39e>
 800582c:	ec51 0b18 	vmov	r0, r1, d8
 8005830:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005834:	f7fa ff08 	bl	8000648 <__aeabi_dmul>
 8005838:	ec41 0b18 	vmov	d8, r0, r1
 800583c:	3501      	adds	r5, #1
 800583e:	107f      	asrs	r7, r7, #1
 8005840:	3608      	adds	r6, #8
 8005842:	e7e5      	b.n	8005810 <_dtoa_r+0x370>
 8005844:	f000 80a6 	beq.w	8005994 <_dtoa_r+0x4f4>
 8005848:	f1ca 0600 	rsb	r6, sl, #0
 800584c:	4ba5      	ldr	r3, [pc, #660]	; (8005ae4 <_dtoa_r+0x644>)
 800584e:	4fa6      	ldr	r7, [pc, #664]	; (8005ae8 <_dtoa_r+0x648>)
 8005850:	f006 020f 	and.w	r2, r6, #15
 8005854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005860:	f7fa fef2 	bl	8000648 <__aeabi_dmul>
 8005864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005868:	1136      	asrs	r6, r6, #4
 800586a:	2300      	movs	r3, #0
 800586c:	2502      	movs	r5, #2
 800586e:	2e00      	cmp	r6, #0
 8005870:	f040 8085 	bne.w	800597e <_dtoa_r+0x4de>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1d2      	bne.n	800581e <_dtoa_r+0x37e>
 8005878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 808c 	beq.w	8005998 <_dtoa_r+0x4f8>
 8005880:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005884:	4b99      	ldr	r3, [pc, #612]	; (8005aec <_dtoa_r+0x64c>)
 8005886:	2200      	movs	r2, #0
 8005888:	4630      	mov	r0, r6
 800588a:	4639      	mov	r1, r7
 800588c:	f7fb f94e 	bl	8000b2c <__aeabi_dcmplt>
 8005890:	2800      	cmp	r0, #0
 8005892:	f000 8081 	beq.w	8005998 <_dtoa_r+0x4f8>
 8005896:	9b01      	ldr	r3, [sp, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d07d      	beq.n	8005998 <_dtoa_r+0x4f8>
 800589c:	f1b9 0f00 	cmp.w	r9, #0
 80058a0:	dd3c      	ble.n	800591c <_dtoa_r+0x47c>
 80058a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80058a6:	9307      	str	r3, [sp, #28]
 80058a8:	2200      	movs	r2, #0
 80058aa:	4b91      	ldr	r3, [pc, #580]	; (8005af0 <_dtoa_r+0x650>)
 80058ac:	4630      	mov	r0, r6
 80058ae:	4639      	mov	r1, r7
 80058b0:	f7fa feca 	bl	8000648 <__aeabi_dmul>
 80058b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058b8:	3501      	adds	r5, #1
 80058ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80058be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80058c2:	4628      	mov	r0, r5
 80058c4:	f7fa fe56 	bl	8000574 <__aeabi_i2d>
 80058c8:	4632      	mov	r2, r6
 80058ca:	463b      	mov	r3, r7
 80058cc:	f7fa febc 	bl	8000648 <__aeabi_dmul>
 80058d0:	4b88      	ldr	r3, [pc, #544]	; (8005af4 <_dtoa_r+0x654>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	f7fa fd02 	bl	80002dc <__adddf3>
 80058d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80058dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058e0:	9303      	str	r3, [sp, #12]
 80058e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d15c      	bne.n	80059a2 <_dtoa_r+0x502>
 80058e8:	4b83      	ldr	r3, [pc, #524]	; (8005af8 <_dtoa_r+0x658>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	4630      	mov	r0, r6
 80058ee:	4639      	mov	r1, r7
 80058f0:	f7fa fcf2 	bl	80002d8 <__aeabi_dsub>
 80058f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058f8:	4606      	mov	r6, r0
 80058fa:	460f      	mov	r7, r1
 80058fc:	f7fb f934 	bl	8000b68 <__aeabi_dcmpgt>
 8005900:	2800      	cmp	r0, #0
 8005902:	f040 8296 	bne.w	8005e32 <_dtoa_r+0x992>
 8005906:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800590a:	4630      	mov	r0, r6
 800590c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005910:	4639      	mov	r1, r7
 8005912:	f7fb f90b 	bl	8000b2c <__aeabi_dcmplt>
 8005916:	2800      	cmp	r0, #0
 8005918:	f040 8288 	bne.w	8005e2c <_dtoa_r+0x98c>
 800591c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005920:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005924:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005926:	2b00      	cmp	r3, #0
 8005928:	f2c0 8158 	blt.w	8005bdc <_dtoa_r+0x73c>
 800592c:	f1ba 0f0e 	cmp.w	sl, #14
 8005930:	f300 8154 	bgt.w	8005bdc <_dtoa_r+0x73c>
 8005934:	4b6b      	ldr	r3, [pc, #428]	; (8005ae4 <_dtoa_r+0x644>)
 8005936:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800593a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800593e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005940:	2b00      	cmp	r3, #0
 8005942:	f280 80e3 	bge.w	8005b0c <_dtoa_r+0x66c>
 8005946:	9b01      	ldr	r3, [sp, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	f300 80df 	bgt.w	8005b0c <_dtoa_r+0x66c>
 800594e:	f040 826d 	bne.w	8005e2c <_dtoa_r+0x98c>
 8005952:	4b69      	ldr	r3, [pc, #420]	; (8005af8 <_dtoa_r+0x658>)
 8005954:	2200      	movs	r2, #0
 8005956:	4640      	mov	r0, r8
 8005958:	4649      	mov	r1, r9
 800595a:	f7fa fe75 	bl	8000648 <__aeabi_dmul>
 800595e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005962:	f7fb f8f7 	bl	8000b54 <__aeabi_dcmpge>
 8005966:	9e01      	ldr	r6, [sp, #4]
 8005968:	4637      	mov	r7, r6
 800596a:	2800      	cmp	r0, #0
 800596c:	f040 8243 	bne.w	8005df6 <_dtoa_r+0x956>
 8005970:	9d00      	ldr	r5, [sp, #0]
 8005972:	2331      	movs	r3, #49	; 0x31
 8005974:	f805 3b01 	strb.w	r3, [r5], #1
 8005978:	f10a 0a01 	add.w	sl, sl, #1
 800597c:	e23f      	b.n	8005dfe <_dtoa_r+0x95e>
 800597e:	07f2      	lsls	r2, r6, #31
 8005980:	d505      	bpl.n	800598e <_dtoa_r+0x4ee>
 8005982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005986:	f7fa fe5f 	bl	8000648 <__aeabi_dmul>
 800598a:	3501      	adds	r5, #1
 800598c:	2301      	movs	r3, #1
 800598e:	1076      	asrs	r6, r6, #1
 8005990:	3708      	adds	r7, #8
 8005992:	e76c      	b.n	800586e <_dtoa_r+0x3ce>
 8005994:	2502      	movs	r5, #2
 8005996:	e76f      	b.n	8005878 <_dtoa_r+0x3d8>
 8005998:	9b01      	ldr	r3, [sp, #4]
 800599a:	f8cd a01c 	str.w	sl, [sp, #28]
 800599e:	930c      	str	r3, [sp, #48]	; 0x30
 80059a0:	e78d      	b.n	80058be <_dtoa_r+0x41e>
 80059a2:	9900      	ldr	r1, [sp, #0]
 80059a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80059a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059a8:	4b4e      	ldr	r3, [pc, #312]	; (8005ae4 <_dtoa_r+0x644>)
 80059aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059ae:	4401      	add	r1, r0
 80059b0:	9102      	str	r1, [sp, #8]
 80059b2:	9908      	ldr	r1, [sp, #32]
 80059b4:	eeb0 8a47 	vmov.f32	s16, s14
 80059b8:	eef0 8a67 	vmov.f32	s17, s15
 80059bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80059c4:	2900      	cmp	r1, #0
 80059c6:	d045      	beq.n	8005a54 <_dtoa_r+0x5b4>
 80059c8:	494c      	ldr	r1, [pc, #304]	; (8005afc <_dtoa_r+0x65c>)
 80059ca:	2000      	movs	r0, #0
 80059cc:	f7fa ff66 	bl	800089c <__aeabi_ddiv>
 80059d0:	ec53 2b18 	vmov	r2, r3, d8
 80059d4:	f7fa fc80 	bl	80002d8 <__aeabi_dsub>
 80059d8:	9d00      	ldr	r5, [sp, #0]
 80059da:	ec41 0b18 	vmov	d8, r0, r1
 80059de:	4639      	mov	r1, r7
 80059e0:	4630      	mov	r0, r6
 80059e2:	f7fb f8e1 	bl	8000ba8 <__aeabi_d2iz>
 80059e6:	900c      	str	r0, [sp, #48]	; 0x30
 80059e8:	f7fa fdc4 	bl	8000574 <__aeabi_i2d>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4630      	mov	r0, r6
 80059f2:	4639      	mov	r1, r7
 80059f4:	f7fa fc70 	bl	80002d8 <__aeabi_dsub>
 80059f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059fa:	3330      	adds	r3, #48	; 0x30
 80059fc:	f805 3b01 	strb.w	r3, [r5], #1
 8005a00:	ec53 2b18 	vmov	r2, r3, d8
 8005a04:	4606      	mov	r6, r0
 8005a06:	460f      	mov	r7, r1
 8005a08:	f7fb f890 	bl	8000b2c <__aeabi_dcmplt>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d165      	bne.n	8005adc <_dtoa_r+0x63c>
 8005a10:	4632      	mov	r2, r6
 8005a12:	463b      	mov	r3, r7
 8005a14:	4935      	ldr	r1, [pc, #212]	; (8005aec <_dtoa_r+0x64c>)
 8005a16:	2000      	movs	r0, #0
 8005a18:	f7fa fc5e 	bl	80002d8 <__aeabi_dsub>
 8005a1c:	ec53 2b18 	vmov	r2, r3, d8
 8005a20:	f7fb f884 	bl	8000b2c <__aeabi_dcmplt>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	f040 80b9 	bne.w	8005b9c <_dtoa_r+0x6fc>
 8005a2a:	9b02      	ldr	r3, [sp, #8]
 8005a2c:	429d      	cmp	r5, r3
 8005a2e:	f43f af75 	beq.w	800591c <_dtoa_r+0x47c>
 8005a32:	4b2f      	ldr	r3, [pc, #188]	; (8005af0 <_dtoa_r+0x650>)
 8005a34:	ec51 0b18 	vmov	r0, r1, d8
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f7fa fe05 	bl	8000648 <__aeabi_dmul>
 8005a3e:	4b2c      	ldr	r3, [pc, #176]	; (8005af0 <_dtoa_r+0x650>)
 8005a40:	ec41 0b18 	vmov	d8, r0, r1
 8005a44:	2200      	movs	r2, #0
 8005a46:	4630      	mov	r0, r6
 8005a48:	4639      	mov	r1, r7
 8005a4a:	f7fa fdfd 	bl	8000648 <__aeabi_dmul>
 8005a4e:	4606      	mov	r6, r0
 8005a50:	460f      	mov	r7, r1
 8005a52:	e7c4      	b.n	80059de <_dtoa_r+0x53e>
 8005a54:	ec51 0b17 	vmov	r0, r1, d7
 8005a58:	f7fa fdf6 	bl	8000648 <__aeabi_dmul>
 8005a5c:	9b02      	ldr	r3, [sp, #8]
 8005a5e:	9d00      	ldr	r5, [sp, #0]
 8005a60:	930c      	str	r3, [sp, #48]	; 0x30
 8005a62:	ec41 0b18 	vmov	d8, r0, r1
 8005a66:	4639      	mov	r1, r7
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f7fb f89d 	bl	8000ba8 <__aeabi_d2iz>
 8005a6e:	9011      	str	r0, [sp, #68]	; 0x44
 8005a70:	f7fa fd80 	bl	8000574 <__aeabi_i2d>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4630      	mov	r0, r6
 8005a7a:	4639      	mov	r1, r7
 8005a7c:	f7fa fc2c 	bl	80002d8 <__aeabi_dsub>
 8005a80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a82:	3330      	adds	r3, #48	; 0x30
 8005a84:	f805 3b01 	strb.w	r3, [r5], #1
 8005a88:	9b02      	ldr	r3, [sp, #8]
 8005a8a:	429d      	cmp	r5, r3
 8005a8c:	4606      	mov	r6, r0
 8005a8e:	460f      	mov	r7, r1
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	d134      	bne.n	8005b00 <_dtoa_r+0x660>
 8005a96:	4b19      	ldr	r3, [pc, #100]	; (8005afc <_dtoa_r+0x65c>)
 8005a98:	ec51 0b18 	vmov	r0, r1, d8
 8005a9c:	f7fa fc1e 	bl	80002dc <__adddf3>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	4639      	mov	r1, r7
 8005aa8:	f7fb f85e 	bl	8000b68 <__aeabi_dcmpgt>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d175      	bne.n	8005b9c <_dtoa_r+0x6fc>
 8005ab0:	ec53 2b18 	vmov	r2, r3, d8
 8005ab4:	4911      	ldr	r1, [pc, #68]	; (8005afc <_dtoa_r+0x65c>)
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	f7fa fc0e 	bl	80002d8 <__aeabi_dsub>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	4639      	mov	r1, r7
 8005ac4:	f7fb f832 	bl	8000b2c <__aeabi_dcmplt>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	f43f af27 	beq.w	800591c <_dtoa_r+0x47c>
 8005ace:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ad0:	1e6b      	subs	r3, r5, #1
 8005ad2:	930c      	str	r3, [sp, #48]	; 0x30
 8005ad4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ad8:	2b30      	cmp	r3, #48	; 0x30
 8005ada:	d0f8      	beq.n	8005ace <_dtoa_r+0x62e>
 8005adc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005ae0:	e04a      	b.n	8005b78 <_dtoa_r+0x6d8>
 8005ae2:	bf00      	nop
 8005ae4:	08007660 	.word	0x08007660
 8005ae8:	08007638 	.word	0x08007638
 8005aec:	3ff00000 	.word	0x3ff00000
 8005af0:	40240000 	.word	0x40240000
 8005af4:	401c0000 	.word	0x401c0000
 8005af8:	40140000 	.word	0x40140000
 8005afc:	3fe00000 	.word	0x3fe00000
 8005b00:	4baf      	ldr	r3, [pc, #700]	; (8005dc0 <_dtoa_r+0x920>)
 8005b02:	f7fa fda1 	bl	8000648 <__aeabi_dmul>
 8005b06:	4606      	mov	r6, r0
 8005b08:	460f      	mov	r7, r1
 8005b0a:	e7ac      	b.n	8005a66 <_dtoa_r+0x5c6>
 8005b0c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b10:	9d00      	ldr	r5, [sp, #0]
 8005b12:	4642      	mov	r2, r8
 8005b14:	464b      	mov	r3, r9
 8005b16:	4630      	mov	r0, r6
 8005b18:	4639      	mov	r1, r7
 8005b1a:	f7fa febf 	bl	800089c <__aeabi_ddiv>
 8005b1e:	f7fb f843 	bl	8000ba8 <__aeabi_d2iz>
 8005b22:	9002      	str	r0, [sp, #8]
 8005b24:	f7fa fd26 	bl	8000574 <__aeabi_i2d>
 8005b28:	4642      	mov	r2, r8
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	f7fa fd8c 	bl	8000648 <__aeabi_dmul>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4630      	mov	r0, r6
 8005b36:	4639      	mov	r1, r7
 8005b38:	f7fa fbce 	bl	80002d8 <__aeabi_dsub>
 8005b3c:	9e02      	ldr	r6, [sp, #8]
 8005b3e:	9f01      	ldr	r7, [sp, #4]
 8005b40:	3630      	adds	r6, #48	; 0x30
 8005b42:	f805 6b01 	strb.w	r6, [r5], #1
 8005b46:	9e00      	ldr	r6, [sp, #0]
 8005b48:	1bae      	subs	r6, r5, r6
 8005b4a:	42b7      	cmp	r7, r6
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	d137      	bne.n	8005bc2 <_dtoa_r+0x722>
 8005b52:	f7fa fbc3 	bl	80002dc <__adddf3>
 8005b56:	4642      	mov	r2, r8
 8005b58:	464b      	mov	r3, r9
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	460f      	mov	r7, r1
 8005b5e:	f7fb f803 	bl	8000b68 <__aeabi_dcmpgt>
 8005b62:	b9c8      	cbnz	r0, 8005b98 <_dtoa_r+0x6f8>
 8005b64:	4642      	mov	r2, r8
 8005b66:	464b      	mov	r3, r9
 8005b68:	4630      	mov	r0, r6
 8005b6a:	4639      	mov	r1, r7
 8005b6c:	f7fa ffd4 	bl	8000b18 <__aeabi_dcmpeq>
 8005b70:	b110      	cbz	r0, 8005b78 <_dtoa_r+0x6d8>
 8005b72:	9b02      	ldr	r3, [sp, #8]
 8005b74:	07d9      	lsls	r1, r3, #31
 8005b76:	d40f      	bmi.n	8005b98 <_dtoa_r+0x6f8>
 8005b78:	4620      	mov	r0, r4
 8005b7a:	4659      	mov	r1, fp
 8005b7c:	f000 fce8 	bl	8006550 <_Bfree>
 8005b80:	2300      	movs	r3, #0
 8005b82:	702b      	strb	r3, [r5, #0]
 8005b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b86:	f10a 0001 	add.w	r0, sl, #1
 8005b8a:	6018      	str	r0, [r3, #0]
 8005b8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f43f acd8 	beq.w	8005544 <_dtoa_r+0xa4>
 8005b94:	601d      	str	r5, [r3, #0]
 8005b96:	e4d5      	b.n	8005544 <_dtoa_r+0xa4>
 8005b98:	f8cd a01c 	str.w	sl, [sp, #28]
 8005b9c:	462b      	mov	r3, r5
 8005b9e:	461d      	mov	r5, r3
 8005ba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ba4:	2a39      	cmp	r2, #57	; 0x39
 8005ba6:	d108      	bne.n	8005bba <_dtoa_r+0x71a>
 8005ba8:	9a00      	ldr	r2, [sp, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d1f7      	bne.n	8005b9e <_dtoa_r+0x6fe>
 8005bae:	9a07      	ldr	r2, [sp, #28]
 8005bb0:	9900      	ldr	r1, [sp, #0]
 8005bb2:	3201      	adds	r2, #1
 8005bb4:	9207      	str	r2, [sp, #28]
 8005bb6:	2230      	movs	r2, #48	; 0x30
 8005bb8:	700a      	strb	r2, [r1, #0]
 8005bba:	781a      	ldrb	r2, [r3, #0]
 8005bbc:	3201      	adds	r2, #1
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	e78c      	b.n	8005adc <_dtoa_r+0x63c>
 8005bc2:	4b7f      	ldr	r3, [pc, #508]	; (8005dc0 <_dtoa_r+0x920>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f7fa fd3f 	bl	8000648 <__aeabi_dmul>
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2300      	movs	r3, #0
 8005bce:	4606      	mov	r6, r0
 8005bd0:	460f      	mov	r7, r1
 8005bd2:	f7fa ffa1 	bl	8000b18 <__aeabi_dcmpeq>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d09b      	beq.n	8005b12 <_dtoa_r+0x672>
 8005bda:	e7cd      	b.n	8005b78 <_dtoa_r+0x6d8>
 8005bdc:	9a08      	ldr	r2, [sp, #32]
 8005bde:	2a00      	cmp	r2, #0
 8005be0:	f000 80c4 	beq.w	8005d6c <_dtoa_r+0x8cc>
 8005be4:	9a05      	ldr	r2, [sp, #20]
 8005be6:	2a01      	cmp	r2, #1
 8005be8:	f300 80a8 	bgt.w	8005d3c <_dtoa_r+0x89c>
 8005bec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005bee:	2a00      	cmp	r2, #0
 8005bf0:	f000 80a0 	beq.w	8005d34 <_dtoa_r+0x894>
 8005bf4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005bf8:	9e06      	ldr	r6, [sp, #24]
 8005bfa:	4645      	mov	r5, r8
 8005bfc:	9a04      	ldr	r2, [sp, #16]
 8005bfe:	2101      	movs	r1, #1
 8005c00:	441a      	add	r2, r3
 8005c02:	4620      	mov	r0, r4
 8005c04:	4498      	add	r8, r3
 8005c06:	9204      	str	r2, [sp, #16]
 8005c08:	f000 fd5e 	bl	80066c8 <__i2b>
 8005c0c:	4607      	mov	r7, r0
 8005c0e:	2d00      	cmp	r5, #0
 8005c10:	dd0b      	ble.n	8005c2a <_dtoa_r+0x78a>
 8005c12:	9b04      	ldr	r3, [sp, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	dd08      	ble.n	8005c2a <_dtoa_r+0x78a>
 8005c18:	42ab      	cmp	r3, r5
 8005c1a:	9a04      	ldr	r2, [sp, #16]
 8005c1c:	bfa8      	it	ge
 8005c1e:	462b      	movge	r3, r5
 8005c20:	eba8 0803 	sub.w	r8, r8, r3
 8005c24:	1aed      	subs	r5, r5, r3
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	9304      	str	r3, [sp, #16]
 8005c2a:	9b06      	ldr	r3, [sp, #24]
 8005c2c:	b1fb      	cbz	r3, 8005c6e <_dtoa_r+0x7ce>
 8005c2e:	9b08      	ldr	r3, [sp, #32]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 809f 	beq.w	8005d74 <_dtoa_r+0x8d4>
 8005c36:	2e00      	cmp	r6, #0
 8005c38:	dd11      	ble.n	8005c5e <_dtoa_r+0x7be>
 8005c3a:	4639      	mov	r1, r7
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f000 fdfe 	bl	8006840 <__pow5mult>
 8005c44:	465a      	mov	r2, fp
 8005c46:	4601      	mov	r1, r0
 8005c48:	4607      	mov	r7, r0
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 fd52 	bl	80066f4 <__multiply>
 8005c50:	4659      	mov	r1, fp
 8005c52:	9007      	str	r0, [sp, #28]
 8005c54:	4620      	mov	r0, r4
 8005c56:	f000 fc7b 	bl	8006550 <_Bfree>
 8005c5a:	9b07      	ldr	r3, [sp, #28]
 8005c5c:	469b      	mov	fp, r3
 8005c5e:	9b06      	ldr	r3, [sp, #24]
 8005c60:	1b9a      	subs	r2, r3, r6
 8005c62:	d004      	beq.n	8005c6e <_dtoa_r+0x7ce>
 8005c64:	4659      	mov	r1, fp
 8005c66:	4620      	mov	r0, r4
 8005c68:	f000 fdea 	bl	8006840 <__pow5mult>
 8005c6c:	4683      	mov	fp, r0
 8005c6e:	2101      	movs	r1, #1
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 fd29 	bl	80066c8 <__i2b>
 8005c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	dd7c      	ble.n	8005d78 <_dtoa_r+0x8d8>
 8005c7e:	461a      	mov	r2, r3
 8005c80:	4601      	mov	r1, r0
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 fddc 	bl	8006840 <__pow5mult>
 8005c88:	9b05      	ldr	r3, [sp, #20]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	dd76      	ble.n	8005d7e <_dtoa_r+0x8de>
 8005c90:	2300      	movs	r3, #0
 8005c92:	9306      	str	r3, [sp, #24]
 8005c94:	6933      	ldr	r3, [r6, #16]
 8005c96:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c9a:	6918      	ldr	r0, [r3, #16]
 8005c9c:	f000 fcc4 	bl	8006628 <__hi0bits>
 8005ca0:	f1c0 0020 	rsb	r0, r0, #32
 8005ca4:	9b04      	ldr	r3, [sp, #16]
 8005ca6:	4418      	add	r0, r3
 8005ca8:	f010 001f 	ands.w	r0, r0, #31
 8005cac:	f000 8086 	beq.w	8005dbc <_dtoa_r+0x91c>
 8005cb0:	f1c0 0320 	rsb	r3, r0, #32
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	dd7f      	ble.n	8005db8 <_dtoa_r+0x918>
 8005cb8:	f1c0 001c 	rsb	r0, r0, #28
 8005cbc:	9b04      	ldr	r3, [sp, #16]
 8005cbe:	4403      	add	r3, r0
 8005cc0:	4480      	add	r8, r0
 8005cc2:	4405      	add	r5, r0
 8005cc4:	9304      	str	r3, [sp, #16]
 8005cc6:	f1b8 0f00 	cmp.w	r8, #0
 8005cca:	dd05      	ble.n	8005cd8 <_dtoa_r+0x838>
 8005ccc:	4659      	mov	r1, fp
 8005cce:	4642      	mov	r2, r8
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f000 fe0f 	bl	80068f4 <__lshift>
 8005cd6:	4683      	mov	fp, r0
 8005cd8:	9b04      	ldr	r3, [sp, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	dd05      	ble.n	8005cea <_dtoa_r+0x84a>
 8005cde:	4631      	mov	r1, r6
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f000 fe06 	bl	80068f4 <__lshift>
 8005ce8:	4606      	mov	r6, r0
 8005cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d069      	beq.n	8005dc4 <_dtoa_r+0x924>
 8005cf0:	4631      	mov	r1, r6
 8005cf2:	4658      	mov	r0, fp
 8005cf4:	f000 fe6a 	bl	80069cc <__mcmp>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	da63      	bge.n	8005dc4 <_dtoa_r+0x924>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	4659      	mov	r1, fp
 8005d00:	220a      	movs	r2, #10
 8005d02:	4620      	mov	r0, r4
 8005d04:	f000 fc46 	bl	8006594 <__multadd>
 8005d08:	9b08      	ldr	r3, [sp, #32]
 8005d0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d0e:	4683      	mov	fp, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 818f 	beq.w	8006034 <_dtoa_r+0xb94>
 8005d16:	4639      	mov	r1, r7
 8005d18:	2300      	movs	r3, #0
 8005d1a:	220a      	movs	r2, #10
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f000 fc39 	bl	8006594 <__multadd>
 8005d22:	f1b9 0f00 	cmp.w	r9, #0
 8005d26:	4607      	mov	r7, r0
 8005d28:	f300 808e 	bgt.w	8005e48 <_dtoa_r+0x9a8>
 8005d2c:	9b05      	ldr	r3, [sp, #20]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	dc50      	bgt.n	8005dd4 <_dtoa_r+0x934>
 8005d32:	e089      	b.n	8005e48 <_dtoa_r+0x9a8>
 8005d34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d3a:	e75d      	b.n	8005bf8 <_dtoa_r+0x758>
 8005d3c:	9b01      	ldr	r3, [sp, #4]
 8005d3e:	1e5e      	subs	r6, r3, #1
 8005d40:	9b06      	ldr	r3, [sp, #24]
 8005d42:	42b3      	cmp	r3, r6
 8005d44:	bfbf      	itttt	lt
 8005d46:	9b06      	ldrlt	r3, [sp, #24]
 8005d48:	9606      	strlt	r6, [sp, #24]
 8005d4a:	1af2      	sublt	r2, r6, r3
 8005d4c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005d4e:	bfb6      	itet	lt
 8005d50:	189b      	addlt	r3, r3, r2
 8005d52:	1b9e      	subge	r6, r3, r6
 8005d54:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005d56:	9b01      	ldr	r3, [sp, #4]
 8005d58:	bfb8      	it	lt
 8005d5a:	2600      	movlt	r6, #0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bfb5      	itete	lt
 8005d60:	eba8 0503 	sublt.w	r5, r8, r3
 8005d64:	9b01      	ldrge	r3, [sp, #4]
 8005d66:	2300      	movlt	r3, #0
 8005d68:	4645      	movge	r5, r8
 8005d6a:	e747      	b.n	8005bfc <_dtoa_r+0x75c>
 8005d6c:	9e06      	ldr	r6, [sp, #24]
 8005d6e:	9f08      	ldr	r7, [sp, #32]
 8005d70:	4645      	mov	r5, r8
 8005d72:	e74c      	b.n	8005c0e <_dtoa_r+0x76e>
 8005d74:	9a06      	ldr	r2, [sp, #24]
 8005d76:	e775      	b.n	8005c64 <_dtoa_r+0x7c4>
 8005d78:	9b05      	ldr	r3, [sp, #20]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	dc18      	bgt.n	8005db0 <_dtoa_r+0x910>
 8005d7e:	9b02      	ldr	r3, [sp, #8]
 8005d80:	b9b3      	cbnz	r3, 8005db0 <_dtoa_r+0x910>
 8005d82:	9b03      	ldr	r3, [sp, #12]
 8005d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d88:	b9a3      	cbnz	r3, 8005db4 <_dtoa_r+0x914>
 8005d8a:	9b03      	ldr	r3, [sp, #12]
 8005d8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d90:	0d1b      	lsrs	r3, r3, #20
 8005d92:	051b      	lsls	r3, r3, #20
 8005d94:	b12b      	cbz	r3, 8005da2 <_dtoa_r+0x902>
 8005d96:	9b04      	ldr	r3, [sp, #16]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	9304      	str	r3, [sp, #16]
 8005d9c:	f108 0801 	add.w	r8, r8, #1
 8005da0:	2301      	movs	r3, #1
 8005da2:	9306      	str	r3, [sp, #24]
 8005da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f47f af74 	bne.w	8005c94 <_dtoa_r+0x7f4>
 8005dac:	2001      	movs	r0, #1
 8005dae:	e779      	b.n	8005ca4 <_dtoa_r+0x804>
 8005db0:	2300      	movs	r3, #0
 8005db2:	e7f6      	b.n	8005da2 <_dtoa_r+0x902>
 8005db4:	9b02      	ldr	r3, [sp, #8]
 8005db6:	e7f4      	b.n	8005da2 <_dtoa_r+0x902>
 8005db8:	d085      	beq.n	8005cc6 <_dtoa_r+0x826>
 8005dba:	4618      	mov	r0, r3
 8005dbc:	301c      	adds	r0, #28
 8005dbe:	e77d      	b.n	8005cbc <_dtoa_r+0x81c>
 8005dc0:	40240000 	.word	0x40240000
 8005dc4:	9b01      	ldr	r3, [sp, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	dc38      	bgt.n	8005e3c <_dtoa_r+0x99c>
 8005dca:	9b05      	ldr	r3, [sp, #20]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	dd35      	ble.n	8005e3c <_dtoa_r+0x99c>
 8005dd0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005dd4:	f1b9 0f00 	cmp.w	r9, #0
 8005dd8:	d10d      	bne.n	8005df6 <_dtoa_r+0x956>
 8005dda:	4631      	mov	r1, r6
 8005ddc:	464b      	mov	r3, r9
 8005dde:	2205      	movs	r2, #5
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 fbd7 	bl	8006594 <__multadd>
 8005de6:	4601      	mov	r1, r0
 8005de8:	4606      	mov	r6, r0
 8005dea:	4658      	mov	r0, fp
 8005dec:	f000 fdee 	bl	80069cc <__mcmp>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	f73f adbd 	bgt.w	8005970 <_dtoa_r+0x4d0>
 8005df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df8:	9d00      	ldr	r5, [sp, #0]
 8005dfa:	ea6f 0a03 	mvn.w	sl, r3
 8005dfe:	f04f 0800 	mov.w	r8, #0
 8005e02:	4631      	mov	r1, r6
 8005e04:	4620      	mov	r0, r4
 8005e06:	f000 fba3 	bl	8006550 <_Bfree>
 8005e0a:	2f00      	cmp	r7, #0
 8005e0c:	f43f aeb4 	beq.w	8005b78 <_dtoa_r+0x6d8>
 8005e10:	f1b8 0f00 	cmp.w	r8, #0
 8005e14:	d005      	beq.n	8005e22 <_dtoa_r+0x982>
 8005e16:	45b8      	cmp	r8, r7
 8005e18:	d003      	beq.n	8005e22 <_dtoa_r+0x982>
 8005e1a:	4641      	mov	r1, r8
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f000 fb97 	bl	8006550 <_Bfree>
 8005e22:	4639      	mov	r1, r7
 8005e24:	4620      	mov	r0, r4
 8005e26:	f000 fb93 	bl	8006550 <_Bfree>
 8005e2a:	e6a5      	b.n	8005b78 <_dtoa_r+0x6d8>
 8005e2c:	2600      	movs	r6, #0
 8005e2e:	4637      	mov	r7, r6
 8005e30:	e7e1      	b.n	8005df6 <_dtoa_r+0x956>
 8005e32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005e34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005e38:	4637      	mov	r7, r6
 8005e3a:	e599      	b.n	8005970 <_dtoa_r+0x4d0>
 8005e3c:	9b08      	ldr	r3, [sp, #32]
 8005e3e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 80fd 	beq.w	8006042 <_dtoa_r+0xba2>
 8005e48:	2d00      	cmp	r5, #0
 8005e4a:	dd05      	ble.n	8005e58 <_dtoa_r+0x9b8>
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	462a      	mov	r2, r5
 8005e50:	4620      	mov	r0, r4
 8005e52:	f000 fd4f 	bl	80068f4 <__lshift>
 8005e56:	4607      	mov	r7, r0
 8005e58:	9b06      	ldr	r3, [sp, #24]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d05c      	beq.n	8005f18 <_dtoa_r+0xa78>
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	4620      	mov	r0, r4
 8005e62:	f000 fb35 	bl	80064d0 <_Balloc>
 8005e66:	4605      	mov	r5, r0
 8005e68:	b928      	cbnz	r0, 8005e76 <_dtoa_r+0x9d6>
 8005e6a:	4b80      	ldr	r3, [pc, #512]	; (800606c <_dtoa_r+0xbcc>)
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e72:	f7ff bb2e 	b.w	80054d2 <_dtoa_r+0x32>
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	3202      	adds	r2, #2
 8005e7a:	0092      	lsls	r2, r2, #2
 8005e7c:	f107 010c 	add.w	r1, r7, #12
 8005e80:	300c      	adds	r0, #12
 8005e82:	f7fe fcb3 	bl	80047ec <memcpy>
 8005e86:	2201      	movs	r2, #1
 8005e88:	4629      	mov	r1, r5
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f000 fd32 	bl	80068f4 <__lshift>
 8005e90:	9b00      	ldr	r3, [sp, #0]
 8005e92:	3301      	adds	r3, #1
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	9b00      	ldr	r3, [sp, #0]
 8005e98:	444b      	add	r3, r9
 8005e9a:	9307      	str	r3, [sp, #28]
 8005e9c:	9b02      	ldr	r3, [sp, #8]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	46b8      	mov	r8, r7
 8005ea4:	9306      	str	r3, [sp, #24]
 8005ea6:	4607      	mov	r7, r0
 8005ea8:	9b01      	ldr	r3, [sp, #4]
 8005eaa:	4631      	mov	r1, r6
 8005eac:	3b01      	subs	r3, #1
 8005eae:	4658      	mov	r0, fp
 8005eb0:	9302      	str	r3, [sp, #8]
 8005eb2:	f7ff fa67 	bl	8005384 <quorem>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	3330      	adds	r3, #48	; 0x30
 8005eba:	9004      	str	r0, [sp, #16]
 8005ebc:	4641      	mov	r1, r8
 8005ebe:	4658      	mov	r0, fp
 8005ec0:	9308      	str	r3, [sp, #32]
 8005ec2:	f000 fd83 	bl	80069cc <__mcmp>
 8005ec6:	463a      	mov	r2, r7
 8005ec8:	4681      	mov	r9, r0
 8005eca:	4631      	mov	r1, r6
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f000 fd99 	bl	8006a04 <__mdiff>
 8005ed2:	68c2      	ldr	r2, [r0, #12]
 8005ed4:	9b08      	ldr	r3, [sp, #32]
 8005ed6:	4605      	mov	r5, r0
 8005ed8:	bb02      	cbnz	r2, 8005f1c <_dtoa_r+0xa7c>
 8005eda:	4601      	mov	r1, r0
 8005edc:	4658      	mov	r0, fp
 8005ede:	f000 fd75 	bl	80069cc <__mcmp>
 8005ee2:	9b08      	ldr	r3, [sp, #32]
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	4620      	mov	r0, r4
 8005eea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005eee:	f000 fb2f 	bl	8006550 <_Bfree>
 8005ef2:	9b05      	ldr	r3, [sp, #20]
 8005ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ef6:	9d01      	ldr	r5, [sp, #4]
 8005ef8:	ea43 0102 	orr.w	r1, r3, r2
 8005efc:	9b06      	ldr	r3, [sp, #24]
 8005efe:	430b      	orrs	r3, r1
 8005f00:	9b08      	ldr	r3, [sp, #32]
 8005f02:	d10d      	bne.n	8005f20 <_dtoa_r+0xa80>
 8005f04:	2b39      	cmp	r3, #57	; 0x39
 8005f06:	d029      	beq.n	8005f5c <_dtoa_r+0xabc>
 8005f08:	f1b9 0f00 	cmp.w	r9, #0
 8005f0c:	dd01      	ble.n	8005f12 <_dtoa_r+0xa72>
 8005f0e:	9b04      	ldr	r3, [sp, #16]
 8005f10:	3331      	adds	r3, #49	; 0x31
 8005f12:	9a02      	ldr	r2, [sp, #8]
 8005f14:	7013      	strb	r3, [r2, #0]
 8005f16:	e774      	b.n	8005e02 <_dtoa_r+0x962>
 8005f18:	4638      	mov	r0, r7
 8005f1a:	e7b9      	b.n	8005e90 <_dtoa_r+0x9f0>
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	e7e2      	b.n	8005ee6 <_dtoa_r+0xa46>
 8005f20:	f1b9 0f00 	cmp.w	r9, #0
 8005f24:	db06      	blt.n	8005f34 <_dtoa_r+0xa94>
 8005f26:	9905      	ldr	r1, [sp, #20]
 8005f28:	ea41 0909 	orr.w	r9, r1, r9
 8005f2c:	9906      	ldr	r1, [sp, #24]
 8005f2e:	ea59 0101 	orrs.w	r1, r9, r1
 8005f32:	d120      	bne.n	8005f76 <_dtoa_r+0xad6>
 8005f34:	2a00      	cmp	r2, #0
 8005f36:	ddec      	ble.n	8005f12 <_dtoa_r+0xa72>
 8005f38:	4659      	mov	r1, fp
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	f000 fcd8 	bl	80068f4 <__lshift>
 8005f44:	4631      	mov	r1, r6
 8005f46:	4683      	mov	fp, r0
 8005f48:	f000 fd40 	bl	80069cc <__mcmp>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	9b01      	ldr	r3, [sp, #4]
 8005f50:	dc02      	bgt.n	8005f58 <_dtoa_r+0xab8>
 8005f52:	d1de      	bne.n	8005f12 <_dtoa_r+0xa72>
 8005f54:	07da      	lsls	r2, r3, #31
 8005f56:	d5dc      	bpl.n	8005f12 <_dtoa_r+0xa72>
 8005f58:	2b39      	cmp	r3, #57	; 0x39
 8005f5a:	d1d8      	bne.n	8005f0e <_dtoa_r+0xa6e>
 8005f5c:	9a02      	ldr	r2, [sp, #8]
 8005f5e:	2339      	movs	r3, #57	; 0x39
 8005f60:	7013      	strb	r3, [r2, #0]
 8005f62:	462b      	mov	r3, r5
 8005f64:	461d      	mov	r5, r3
 8005f66:	3b01      	subs	r3, #1
 8005f68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005f6c:	2a39      	cmp	r2, #57	; 0x39
 8005f6e:	d050      	beq.n	8006012 <_dtoa_r+0xb72>
 8005f70:	3201      	adds	r2, #1
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	e745      	b.n	8005e02 <_dtoa_r+0x962>
 8005f76:	2a00      	cmp	r2, #0
 8005f78:	dd03      	ble.n	8005f82 <_dtoa_r+0xae2>
 8005f7a:	2b39      	cmp	r3, #57	; 0x39
 8005f7c:	d0ee      	beq.n	8005f5c <_dtoa_r+0xabc>
 8005f7e:	3301      	adds	r3, #1
 8005f80:	e7c7      	b.n	8005f12 <_dtoa_r+0xa72>
 8005f82:	9a01      	ldr	r2, [sp, #4]
 8005f84:	9907      	ldr	r1, [sp, #28]
 8005f86:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f8a:	428a      	cmp	r2, r1
 8005f8c:	d02a      	beq.n	8005fe4 <_dtoa_r+0xb44>
 8005f8e:	4659      	mov	r1, fp
 8005f90:	2300      	movs	r3, #0
 8005f92:	220a      	movs	r2, #10
 8005f94:	4620      	mov	r0, r4
 8005f96:	f000 fafd 	bl	8006594 <__multadd>
 8005f9a:	45b8      	cmp	r8, r7
 8005f9c:	4683      	mov	fp, r0
 8005f9e:	f04f 0300 	mov.w	r3, #0
 8005fa2:	f04f 020a 	mov.w	r2, #10
 8005fa6:	4641      	mov	r1, r8
 8005fa8:	4620      	mov	r0, r4
 8005faa:	d107      	bne.n	8005fbc <_dtoa_r+0xb1c>
 8005fac:	f000 faf2 	bl	8006594 <__multadd>
 8005fb0:	4680      	mov	r8, r0
 8005fb2:	4607      	mov	r7, r0
 8005fb4:	9b01      	ldr	r3, [sp, #4]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	e775      	b.n	8005ea8 <_dtoa_r+0xa08>
 8005fbc:	f000 faea 	bl	8006594 <__multadd>
 8005fc0:	4639      	mov	r1, r7
 8005fc2:	4680      	mov	r8, r0
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	220a      	movs	r2, #10
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 fae3 	bl	8006594 <__multadd>
 8005fce:	4607      	mov	r7, r0
 8005fd0:	e7f0      	b.n	8005fb4 <_dtoa_r+0xb14>
 8005fd2:	f1b9 0f00 	cmp.w	r9, #0
 8005fd6:	9a00      	ldr	r2, [sp, #0]
 8005fd8:	bfcc      	ite	gt
 8005fda:	464d      	movgt	r5, r9
 8005fdc:	2501      	movle	r5, #1
 8005fde:	4415      	add	r5, r2
 8005fe0:	f04f 0800 	mov.w	r8, #0
 8005fe4:	4659      	mov	r1, fp
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	4620      	mov	r0, r4
 8005fea:	9301      	str	r3, [sp, #4]
 8005fec:	f000 fc82 	bl	80068f4 <__lshift>
 8005ff0:	4631      	mov	r1, r6
 8005ff2:	4683      	mov	fp, r0
 8005ff4:	f000 fcea 	bl	80069cc <__mcmp>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	dcb2      	bgt.n	8005f62 <_dtoa_r+0xac2>
 8005ffc:	d102      	bne.n	8006004 <_dtoa_r+0xb64>
 8005ffe:	9b01      	ldr	r3, [sp, #4]
 8006000:	07db      	lsls	r3, r3, #31
 8006002:	d4ae      	bmi.n	8005f62 <_dtoa_r+0xac2>
 8006004:	462b      	mov	r3, r5
 8006006:	461d      	mov	r5, r3
 8006008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800600c:	2a30      	cmp	r2, #48	; 0x30
 800600e:	d0fa      	beq.n	8006006 <_dtoa_r+0xb66>
 8006010:	e6f7      	b.n	8005e02 <_dtoa_r+0x962>
 8006012:	9a00      	ldr	r2, [sp, #0]
 8006014:	429a      	cmp	r2, r3
 8006016:	d1a5      	bne.n	8005f64 <_dtoa_r+0xac4>
 8006018:	f10a 0a01 	add.w	sl, sl, #1
 800601c:	2331      	movs	r3, #49	; 0x31
 800601e:	e779      	b.n	8005f14 <_dtoa_r+0xa74>
 8006020:	4b13      	ldr	r3, [pc, #76]	; (8006070 <_dtoa_r+0xbd0>)
 8006022:	f7ff baaf 	b.w	8005584 <_dtoa_r+0xe4>
 8006026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006028:	2b00      	cmp	r3, #0
 800602a:	f47f aa86 	bne.w	800553a <_dtoa_r+0x9a>
 800602e:	4b11      	ldr	r3, [pc, #68]	; (8006074 <_dtoa_r+0xbd4>)
 8006030:	f7ff baa8 	b.w	8005584 <_dtoa_r+0xe4>
 8006034:	f1b9 0f00 	cmp.w	r9, #0
 8006038:	dc03      	bgt.n	8006042 <_dtoa_r+0xba2>
 800603a:	9b05      	ldr	r3, [sp, #20]
 800603c:	2b02      	cmp	r3, #2
 800603e:	f73f aec9 	bgt.w	8005dd4 <_dtoa_r+0x934>
 8006042:	9d00      	ldr	r5, [sp, #0]
 8006044:	4631      	mov	r1, r6
 8006046:	4658      	mov	r0, fp
 8006048:	f7ff f99c 	bl	8005384 <quorem>
 800604c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006050:	f805 3b01 	strb.w	r3, [r5], #1
 8006054:	9a00      	ldr	r2, [sp, #0]
 8006056:	1aaa      	subs	r2, r5, r2
 8006058:	4591      	cmp	r9, r2
 800605a:	ddba      	ble.n	8005fd2 <_dtoa_r+0xb32>
 800605c:	4659      	mov	r1, fp
 800605e:	2300      	movs	r3, #0
 8006060:	220a      	movs	r2, #10
 8006062:	4620      	mov	r0, r4
 8006064:	f000 fa96 	bl	8006594 <__multadd>
 8006068:	4683      	mov	fp, r0
 800606a:	e7eb      	b.n	8006044 <_dtoa_r+0xba4>
 800606c:	08007563 	.word	0x08007563
 8006070:	080074bc 	.word	0x080074bc
 8006074:	080074e0 	.word	0x080074e0

08006078 <__sflush_r>:
 8006078:	898a      	ldrh	r2, [r1, #12]
 800607a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800607e:	4605      	mov	r5, r0
 8006080:	0710      	lsls	r0, r2, #28
 8006082:	460c      	mov	r4, r1
 8006084:	d458      	bmi.n	8006138 <__sflush_r+0xc0>
 8006086:	684b      	ldr	r3, [r1, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	dc05      	bgt.n	8006098 <__sflush_r+0x20>
 800608c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800608e:	2b00      	cmp	r3, #0
 8006090:	dc02      	bgt.n	8006098 <__sflush_r+0x20>
 8006092:	2000      	movs	r0, #0
 8006094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006098:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800609a:	2e00      	cmp	r6, #0
 800609c:	d0f9      	beq.n	8006092 <__sflush_r+0x1a>
 800609e:	2300      	movs	r3, #0
 80060a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060a4:	682f      	ldr	r7, [r5, #0]
 80060a6:	602b      	str	r3, [r5, #0]
 80060a8:	d032      	beq.n	8006110 <__sflush_r+0x98>
 80060aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060ac:	89a3      	ldrh	r3, [r4, #12]
 80060ae:	075a      	lsls	r2, r3, #29
 80060b0:	d505      	bpl.n	80060be <__sflush_r+0x46>
 80060b2:	6863      	ldr	r3, [r4, #4]
 80060b4:	1ac0      	subs	r0, r0, r3
 80060b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060b8:	b10b      	cbz	r3, 80060be <__sflush_r+0x46>
 80060ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060bc:	1ac0      	subs	r0, r0, r3
 80060be:	2300      	movs	r3, #0
 80060c0:	4602      	mov	r2, r0
 80060c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060c4:	6a21      	ldr	r1, [r4, #32]
 80060c6:	4628      	mov	r0, r5
 80060c8:	47b0      	blx	r6
 80060ca:	1c43      	adds	r3, r0, #1
 80060cc:	89a3      	ldrh	r3, [r4, #12]
 80060ce:	d106      	bne.n	80060de <__sflush_r+0x66>
 80060d0:	6829      	ldr	r1, [r5, #0]
 80060d2:	291d      	cmp	r1, #29
 80060d4:	d82c      	bhi.n	8006130 <__sflush_r+0xb8>
 80060d6:	4a2a      	ldr	r2, [pc, #168]	; (8006180 <__sflush_r+0x108>)
 80060d8:	40ca      	lsrs	r2, r1
 80060da:	07d6      	lsls	r6, r2, #31
 80060dc:	d528      	bpl.n	8006130 <__sflush_r+0xb8>
 80060de:	2200      	movs	r2, #0
 80060e0:	6062      	str	r2, [r4, #4]
 80060e2:	04d9      	lsls	r1, r3, #19
 80060e4:	6922      	ldr	r2, [r4, #16]
 80060e6:	6022      	str	r2, [r4, #0]
 80060e8:	d504      	bpl.n	80060f4 <__sflush_r+0x7c>
 80060ea:	1c42      	adds	r2, r0, #1
 80060ec:	d101      	bne.n	80060f2 <__sflush_r+0x7a>
 80060ee:	682b      	ldr	r3, [r5, #0]
 80060f0:	b903      	cbnz	r3, 80060f4 <__sflush_r+0x7c>
 80060f2:	6560      	str	r0, [r4, #84]	; 0x54
 80060f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060f6:	602f      	str	r7, [r5, #0]
 80060f8:	2900      	cmp	r1, #0
 80060fa:	d0ca      	beq.n	8006092 <__sflush_r+0x1a>
 80060fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006100:	4299      	cmp	r1, r3
 8006102:	d002      	beq.n	800610a <__sflush_r+0x92>
 8006104:	4628      	mov	r0, r5
 8006106:	f000 fd71 	bl	8006bec <_free_r>
 800610a:	2000      	movs	r0, #0
 800610c:	6360      	str	r0, [r4, #52]	; 0x34
 800610e:	e7c1      	b.n	8006094 <__sflush_r+0x1c>
 8006110:	6a21      	ldr	r1, [r4, #32]
 8006112:	2301      	movs	r3, #1
 8006114:	4628      	mov	r0, r5
 8006116:	47b0      	blx	r6
 8006118:	1c41      	adds	r1, r0, #1
 800611a:	d1c7      	bne.n	80060ac <__sflush_r+0x34>
 800611c:	682b      	ldr	r3, [r5, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0c4      	beq.n	80060ac <__sflush_r+0x34>
 8006122:	2b1d      	cmp	r3, #29
 8006124:	d001      	beq.n	800612a <__sflush_r+0xb2>
 8006126:	2b16      	cmp	r3, #22
 8006128:	d101      	bne.n	800612e <__sflush_r+0xb6>
 800612a:	602f      	str	r7, [r5, #0]
 800612c:	e7b1      	b.n	8006092 <__sflush_r+0x1a>
 800612e:	89a3      	ldrh	r3, [r4, #12]
 8006130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006134:	81a3      	strh	r3, [r4, #12]
 8006136:	e7ad      	b.n	8006094 <__sflush_r+0x1c>
 8006138:	690f      	ldr	r7, [r1, #16]
 800613a:	2f00      	cmp	r7, #0
 800613c:	d0a9      	beq.n	8006092 <__sflush_r+0x1a>
 800613e:	0793      	lsls	r3, r2, #30
 8006140:	680e      	ldr	r6, [r1, #0]
 8006142:	bf08      	it	eq
 8006144:	694b      	ldreq	r3, [r1, #20]
 8006146:	600f      	str	r7, [r1, #0]
 8006148:	bf18      	it	ne
 800614a:	2300      	movne	r3, #0
 800614c:	eba6 0807 	sub.w	r8, r6, r7
 8006150:	608b      	str	r3, [r1, #8]
 8006152:	f1b8 0f00 	cmp.w	r8, #0
 8006156:	dd9c      	ble.n	8006092 <__sflush_r+0x1a>
 8006158:	6a21      	ldr	r1, [r4, #32]
 800615a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800615c:	4643      	mov	r3, r8
 800615e:	463a      	mov	r2, r7
 8006160:	4628      	mov	r0, r5
 8006162:	47b0      	blx	r6
 8006164:	2800      	cmp	r0, #0
 8006166:	dc06      	bgt.n	8006176 <__sflush_r+0xfe>
 8006168:	89a3      	ldrh	r3, [r4, #12]
 800616a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800616e:	81a3      	strh	r3, [r4, #12]
 8006170:	f04f 30ff 	mov.w	r0, #4294967295
 8006174:	e78e      	b.n	8006094 <__sflush_r+0x1c>
 8006176:	4407      	add	r7, r0
 8006178:	eba8 0800 	sub.w	r8, r8, r0
 800617c:	e7e9      	b.n	8006152 <__sflush_r+0xda>
 800617e:	bf00      	nop
 8006180:	20400001 	.word	0x20400001

08006184 <_fflush_r>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	690b      	ldr	r3, [r1, #16]
 8006188:	4605      	mov	r5, r0
 800618a:	460c      	mov	r4, r1
 800618c:	b913      	cbnz	r3, 8006194 <_fflush_r+0x10>
 800618e:	2500      	movs	r5, #0
 8006190:	4628      	mov	r0, r5
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	b118      	cbz	r0, 800619e <_fflush_r+0x1a>
 8006196:	6983      	ldr	r3, [r0, #24]
 8006198:	b90b      	cbnz	r3, 800619e <_fflush_r+0x1a>
 800619a:	f000 f887 	bl	80062ac <__sinit>
 800619e:	4b14      	ldr	r3, [pc, #80]	; (80061f0 <_fflush_r+0x6c>)
 80061a0:	429c      	cmp	r4, r3
 80061a2:	d11b      	bne.n	80061dc <_fflush_r+0x58>
 80061a4:	686c      	ldr	r4, [r5, #4]
 80061a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0ef      	beq.n	800618e <_fflush_r+0xa>
 80061ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061b0:	07d0      	lsls	r0, r2, #31
 80061b2:	d404      	bmi.n	80061be <_fflush_r+0x3a>
 80061b4:	0599      	lsls	r1, r3, #22
 80061b6:	d402      	bmi.n	80061be <_fflush_r+0x3a>
 80061b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ba:	f000 f91a 	bl	80063f2 <__retarget_lock_acquire_recursive>
 80061be:	4628      	mov	r0, r5
 80061c0:	4621      	mov	r1, r4
 80061c2:	f7ff ff59 	bl	8006078 <__sflush_r>
 80061c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061c8:	07da      	lsls	r2, r3, #31
 80061ca:	4605      	mov	r5, r0
 80061cc:	d4e0      	bmi.n	8006190 <_fflush_r+0xc>
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	059b      	lsls	r3, r3, #22
 80061d2:	d4dd      	bmi.n	8006190 <_fflush_r+0xc>
 80061d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061d6:	f000 f90d 	bl	80063f4 <__retarget_lock_release_recursive>
 80061da:	e7d9      	b.n	8006190 <_fflush_r+0xc>
 80061dc:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <_fflush_r+0x70>)
 80061de:	429c      	cmp	r4, r3
 80061e0:	d101      	bne.n	80061e6 <_fflush_r+0x62>
 80061e2:	68ac      	ldr	r4, [r5, #8]
 80061e4:	e7df      	b.n	80061a6 <_fflush_r+0x22>
 80061e6:	4b04      	ldr	r3, [pc, #16]	; (80061f8 <_fflush_r+0x74>)
 80061e8:	429c      	cmp	r4, r3
 80061ea:	bf08      	it	eq
 80061ec:	68ec      	ldreq	r4, [r5, #12]
 80061ee:	e7da      	b.n	80061a6 <_fflush_r+0x22>
 80061f0:	08007594 	.word	0x08007594
 80061f4:	080075b4 	.word	0x080075b4
 80061f8:	08007574 	.word	0x08007574

080061fc <std>:
 80061fc:	2300      	movs	r3, #0
 80061fe:	b510      	push	{r4, lr}
 8006200:	4604      	mov	r4, r0
 8006202:	e9c0 3300 	strd	r3, r3, [r0]
 8006206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800620a:	6083      	str	r3, [r0, #8]
 800620c:	8181      	strh	r1, [r0, #12]
 800620e:	6643      	str	r3, [r0, #100]	; 0x64
 8006210:	81c2      	strh	r2, [r0, #14]
 8006212:	6183      	str	r3, [r0, #24]
 8006214:	4619      	mov	r1, r3
 8006216:	2208      	movs	r2, #8
 8006218:	305c      	adds	r0, #92	; 0x5c
 800621a:	f7fe faf5 	bl	8004808 <memset>
 800621e:	4b05      	ldr	r3, [pc, #20]	; (8006234 <std+0x38>)
 8006220:	6263      	str	r3, [r4, #36]	; 0x24
 8006222:	4b05      	ldr	r3, [pc, #20]	; (8006238 <std+0x3c>)
 8006224:	62a3      	str	r3, [r4, #40]	; 0x28
 8006226:	4b05      	ldr	r3, [pc, #20]	; (800623c <std+0x40>)
 8006228:	62e3      	str	r3, [r4, #44]	; 0x2c
 800622a:	4b05      	ldr	r3, [pc, #20]	; (8006240 <std+0x44>)
 800622c:	6224      	str	r4, [r4, #32]
 800622e:	6323      	str	r3, [r4, #48]	; 0x30
 8006230:	bd10      	pop	{r4, pc}
 8006232:	bf00      	nop
 8006234:	08006df1 	.word	0x08006df1
 8006238:	08006e13 	.word	0x08006e13
 800623c:	08006e4b 	.word	0x08006e4b
 8006240:	08006e6f 	.word	0x08006e6f

08006244 <_cleanup_r>:
 8006244:	4901      	ldr	r1, [pc, #4]	; (800624c <_cleanup_r+0x8>)
 8006246:	f000 b8af 	b.w	80063a8 <_fwalk_reent>
 800624a:	bf00      	nop
 800624c:	08006185 	.word	0x08006185

08006250 <__sfmoreglue>:
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	1e4a      	subs	r2, r1, #1
 8006254:	2568      	movs	r5, #104	; 0x68
 8006256:	4355      	muls	r5, r2
 8006258:	460e      	mov	r6, r1
 800625a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800625e:	f000 fd15 	bl	8006c8c <_malloc_r>
 8006262:	4604      	mov	r4, r0
 8006264:	b140      	cbz	r0, 8006278 <__sfmoreglue+0x28>
 8006266:	2100      	movs	r1, #0
 8006268:	e9c0 1600 	strd	r1, r6, [r0]
 800626c:	300c      	adds	r0, #12
 800626e:	60a0      	str	r0, [r4, #8]
 8006270:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006274:	f7fe fac8 	bl	8004808 <memset>
 8006278:	4620      	mov	r0, r4
 800627a:	bd70      	pop	{r4, r5, r6, pc}

0800627c <__sfp_lock_acquire>:
 800627c:	4801      	ldr	r0, [pc, #4]	; (8006284 <__sfp_lock_acquire+0x8>)
 800627e:	f000 b8b8 	b.w	80063f2 <__retarget_lock_acquire_recursive>
 8006282:	bf00      	nop
 8006284:	20004038 	.word	0x20004038

08006288 <__sfp_lock_release>:
 8006288:	4801      	ldr	r0, [pc, #4]	; (8006290 <__sfp_lock_release+0x8>)
 800628a:	f000 b8b3 	b.w	80063f4 <__retarget_lock_release_recursive>
 800628e:	bf00      	nop
 8006290:	20004038 	.word	0x20004038

08006294 <__sinit_lock_acquire>:
 8006294:	4801      	ldr	r0, [pc, #4]	; (800629c <__sinit_lock_acquire+0x8>)
 8006296:	f000 b8ac 	b.w	80063f2 <__retarget_lock_acquire_recursive>
 800629a:	bf00      	nop
 800629c:	20004033 	.word	0x20004033

080062a0 <__sinit_lock_release>:
 80062a0:	4801      	ldr	r0, [pc, #4]	; (80062a8 <__sinit_lock_release+0x8>)
 80062a2:	f000 b8a7 	b.w	80063f4 <__retarget_lock_release_recursive>
 80062a6:	bf00      	nop
 80062a8:	20004033 	.word	0x20004033

080062ac <__sinit>:
 80062ac:	b510      	push	{r4, lr}
 80062ae:	4604      	mov	r4, r0
 80062b0:	f7ff fff0 	bl	8006294 <__sinit_lock_acquire>
 80062b4:	69a3      	ldr	r3, [r4, #24]
 80062b6:	b11b      	cbz	r3, 80062c0 <__sinit+0x14>
 80062b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062bc:	f7ff bff0 	b.w	80062a0 <__sinit_lock_release>
 80062c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80062c4:	6523      	str	r3, [r4, #80]	; 0x50
 80062c6:	4b13      	ldr	r3, [pc, #76]	; (8006314 <__sinit+0x68>)
 80062c8:	4a13      	ldr	r2, [pc, #76]	; (8006318 <__sinit+0x6c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80062ce:	42a3      	cmp	r3, r4
 80062d0:	bf04      	itt	eq
 80062d2:	2301      	moveq	r3, #1
 80062d4:	61a3      	streq	r3, [r4, #24]
 80062d6:	4620      	mov	r0, r4
 80062d8:	f000 f820 	bl	800631c <__sfp>
 80062dc:	6060      	str	r0, [r4, #4]
 80062de:	4620      	mov	r0, r4
 80062e0:	f000 f81c 	bl	800631c <__sfp>
 80062e4:	60a0      	str	r0, [r4, #8]
 80062e6:	4620      	mov	r0, r4
 80062e8:	f000 f818 	bl	800631c <__sfp>
 80062ec:	2200      	movs	r2, #0
 80062ee:	60e0      	str	r0, [r4, #12]
 80062f0:	2104      	movs	r1, #4
 80062f2:	6860      	ldr	r0, [r4, #4]
 80062f4:	f7ff ff82 	bl	80061fc <std>
 80062f8:	68a0      	ldr	r0, [r4, #8]
 80062fa:	2201      	movs	r2, #1
 80062fc:	2109      	movs	r1, #9
 80062fe:	f7ff ff7d 	bl	80061fc <std>
 8006302:	68e0      	ldr	r0, [r4, #12]
 8006304:	2202      	movs	r2, #2
 8006306:	2112      	movs	r1, #18
 8006308:	f7ff ff78 	bl	80061fc <std>
 800630c:	2301      	movs	r3, #1
 800630e:	61a3      	str	r3, [r4, #24]
 8006310:	e7d2      	b.n	80062b8 <__sinit+0xc>
 8006312:	bf00      	nop
 8006314:	080074a8 	.word	0x080074a8
 8006318:	08006245 	.word	0x08006245

0800631c <__sfp>:
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	4607      	mov	r7, r0
 8006320:	f7ff ffac 	bl	800627c <__sfp_lock_acquire>
 8006324:	4b1e      	ldr	r3, [pc, #120]	; (80063a0 <__sfp+0x84>)
 8006326:	681e      	ldr	r6, [r3, #0]
 8006328:	69b3      	ldr	r3, [r6, #24]
 800632a:	b913      	cbnz	r3, 8006332 <__sfp+0x16>
 800632c:	4630      	mov	r0, r6
 800632e:	f7ff ffbd 	bl	80062ac <__sinit>
 8006332:	3648      	adds	r6, #72	; 0x48
 8006334:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006338:	3b01      	subs	r3, #1
 800633a:	d503      	bpl.n	8006344 <__sfp+0x28>
 800633c:	6833      	ldr	r3, [r6, #0]
 800633e:	b30b      	cbz	r3, 8006384 <__sfp+0x68>
 8006340:	6836      	ldr	r6, [r6, #0]
 8006342:	e7f7      	b.n	8006334 <__sfp+0x18>
 8006344:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006348:	b9d5      	cbnz	r5, 8006380 <__sfp+0x64>
 800634a:	4b16      	ldr	r3, [pc, #88]	; (80063a4 <__sfp+0x88>)
 800634c:	60e3      	str	r3, [r4, #12]
 800634e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006352:	6665      	str	r5, [r4, #100]	; 0x64
 8006354:	f000 f84c 	bl	80063f0 <__retarget_lock_init_recursive>
 8006358:	f7ff ff96 	bl	8006288 <__sfp_lock_release>
 800635c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006360:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006364:	6025      	str	r5, [r4, #0]
 8006366:	61a5      	str	r5, [r4, #24]
 8006368:	2208      	movs	r2, #8
 800636a:	4629      	mov	r1, r5
 800636c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006370:	f7fe fa4a 	bl	8004808 <memset>
 8006374:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006378:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800637c:	4620      	mov	r0, r4
 800637e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006380:	3468      	adds	r4, #104	; 0x68
 8006382:	e7d9      	b.n	8006338 <__sfp+0x1c>
 8006384:	2104      	movs	r1, #4
 8006386:	4638      	mov	r0, r7
 8006388:	f7ff ff62 	bl	8006250 <__sfmoreglue>
 800638c:	4604      	mov	r4, r0
 800638e:	6030      	str	r0, [r6, #0]
 8006390:	2800      	cmp	r0, #0
 8006392:	d1d5      	bne.n	8006340 <__sfp+0x24>
 8006394:	f7ff ff78 	bl	8006288 <__sfp_lock_release>
 8006398:	230c      	movs	r3, #12
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	e7ee      	b.n	800637c <__sfp+0x60>
 800639e:	bf00      	nop
 80063a0:	080074a8 	.word	0x080074a8
 80063a4:	ffff0001 	.word	0xffff0001

080063a8 <_fwalk_reent>:
 80063a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063ac:	4606      	mov	r6, r0
 80063ae:	4688      	mov	r8, r1
 80063b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063b4:	2700      	movs	r7, #0
 80063b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063ba:	f1b9 0901 	subs.w	r9, r9, #1
 80063be:	d505      	bpl.n	80063cc <_fwalk_reent+0x24>
 80063c0:	6824      	ldr	r4, [r4, #0]
 80063c2:	2c00      	cmp	r4, #0
 80063c4:	d1f7      	bne.n	80063b6 <_fwalk_reent+0xe>
 80063c6:	4638      	mov	r0, r7
 80063c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063cc:	89ab      	ldrh	r3, [r5, #12]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d907      	bls.n	80063e2 <_fwalk_reent+0x3a>
 80063d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063d6:	3301      	adds	r3, #1
 80063d8:	d003      	beq.n	80063e2 <_fwalk_reent+0x3a>
 80063da:	4629      	mov	r1, r5
 80063dc:	4630      	mov	r0, r6
 80063de:	47c0      	blx	r8
 80063e0:	4307      	orrs	r7, r0
 80063e2:	3568      	adds	r5, #104	; 0x68
 80063e4:	e7e9      	b.n	80063ba <_fwalk_reent+0x12>
	...

080063e8 <_localeconv_r>:
 80063e8:	4800      	ldr	r0, [pc, #0]	; (80063ec <_localeconv_r+0x4>)
 80063ea:	4770      	bx	lr
 80063ec:	20001f48 	.word	0x20001f48

080063f0 <__retarget_lock_init_recursive>:
 80063f0:	4770      	bx	lr

080063f2 <__retarget_lock_acquire_recursive>:
 80063f2:	4770      	bx	lr

080063f4 <__retarget_lock_release_recursive>:
 80063f4:	4770      	bx	lr

080063f6 <__swhatbuf_r>:
 80063f6:	b570      	push	{r4, r5, r6, lr}
 80063f8:	460e      	mov	r6, r1
 80063fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063fe:	2900      	cmp	r1, #0
 8006400:	b096      	sub	sp, #88	; 0x58
 8006402:	4614      	mov	r4, r2
 8006404:	461d      	mov	r5, r3
 8006406:	da07      	bge.n	8006418 <__swhatbuf_r+0x22>
 8006408:	2300      	movs	r3, #0
 800640a:	602b      	str	r3, [r5, #0]
 800640c:	89b3      	ldrh	r3, [r6, #12]
 800640e:	061a      	lsls	r2, r3, #24
 8006410:	d410      	bmi.n	8006434 <__swhatbuf_r+0x3e>
 8006412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006416:	e00e      	b.n	8006436 <__swhatbuf_r+0x40>
 8006418:	466a      	mov	r2, sp
 800641a:	f000 fd7f 	bl	8006f1c <_fstat_r>
 800641e:	2800      	cmp	r0, #0
 8006420:	dbf2      	blt.n	8006408 <__swhatbuf_r+0x12>
 8006422:	9a01      	ldr	r2, [sp, #4]
 8006424:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006428:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800642c:	425a      	negs	r2, r3
 800642e:	415a      	adcs	r2, r3
 8006430:	602a      	str	r2, [r5, #0]
 8006432:	e7ee      	b.n	8006412 <__swhatbuf_r+0x1c>
 8006434:	2340      	movs	r3, #64	; 0x40
 8006436:	2000      	movs	r0, #0
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	b016      	add	sp, #88	; 0x58
 800643c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006440 <__smakebuf_r>:
 8006440:	898b      	ldrh	r3, [r1, #12]
 8006442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006444:	079d      	lsls	r5, r3, #30
 8006446:	4606      	mov	r6, r0
 8006448:	460c      	mov	r4, r1
 800644a:	d507      	bpl.n	800645c <__smakebuf_r+0x1c>
 800644c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006450:	6023      	str	r3, [r4, #0]
 8006452:	6123      	str	r3, [r4, #16]
 8006454:	2301      	movs	r3, #1
 8006456:	6163      	str	r3, [r4, #20]
 8006458:	b002      	add	sp, #8
 800645a:	bd70      	pop	{r4, r5, r6, pc}
 800645c:	ab01      	add	r3, sp, #4
 800645e:	466a      	mov	r2, sp
 8006460:	f7ff ffc9 	bl	80063f6 <__swhatbuf_r>
 8006464:	9900      	ldr	r1, [sp, #0]
 8006466:	4605      	mov	r5, r0
 8006468:	4630      	mov	r0, r6
 800646a:	f000 fc0f 	bl	8006c8c <_malloc_r>
 800646e:	b948      	cbnz	r0, 8006484 <__smakebuf_r+0x44>
 8006470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006474:	059a      	lsls	r2, r3, #22
 8006476:	d4ef      	bmi.n	8006458 <__smakebuf_r+0x18>
 8006478:	f023 0303 	bic.w	r3, r3, #3
 800647c:	f043 0302 	orr.w	r3, r3, #2
 8006480:	81a3      	strh	r3, [r4, #12]
 8006482:	e7e3      	b.n	800644c <__smakebuf_r+0xc>
 8006484:	4b0d      	ldr	r3, [pc, #52]	; (80064bc <__smakebuf_r+0x7c>)
 8006486:	62b3      	str	r3, [r6, #40]	; 0x28
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	6020      	str	r0, [r4, #0]
 800648c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006490:	81a3      	strh	r3, [r4, #12]
 8006492:	9b00      	ldr	r3, [sp, #0]
 8006494:	6163      	str	r3, [r4, #20]
 8006496:	9b01      	ldr	r3, [sp, #4]
 8006498:	6120      	str	r0, [r4, #16]
 800649a:	b15b      	cbz	r3, 80064b4 <__smakebuf_r+0x74>
 800649c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064a0:	4630      	mov	r0, r6
 80064a2:	f000 fd4d 	bl	8006f40 <_isatty_r>
 80064a6:	b128      	cbz	r0, 80064b4 <__smakebuf_r+0x74>
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	f023 0303 	bic.w	r3, r3, #3
 80064ae:	f043 0301 	orr.w	r3, r3, #1
 80064b2:	81a3      	strh	r3, [r4, #12]
 80064b4:	89a0      	ldrh	r0, [r4, #12]
 80064b6:	4305      	orrs	r5, r0
 80064b8:	81a5      	strh	r5, [r4, #12]
 80064ba:	e7cd      	b.n	8006458 <__smakebuf_r+0x18>
 80064bc:	08006245 	.word	0x08006245

080064c0 <malloc>:
 80064c0:	4b02      	ldr	r3, [pc, #8]	; (80064cc <malloc+0xc>)
 80064c2:	4601      	mov	r1, r0
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	f000 bbe1 	b.w	8006c8c <_malloc_r>
 80064ca:	bf00      	nop
 80064cc:	20001df4 	.word	0x20001df4

080064d0 <_Balloc>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064d4:	4604      	mov	r4, r0
 80064d6:	460d      	mov	r5, r1
 80064d8:	b976      	cbnz	r6, 80064f8 <_Balloc+0x28>
 80064da:	2010      	movs	r0, #16
 80064dc:	f7ff fff0 	bl	80064c0 <malloc>
 80064e0:	4602      	mov	r2, r0
 80064e2:	6260      	str	r0, [r4, #36]	; 0x24
 80064e4:	b920      	cbnz	r0, 80064f0 <_Balloc+0x20>
 80064e6:	4b18      	ldr	r3, [pc, #96]	; (8006548 <_Balloc+0x78>)
 80064e8:	4818      	ldr	r0, [pc, #96]	; (800654c <_Balloc+0x7c>)
 80064ea:	2166      	movs	r1, #102	; 0x66
 80064ec:	f000 fcd6 	bl	8006e9c <__assert_func>
 80064f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064f4:	6006      	str	r6, [r0, #0]
 80064f6:	60c6      	str	r6, [r0, #12]
 80064f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80064fa:	68f3      	ldr	r3, [r6, #12]
 80064fc:	b183      	cbz	r3, 8006520 <_Balloc+0x50>
 80064fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006506:	b9b8      	cbnz	r0, 8006538 <_Balloc+0x68>
 8006508:	2101      	movs	r1, #1
 800650a:	fa01 f605 	lsl.w	r6, r1, r5
 800650e:	1d72      	adds	r2, r6, #5
 8006510:	0092      	lsls	r2, r2, #2
 8006512:	4620      	mov	r0, r4
 8006514:	f000 fb5a 	bl	8006bcc <_calloc_r>
 8006518:	b160      	cbz	r0, 8006534 <_Balloc+0x64>
 800651a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800651e:	e00e      	b.n	800653e <_Balloc+0x6e>
 8006520:	2221      	movs	r2, #33	; 0x21
 8006522:	2104      	movs	r1, #4
 8006524:	4620      	mov	r0, r4
 8006526:	f000 fb51 	bl	8006bcc <_calloc_r>
 800652a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800652c:	60f0      	str	r0, [r6, #12]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e4      	bne.n	80064fe <_Balloc+0x2e>
 8006534:	2000      	movs	r0, #0
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	6802      	ldr	r2, [r0, #0]
 800653a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800653e:	2300      	movs	r3, #0
 8006540:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006544:	e7f7      	b.n	8006536 <_Balloc+0x66>
 8006546:	bf00      	nop
 8006548:	080074ed 	.word	0x080074ed
 800654c:	080075d4 	.word	0x080075d4

08006550 <_Bfree>:
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006554:	4605      	mov	r5, r0
 8006556:	460c      	mov	r4, r1
 8006558:	b976      	cbnz	r6, 8006578 <_Bfree+0x28>
 800655a:	2010      	movs	r0, #16
 800655c:	f7ff ffb0 	bl	80064c0 <malloc>
 8006560:	4602      	mov	r2, r0
 8006562:	6268      	str	r0, [r5, #36]	; 0x24
 8006564:	b920      	cbnz	r0, 8006570 <_Bfree+0x20>
 8006566:	4b09      	ldr	r3, [pc, #36]	; (800658c <_Bfree+0x3c>)
 8006568:	4809      	ldr	r0, [pc, #36]	; (8006590 <_Bfree+0x40>)
 800656a:	218a      	movs	r1, #138	; 0x8a
 800656c:	f000 fc96 	bl	8006e9c <__assert_func>
 8006570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006574:	6006      	str	r6, [r0, #0]
 8006576:	60c6      	str	r6, [r0, #12]
 8006578:	b13c      	cbz	r4, 800658a <_Bfree+0x3a>
 800657a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800657c:	6862      	ldr	r2, [r4, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006584:	6021      	str	r1, [r4, #0]
 8006586:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800658a:	bd70      	pop	{r4, r5, r6, pc}
 800658c:	080074ed 	.word	0x080074ed
 8006590:	080075d4 	.word	0x080075d4

08006594 <__multadd>:
 8006594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006598:	690e      	ldr	r6, [r1, #16]
 800659a:	4607      	mov	r7, r0
 800659c:	4698      	mov	r8, r3
 800659e:	460c      	mov	r4, r1
 80065a0:	f101 0014 	add.w	r0, r1, #20
 80065a4:	2300      	movs	r3, #0
 80065a6:	6805      	ldr	r5, [r0, #0]
 80065a8:	b2a9      	uxth	r1, r5
 80065aa:	fb02 8101 	mla	r1, r2, r1, r8
 80065ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80065b2:	0c2d      	lsrs	r5, r5, #16
 80065b4:	fb02 c505 	mla	r5, r2, r5, ip
 80065b8:	b289      	uxth	r1, r1
 80065ba:	3301      	adds	r3, #1
 80065bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80065c0:	429e      	cmp	r6, r3
 80065c2:	f840 1b04 	str.w	r1, [r0], #4
 80065c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80065ca:	dcec      	bgt.n	80065a6 <__multadd+0x12>
 80065cc:	f1b8 0f00 	cmp.w	r8, #0
 80065d0:	d022      	beq.n	8006618 <__multadd+0x84>
 80065d2:	68a3      	ldr	r3, [r4, #8]
 80065d4:	42b3      	cmp	r3, r6
 80065d6:	dc19      	bgt.n	800660c <__multadd+0x78>
 80065d8:	6861      	ldr	r1, [r4, #4]
 80065da:	4638      	mov	r0, r7
 80065dc:	3101      	adds	r1, #1
 80065de:	f7ff ff77 	bl	80064d0 <_Balloc>
 80065e2:	4605      	mov	r5, r0
 80065e4:	b928      	cbnz	r0, 80065f2 <__multadd+0x5e>
 80065e6:	4602      	mov	r2, r0
 80065e8:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <__multadd+0x8c>)
 80065ea:	480e      	ldr	r0, [pc, #56]	; (8006624 <__multadd+0x90>)
 80065ec:	21b5      	movs	r1, #181	; 0xb5
 80065ee:	f000 fc55 	bl	8006e9c <__assert_func>
 80065f2:	6922      	ldr	r2, [r4, #16]
 80065f4:	3202      	adds	r2, #2
 80065f6:	f104 010c 	add.w	r1, r4, #12
 80065fa:	0092      	lsls	r2, r2, #2
 80065fc:	300c      	adds	r0, #12
 80065fe:	f7fe f8f5 	bl	80047ec <memcpy>
 8006602:	4621      	mov	r1, r4
 8006604:	4638      	mov	r0, r7
 8006606:	f7ff ffa3 	bl	8006550 <_Bfree>
 800660a:	462c      	mov	r4, r5
 800660c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006610:	3601      	adds	r6, #1
 8006612:	f8c3 8014 	str.w	r8, [r3, #20]
 8006616:	6126      	str	r6, [r4, #16]
 8006618:	4620      	mov	r0, r4
 800661a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800661e:	bf00      	nop
 8006620:	08007563 	.word	0x08007563
 8006624:	080075d4 	.word	0x080075d4

08006628 <__hi0bits>:
 8006628:	0c03      	lsrs	r3, r0, #16
 800662a:	041b      	lsls	r3, r3, #16
 800662c:	b9d3      	cbnz	r3, 8006664 <__hi0bits+0x3c>
 800662e:	0400      	lsls	r0, r0, #16
 8006630:	2310      	movs	r3, #16
 8006632:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006636:	bf04      	itt	eq
 8006638:	0200      	lsleq	r0, r0, #8
 800663a:	3308      	addeq	r3, #8
 800663c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006640:	bf04      	itt	eq
 8006642:	0100      	lsleq	r0, r0, #4
 8006644:	3304      	addeq	r3, #4
 8006646:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800664a:	bf04      	itt	eq
 800664c:	0080      	lsleq	r0, r0, #2
 800664e:	3302      	addeq	r3, #2
 8006650:	2800      	cmp	r0, #0
 8006652:	db05      	blt.n	8006660 <__hi0bits+0x38>
 8006654:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006658:	f103 0301 	add.w	r3, r3, #1
 800665c:	bf08      	it	eq
 800665e:	2320      	moveq	r3, #32
 8006660:	4618      	mov	r0, r3
 8006662:	4770      	bx	lr
 8006664:	2300      	movs	r3, #0
 8006666:	e7e4      	b.n	8006632 <__hi0bits+0xa>

08006668 <__lo0bits>:
 8006668:	6803      	ldr	r3, [r0, #0]
 800666a:	f013 0207 	ands.w	r2, r3, #7
 800666e:	4601      	mov	r1, r0
 8006670:	d00b      	beq.n	800668a <__lo0bits+0x22>
 8006672:	07da      	lsls	r2, r3, #31
 8006674:	d424      	bmi.n	80066c0 <__lo0bits+0x58>
 8006676:	0798      	lsls	r0, r3, #30
 8006678:	bf49      	itett	mi
 800667a:	085b      	lsrmi	r3, r3, #1
 800667c:	089b      	lsrpl	r3, r3, #2
 800667e:	2001      	movmi	r0, #1
 8006680:	600b      	strmi	r3, [r1, #0]
 8006682:	bf5c      	itt	pl
 8006684:	600b      	strpl	r3, [r1, #0]
 8006686:	2002      	movpl	r0, #2
 8006688:	4770      	bx	lr
 800668a:	b298      	uxth	r0, r3
 800668c:	b9b0      	cbnz	r0, 80066bc <__lo0bits+0x54>
 800668e:	0c1b      	lsrs	r3, r3, #16
 8006690:	2010      	movs	r0, #16
 8006692:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006696:	bf04      	itt	eq
 8006698:	0a1b      	lsreq	r3, r3, #8
 800669a:	3008      	addeq	r0, #8
 800669c:	071a      	lsls	r2, r3, #28
 800669e:	bf04      	itt	eq
 80066a0:	091b      	lsreq	r3, r3, #4
 80066a2:	3004      	addeq	r0, #4
 80066a4:	079a      	lsls	r2, r3, #30
 80066a6:	bf04      	itt	eq
 80066a8:	089b      	lsreq	r3, r3, #2
 80066aa:	3002      	addeq	r0, #2
 80066ac:	07da      	lsls	r2, r3, #31
 80066ae:	d403      	bmi.n	80066b8 <__lo0bits+0x50>
 80066b0:	085b      	lsrs	r3, r3, #1
 80066b2:	f100 0001 	add.w	r0, r0, #1
 80066b6:	d005      	beq.n	80066c4 <__lo0bits+0x5c>
 80066b8:	600b      	str	r3, [r1, #0]
 80066ba:	4770      	bx	lr
 80066bc:	4610      	mov	r0, r2
 80066be:	e7e8      	b.n	8006692 <__lo0bits+0x2a>
 80066c0:	2000      	movs	r0, #0
 80066c2:	4770      	bx	lr
 80066c4:	2020      	movs	r0, #32
 80066c6:	4770      	bx	lr

080066c8 <__i2b>:
 80066c8:	b510      	push	{r4, lr}
 80066ca:	460c      	mov	r4, r1
 80066cc:	2101      	movs	r1, #1
 80066ce:	f7ff feff 	bl	80064d0 <_Balloc>
 80066d2:	4602      	mov	r2, r0
 80066d4:	b928      	cbnz	r0, 80066e2 <__i2b+0x1a>
 80066d6:	4b05      	ldr	r3, [pc, #20]	; (80066ec <__i2b+0x24>)
 80066d8:	4805      	ldr	r0, [pc, #20]	; (80066f0 <__i2b+0x28>)
 80066da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80066de:	f000 fbdd 	bl	8006e9c <__assert_func>
 80066e2:	2301      	movs	r3, #1
 80066e4:	6144      	str	r4, [r0, #20]
 80066e6:	6103      	str	r3, [r0, #16]
 80066e8:	bd10      	pop	{r4, pc}
 80066ea:	bf00      	nop
 80066ec:	08007563 	.word	0x08007563
 80066f0:	080075d4 	.word	0x080075d4

080066f4 <__multiply>:
 80066f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f8:	4614      	mov	r4, r2
 80066fa:	690a      	ldr	r2, [r1, #16]
 80066fc:	6923      	ldr	r3, [r4, #16]
 80066fe:	429a      	cmp	r2, r3
 8006700:	bfb8      	it	lt
 8006702:	460b      	movlt	r3, r1
 8006704:	460d      	mov	r5, r1
 8006706:	bfbc      	itt	lt
 8006708:	4625      	movlt	r5, r4
 800670a:	461c      	movlt	r4, r3
 800670c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006710:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006714:	68ab      	ldr	r3, [r5, #8]
 8006716:	6869      	ldr	r1, [r5, #4]
 8006718:	eb0a 0709 	add.w	r7, sl, r9
 800671c:	42bb      	cmp	r3, r7
 800671e:	b085      	sub	sp, #20
 8006720:	bfb8      	it	lt
 8006722:	3101      	addlt	r1, #1
 8006724:	f7ff fed4 	bl	80064d0 <_Balloc>
 8006728:	b930      	cbnz	r0, 8006738 <__multiply+0x44>
 800672a:	4602      	mov	r2, r0
 800672c:	4b42      	ldr	r3, [pc, #264]	; (8006838 <__multiply+0x144>)
 800672e:	4843      	ldr	r0, [pc, #268]	; (800683c <__multiply+0x148>)
 8006730:	f240 115d 	movw	r1, #349	; 0x15d
 8006734:	f000 fbb2 	bl	8006e9c <__assert_func>
 8006738:	f100 0614 	add.w	r6, r0, #20
 800673c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006740:	4633      	mov	r3, r6
 8006742:	2200      	movs	r2, #0
 8006744:	4543      	cmp	r3, r8
 8006746:	d31e      	bcc.n	8006786 <__multiply+0x92>
 8006748:	f105 0c14 	add.w	ip, r5, #20
 800674c:	f104 0314 	add.w	r3, r4, #20
 8006750:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006754:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006758:	9202      	str	r2, [sp, #8]
 800675a:	ebac 0205 	sub.w	r2, ip, r5
 800675e:	3a15      	subs	r2, #21
 8006760:	f022 0203 	bic.w	r2, r2, #3
 8006764:	3204      	adds	r2, #4
 8006766:	f105 0115 	add.w	r1, r5, #21
 800676a:	458c      	cmp	ip, r1
 800676c:	bf38      	it	cc
 800676e:	2204      	movcc	r2, #4
 8006770:	9201      	str	r2, [sp, #4]
 8006772:	9a02      	ldr	r2, [sp, #8]
 8006774:	9303      	str	r3, [sp, #12]
 8006776:	429a      	cmp	r2, r3
 8006778:	d808      	bhi.n	800678c <__multiply+0x98>
 800677a:	2f00      	cmp	r7, #0
 800677c:	dc55      	bgt.n	800682a <__multiply+0x136>
 800677e:	6107      	str	r7, [r0, #16]
 8006780:	b005      	add	sp, #20
 8006782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006786:	f843 2b04 	str.w	r2, [r3], #4
 800678a:	e7db      	b.n	8006744 <__multiply+0x50>
 800678c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006790:	f1ba 0f00 	cmp.w	sl, #0
 8006794:	d020      	beq.n	80067d8 <__multiply+0xe4>
 8006796:	f105 0e14 	add.w	lr, r5, #20
 800679a:	46b1      	mov	r9, r6
 800679c:	2200      	movs	r2, #0
 800679e:	f85e 4b04 	ldr.w	r4, [lr], #4
 80067a2:	f8d9 b000 	ldr.w	fp, [r9]
 80067a6:	b2a1      	uxth	r1, r4
 80067a8:	fa1f fb8b 	uxth.w	fp, fp
 80067ac:	fb0a b101 	mla	r1, sl, r1, fp
 80067b0:	4411      	add	r1, r2
 80067b2:	f8d9 2000 	ldr.w	r2, [r9]
 80067b6:	0c24      	lsrs	r4, r4, #16
 80067b8:	0c12      	lsrs	r2, r2, #16
 80067ba:	fb0a 2404 	mla	r4, sl, r4, r2
 80067be:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80067c2:	b289      	uxth	r1, r1
 80067c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80067c8:	45f4      	cmp	ip, lr
 80067ca:	f849 1b04 	str.w	r1, [r9], #4
 80067ce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80067d2:	d8e4      	bhi.n	800679e <__multiply+0xaa>
 80067d4:	9901      	ldr	r1, [sp, #4]
 80067d6:	5072      	str	r2, [r6, r1]
 80067d8:	9a03      	ldr	r2, [sp, #12]
 80067da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80067de:	3304      	adds	r3, #4
 80067e0:	f1b9 0f00 	cmp.w	r9, #0
 80067e4:	d01f      	beq.n	8006826 <__multiply+0x132>
 80067e6:	6834      	ldr	r4, [r6, #0]
 80067e8:	f105 0114 	add.w	r1, r5, #20
 80067ec:	46b6      	mov	lr, r6
 80067ee:	f04f 0a00 	mov.w	sl, #0
 80067f2:	880a      	ldrh	r2, [r1, #0]
 80067f4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80067f8:	fb09 b202 	mla	r2, r9, r2, fp
 80067fc:	4492      	add	sl, r2
 80067fe:	b2a4      	uxth	r4, r4
 8006800:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006804:	f84e 4b04 	str.w	r4, [lr], #4
 8006808:	f851 4b04 	ldr.w	r4, [r1], #4
 800680c:	f8be 2000 	ldrh.w	r2, [lr]
 8006810:	0c24      	lsrs	r4, r4, #16
 8006812:	fb09 2404 	mla	r4, r9, r4, r2
 8006816:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800681a:	458c      	cmp	ip, r1
 800681c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006820:	d8e7      	bhi.n	80067f2 <__multiply+0xfe>
 8006822:	9a01      	ldr	r2, [sp, #4]
 8006824:	50b4      	str	r4, [r6, r2]
 8006826:	3604      	adds	r6, #4
 8006828:	e7a3      	b.n	8006772 <__multiply+0x7e>
 800682a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1a5      	bne.n	800677e <__multiply+0x8a>
 8006832:	3f01      	subs	r7, #1
 8006834:	e7a1      	b.n	800677a <__multiply+0x86>
 8006836:	bf00      	nop
 8006838:	08007563 	.word	0x08007563
 800683c:	080075d4 	.word	0x080075d4

08006840 <__pow5mult>:
 8006840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006844:	4615      	mov	r5, r2
 8006846:	f012 0203 	ands.w	r2, r2, #3
 800684a:	4606      	mov	r6, r0
 800684c:	460f      	mov	r7, r1
 800684e:	d007      	beq.n	8006860 <__pow5mult+0x20>
 8006850:	4c25      	ldr	r4, [pc, #148]	; (80068e8 <__pow5mult+0xa8>)
 8006852:	3a01      	subs	r2, #1
 8006854:	2300      	movs	r3, #0
 8006856:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800685a:	f7ff fe9b 	bl	8006594 <__multadd>
 800685e:	4607      	mov	r7, r0
 8006860:	10ad      	asrs	r5, r5, #2
 8006862:	d03d      	beq.n	80068e0 <__pow5mult+0xa0>
 8006864:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006866:	b97c      	cbnz	r4, 8006888 <__pow5mult+0x48>
 8006868:	2010      	movs	r0, #16
 800686a:	f7ff fe29 	bl	80064c0 <malloc>
 800686e:	4602      	mov	r2, r0
 8006870:	6270      	str	r0, [r6, #36]	; 0x24
 8006872:	b928      	cbnz	r0, 8006880 <__pow5mult+0x40>
 8006874:	4b1d      	ldr	r3, [pc, #116]	; (80068ec <__pow5mult+0xac>)
 8006876:	481e      	ldr	r0, [pc, #120]	; (80068f0 <__pow5mult+0xb0>)
 8006878:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800687c:	f000 fb0e 	bl	8006e9c <__assert_func>
 8006880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006884:	6004      	str	r4, [r0, #0]
 8006886:	60c4      	str	r4, [r0, #12]
 8006888:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800688c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006890:	b94c      	cbnz	r4, 80068a6 <__pow5mult+0x66>
 8006892:	f240 2171 	movw	r1, #625	; 0x271
 8006896:	4630      	mov	r0, r6
 8006898:	f7ff ff16 	bl	80066c8 <__i2b>
 800689c:	2300      	movs	r3, #0
 800689e:	f8c8 0008 	str.w	r0, [r8, #8]
 80068a2:	4604      	mov	r4, r0
 80068a4:	6003      	str	r3, [r0, #0]
 80068a6:	f04f 0900 	mov.w	r9, #0
 80068aa:	07eb      	lsls	r3, r5, #31
 80068ac:	d50a      	bpl.n	80068c4 <__pow5mult+0x84>
 80068ae:	4639      	mov	r1, r7
 80068b0:	4622      	mov	r2, r4
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7ff ff1e 	bl	80066f4 <__multiply>
 80068b8:	4639      	mov	r1, r7
 80068ba:	4680      	mov	r8, r0
 80068bc:	4630      	mov	r0, r6
 80068be:	f7ff fe47 	bl	8006550 <_Bfree>
 80068c2:	4647      	mov	r7, r8
 80068c4:	106d      	asrs	r5, r5, #1
 80068c6:	d00b      	beq.n	80068e0 <__pow5mult+0xa0>
 80068c8:	6820      	ldr	r0, [r4, #0]
 80068ca:	b938      	cbnz	r0, 80068dc <__pow5mult+0x9c>
 80068cc:	4622      	mov	r2, r4
 80068ce:	4621      	mov	r1, r4
 80068d0:	4630      	mov	r0, r6
 80068d2:	f7ff ff0f 	bl	80066f4 <__multiply>
 80068d6:	6020      	str	r0, [r4, #0]
 80068d8:	f8c0 9000 	str.w	r9, [r0]
 80068dc:	4604      	mov	r4, r0
 80068de:	e7e4      	b.n	80068aa <__pow5mult+0x6a>
 80068e0:	4638      	mov	r0, r7
 80068e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e6:	bf00      	nop
 80068e8:	08007728 	.word	0x08007728
 80068ec:	080074ed 	.word	0x080074ed
 80068f0:	080075d4 	.word	0x080075d4

080068f4 <__lshift>:
 80068f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f8:	460c      	mov	r4, r1
 80068fa:	6849      	ldr	r1, [r1, #4]
 80068fc:	6923      	ldr	r3, [r4, #16]
 80068fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006902:	68a3      	ldr	r3, [r4, #8]
 8006904:	4607      	mov	r7, r0
 8006906:	4691      	mov	r9, r2
 8006908:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800690c:	f108 0601 	add.w	r6, r8, #1
 8006910:	42b3      	cmp	r3, r6
 8006912:	db0b      	blt.n	800692c <__lshift+0x38>
 8006914:	4638      	mov	r0, r7
 8006916:	f7ff fddb 	bl	80064d0 <_Balloc>
 800691a:	4605      	mov	r5, r0
 800691c:	b948      	cbnz	r0, 8006932 <__lshift+0x3e>
 800691e:	4602      	mov	r2, r0
 8006920:	4b28      	ldr	r3, [pc, #160]	; (80069c4 <__lshift+0xd0>)
 8006922:	4829      	ldr	r0, [pc, #164]	; (80069c8 <__lshift+0xd4>)
 8006924:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006928:	f000 fab8 	bl	8006e9c <__assert_func>
 800692c:	3101      	adds	r1, #1
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	e7ee      	b.n	8006910 <__lshift+0x1c>
 8006932:	2300      	movs	r3, #0
 8006934:	f100 0114 	add.w	r1, r0, #20
 8006938:	f100 0210 	add.w	r2, r0, #16
 800693c:	4618      	mov	r0, r3
 800693e:	4553      	cmp	r3, sl
 8006940:	db33      	blt.n	80069aa <__lshift+0xb6>
 8006942:	6920      	ldr	r0, [r4, #16]
 8006944:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006948:	f104 0314 	add.w	r3, r4, #20
 800694c:	f019 091f 	ands.w	r9, r9, #31
 8006950:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006954:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006958:	d02b      	beq.n	80069b2 <__lshift+0xbe>
 800695a:	f1c9 0e20 	rsb	lr, r9, #32
 800695e:	468a      	mov	sl, r1
 8006960:	2200      	movs	r2, #0
 8006962:	6818      	ldr	r0, [r3, #0]
 8006964:	fa00 f009 	lsl.w	r0, r0, r9
 8006968:	4302      	orrs	r2, r0
 800696a:	f84a 2b04 	str.w	r2, [sl], #4
 800696e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006972:	459c      	cmp	ip, r3
 8006974:	fa22 f20e 	lsr.w	r2, r2, lr
 8006978:	d8f3      	bhi.n	8006962 <__lshift+0x6e>
 800697a:	ebac 0304 	sub.w	r3, ip, r4
 800697e:	3b15      	subs	r3, #21
 8006980:	f023 0303 	bic.w	r3, r3, #3
 8006984:	3304      	adds	r3, #4
 8006986:	f104 0015 	add.w	r0, r4, #21
 800698a:	4584      	cmp	ip, r0
 800698c:	bf38      	it	cc
 800698e:	2304      	movcc	r3, #4
 8006990:	50ca      	str	r2, [r1, r3]
 8006992:	b10a      	cbz	r2, 8006998 <__lshift+0xa4>
 8006994:	f108 0602 	add.w	r6, r8, #2
 8006998:	3e01      	subs	r6, #1
 800699a:	4638      	mov	r0, r7
 800699c:	612e      	str	r6, [r5, #16]
 800699e:	4621      	mov	r1, r4
 80069a0:	f7ff fdd6 	bl	8006550 <_Bfree>
 80069a4:	4628      	mov	r0, r5
 80069a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80069ae:	3301      	adds	r3, #1
 80069b0:	e7c5      	b.n	800693e <__lshift+0x4a>
 80069b2:	3904      	subs	r1, #4
 80069b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80069bc:	459c      	cmp	ip, r3
 80069be:	d8f9      	bhi.n	80069b4 <__lshift+0xc0>
 80069c0:	e7ea      	b.n	8006998 <__lshift+0xa4>
 80069c2:	bf00      	nop
 80069c4:	08007563 	.word	0x08007563
 80069c8:	080075d4 	.word	0x080075d4

080069cc <__mcmp>:
 80069cc:	b530      	push	{r4, r5, lr}
 80069ce:	6902      	ldr	r2, [r0, #16]
 80069d0:	690c      	ldr	r4, [r1, #16]
 80069d2:	1b12      	subs	r2, r2, r4
 80069d4:	d10e      	bne.n	80069f4 <__mcmp+0x28>
 80069d6:	f100 0314 	add.w	r3, r0, #20
 80069da:	3114      	adds	r1, #20
 80069dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80069e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80069e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80069e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80069ec:	42a5      	cmp	r5, r4
 80069ee:	d003      	beq.n	80069f8 <__mcmp+0x2c>
 80069f0:	d305      	bcc.n	80069fe <__mcmp+0x32>
 80069f2:	2201      	movs	r2, #1
 80069f4:	4610      	mov	r0, r2
 80069f6:	bd30      	pop	{r4, r5, pc}
 80069f8:	4283      	cmp	r3, r0
 80069fa:	d3f3      	bcc.n	80069e4 <__mcmp+0x18>
 80069fc:	e7fa      	b.n	80069f4 <__mcmp+0x28>
 80069fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006a02:	e7f7      	b.n	80069f4 <__mcmp+0x28>

08006a04 <__mdiff>:
 8006a04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a08:	460c      	mov	r4, r1
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	4620      	mov	r0, r4
 8006a10:	4617      	mov	r7, r2
 8006a12:	f7ff ffdb 	bl	80069cc <__mcmp>
 8006a16:	1e05      	subs	r5, r0, #0
 8006a18:	d110      	bne.n	8006a3c <__mdiff+0x38>
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f7ff fd57 	bl	80064d0 <_Balloc>
 8006a22:	b930      	cbnz	r0, 8006a32 <__mdiff+0x2e>
 8006a24:	4b39      	ldr	r3, [pc, #228]	; (8006b0c <__mdiff+0x108>)
 8006a26:	4602      	mov	r2, r0
 8006a28:	f240 2132 	movw	r1, #562	; 0x232
 8006a2c:	4838      	ldr	r0, [pc, #224]	; (8006b10 <__mdiff+0x10c>)
 8006a2e:	f000 fa35 	bl	8006e9c <__assert_func>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3c:	bfa4      	itt	ge
 8006a3e:	463b      	movge	r3, r7
 8006a40:	4627      	movge	r7, r4
 8006a42:	4630      	mov	r0, r6
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	bfa6      	itte	ge
 8006a48:	461c      	movge	r4, r3
 8006a4a:	2500      	movge	r5, #0
 8006a4c:	2501      	movlt	r5, #1
 8006a4e:	f7ff fd3f 	bl	80064d0 <_Balloc>
 8006a52:	b920      	cbnz	r0, 8006a5e <__mdiff+0x5a>
 8006a54:	4b2d      	ldr	r3, [pc, #180]	; (8006b0c <__mdiff+0x108>)
 8006a56:	4602      	mov	r2, r0
 8006a58:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a5c:	e7e6      	b.n	8006a2c <__mdiff+0x28>
 8006a5e:	693e      	ldr	r6, [r7, #16]
 8006a60:	60c5      	str	r5, [r0, #12]
 8006a62:	6925      	ldr	r5, [r4, #16]
 8006a64:	f107 0114 	add.w	r1, r7, #20
 8006a68:	f104 0914 	add.w	r9, r4, #20
 8006a6c:	f100 0e14 	add.w	lr, r0, #20
 8006a70:	f107 0210 	add.w	r2, r7, #16
 8006a74:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006a78:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006a7c:	46f2      	mov	sl, lr
 8006a7e:	2700      	movs	r7, #0
 8006a80:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a88:	fa1f f883 	uxth.w	r8, r3
 8006a8c:	fa17 f78b 	uxtah	r7, r7, fp
 8006a90:	0c1b      	lsrs	r3, r3, #16
 8006a92:	eba7 0808 	sub.w	r8, r7, r8
 8006a96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a9e:	fa1f f888 	uxth.w	r8, r8
 8006aa2:	141f      	asrs	r7, r3, #16
 8006aa4:	454d      	cmp	r5, r9
 8006aa6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006aaa:	f84a 3b04 	str.w	r3, [sl], #4
 8006aae:	d8e7      	bhi.n	8006a80 <__mdiff+0x7c>
 8006ab0:	1b2b      	subs	r3, r5, r4
 8006ab2:	3b15      	subs	r3, #21
 8006ab4:	f023 0303 	bic.w	r3, r3, #3
 8006ab8:	3304      	adds	r3, #4
 8006aba:	3415      	adds	r4, #21
 8006abc:	42a5      	cmp	r5, r4
 8006abe:	bf38      	it	cc
 8006ac0:	2304      	movcc	r3, #4
 8006ac2:	4419      	add	r1, r3
 8006ac4:	4473      	add	r3, lr
 8006ac6:	469e      	mov	lr, r3
 8006ac8:	460d      	mov	r5, r1
 8006aca:	4565      	cmp	r5, ip
 8006acc:	d30e      	bcc.n	8006aec <__mdiff+0xe8>
 8006ace:	f10c 0203 	add.w	r2, ip, #3
 8006ad2:	1a52      	subs	r2, r2, r1
 8006ad4:	f022 0203 	bic.w	r2, r2, #3
 8006ad8:	3903      	subs	r1, #3
 8006ada:	458c      	cmp	ip, r1
 8006adc:	bf38      	it	cc
 8006ade:	2200      	movcc	r2, #0
 8006ae0:	441a      	add	r2, r3
 8006ae2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006ae6:	b17b      	cbz	r3, 8006b08 <__mdiff+0x104>
 8006ae8:	6106      	str	r6, [r0, #16]
 8006aea:	e7a5      	b.n	8006a38 <__mdiff+0x34>
 8006aec:	f855 8b04 	ldr.w	r8, [r5], #4
 8006af0:	fa17 f488 	uxtah	r4, r7, r8
 8006af4:	1422      	asrs	r2, r4, #16
 8006af6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006afa:	b2a4      	uxth	r4, r4
 8006afc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006b00:	f84e 4b04 	str.w	r4, [lr], #4
 8006b04:	1417      	asrs	r7, r2, #16
 8006b06:	e7e0      	b.n	8006aca <__mdiff+0xc6>
 8006b08:	3e01      	subs	r6, #1
 8006b0a:	e7ea      	b.n	8006ae2 <__mdiff+0xde>
 8006b0c:	08007563 	.word	0x08007563
 8006b10:	080075d4 	.word	0x080075d4

08006b14 <__d2b>:
 8006b14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b18:	4689      	mov	r9, r1
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	ec57 6b10 	vmov	r6, r7, d0
 8006b20:	4690      	mov	r8, r2
 8006b22:	f7ff fcd5 	bl	80064d0 <_Balloc>
 8006b26:	4604      	mov	r4, r0
 8006b28:	b930      	cbnz	r0, 8006b38 <__d2b+0x24>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	4b25      	ldr	r3, [pc, #148]	; (8006bc4 <__d2b+0xb0>)
 8006b2e:	4826      	ldr	r0, [pc, #152]	; (8006bc8 <__d2b+0xb4>)
 8006b30:	f240 310a 	movw	r1, #778	; 0x30a
 8006b34:	f000 f9b2 	bl	8006e9c <__assert_func>
 8006b38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006b3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b40:	bb35      	cbnz	r5, 8006b90 <__d2b+0x7c>
 8006b42:	2e00      	cmp	r6, #0
 8006b44:	9301      	str	r3, [sp, #4]
 8006b46:	d028      	beq.n	8006b9a <__d2b+0x86>
 8006b48:	4668      	mov	r0, sp
 8006b4a:	9600      	str	r6, [sp, #0]
 8006b4c:	f7ff fd8c 	bl	8006668 <__lo0bits>
 8006b50:	9900      	ldr	r1, [sp, #0]
 8006b52:	b300      	cbz	r0, 8006b96 <__d2b+0x82>
 8006b54:	9a01      	ldr	r2, [sp, #4]
 8006b56:	f1c0 0320 	rsb	r3, r0, #32
 8006b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5e:	430b      	orrs	r3, r1
 8006b60:	40c2      	lsrs	r2, r0
 8006b62:	6163      	str	r3, [r4, #20]
 8006b64:	9201      	str	r2, [sp, #4]
 8006b66:	9b01      	ldr	r3, [sp, #4]
 8006b68:	61a3      	str	r3, [r4, #24]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	bf14      	ite	ne
 8006b6e:	2202      	movne	r2, #2
 8006b70:	2201      	moveq	r2, #1
 8006b72:	6122      	str	r2, [r4, #16]
 8006b74:	b1d5      	cbz	r5, 8006bac <__d2b+0x98>
 8006b76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b7a:	4405      	add	r5, r0
 8006b7c:	f8c9 5000 	str.w	r5, [r9]
 8006b80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b84:	f8c8 0000 	str.w	r0, [r8]
 8006b88:	4620      	mov	r0, r4
 8006b8a:	b003      	add	sp, #12
 8006b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b94:	e7d5      	b.n	8006b42 <__d2b+0x2e>
 8006b96:	6161      	str	r1, [r4, #20]
 8006b98:	e7e5      	b.n	8006b66 <__d2b+0x52>
 8006b9a:	a801      	add	r0, sp, #4
 8006b9c:	f7ff fd64 	bl	8006668 <__lo0bits>
 8006ba0:	9b01      	ldr	r3, [sp, #4]
 8006ba2:	6163      	str	r3, [r4, #20]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	6122      	str	r2, [r4, #16]
 8006ba8:	3020      	adds	r0, #32
 8006baa:	e7e3      	b.n	8006b74 <__d2b+0x60>
 8006bac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006bb4:	f8c9 0000 	str.w	r0, [r9]
 8006bb8:	6918      	ldr	r0, [r3, #16]
 8006bba:	f7ff fd35 	bl	8006628 <__hi0bits>
 8006bbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006bc2:	e7df      	b.n	8006b84 <__d2b+0x70>
 8006bc4:	08007563 	.word	0x08007563
 8006bc8:	080075d4 	.word	0x080075d4

08006bcc <_calloc_r>:
 8006bcc:	b513      	push	{r0, r1, r4, lr}
 8006bce:	434a      	muls	r2, r1
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	9201      	str	r2, [sp, #4]
 8006bd4:	f000 f85a 	bl	8006c8c <_malloc_r>
 8006bd8:	4604      	mov	r4, r0
 8006bda:	b118      	cbz	r0, 8006be4 <_calloc_r+0x18>
 8006bdc:	9a01      	ldr	r2, [sp, #4]
 8006bde:	2100      	movs	r1, #0
 8006be0:	f7fd fe12 	bl	8004808 <memset>
 8006be4:	4620      	mov	r0, r4
 8006be6:	b002      	add	sp, #8
 8006be8:	bd10      	pop	{r4, pc}
	...

08006bec <_free_r>:
 8006bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bee:	2900      	cmp	r1, #0
 8006bf0:	d048      	beq.n	8006c84 <_free_r+0x98>
 8006bf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bf6:	9001      	str	r0, [sp, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f1a1 0404 	sub.w	r4, r1, #4
 8006bfe:	bfb8      	it	lt
 8006c00:	18e4      	addlt	r4, r4, r3
 8006c02:	f000 f9d1 	bl	8006fa8 <__malloc_lock>
 8006c06:	4a20      	ldr	r2, [pc, #128]	; (8006c88 <_free_r+0x9c>)
 8006c08:	9801      	ldr	r0, [sp, #4]
 8006c0a:	6813      	ldr	r3, [r2, #0]
 8006c0c:	4615      	mov	r5, r2
 8006c0e:	b933      	cbnz	r3, 8006c1e <_free_r+0x32>
 8006c10:	6063      	str	r3, [r4, #4]
 8006c12:	6014      	str	r4, [r2, #0]
 8006c14:	b003      	add	sp, #12
 8006c16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c1a:	f000 b9cb 	b.w	8006fb4 <__malloc_unlock>
 8006c1e:	42a3      	cmp	r3, r4
 8006c20:	d90b      	bls.n	8006c3a <_free_r+0x4e>
 8006c22:	6821      	ldr	r1, [r4, #0]
 8006c24:	1862      	adds	r2, r4, r1
 8006c26:	4293      	cmp	r3, r2
 8006c28:	bf04      	itt	eq
 8006c2a:	681a      	ldreq	r2, [r3, #0]
 8006c2c:	685b      	ldreq	r3, [r3, #4]
 8006c2e:	6063      	str	r3, [r4, #4]
 8006c30:	bf04      	itt	eq
 8006c32:	1852      	addeq	r2, r2, r1
 8006c34:	6022      	streq	r2, [r4, #0]
 8006c36:	602c      	str	r4, [r5, #0]
 8006c38:	e7ec      	b.n	8006c14 <_free_r+0x28>
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	b10b      	cbz	r3, 8006c44 <_free_r+0x58>
 8006c40:	42a3      	cmp	r3, r4
 8006c42:	d9fa      	bls.n	8006c3a <_free_r+0x4e>
 8006c44:	6811      	ldr	r1, [r2, #0]
 8006c46:	1855      	adds	r5, r2, r1
 8006c48:	42a5      	cmp	r5, r4
 8006c4a:	d10b      	bne.n	8006c64 <_free_r+0x78>
 8006c4c:	6824      	ldr	r4, [r4, #0]
 8006c4e:	4421      	add	r1, r4
 8006c50:	1854      	adds	r4, r2, r1
 8006c52:	42a3      	cmp	r3, r4
 8006c54:	6011      	str	r1, [r2, #0]
 8006c56:	d1dd      	bne.n	8006c14 <_free_r+0x28>
 8006c58:	681c      	ldr	r4, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	6053      	str	r3, [r2, #4]
 8006c5e:	4421      	add	r1, r4
 8006c60:	6011      	str	r1, [r2, #0]
 8006c62:	e7d7      	b.n	8006c14 <_free_r+0x28>
 8006c64:	d902      	bls.n	8006c6c <_free_r+0x80>
 8006c66:	230c      	movs	r3, #12
 8006c68:	6003      	str	r3, [r0, #0]
 8006c6a:	e7d3      	b.n	8006c14 <_free_r+0x28>
 8006c6c:	6825      	ldr	r5, [r4, #0]
 8006c6e:	1961      	adds	r1, r4, r5
 8006c70:	428b      	cmp	r3, r1
 8006c72:	bf04      	itt	eq
 8006c74:	6819      	ldreq	r1, [r3, #0]
 8006c76:	685b      	ldreq	r3, [r3, #4]
 8006c78:	6063      	str	r3, [r4, #4]
 8006c7a:	bf04      	itt	eq
 8006c7c:	1949      	addeq	r1, r1, r5
 8006c7e:	6021      	streq	r1, [r4, #0]
 8006c80:	6054      	str	r4, [r2, #4]
 8006c82:	e7c7      	b.n	8006c14 <_free_r+0x28>
 8006c84:	b003      	add	sp, #12
 8006c86:	bd30      	pop	{r4, r5, pc}
 8006c88:	20003e84 	.word	0x20003e84

08006c8c <_malloc_r>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	1ccd      	adds	r5, r1, #3
 8006c90:	f025 0503 	bic.w	r5, r5, #3
 8006c94:	3508      	adds	r5, #8
 8006c96:	2d0c      	cmp	r5, #12
 8006c98:	bf38      	it	cc
 8006c9a:	250c      	movcc	r5, #12
 8006c9c:	2d00      	cmp	r5, #0
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	db01      	blt.n	8006ca6 <_malloc_r+0x1a>
 8006ca2:	42a9      	cmp	r1, r5
 8006ca4:	d903      	bls.n	8006cae <_malloc_r+0x22>
 8006ca6:	230c      	movs	r3, #12
 8006ca8:	6033      	str	r3, [r6, #0]
 8006caa:	2000      	movs	r0, #0
 8006cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cae:	f000 f97b 	bl	8006fa8 <__malloc_lock>
 8006cb2:	4921      	ldr	r1, [pc, #132]	; (8006d38 <_malloc_r+0xac>)
 8006cb4:	680a      	ldr	r2, [r1, #0]
 8006cb6:	4614      	mov	r4, r2
 8006cb8:	b99c      	cbnz	r4, 8006ce2 <_malloc_r+0x56>
 8006cba:	4f20      	ldr	r7, [pc, #128]	; (8006d3c <_malloc_r+0xb0>)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	b923      	cbnz	r3, 8006cca <_malloc_r+0x3e>
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f000 f884 	bl	8006dd0 <_sbrk_r>
 8006cc8:	6038      	str	r0, [r7, #0]
 8006cca:	4629      	mov	r1, r5
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f000 f87f 	bl	8006dd0 <_sbrk_r>
 8006cd2:	1c43      	adds	r3, r0, #1
 8006cd4:	d123      	bne.n	8006d1e <_malloc_r+0x92>
 8006cd6:	230c      	movs	r3, #12
 8006cd8:	6033      	str	r3, [r6, #0]
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f000 f96a 	bl	8006fb4 <__malloc_unlock>
 8006ce0:	e7e3      	b.n	8006caa <_malloc_r+0x1e>
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	1b5b      	subs	r3, r3, r5
 8006ce6:	d417      	bmi.n	8006d18 <_malloc_r+0x8c>
 8006ce8:	2b0b      	cmp	r3, #11
 8006cea:	d903      	bls.n	8006cf4 <_malloc_r+0x68>
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	441c      	add	r4, r3
 8006cf0:	6025      	str	r5, [r4, #0]
 8006cf2:	e004      	b.n	8006cfe <_malloc_r+0x72>
 8006cf4:	6863      	ldr	r3, [r4, #4]
 8006cf6:	42a2      	cmp	r2, r4
 8006cf8:	bf0c      	ite	eq
 8006cfa:	600b      	streq	r3, [r1, #0]
 8006cfc:	6053      	strne	r3, [r2, #4]
 8006cfe:	4630      	mov	r0, r6
 8006d00:	f000 f958 	bl	8006fb4 <__malloc_unlock>
 8006d04:	f104 000b 	add.w	r0, r4, #11
 8006d08:	1d23      	adds	r3, r4, #4
 8006d0a:	f020 0007 	bic.w	r0, r0, #7
 8006d0e:	1ac2      	subs	r2, r0, r3
 8006d10:	d0cc      	beq.n	8006cac <_malloc_r+0x20>
 8006d12:	1a1b      	subs	r3, r3, r0
 8006d14:	50a3      	str	r3, [r4, r2]
 8006d16:	e7c9      	b.n	8006cac <_malloc_r+0x20>
 8006d18:	4622      	mov	r2, r4
 8006d1a:	6864      	ldr	r4, [r4, #4]
 8006d1c:	e7cc      	b.n	8006cb8 <_malloc_r+0x2c>
 8006d1e:	1cc4      	adds	r4, r0, #3
 8006d20:	f024 0403 	bic.w	r4, r4, #3
 8006d24:	42a0      	cmp	r0, r4
 8006d26:	d0e3      	beq.n	8006cf0 <_malloc_r+0x64>
 8006d28:	1a21      	subs	r1, r4, r0
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f000 f850 	bl	8006dd0 <_sbrk_r>
 8006d30:	3001      	adds	r0, #1
 8006d32:	d1dd      	bne.n	8006cf0 <_malloc_r+0x64>
 8006d34:	e7cf      	b.n	8006cd6 <_malloc_r+0x4a>
 8006d36:	bf00      	nop
 8006d38:	20003e84 	.word	0x20003e84
 8006d3c:	20003e88 	.word	0x20003e88

08006d40 <_putc_r>:
 8006d40:	b570      	push	{r4, r5, r6, lr}
 8006d42:	460d      	mov	r5, r1
 8006d44:	4614      	mov	r4, r2
 8006d46:	4606      	mov	r6, r0
 8006d48:	b118      	cbz	r0, 8006d52 <_putc_r+0x12>
 8006d4a:	6983      	ldr	r3, [r0, #24]
 8006d4c:	b90b      	cbnz	r3, 8006d52 <_putc_r+0x12>
 8006d4e:	f7ff faad 	bl	80062ac <__sinit>
 8006d52:	4b1c      	ldr	r3, [pc, #112]	; (8006dc4 <_putc_r+0x84>)
 8006d54:	429c      	cmp	r4, r3
 8006d56:	d124      	bne.n	8006da2 <_putc_r+0x62>
 8006d58:	6874      	ldr	r4, [r6, #4]
 8006d5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d5c:	07d8      	lsls	r0, r3, #31
 8006d5e:	d405      	bmi.n	8006d6c <_putc_r+0x2c>
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	0599      	lsls	r1, r3, #22
 8006d64:	d402      	bmi.n	8006d6c <_putc_r+0x2c>
 8006d66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d68:	f7ff fb43 	bl	80063f2 <__retarget_lock_acquire_recursive>
 8006d6c:	68a3      	ldr	r3, [r4, #8]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	60a3      	str	r3, [r4, #8]
 8006d74:	da05      	bge.n	8006d82 <_putc_r+0x42>
 8006d76:	69a2      	ldr	r2, [r4, #24]
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	db1c      	blt.n	8006db6 <_putc_r+0x76>
 8006d7c:	b2eb      	uxtb	r3, r5
 8006d7e:	2b0a      	cmp	r3, #10
 8006d80:	d019      	beq.n	8006db6 <_putc_r+0x76>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	6022      	str	r2, [r4, #0]
 8006d88:	701d      	strb	r5, [r3, #0]
 8006d8a:	b2ed      	uxtb	r5, r5
 8006d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d8e:	07da      	lsls	r2, r3, #31
 8006d90:	d405      	bmi.n	8006d9e <_putc_r+0x5e>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	059b      	lsls	r3, r3, #22
 8006d96:	d402      	bmi.n	8006d9e <_putc_r+0x5e>
 8006d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d9a:	f7ff fb2b 	bl	80063f4 <__retarget_lock_release_recursive>
 8006d9e:	4628      	mov	r0, r5
 8006da0:	bd70      	pop	{r4, r5, r6, pc}
 8006da2:	4b09      	ldr	r3, [pc, #36]	; (8006dc8 <_putc_r+0x88>)
 8006da4:	429c      	cmp	r4, r3
 8006da6:	d101      	bne.n	8006dac <_putc_r+0x6c>
 8006da8:	68b4      	ldr	r4, [r6, #8]
 8006daa:	e7d6      	b.n	8006d5a <_putc_r+0x1a>
 8006dac:	4b07      	ldr	r3, [pc, #28]	; (8006dcc <_putc_r+0x8c>)
 8006dae:	429c      	cmp	r4, r3
 8006db0:	bf08      	it	eq
 8006db2:	68f4      	ldreq	r4, [r6, #12]
 8006db4:	e7d1      	b.n	8006d5a <_putc_r+0x1a>
 8006db6:	4629      	mov	r1, r5
 8006db8:	4622      	mov	r2, r4
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f7fe fa22 	bl	8005204 <__swbuf_r>
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	e7e3      	b.n	8006d8c <_putc_r+0x4c>
 8006dc4:	08007594 	.word	0x08007594
 8006dc8:	080075b4 	.word	0x080075b4
 8006dcc:	08007574 	.word	0x08007574

08006dd0 <_sbrk_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4d06      	ldr	r5, [pc, #24]	; (8006dec <_sbrk_r+0x1c>)
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	4608      	mov	r0, r1
 8006dda:	602b      	str	r3, [r5, #0]
 8006ddc:	f7fa fdd6 	bl	800198c <_sbrk>
 8006de0:	1c43      	adds	r3, r0, #1
 8006de2:	d102      	bne.n	8006dea <_sbrk_r+0x1a>
 8006de4:	682b      	ldr	r3, [r5, #0]
 8006de6:	b103      	cbz	r3, 8006dea <_sbrk_r+0x1a>
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	bd38      	pop	{r3, r4, r5, pc}
 8006dec:	2000403c 	.word	0x2000403c

08006df0 <__sread>:
 8006df0:	b510      	push	{r4, lr}
 8006df2:	460c      	mov	r4, r1
 8006df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df8:	f000 fa3c 	bl	8007274 <_read_r>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	bfab      	itete	ge
 8006e00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e02:	89a3      	ldrhlt	r3, [r4, #12]
 8006e04:	181b      	addge	r3, r3, r0
 8006e06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e0a:	bfac      	ite	ge
 8006e0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e0e:	81a3      	strhlt	r3, [r4, #12]
 8006e10:	bd10      	pop	{r4, pc}

08006e12 <__swrite>:
 8006e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e16:	461f      	mov	r7, r3
 8006e18:	898b      	ldrh	r3, [r1, #12]
 8006e1a:	05db      	lsls	r3, r3, #23
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	4616      	mov	r6, r2
 8006e22:	d505      	bpl.n	8006e30 <__swrite+0x1e>
 8006e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e28:	2302      	movs	r3, #2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f000 f898 	bl	8006f60 <_lseek_r>
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e3a:	81a3      	strh	r3, [r4, #12]
 8006e3c:	4632      	mov	r2, r6
 8006e3e:	463b      	mov	r3, r7
 8006e40:	4628      	mov	r0, r5
 8006e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e46:	f000 b817 	b.w	8006e78 <_write_r>

08006e4a <__sseek>:
 8006e4a:	b510      	push	{r4, lr}
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e52:	f000 f885 	bl	8006f60 <_lseek_r>
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	bf15      	itete	ne
 8006e5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e66:	81a3      	strheq	r3, [r4, #12]
 8006e68:	bf18      	it	ne
 8006e6a:	81a3      	strhne	r3, [r4, #12]
 8006e6c:	bd10      	pop	{r4, pc}

08006e6e <__sclose>:
 8006e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e72:	f000 b831 	b.w	8006ed8 <_close_r>
	...

08006e78 <_write_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4d07      	ldr	r5, [pc, #28]	; (8006e98 <_write_r+0x20>)
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	4608      	mov	r0, r1
 8006e80:	4611      	mov	r1, r2
 8006e82:	2200      	movs	r2, #0
 8006e84:	602a      	str	r2, [r5, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	f7fa fab6 	bl	80013f8 <_write>
 8006e8c:	1c43      	adds	r3, r0, #1
 8006e8e:	d102      	bne.n	8006e96 <_write_r+0x1e>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	b103      	cbz	r3, 8006e96 <_write_r+0x1e>
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
 8006e98:	2000403c 	.word	0x2000403c

08006e9c <__assert_func>:
 8006e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e9e:	4614      	mov	r4, r2
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4b09      	ldr	r3, [pc, #36]	; (8006ec8 <__assert_func+0x2c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	68d8      	ldr	r0, [r3, #12]
 8006eaa:	b14c      	cbz	r4, 8006ec0 <__assert_func+0x24>
 8006eac:	4b07      	ldr	r3, [pc, #28]	; (8006ecc <__assert_func+0x30>)
 8006eae:	9100      	str	r1, [sp, #0]
 8006eb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006eb4:	4906      	ldr	r1, [pc, #24]	; (8006ed0 <__assert_func+0x34>)
 8006eb6:	462b      	mov	r3, r5
 8006eb8:	f000 f81e 	bl	8006ef8 <fiprintf>
 8006ebc:	f000 f9f9 	bl	80072b2 <abort>
 8006ec0:	4b04      	ldr	r3, [pc, #16]	; (8006ed4 <__assert_func+0x38>)
 8006ec2:	461c      	mov	r4, r3
 8006ec4:	e7f3      	b.n	8006eae <__assert_func+0x12>
 8006ec6:	bf00      	nop
 8006ec8:	20001df4 	.word	0x20001df4
 8006ecc:	08007734 	.word	0x08007734
 8006ed0:	08007741 	.word	0x08007741
 8006ed4:	0800776f 	.word	0x0800776f

08006ed8 <_close_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4d06      	ldr	r5, [pc, #24]	; (8006ef4 <_close_r+0x1c>)
 8006edc:	2300      	movs	r3, #0
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	602b      	str	r3, [r5, #0]
 8006ee4:	f7fa fd46 	bl	8001974 <_close>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d102      	bne.n	8006ef2 <_close_r+0x1a>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b103      	cbz	r3, 8006ef2 <_close_r+0x1a>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	2000403c 	.word	0x2000403c

08006ef8 <fiprintf>:
 8006ef8:	b40e      	push	{r1, r2, r3}
 8006efa:	b503      	push	{r0, r1, lr}
 8006efc:	4601      	mov	r1, r0
 8006efe:	ab03      	add	r3, sp, #12
 8006f00:	4805      	ldr	r0, [pc, #20]	; (8006f18 <fiprintf+0x20>)
 8006f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f06:	6800      	ldr	r0, [r0, #0]
 8006f08:	9301      	str	r3, [sp, #4]
 8006f0a:	f000 f883 	bl	8007014 <_vfiprintf_r>
 8006f0e:	b002      	add	sp, #8
 8006f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f14:	b003      	add	sp, #12
 8006f16:	4770      	bx	lr
 8006f18:	20001df4 	.word	0x20001df4

08006f1c <_fstat_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4d07      	ldr	r5, [pc, #28]	; (8006f3c <_fstat_r+0x20>)
 8006f20:	2300      	movs	r3, #0
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	4611      	mov	r1, r2
 8006f28:	602b      	str	r3, [r5, #0]
 8006f2a:	f7fa fd26 	bl	800197a <_fstat>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	d102      	bne.n	8006f38 <_fstat_r+0x1c>
 8006f32:	682b      	ldr	r3, [r5, #0]
 8006f34:	b103      	cbz	r3, 8006f38 <_fstat_r+0x1c>
 8006f36:	6023      	str	r3, [r4, #0]
 8006f38:	bd38      	pop	{r3, r4, r5, pc}
 8006f3a:	bf00      	nop
 8006f3c:	2000403c 	.word	0x2000403c

08006f40 <_isatty_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4d06      	ldr	r5, [pc, #24]	; (8006f5c <_isatty_r+0x1c>)
 8006f44:	2300      	movs	r3, #0
 8006f46:	4604      	mov	r4, r0
 8006f48:	4608      	mov	r0, r1
 8006f4a:	602b      	str	r3, [r5, #0]
 8006f4c:	f7fa fd1a 	bl	8001984 <_isatty>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_isatty_r+0x1a>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_isatty_r+0x1a>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	2000403c 	.word	0x2000403c

08006f60 <_lseek_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4d07      	ldr	r5, [pc, #28]	; (8006f80 <_lseek_r+0x20>)
 8006f64:	4604      	mov	r4, r0
 8006f66:	4608      	mov	r0, r1
 8006f68:	4611      	mov	r1, r2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	602a      	str	r2, [r5, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f7fa fd0a 	bl	8001988 <_lseek>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d102      	bne.n	8006f7e <_lseek_r+0x1e>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b103      	cbz	r3, 8006f7e <_lseek_r+0x1e>
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	2000403c 	.word	0x2000403c

08006f84 <__ascii_mbtowc>:
 8006f84:	b082      	sub	sp, #8
 8006f86:	b901      	cbnz	r1, 8006f8a <__ascii_mbtowc+0x6>
 8006f88:	a901      	add	r1, sp, #4
 8006f8a:	b142      	cbz	r2, 8006f9e <__ascii_mbtowc+0x1a>
 8006f8c:	b14b      	cbz	r3, 8006fa2 <__ascii_mbtowc+0x1e>
 8006f8e:	7813      	ldrb	r3, [r2, #0]
 8006f90:	600b      	str	r3, [r1, #0]
 8006f92:	7812      	ldrb	r2, [r2, #0]
 8006f94:	1e10      	subs	r0, r2, #0
 8006f96:	bf18      	it	ne
 8006f98:	2001      	movne	r0, #1
 8006f9a:	b002      	add	sp, #8
 8006f9c:	4770      	bx	lr
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	e7fb      	b.n	8006f9a <__ascii_mbtowc+0x16>
 8006fa2:	f06f 0001 	mvn.w	r0, #1
 8006fa6:	e7f8      	b.n	8006f9a <__ascii_mbtowc+0x16>

08006fa8 <__malloc_lock>:
 8006fa8:	4801      	ldr	r0, [pc, #4]	; (8006fb0 <__malloc_lock+0x8>)
 8006faa:	f7ff ba22 	b.w	80063f2 <__retarget_lock_acquire_recursive>
 8006fae:	bf00      	nop
 8006fb0:	20004034 	.word	0x20004034

08006fb4 <__malloc_unlock>:
 8006fb4:	4801      	ldr	r0, [pc, #4]	; (8006fbc <__malloc_unlock+0x8>)
 8006fb6:	f7ff ba1d 	b.w	80063f4 <__retarget_lock_release_recursive>
 8006fba:	bf00      	nop
 8006fbc:	20004034 	.word	0x20004034

08006fc0 <__sfputc_r>:
 8006fc0:	6893      	ldr	r3, [r2, #8]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	b410      	push	{r4}
 8006fc8:	6093      	str	r3, [r2, #8]
 8006fca:	da08      	bge.n	8006fde <__sfputc_r+0x1e>
 8006fcc:	6994      	ldr	r4, [r2, #24]
 8006fce:	42a3      	cmp	r3, r4
 8006fd0:	db01      	blt.n	8006fd6 <__sfputc_r+0x16>
 8006fd2:	290a      	cmp	r1, #10
 8006fd4:	d103      	bne.n	8006fde <__sfputc_r+0x1e>
 8006fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fda:	f7fe b913 	b.w	8005204 <__swbuf_r>
 8006fde:	6813      	ldr	r3, [r2, #0]
 8006fe0:	1c58      	adds	r0, r3, #1
 8006fe2:	6010      	str	r0, [r2, #0]
 8006fe4:	7019      	strb	r1, [r3, #0]
 8006fe6:	4608      	mov	r0, r1
 8006fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <__sfputs_r>:
 8006fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff0:	4606      	mov	r6, r0
 8006ff2:	460f      	mov	r7, r1
 8006ff4:	4614      	mov	r4, r2
 8006ff6:	18d5      	adds	r5, r2, r3
 8006ff8:	42ac      	cmp	r4, r5
 8006ffa:	d101      	bne.n	8007000 <__sfputs_r+0x12>
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	e007      	b.n	8007010 <__sfputs_r+0x22>
 8007000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007004:	463a      	mov	r2, r7
 8007006:	4630      	mov	r0, r6
 8007008:	f7ff ffda 	bl	8006fc0 <__sfputc_r>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d1f3      	bne.n	8006ff8 <__sfputs_r+0xa>
 8007010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007014 <_vfiprintf_r>:
 8007014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007018:	460d      	mov	r5, r1
 800701a:	b09d      	sub	sp, #116	; 0x74
 800701c:	4614      	mov	r4, r2
 800701e:	4698      	mov	r8, r3
 8007020:	4606      	mov	r6, r0
 8007022:	b118      	cbz	r0, 800702c <_vfiprintf_r+0x18>
 8007024:	6983      	ldr	r3, [r0, #24]
 8007026:	b90b      	cbnz	r3, 800702c <_vfiprintf_r+0x18>
 8007028:	f7ff f940 	bl	80062ac <__sinit>
 800702c:	4b89      	ldr	r3, [pc, #548]	; (8007254 <_vfiprintf_r+0x240>)
 800702e:	429d      	cmp	r5, r3
 8007030:	d11b      	bne.n	800706a <_vfiprintf_r+0x56>
 8007032:	6875      	ldr	r5, [r6, #4]
 8007034:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007036:	07d9      	lsls	r1, r3, #31
 8007038:	d405      	bmi.n	8007046 <_vfiprintf_r+0x32>
 800703a:	89ab      	ldrh	r3, [r5, #12]
 800703c:	059a      	lsls	r2, r3, #22
 800703e:	d402      	bmi.n	8007046 <_vfiprintf_r+0x32>
 8007040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007042:	f7ff f9d6 	bl	80063f2 <__retarget_lock_acquire_recursive>
 8007046:	89ab      	ldrh	r3, [r5, #12]
 8007048:	071b      	lsls	r3, r3, #28
 800704a:	d501      	bpl.n	8007050 <_vfiprintf_r+0x3c>
 800704c:	692b      	ldr	r3, [r5, #16]
 800704e:	b9eb      	cbnz	r3, 800708c <_vfiprintf_r+0x78>
 8007050:	4629      	mov	r1, r5
 8007052:	4630      	mov	r0, r6
 8007054:	f7fe f928 	bl	80052a8 <__swsetup_r>
 8007058:	b1c0      	cbz	r0, 800708c <_vfiprintf_r+0x78>
 800705a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800705c:	07dc      	lsls	r4, r3, #31
 800705e:	d50e      	bpl.n	800707e <_vfiprintf_r+0x6a>
 8007060:	f04f 30ff 	mov.w	r0, #4294967295
 8007064:	b01d      	add	sp, #116	; 0x74
 8007066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706a:	4b7b      	ldr	r3, [pc, #492]	; (8007258 <_vfiprintf_r+0x244>)
 800706c:	429d      	cmp	r5, r3
 800706e:	d101      	bne.n	8007074 <_vfiprintf_r+0x60>
 8007070:	68b5      	ldr	r5, [r6, #8]
 8007072:	e7df      	b.n	8007034 <_vfiprintf_r+0x20>
 8007074:	4b79      	ldr	r3, [pc, #484]	; (800725c <_vfiprintf_r+0x248>)
 8007076:	429d      	cmp	r5, r3
 8007078:	bf08      	it	eq
 800707a:	68f5      	ldreq	r5, [r6, #12]
 800707c:	e7da      	b.n	8007034 <_vfiprintf_r+0x20>
 800707e:	89ab      	ldrh	r3, [r5, #12]
 8007080:	0598      	lsls	r0, r3, #22
 8007082:	d4ed      	bmi.n	8007060 <_vfiprintf_r+0x4c>
 8007084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007086:	f7ff f9b5 	bl	80063f4 <__retarget_lock_release_recursive>
 800708a:	e7e9      	b.n	8007060 <_vfiprintf_r+0x4c>
 800708c:	2300      	movs	r3, #0
 800708e:	9309      	str	r3, [sp, #36]	; 0x24
 8007090:	2320      	movs	r3, #32
 8007092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007096:	f8cd 800c 	str.w	r8, [sp, #12]
 800709a:	2330      	movs	r3, #48	; 0x30
 800709c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007260 <_vfiprintf_r+0x24c>
 80070a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070a4:	f04f 0901 	mov.w	r9, #1
 80070a8:	4623      	mov	r3, r4
 80070aa:	469a      	mov	sl, r3
 80070ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070b0:	b10a      	cbz	r2, 80070b6 <_vfiprintf_r+0xa2>
 80070b2:	2a25      	cmp	r2, #37	; 0x25
 80070b4:	d1f9      	bne.n	80070aa <_vfiprintf_r+0x96>
 80070b6:	ebba 0b04 	subs.w	fp, sl, r4
 80070ba:	d00b      	beq.n	80070d4 <_vfiprintf_r+0xc0>
 80070bc:	465b      	mov	r3, fp
 80070be:	4622      	mov	r2, r4
 80070c0:	4629      	mov	r1, r5
 80070c2:	4630      	mov	r0, r6
 80070c4:	f7ff ff93 	bl	8006fee <__sfputs_r>
 80070c8:	3001      	adds	r0, #1
 80070ca:	f000 80aa 	beq.w	8007222 <_vfiprintf_r+0x20e>
 80070ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070d0:	445a      	add	r2, fp
 80070d2:	9209      	str	r2, [sp, #36]	; 0x24
 80070d4:	f89a 3000 	ldrb.w	r3, [sl]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 80a2 	beq.w	8007222 <_vfiprintf_r+0x20e>
 80070de:	2300      	movs	r3, #0
 80070e0:	f04f 32ff 	mov.w	r2, #4294967295
 80070e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070e8:	f10a 0a01 	add.w	sl, sl, #1
 80070ec:	9304      	str	r3, [sp, #16]
 80070ee:	9307      	str	r3, [sp, #28]
 80070f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070f4:	931a      	str	r3, [sp, #104]	; 0x68
 80070f6:	4654      	mov	r4, sl
 80070f8:	2205      	movs	r2, #5
 80070fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070fe:	4858      	ldr	r0, [pc, #352]	; (8007260 <_vfiprintf_r+0x24c>)
 8007100:	f7f9 f896 	bl	8000230 <memchr>
 8007104:	9a04      	ldr	r2, [sp, #16]
 8007106:	b9d8      	cbnz	r0, 8007140 <_vfiprintf_r+0x12c>
 8007108:	06d1      	lsls	r1, r2, #27
 800710a:	bf44      	itt	mi
 800710c:	2320      	movmi	r3, #32
 800710e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007112:	0713      	lsls	r3, r2, #28
 8007114:	bf44      	itt	mi
 8007116:	232b      	movmi	r3, #43	; 0x2b
 8007118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800711c:	f89a 3000 	ldrb.w	r3, [sl]
 8007120:	2b2a      	cmp	r3, #42	; 0x2a
 8007122:	d015      	beq.n	8007150 <_vfiprintf_r+0x13c>
 8007124:	9a07      	ldr	r2, [sp, #28]
 8007126:	4654      	mov	r4, sl
 8007128:	2000      	movs	r0, #0
 800712a:	f04f 0c0a 	mov.w	ip, #10
 800712e:	4621      	mov	r1, r4
 8007130:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007134:	3b30      	subs	r3, #48	; 0x30
 8007136:	2b09      	cmp	r3, #9
 8007138:	d94e      	bls.n	80071d8 <_vfiprintf_r+0x1c4>
 800713a:	b1b0      	cbz	r0, 800716a <_vfiprintf_r+0x156>
 800713c:	9207      	str	r2, [sp, #28]
 800713e:	e014      	b.n	800716a <_vfiprintf_r+0x156>
 8007140:	eba0 0308 	sub.w	r3, r0, r8
 8007144:	fa09 f303 	lsl.w	r3, r9, r3
 8007148:	4313      	orrs	r3, r2
 800714a:	9304      	str	r3, [sp, #16]
 800714c:	46a2      	mov	sl, r4
 800714e:	e7d2      	b.n	80070f6 <_vfiprintf_r+0xe2>
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	1d19      	adds	r1, r3, #4
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	9103      	str	r1, [sp, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	bfbb      	ittet	lt
 800715c:	425b      	neglt	r3, r3
 800715e:	f042 0202 	orrlt.w	r2, r2, #2
 8007162:	9307      	strge	r3, [sp, #28]
 8007164:	9307      	strlt	r3, [sp, #28]
 8007166:	bfb8      	it	lt
 8007168:	9204      	strlt	r2, [sp, #16]
 800716a:	7823      	ldrb	r3, [r4, #0]
 800716c:	2b2e      	cmp	r3, #46	; 0x2e
 800716e:	d10c      	bne.n	800718a <_vfiprintf_r+0x176>
 8007170:	7863      	ldrb	r3, [r4, #1]
 8007172:	2b2a      	cmp	r3, #42	; 0x2a
 8007174:	d135      	bne.n	80071e2 <_vfiprintf_r+0x1ce>
 8007176:	9b03      	ldr	r3, [sp, #12]
 8007178:	1d1a      	adds	r2, r3, #4
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	9203      	str	r2, [sp, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	bfb8      	it	lt
 8007182:	f04f 33ff 	movlt.w	r3, #4294967295
 8007186:	3402      	adds	r4, #2
 8007188:	9305      	str	r3, [sp, #20]
 800718a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007270 <_vfiprintf_r+0x25c>
 800718e:	7821      	ldrb	r1, [r4, #0]
 8007190:	2203      	movs	r2, #3
 8007192:	4650      	mov	r0, sl
 8007194:	f7f9 f84c 	bl	8000230 <memchr>
 8007198:	b140      	cbz	r0, 80071ac <_vfiprintf_r+0x198>
 800719a:	2340      	movs	r3, #64	; 0x40
 800719c:	eba0 000a 	sub.w	r0, r0, sl
 80071a0:	fa03 f000 	lsl.w	r0, r3, r0
 80071a4:	9b04      	ldr	r3, [sp, #16]
 80071a6:	4303      	orrs	r3, r0
 80071a8:	3401      	adds	r4, #1
 80071aa:	9304      	str	r3, [sp, #16]
 80071ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b0:	482c      	ldr	r0, [pc, #176]	; (8007264 <_vfiprintf_r+0x250>)
 80071b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071b6:	2206      	movs	r2, #6
 80071b8:	f7f9 f83a 	bl	8000230 <memchr>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d03f      	beq.n	8007240 <_vfiprintf_r+0x22c>
 80071c0:	4b29      	ldr	r3, [pc, #164]	; (8007268 <_vfiprintf_r+0x254>)
 80071c2:	bb1b      	cbnz	r3, 800720c <_vfiprintf_r+0x1f8>
 80071c4:	9b03      	ldr	r3, [sp, #12]
 80071c6:	3307      	adds	r3, #7
 80071c8:	f023 0307 	bic.w	r3, r3, #7
 80071cc:	3308      	adds	r3, #8
 80071ce:	9303      	str	r3, [sp, #12]
 80071d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d2:	443b      	add	r3, r7
 80071d4:	9309      	str	r3, [sp, #36]	; 0x24
 80071d6:	e767      	b.n	80070a8 <_vfiprintf_r+0x94>
 80071d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80071dc:	460c      	mov	r4, r1
 80071de:	2001      	movs	r0, #1
 80071e0:	e7a5      	b.n	800712e <_vfiprintf_r+0x11a>
 80071e2:	2300      	movs	r3, #0
 80071e4:	3401      	adds	r4, #1
 80071e6:	9305      	str	r3, [sp, #20]
 80071e8:	4619      	mov	r1, r3
 80071ea:	f04f 0c0a 	mov.w	ip, #10
 80071ee:	4620      	mov	r0, r4
 80071f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071f4:	3a30      	subs	r2, #48	; 0x30
 80071f6:	2a09      	cmp	r2, #9
 80071f8:	d903      	bls.n	8007202 <_vfiprintf_r+0x1ee>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0c5      	beq.n	800718a <_vfiprintf_r+0x176>
 80071fe:	9105      	str	r1, [sp, #20]
 8007200:	e7c3      	b.n	800718a <_vfiprintf_r+0x176>
 8007202:	fb0c 2101 	mla	r1, ip, r1, r2
 8007206:	4604      	mov	r4, r0
 8007208:	2301      	movs	r3, #1
 800720a:	e7f0      	b.n	80071ee <_vfiprintf_r+0x1da>
 800720c:	ab03      	add	r3, sp, #12
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	462a      	mov	r2, r5
 8007212:	4b16      	ldr	r3, [pc, #88]	; (800726c <_vfiprintf_r+0x258>)
 8007214:	a904      	add	r1, sp, #16
 8007216:	4630      	mov	r0, r6
 8007218:	f7fd fb9e 	bl	8004958 <_printf_float>
 800721c:	4607      	mov	r7, r0
 800721e:	1c78      	adds	r0, r7, #1
 8007220:	d1d6      	bne.n	80071d0 <_vfiprintf_r+0x1bc>
 8007222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007224:	07d9      	lsls	r1, r3, #31
 8007226:	d405      	bmi.n	8007234 <_vfiprintf_r+0x220>
 8007228:	89ab      	ldrh	r3, [r5, #12]
 800722a:	059a      	lsls	r2, r3, #22
 800722c:	d402      	bmi.n	8007234 <_vfiprintf_r+0x220>
 800722e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007230:	f7ff f8e0 	bl	80063f4 <__retarget_lock_release_recursive>
 8007234:	89ab      	ldrh	r3, [r5, #12]
 8007236:	065b      	lsls	r3, r3, #25
 8007238:	f53f af12 	bmi.w	8007060 <_vfiprintf_r+0x4c>
 800723c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800723e:	e711      	b.n	8007064 <_vfiprintf_r+0x50>
 8007240:	ab03      	add	r3, sp, #12
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	462a      	mov	r2, r5
 8007246:	4b09      	ldr	r3, [pc, #36]	; (800726c <_vfiprintf_r+0x258>)
 8007248:	a904      	add	r1, sp, #16
 800724a:	4630      	mov	r0, r6
 800724c:	f7fd fe28 	bl	8004ea0 <_printf_i>
 8007250:	e7e4      	b.n	800721c <_vfiprintf_r+0x208>
 8007252:	bf00      	nop
 8007254:	08007594 	.word	0x08007594
 8007258:	080075b4 	.word	0x080075b4
 800725c:	08007574 	.word	0x08007574
 8007260:	0800777a 	.word	0x0800777a
 8007264:	08007784 	.word	0x08007784
 8007268:	08004959 	.word	0x08004959
 800726c:	08006fef 	.word	0x08006fef
 8007270:	08007780 	.word	0x08007780

08007274 <_read_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4d07      	ldr	r5, [pc, #28]	; (8007294 <_read_r+0x20>)
 8007278:	4604      	mov	r4, r0
 800727a:	4608      	mov	r0, r1
 800727c:	4611      	mov	r1, r2
 800727e:	2200      	movs	r2, #0
 8007280:	602a      	str	r2, [r5, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	f7fa fb66 	bl	8001954 <_read>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d102      	bne.n	8007292 <_read_r+0x1e>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	b103      	cbz	r3, 8007292 <_read_r+0x1e>
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	2000403c 	.word	0x2000403c

08007298 <__ascii_wctomb>:
 8007298:	b149      	cbz	r1, 80072ae <__ascii_wctomb+0x16>
 800729a:	2aff      	cmp	r2, #255	; 0xff
 800729c:	bf85      	ittet	hi
 800729e:	238a      	movhi	r3, #138	; 0x8a
 80072a0:	6003      	strhi	r3, [r0, #0]
 80072a2:	700a      	strbls	r2, [r1, #0]
 80072a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80072a8:	bf98      	it	ls
 80072aa:	2001      	movls	r0, #1
 80072ac:	4770      	bx	lr
 80072ae:	4608      	mov	r0, r1
 80072b0:	4770      	bx	lr

080072b2 <abort>:
 80072b2:	b508      	push	{r3, lr}
 80072b4:	2006      	movs	r0, #6
 80072b6:	f000 f82b 	bl	8007310 <raise>
 80072ba:	2001      	movs	r0, #1
 80072bc:	f7fa fb44 	bl	8001948 <_exit>

080072c0 <_raise_r>:
 80072c0:	291f      	cmp	r1, #31
 80072c2:	b538      	push	{r3, r4, r5, lr}
 80072c4:	4604      	mov	r4, r0
 80072c6:	460d      	mov	r5, r1
 80072c8:	d904      	bls.n	80072d4 <_raise_r+0x14>
 80072ca:	2316      	movs	r3, #22
 80072cc:	6003      	str	r3, [r0, #0]
 80072ce:	f04f 30ff 	mov.w	r0, #4294967295
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072d6:	b112      	cbz	r2, 80072de <_raise_r+0x1e>
 80072d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072dc:	b94b      	cbnz	r3, 80072f2 <_raise_r+0x32>
 80072de:	4620      	mov	r0, r4
 80072e0:	f000 f830 	bl	8007344 <_getpid_r>
 80072e4:	462a      	mov	r2, r5
 80072e6:	4601      	mov	r1, r0
 80072e8:	4620      	mov	r0, r4
 80072ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072ee:	f000 b817 	b.w	8007320 <_kill_r>
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d00a      	beq.n	800730c <_raise_r+0x4c>
 80072f6:	1c59      	adds	r1, r3, #1
 80072f8:	d103      	bne.n	8007302 <_raise_r+0x42>
 80072fa:	2316      	movs	r3, #22
 80072fc:	6003      	str	r3, [r0, #0]
 80072fe:	2001      	movs	r0, #1
 8007300:	e7e7      	b.n	80072d2 <_raise_r+0x12>
 8007302:	2400      	movs	r4, #0
 8007304:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007308:	4628      	mov	r0, r5
 800730a:	4798      	blx	r3
 800730c:	2000      	movs	r0, #0
 800730e:	e7e0      	b.n	80072d2 <_raise_r+0x12>

08007310 <raise>:
 8007310:	4b02      	ldr	r3, [pc, #8]	; (800731c <raise+0xc>)
 8007312:	4601      	mov	r1, r0
 8007314:	6818      	ldr	r0, [r3, #0]
 8007316:	f7ff bfd3 	b.w	80072c0 <_raise_r>
 800731a:	bf00      	nop
 800731c:	20001df4 	.word	0x20001df4

08007320 <_kill_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	4d07      	ldr	r5, [pc, #28]	; (8007340 <_kill_r+0x20>)
 8007324:	2300      	movs	r3, #0
 8007326:	4604      	mov	r4, r0
 8007328:	4608      	mov	r0, r1
 800732a:	4611      	mov	r1, r2
 800732c:	602b      	str	r3, [r5, #0]
 800732e:	f7fa fb03 	bl	8001938 <_kill>
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	d102      	bne.n	800733c <_kill_r+0x1c>
 8007336:	682b      	ldr	r3, [r5, #0]
 8007338:	b103      	cbz	r3, 800733c <_kill_r+0x1c>
 800733a:	6023      	str	r3, [r4, #0]
 800733c:	bd38      	pop	{r3, r4, r5, pc}
 800733e:	bf00      	nop
 8007340:	2000403c 	.word	0x2000403c

08007344 <_getpid_r>:
 8007344:	f7fa baf6 	b.w	8001934 <_getpid>

08007348 <_init>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	bf00      	nop
 800734c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734e:	bc08      	pop	{r3}
 8007350:	469e      	mov	lr, r3
 8007352:	4770      	bx	lr

08007354 <_fini>:
 8007354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007356:	bf00      	nop
 8007358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800735a:	bc08      	pop	{r3}
 800735c:	469e      	mov	lr, r3
 800735e:	4770      	bx	lr
